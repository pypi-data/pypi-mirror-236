# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lib.himsai_pb2 as himsai__pb2


class ClientStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Update = channel.unary_unary(
                '/himsai.Client/Update',
                request_serializer=himsai__pb2.Inspection.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )
        self.Connect = channel.unary_unary(
                '/himsai.Client/Connect',
                request_serializer=himsai__pb2.MessageString.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )
        self.Request = channel.unary_unary(
                '/himsai.Client/Request',
                request_serializer=himsai__pb2.RequestInfo.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )


class ClientServicer(object):
    """Interface exported by the server.
    """

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Request(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=himsai__pb2.Inspection.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=himsai__pb2.MessageString.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
            'Request': grpc.unary_unary_rpc_method_handler(
                    servicer.Request,
                    request_deserializer=himsai__pb2.RequestInfo.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'himsai.Client', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Client(object):
    """Interface exported by the server.
    """

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Client/Update',
            himsai__pb2.Inspection.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Client/Connect',
            himsai__pb2.MessageString.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Client/Request',
            himsai__pb2.RequestInfo.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/himsai.AI/Create',
                request_serializer=himsai__pb2.Order.SerializeToString,
                response_deserializer=himsai__pb2.ReturnMsg.FromString,
                )
        self.CreateByClient = channel.unary_unary(
                '/himsai.AI/CreateByClient',
                request_serializer=himsai__pb2.OrderWithData.SerializeToString,
                response_deserializer=himsai__pb2.ReturnMsg.FromString,
                )
        self.Update = channel.unary_unary(
                '/himsai.AI/Update',
                request_serializer=himsai__pb2.Inspection.SerializeToString,
                response_deserializer=himsai__pb2.ReturnMsg.FromString,
                )
        self.UpdateToClient = channel.unary_unary(
                '/himsai.AI/UpdateToClient',
                request_serializer=himsai__pb2.Inspection.SerializeToString,
                response_deserializer=himsai__pb2.ReturnMsg.FromString,
                )
        self.Connect = channel.unary_unary(
                '/himsai.AI/Connect',
                request_serializer=himsai__pb2.MessageString.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )


class AIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateByClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateToClient(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=himsai__pb2.Order.FromString,
                    response_serializer=himsai__pb2.ReturnMsg.SerializeToString,
            ),
            'CreateByClient': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateByClient,
                    request_deserializer=himsai__pb2.OrderWithData.FromString,
                    response_serializer=himsai__pb2.ReturnMsg.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=himsai__pb2.Inspection.FromString,
                    response_serializer=himsai__pb2.ReturnMsg.SerializeToString,
            ),
            'UpdateToClient': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateToClient,
                    request_deserializer=himsai__pb2.Inspection.FromString,
                    response_serializer=himsai__pb2.ReturnMsg.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=himsai__pb2.MessageString.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'himsai.AI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.AI/Create',
            himsai__pb2.Order.SerializeToString,
            himsai__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateByClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.AI/CreateByClient',
            himsai__pb2.OrderWithData.SerializeToString,
            himsai__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.AI/Update',
            himsai__pb2.Inspection.SerializeToString,
            himsai__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateToClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.AI/UpdateToClient',
            himsai__pb2.Inspection.SerializeToString,
            himsai__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.AI/Connect',
            himsai__pb2.MessageString.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EngineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/himsai.Engine/Create',
                request_serializer=himsai__pb2.Order.SerializeToString,
                response_deserializer=himsai__pb2.ReturnMsg.FromString,
                )
        self.CreateWithData = channel.unary_unary(
                '/himsai.Engine/CreateWithData',
                request_serializer=himsai__pb2.OrderWithData.SerializeToString,
                response_deserializer=himsai__pb2.ReturnMsg.FromString,
                )
        self.Connect = channel.unary_unary(
                '/himsai.Engine/Connect',
                request_serializer=himsai__pb2.MessageString.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )


class EngineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWithData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=himsai__pb2.Order.FromString,
                    response_serializer=himsai__pb2.ReturnMsg.SerializeToString,
            ),
            'CreateWithData': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWithData,
                    request_deserializer=himsai__pb2.OrderWithData.FromString,
                    response_serializer=himsai__pb2.ReturnMsg.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=himsai__pb2.MessageString.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'himsai.Engine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Engine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Engine/Create',
            himsai__pb2.Order.SerializeToString,
            himsai__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateWithData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Engine/CreateWithData',
            himsai__pb2.OrderWithData.SerializeToString,
            himsai__pb2.ReturnMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Engine/Connect',
            himsai__pb2.MessageString.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StorageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateImage = channel.stream_unary(
                '/himsai.Storage/CreateImage',
                request_serializer=himsai__pb2.ImageFile.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )
        self.GetImage = channel.unary_stream(
                '/himsai.Storage/GetImage',
                request_serializer=himsai__pb2.MessageString.SerializeToString,
                response_deserializer=himsai__pb2.ImageFile.FromString,
                )
        self.CreateProfile = channel.stream_unary(
                '/himsai.Storage/CreateProfile',
                request_serializer=himsai__pb2.ProfileFile.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )
        self.GetProfile = channel.unary_stream(
                '/himsai.Storage/GetProfile',
                request_serializer=himsai__pb2.MessageString.SerializeToString,
                response_deserializer=himsai__pb2.ProfileFile.FromString,
                )
        self.Connect = channel.unary_unary(
                '/himsai.Storage/Connect',
                request_serializer=himsai__pb2.MessageString.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )


class StorageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateImage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProfile(self, request_iterator, context):
        """rpc DeleteImage(MessageString) returns (MessageBool) {} // input MessageString: image_id

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """rpc DeleteProfile(MessageString) returns (MessageBool) {} // input MessageString: profile_id

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StorageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateImage': grpc.stream_unary_rpc_method_handler(
                    servicer.CreateImage,
                    request_deserializer=himsai__pb2.ImageFile.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
            'GetImage': grpc.unary_stream_rpc_method_handler(
                    servicer.GetImage,
                    request_deserializer=himsai__pb2.MessageString.FromString,
                    response_serializer=himsai__pb2.ImageFile.SerializeToString,
            ),
            'CreateProfile': grpc.stream_unary_rpc_method_handler(
                    servicer.CreateProfile,
                    request_deserializer=himsai__pb2.ProfileFile.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
            'GetProfile': grpc.unary_stream_rpc_method_handler(
                    servicer.GetProfile,
                    request_deserializer=himsai__pb2.MessageString.FromString,
                    response_serializer=himsai__pb2.ProfileFile.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=himsai__pb2.MessageString.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'himsai.Storage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Storage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateImage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/himsai.Storage/CreateImage',
            himsai__pb2.ImageFile.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/himsai.Storage/GetImage',
            himsai__pb2.MessageString.SerializeToString,
            himsai__pb2.ImageFile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateProfile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/himsai.Storage/CreateProfile',
            himsai__pb2.ProfileFile.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/himsai.Storage/GetProfile',
            himsai__pb2.MessageString.SerializeToString,
            himsai__pb2.ProfileFile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Storage/Connect',
            himsai__pb2.MessageString.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ManagementStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/himsai.Management/Create',
                request_serializer=himsai__pb2.Image.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )
        self.AskAIinsp = channel.unary_unary(
                '/himsai.Management/AskAIinsp',
                request_serializer=himsai__pb2.Image.SerializeToString,
                response_deserializer=himsai__pb2.OrderWithData.FromString,
                )
        self.Update = channel.unary_unary(
                '/himsai.Management/Update',
                request_serializer=himsai__pb2.Inspection.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )
        self.UpdateOnly = channel.unary_unary(
                '/himsai.Management/UpdateOnly',
                request_serializer=himsai__pb2.Inspection.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )
        self.UpdateServer = channel.unary_unary(
                '/himsai.Management/UpdateServer',
                request_serializer=himsai__pb2.Server.SerializeToString,
                response_deserializer=himsai__pb2.MessageBool.FromString,
                )


class ManagementServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create(self, request, context):
        """Image
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AskAIinsp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Inspection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOnly(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateServer(self, request, context):
        """Server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=himsai__pb2.Image.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
            'AskAIinsp': grpc.unary_unary_rpc_method_handler(
                    servicer.AskAIinsp,
                    request_deserializer=himsai__pb2.Image.FromString,
                    response_serializer=himsai__pb2.OrderWithData.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=himsai__pb2.Inspection.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
            'UpdateOnly': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOnly,
                    request_deserializer=himsai__pb2.Inspection.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
            'UpdateServer': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateServer,
                    request_deserializer=himsai__pb2.Server.FromString,
                    response_serializer=himsai__pb2.MessageBool.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'himsai.Management', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Management(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Management/Create',
            himsai__pb2.Image.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AskAIinsp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Management/AskAIinsp',
            himsai__pb2.Image.SerializeToString,
            himsai__pb2.OrderWithData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Management/Update',
            himsai__pb2.Inspection.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateOnly(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Management/UpdateOnly',
            himsai__pb2.Inspection.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/himsai.Management/UpdateServer',
            himsai__pb2.Server.SerializeToString,
            himsai__pb2.MessageBool.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
