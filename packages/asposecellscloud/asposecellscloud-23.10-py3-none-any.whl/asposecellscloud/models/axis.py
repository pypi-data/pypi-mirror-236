# coding: utf-8

"""
Copyright (c) 2022 Aspose.Cells Cloud
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
"""


from pprint import pformat
from six import iteritems
import re


class Axis(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area': 'Area',
        'axis_between_categories': 'bool',
        'axis_line': 'Area',
        'base_unit_scale': 'str',
        'category_type': 'str',
        'cross_at': 'float',
        'cross_type': 'str',
        'display_unit': 'str',
        'has_multi_level_labels': 'bool',
        'is_automatic_max_value': 'bool',
        'is_automatic_minor_unit': 'bool',
        'is_automatic_min_value': 'bool',
        'is_display_unit_label_shown': 'bool',
        'is_automatic_major_unit': 'bool',
        'is_logarithmic': 'bool',
        'is_plot_order_reversed': 'bool',
        'is_visible': 'bool',
        'log_base': 'float',
        'major_grid_lines': 'Line',
        'major_tick_mark': 'str',
        'major_unit': 'float',
        'major_unit_scale': 'str',
        'max_value': 'float',
        'minor_grid_lines': 'Line',
        'minor_tick_mark': 'str',
        'minor_unit': 'float',
        'minor_unit_scale': 'str',
        'min_value': 'float',
        'tick_label_position': 'str',
        'tick_labels': 'TickLabels',
        'tick_label_spacing': 'int',
        'tick_mark_spacing': 'int',
        'title': 'Title'
    }

    attribute_map = {
        'area': 'Area',
        'axis_between_categories': 'AxisBetweenCategories',
        'axis_line': 'AxisLine',
        'base_unit_scale': 'BaseUnitScale',
        'category_type': 'CategoryType',
        'cross_at': 'CrossAt',
        'cross_type': 'CrossType',
        'display_unit': 'DisplayUnit',
        'has_multi_level_labels': 'HasMultiLevelLabels',
        'is_automatic_max_value': 'IsAutomaticMaxValue',
        'is_automatic_minor_unit': 'IsAutomaticMinorUnit',
        'is_automatic_min_value': 'IsAutomaticMinValue',
        'is_display_unit_label_shown': 'IsDisplayUnitLabelShown',
        'is_automatic_major_unit': 'IsAutomaticMajorUnit',
        'is_logarithmic': 'IsLogarithmic',
        'is_plot_order_reversed': 'IsPlotOrderReversed',
        'is_visible': 'IsVisible',
        'log_base': 'LogBase',
        'major_grid_lines': 'MajorGridLines',
        'major_tick_mark': 'MajorTickMark',
        'major_unit': 'MajorUnit',
        'major_unit_scale': 'MajorUnitScale',
        'max_value': 'MaxValue',
        'minor_grid_lines': 'MinorGridLines',
        'minor_tick_mark': 'MinorTickMark',
        'minor_unit': 'MinorUnit',
        'minor_unit_scale': 'MinorUnitScale',
        'min_value': 'MinValue',
        'tick_label_position': 'TickLabelPosition',
        'tick_labels': 'TickLabels',
        'tick_label_spacing': 'TickLabelSpacing',
        'tick_mark_spacing': 'TickMarkSpacing',
        'title': 'Title'
    }
    
    @staticmethod
    def get_swagger_types():
        return Axis.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return Axis.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, area=None, axis_between_categories=None, axis_line=None, base_unit_scale=None, category_type=None, cross_at=None, cross_type=None, display_unit=None, has_multi_level_labels=None, is_automatic_max_value=None, is_automatic_minor_unit=None, is_automatic_min_value=None, is_display_unit_label_shown=None, is_automatic_major_unit=None, is_logarithmic=None, is_plot_order_reversed=None, is_visible=None, log_base=None, major_grid_lines=None, major_tick_mark=None, major_unit=None, major_unit_scale=None, max_value=None, minor_grid_lines=None, minor_tick_mark=None, minor_unit=None, minor_unit_scale=None, min_value=None, tick_label_position=None, tick_labels=None, tick_label_spacing=None, tick_mark_spacing=None, title=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        Axis - a model defined in Swagger
        """

        self.container['area'] = None
        self.container['axis_between_categories'] = None
        self.container['axis_line'] = None
        self.container['base_unit_scale'] = None
        self.container['category_type'] = None
        self.container['cross_at'] = None
        self.container['cross_type'] = None
        self.container['display_unit'] = None
        self.container['has_multi_level_labels'] = None
        self.container['is_automatic_max_value'] = None
        self.container['is_automatic_minor_unit'] = None
        self.container['is_automatic_min_value'] = None
        self.container['is_display_unit_label_shown'] = None
        self.container['is_automatic_major_unit'] = None
        self.container['is_logarithmic'] = None
        self.container['is_plot_order_reversed'] = None
        self.container['is_visible'] = None
        self.container['log_base'] = None
        self.container['major_grid_lines'] = None
        self.container['major_tick_mark'] = None
        self.container['major_unit'] = None
        self.container['major_unit_scale'] = None
        self.container['max_value'] = None
        self.container['minor_grid_lines'] = None
        self.container['minor_tick_mark'] = None
        self.container['minor_unit'] = None
        self.container['minor_unit_scale'] = None
        self.container['min_value'] = None
        self.container['tick_label_position'] = None
        self.container['tick_labels'] = None
        self.container['tick_label_spacing'] = None
        self.container['tick_mark_spacing'] = None
        self.container['title'] = None

        if area is not None:
          self.area = area
        if axis_between_categories is not None:
          self.axis_between_categories = axis_between_categories
        if axis_line is not None:
          self.axis_line = axis_line
        if base_unit_scale is not None:
          self.base_unit_scale = base_unit_scale
        if category_type is not None:
          self.category_type = category_type
        if cross_at is not None:
          self.cross_at = cross_at
        if cross_type is not None:
          self.cross_type = cross_type
        if display_unit is not None:
          self.display_unit = display_unit
        if has_multi_level_labels is not None:
          self.has_multi_level_labels = has_multi_level_labels
        if is_automatic_max_value is not None:
          self.is_automatic_max_value = is_automatic_max_value
        if is_automatic_minor_unit is not None:
          self.is_automatic_minor_unit = is_automatic_minor_unit
        if is_automatic_min_value is not None:
          self.is_automatic_min_value = is_automatic_min_value
        if is_display_unit_label_shown is not None:
          self.is_display_unit_label_shown = is_display_unit_label_shown
        if is_automatic_major_unit is not None:
          self.is_automatic_major_unit = is_automatic_major_unit
        if is_logarithmic is not None:
          self.is_logarithmic = is_logarithmic
        if is_plot_order_reversed is not None:
          self.is_plot_order_reversed = is_plot_order_reversed
        if is_visible is not None:
          self.is_visible = is_visible
        if log_base is not None:
          self.log_base = log_base
        if major_grid_lines is not None:
          self.major_grid_lines = major_grid_lines
        if major_tick_mark is not None:
          self.major_tick_mark = major_tick_mark
        if major_unit is not None:
          self.major_unit = major_unit
        if major_unit_scale is not None:
          self.major_unit_scale = major_unit_scale
        if max_value is not None:
          self.max_value = max_value
        if minor_grid_lines is not None:
          self.minor_grid_lines = minor_grid_lines
        if minor_tick_mark is not None:
          self.minor_tick_mark = minor_tick_mark
        if minor_unit is not None:
          self.minor_unit = minor_unit
        if minor_unit_scale is not None:
          self.minor_unit_scale = minor_unit_scale
        if min_value is not None:
          self.min_value = min_value
        if tick_label_position is not None:
          self.tick_label_position = tick_label_position
        if tick_labels is not None:
          self.tick_labels = tick_labels
        if tick_label_spacing is not None:
          self.tick_label_spacing = tick_label_spacing
        if tick_mark_spacing is not None:
          self.tick_mark_spacing = tick_mark_spacing
        if title is not None:
          self.title = title

    @property
    def area(self):
        """
        Gets the area of this Axis.

        :return: The area of this Axis.
        :rtype: Area
        """
        return self.container['area']

    @area.setter
    def area(self, area):
        """
        Sets the area of this Axis.

        :param area: The area of this Axis.
        :type: Area
        """

        self.container['area'] = area

    @property
    def axis_between_categories(self):
        """
        Gets the axis_between_categories of this Axis.
         

        :return: The axis_between_categories of this Axis.
        :rtype: bool
        """
        return self.container['axis_between_categories']

    @axis_between_categories.setter
    def axis_between_categories(self, axis_between_categories):
        """
        Sets the axis_between_categories of this Axis.
         

        :param axis_between_categories: The axis_between_categories of this Axis.
        :type: bool
        """

        self.container['axis_between_categories'] = axis_between_categories

    @property
    def axis_line(self):
        """
        Gets the axis_line of this Axis.
        

        :return: The axis_line of this Axis.
        :rtype: Area
        """
        return self.container['axis_line']

    @axis_line.setter
    def axis_line(self, axis_line):
        """
        Sets the axis_line of this Axis.
        

        :param axis_line: The axis_line of this Axis.
        :type: Area
        """

        self.container['axis_line'] = axis_line

    @property
    def base_unit_scale(self):
        """
        Gets the base_unit_scale of this Axis.
         

        :return: The base_unit_scale of this Axis.
        :rtype: str
        """
        return self.container['base_unit_scale']

    @base_unit_scale.setter
    def base_unit_scale(self, base_unit_scale):
        """
        Sets the base_unit_scale of this Axis.
         

        :param base_unit_scale: The base_unit_scale of this Axis.
        :type: str
        """

        self.container['base_unit_scale'] = base_unit_scale

    @property
    def category_type(self):
        """
        Gets the category_type of this Axis.
         

        :return: The category_type of this Axis.
        :rtype: str
        """
        return self.container['category_type']

    @category_type.setter
    def category_type(self, category_type):
        """
        Sets the category_type of this Axis.
         

        :param category_type: The category_type of this Axis.
        :type: str
        """

        self.container['category_type'] = category_type

    @property
    def cross_at(self):
        """
        Gets the cross_at of this Axis.
         

        :return: The cross_at of this Axis.
        :rtype: float
        """
        return self.container['cross_at']

    @cross_at.setter
    def cross_at(self, cross_at):
        """
        Sets the cross_at of this Axis.
         

        :param cross_at: The cross_at of this Axis.
        :type: float
        """

        self.container['cross_at'] = cross_at

    @property
    def cross_type(self):
        """
        Gets the cross_type of this Axis.
         

        :return: The cross_type of this Axis.
        :rtype: str
        """
        return self.container['cross_type']

    @cross_type.setter
    def cross_type(self, cross_type):
        """
        Sets the cross_type of this Axis.
         

        :param cross_type: The cross_type of this Axis.
        :type: str
        """

        self.container['cross_type'] = cross_type

    @property
    def display_unit(self):
        """
        Gets the display_unit of this Axis.
         

        :return: The display_unit of this Axis.
        :rtype: str
        """
        return self.container['display_unit']

    @display_unit.setter
    def display_unit(self, display_unit):
        """
        Sets the display_unit of this Axis.
         

        :param display_unit: The display_unit of this Axis.
        :type: str
        """

        self.container['display_unit'] = display_unit

    @property
    def has_multi_level_labels(self):
        """
        Gets the has_multi_level_labels of this Axis.
         

        :return: The has_multi_level_labels of this Axis.
        :rtype: bool
        """
        return self.container['has_multi_level_labels']

    @has_multi_level_labels.setter
    def has_multi_level_labels(self, has_multi_level_labels):
        """
        Sets the has_multi_level_labels of this Axis.
         

        :param has_multi_level_labels: The has_multi_level_labels of this Axis.
        :type: bool
        """

        self.container['has_multi_level_labels'] = has_multi_level_labels

    @property
    def is_automatic_max_value(self):
        """
        Gets the is_automatic_max_value of this Axis.
         

        :return: The is_automatic_max_value of this Axis.
        :rtype: bool
        """
        return self.container['is_automatic_max_value']

    @is_automatic_max_value.setter
    def is_automatic_max_value(self, is_automatic_max_value):
        """
        Sets the is_automatic_max_value of this Axis.
         

        :param is_automatic_max_value: The is_automatic_max_value of this Axis.
        :type: bool
        """

        self.container['is_automatic_max_value'] = is_automatic_max_value

    @property
    def is_automatic_minor_unit(self):
        """
        Gets the is_automatic_minor_unit of this Axis.
         

        :return: The is_automatic_minor_unit of this Axis.
        :rtype: bool
        """
        return self.container['is_automatic_minor_unit']

    @is_automatic_minor_unit.setter
    def is_automatic_minor_unit(self, is_automatic_minor_unit):
        """
        Sets the is_automatic_minor_unit of this Axis.
         

        :param is_automatic_minor_unit: The is_automatic_minor_unit of this Axis.
        :type: bool
        """

        self.container['is_automatic_minor_unit'] = is_automatic_minor_unit

    @property
    def is_automatic_min_value(self):
        """
        Gets the is_automatic_min_value of this Axis.
         

        :return: The is_automatic_min_value of this Axis.
        :rtype: bool
        """
        return self.container['is_automatic_min_value']

    @is_automatic_min_value.setter
    def is_automatic_min_value(self, is_automatic_min_value):
        """
        Sets the is_automatic_min_value of this Axis.
         

        :param is_automatic_min_value: The is_automatic_min_value of this Axis.
        :type: bool
        """

        self.container['is_automatic_min_value'] = is_automatic_min_value

    @property
    def is_display_unit_label_shown(self):
        """
        Gets the is_display_unit_label_shown of this Axis.
         

        :return: The is_display_unit_label_shown of this Axis.
        :rtype: bool
        """
        return self.container['is_display_unit_label_shown']

    @is_display_unit_label_shown.setter
    def is_display_unit_label_shown(self, is_display_unit_label_shown):
        """
        Sets the is_display_unit_label_shown of this Axis.
         

        :param is_display_unit_label_shown: The is_display_unit_label_shown of this Axis.
        :type: bool
        """

        self.container['is_display_unit_label_shown'] = is_display_unit_label_shown

    @property
    def is_automatic_major_unit(self):
        """
        Gets the is_automatic_major_unit of this Axis.
         

        :return: The is_automatic_major_unit of this Axis.
        :rtype: bool
        """
        return self.container['is_automatic_major_unit']

    @is_automatic_major_unit.setter
    def is_automatic_major_unit(self, is_automatic_major_unit):
        """
        Sets the is_automatic_major_unit of this Axis.
         

        :param is_automatic_major_unit: The is_automatic_major_unit of this Axis.
        :type: bool
        """

        self.container['is_automatic_major_unit'] = is_automatic_major_unit

    @property
    def is_logarithmic(self):
        """
        Gets the is_logarithmic of this Axis.
         

        :return: The is_logarithmic of this Axis.
        :rtype: bool
        """
        return self.container['is_logarithmic']

    @is_logarithmic.setter
    def is_logarithmic(self, is_logarithmic):
        """
        Sets the is_logarithmic of this Axis.
         

        :param is_logarithmic: The is_logarithmic of this Axis.
        :type: bool
        """

        self.container['is_logarithmic'] = is_logarithmic

    @property
    def is_plot_order_reversed(self):
        """
        Gets the is_plot_order_reversed of this Axis.
         

        :return: The is_plot_order_reversed of this Axis.
        :rtype: bool
        """
        return self.container['is_plot_order_reversed']

    @is_plot_order_reversed.setter
    def is_plot_order_reversed(self, is_plot_order_reversed):
        """
        Sets the is_plot_order_reversed of this Axis.
         

        :param is_plot_order_reversed: The is_plot_order_reversed of this Axis.
        :type: bool
        """

        self.container['is_plot_order_reversed'] = is_plot_order_reversed

    @property
    def is_visible(self):
        """
        Gets the is_visible of this Axis.
         

        :return: The is_visible of this Axis.
        :rtype: bool
        """
        return self.container['is_visible']

    @is_visible.setter
    def is_visible(self, is_visible):
        """
        Sets the is_visible of this Axis.
         

        :param is_visible: The is_visible of this Axis.
        :type: bool
        """

        self.container['is_visible'] = is_visible

    @property
    def log_base(self):
        """
        Gets the log_base of this Axis.
         

        :return: The log_base of this Axis.
        :rtype: float
        """
        return self.container['log_base']

    @log_base.setter
    def log_base(self, log_base):
        """
        Sets the log_base of this Axis.
         

        :param log_base: The log_base of this Axis.
        :type: float
        """

        self.container['log_base'] = log_base

    @property
    def major_grid_lines(self):
        """
        Gets the major_grid_lines of this Axis.
        

        :return: The major_grid_lines of this Axis.
        :rtype: Line
        """
        return self.container['major_grid_lines']

    @major_grid_lines.setter
    def major_grid_lines(self, major_grid_lines):
        """
        Sets the major_grid_lines of this Axis.
        

        :param major_grid_lines: The major_grid_lines of this Axis.
        :type: Line
        """

        self.container['major_grid_lines'] = major_grid_lines

    @property
    def major_tick_mark(self):
        """
        Gets the major_tick_mark of this Axis.
         

        :return: The major_tick_mark of this Axis.
        :rtype: str
        """
        return self.container['major_tick_mark']

    @major_tick_mark.setter
    def major_tick_mark(self, major_tick_mark):
        """
        Sets the major_tick_mark of this Axis.
         

        :param major_tick_mark: The major_tick_mark of this Axis.
        :type: str
        """

        self.container['major_tick_mark'] = major_tick_mark

    @property
    def major_unit(self):
        """
        Gets the major_unit of this Axis.
         

        :return: The major_unit of this Axis.
        :rtype: float
        """
        return self.container['major_unit']

    @major_unit.setter
    def major_unit(self, major_unit):
        """
        Sets the major_unit of this Axis.
         

        :param major_unit: The major_unit of this Axis.
        :type: float
        """

        self.container['major_unit'] = major_unit

    @property
    def major_unit_scale(self):
        """
        Gets the major_unit_scale of this Axis.
         

        :return: The major_unit_scale of this Axis.
        :rtype: str
        """
        return self.container['major_unit_scale']

    @major_unit_scale.setter
    def major_unit_scale(self, major_unit_scale):
        """
        Sets the major_unit_scale of this Axis.
         

        :param major_unit_scale: The major_unit_scale of this Axis.
        :type: str
        """

        self.container['major_unit_scale'] = major_unit_scale

    @property
    def max_value(self):
        """
        Gets the max_value of this Axis.
         

        :return: The max_value of this Axis.
        :rtype: float
        """
        return self.container['max_value']

    @max_value.setter
    def max_value(self, max_value):
        """
        Sets the max_value of this Axis.
         

        :param max_value: The max_value of this Axis.
        :type: float
        """

        self.container['max_value'] = max_value

    @property
    def minor_grid_lines(self):
        """
        Gets the minor_grid_lines of this Axis.
        

        :return: The minor_grid_lines of this Axis.
        :rtype: Line
        """
        return self.container['minor_grid_lines']

    @minor_grid_lines.setter
    def minor_grid_lines(self, minor_grid_lines):
        """
        Sets the minor_grid_lines of this Axis.
        

        :param minor_grid_lines: The minor_grid_lines of this Axis.
        :type: Line
        """

        self.container['minor_grid_lines'] = minor_grid_lines

    @property
    def minor_tick_mark(self):
        """
        Gets the minor_tick_mark of this Axis.
         

        :return: The minor_tick_mark of this Axis.
        :rtype: str
        """
        return self.container['minor_tick_mark']

    @minor_tick_mark.setter
    def minor_tick_mark(self, minor_tick_mark):
        """
        Sets the minor_tick_mark of this Axis.
         

        :param minor_tick_mark: The minor_tick_mark of this Axis.
        :type: str
        """

        self.container['minor_tick_mark'] = minor_tick_mark

    @property
    def minor_unit(self):
        """
        Gets the minor_unit of this Axis.
         

        :return: The minor_unit of this Axis.
        :rtype: float
        """
        return self.container['minor_unit']

    @minor_unit.setter
    def minor_unit(self, minor_unit):
        """
        Sets the minor_unit of this Axis.
         

        :param minor_unit: The minor_unit of this Axis.
        :type: float
        """

        self.container['minor_unit'] = minor_unit

    @property
    def minor_unit_scale(self):
        """
        Gets the minor_unit_scale of this Axis.
         

        :return: The minor_unit_scale of this Axis.
        :rtype: str
        """
        return self.container['minor_unit_scale']

    @minor_unit_scale.setter
    def minor_unit_scale(self, minor_unit_scale):
        """
        Sets the minor_unit_scale of this Axis.
         

        :param minor_unit_scale: The minor_unit_scale of this Axis.
        :type: str
        """

        self.container['minor_unit_scale'] = minor_unit_scale

    @property
    def min_value(self):
        """
        Gets the min_value of this Axis.
         

        :return: The min_value of this Axis.
        :rtype: float
        """
        return self.container['min_value']

    @min_value.setter
    def min_value(self, min_value):
        """
        Sets the min_value of this Axis.
         

        :param min_value: The min_value of this Axis.
        :type: float
        """

        self.container['min_value'] = min_value

    @property
    def tick_label_position(self):
        """
        Gets the tick_label_position of this Axis.
         

        :return: The tick_label_position of this Axis.
        :rtype: str
        """
        return self.container['tick_label_position']

    @tick_label_position.setter
    def tick_label_position(self, tick_label_position):
        """
        Sets the tick_label_position of this Axis.
         

        :param tick_label_position: The tick_label_position of this Axis.
        :type: str
        """

        self.container['tick_label_position'] = tick_label_position

    @property
    def tick_labels(self):
        """
        Gets the tick_labels of this Axis.
        

        :return: The tick_labels of this Axis.
        :rtype: TickLabels
        """
        return self.container['tick_labels']

    @tick_labels.setter
    def tick_labels(self, tick_labels):
        """
        Sets the tick_labels of this Axis.
        

        :param tick_labels: The tick_labels of this Axis.
        :type: TickLabels
        """

        self.container['tick_labels'] = tick_labels

    @property
    def tick_label_spacing(self):
        """
        Gets the tick_label_spacing of this Axis.

        :return: The tick_label_spacing of this Axis.
        :rtype: int
        """
        return self.container['tick_label_spacing']

    @tick_label_spacing.setter
    def tick_label_spacing(self, tick_label_spacing):
        """
        Sets the tick_label_spacing of this Axis.

        :param tick_label_spacing: The tick_label_spacing of this Axis.
        :type: int
        """

        self.container['tick_label_spacing'] = tick_label_spacing

    @property
    def tick_mark_spacing(self):
        """
        Gets the tick_mark_spacing of this Axis.

        :return: The tick_mark_spacing of this Axis.
        :rtype: int
        """
        return self.container['tick_mark_spacing']

    @tick_mark_spacing.setter
    def tick_mark_spacing(self, tick_mark_spacing):
        """
        Sets the tick_mark_spacing of this Axis.

        :param tick_mark_spacing: The tick_mark_spacing of this Axis.
        :type: int
        """

        self.container['tick_mark_spacing'] = tick_mark_spacing

    @property
    def title(self):
        """
        Gets the title of this Axis.
        

        :return: The title of this Axis.
        :rtype: Title
        """
        return self.container['title']

    @title.setter
    def title(self, title):
        """
        Sets the title of this Axis.
        

        :param title: The title of this Axis.
        :type: Title
        """

        self.container['title'] = title

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Axis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
