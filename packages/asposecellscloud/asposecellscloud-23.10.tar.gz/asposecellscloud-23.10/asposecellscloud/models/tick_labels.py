# coding: utf-8

"""
Copyright (c) 2022 Aspose.Cells Cloud
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
"""


from pprint import pformat
from six import iteritems
import re


class TickLabels(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_scale_font': 'bool',
        'font': 'Font',
        'background_mode': 'str',
        'number': 'int',
        'number_format': 'str',
        'number_format_linked': 'bool',
        'offset': 'int',
        'rotation_angle': 'int',
        'text_direction': 'str',
        'reading_order': 'str',
        'direction_type': 'str'
    }

    attribute_map = {
        'auto_scale_font': 'AutoScaleFont',
        'font': 'Font',
        'background_mode': 'BackgroundMode',
        'number': 'Number',
        'number_format': 'NumberFormat',
        'number_format_linked': 'NumberFormatLinked',
        'offset': 'Offset',
        'rotation_angle': 'RotationAngle',
        'text_direction': 'TextDirection',
        'reading_order': 'ReadingOrder',
        'direction_type': 'DirectionType'
    }
    
    @staticmethod
    def get_swagger_types():
        return TickLabels.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return TickLabels.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, auto_scale_font=None, font=None, background_mode=None, number=None, number_format=None, number_format_linked=None, offset=None, rotation_angle=None, text_direction=None, reading_order=None, direction_type=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        TickLabels - a model defined in Swagger
        """

        self.container['auto_scale_font'] = None
        self.container['font'] = None
        self.container['background_mode'] = None
        self.container['number'] = None
        self.container['number_format'] = None
        self.container['number_format_linked'] = None
        self.container['offset'] = None
        self.container['rotation_angle'] = None
        self.container['text_direction'] = None
        self.container['reading_order'] = None
        self.container['direction_type'] = None

        if auto_scale_font is not None:
          self.auto_scale_font = auto_scale_font
        if font is not None:
          self.font = font
        if background_mode is not None:
          self.background_mode = background_mode
        if number is not None:
          self.number = number
        if number_format is not None:
          self.number_format = number_format
        if number_format_linked is not None:
          self.number_format_linked = number_format_linked
        if offset is not None:
          self.offset = offset
        if rotation_angle is not None:
          self.rotation_angle = rotation_angle
        if text_direction is not None:
          self.text_direction = text_direction
        if reading_order is not None:
          self.reading_order = reading_order
        if direction_type is not None:
          self.direction_type = direction_type

    @property
    def auto_scale_font(self):
        """
        Gets the auto_scale_font of this TickLabels.
         

        :return: The auto_scale_font of this TickLabels.
        :rtype: bool
        """
        return self.container['auto_scale_font']

    @auto_scale_font.setter
    def auto_scale_font(self, auto_scale_font):
        """
        Sets the auto_scale_font of this TickLabels.
         

        :param auto_scale_font: The auto_scale_font of this TickLabels.
        :type: bool
        """

        self.container['auto_scale_font'] = auto_scale_font

    @property
    def font(self):
        """
        Gets the font of this TickLabels.
        

        :return: The font of this TickLabels.
        :rtype: Font
        """
        return self.container['font']

    @font.setter
    def font(self, font):
        """
        Sets the font of this TickLabels.
        

        :param font: The font of this TickLabels.
        :type: Font
        """

        self.container['font'] = font

    @property
    def background_mode(self):
        """
        Gets the background_mode of this TickLabels.
         

        :return: The background_mode of this TickLabels.
        :rtype: str
        """
        return self.container['background_mode']

    @background_mode.setter
    def background_mode(self, background_mode):
        """
        Sets the background_mode of this TickLabels.
         

        :param background_mode: The background_mode of this TickLabels.
        :type: str
        """

        self.container['background_mode'] = background_mode

    @property
    def number(self):
        """
        Gets the number of this TickLabels.

        :return: The number of this TickLabels.
        :rtype: int
        """
        return self.container['number']

    @number.setter
    def number(self, number):
        """
        Sets the number of this TickLabels.

        :param number: The number of this TickLabels.
        :type: int
        """

        self.container['number'] = number

    @property
    def number_format(self):
        """
        Gets the number_format of this TickLabels.
         

        :return: The number_format of this TickLabels.
        :rtype: str
        """
        return self.container['number_format']

    @number_format.setter
    def number_format(self, number_format):
        """
        Sets the number_format of this TickLabels.
         

        :param number_format: The number_format of this TickLabels.
        :type: str
        """

        self.container['number_format'] = number_format

    @property
    def number_format_linked(self):
        """
        Gets the number_format_linked of this TickLabels.
         

        :return: The number_format_linked of this TickLabels.
        :rtype: bool
        """
        return self.container['number_format_linked']

    @number_format_linked.setter
    def number_format_linked(self, number_format_linked):
        """
        Sets the number_format_linked of this TickLabels.
         

        :param number_format_linked: The number_format_linked of this TickLabels.
        :type: bool
        """

        self.container['number_format_linked'] = number_format_linked

    @property
    def offset(self):
        """
        Gets the offset of this TickLabels.
         

        :return: The offset of this TickLabels.
        :rtype: int
        """
        return self.container['offset']

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this TickLabels.
         

        :param offset: The offset of this TickLabels.
        :type: int
        """

        self.container['offset'] = offset

    @property
    def rotation_angle(self):
        """
        Gets the rotation_angle of this TickLabels.
         

        :return: The rotation_angle of this TickLabels.
        :rtype: int
        """
        return self.container['rotation_angle']

    @rotation_angle.setter
    def rotation_angle(self, rotation_angle):
        """
        Sets the rotation_angle of this TickLabels.
         

        :param rotation_angle: The rotation_angle of this TickLabels.
        :type: int
        """

        self.container['rotation_angle'] = rotation_angle

    @property
    def text_direction(self):
        """
        Gets the text_direction of this TickLabels.
         

        :return: The text_direction of this TickLabels.
        :rtype: str
        """
        return self.container['text_direction']

    @text_direction.setter
    def text_direction(self, text_direction):
        """
        Sets the text_direction of this TickLabels.
         

        :param text_direction: The text_direction of this TickLabels.
        :type: str
        """

        self.container['text_direction'] = text_direction

    @property
    def reading_order(self):
        """
        Gets the reading_order of this TickLabels.
         

        :return: The reading_order of this TickLabels.
        :rtype: str
        """
        return self.container['reading_order']

    @reading_order.setter
    def reading_order(self, reading_order):
        """
        Sets the reading_order of this TickLabels.
         

        :param reading_order: The reading_order of this TickLabels.
        :type: str
        """

        self.container['reading_order'] = reading_order

    @property
    def direction_type(self):
        """
        Gets the direction_type of this TickLabels.
         

        :return: The direction_type of this TickLabels.
        :rtype: str
        """
        return self.container['direction_type']

    @direction_type.setter
    def direction_type(self, direction_type):
        """
        Sets the direction_type of this TickLabels.
         

        :param direction_type: The direction_type of this TickLabels.
        :type: str
        """

        self.container['direction_type'] = direction_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TickLabels):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
