# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class CreateConnectionItemRequest(BaseModel):
    """
    CreateConnectionItemRequest
    """
    type: StrictStr = Field(...)
    name: StrictStr = Field(...)
    host: Optional[StrictStr] = None
    port: Optional[StrictStr] = None
    user: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    ftp_ssl: Optional[StrictBool] = Field(None, alias="ftpSsl")
    oauth_grant_type: Optional[StrictStr] = Field(None, alias="oauthGrantType")
    oauth_url: Optional[StrictStr] = Field(None, alias="oauthUrl")
    oauth_client_id: Optional[StrictStr] = Field(None, alias="oauthClientId")
    oauth_client_secret: Optional[StrictStr] = Field(None, alias="oauthClientSecret")
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    __properties = ["type", "name", "host", "port", "user", "password", "ftpSsl", "oauthGrantType", "oauthUrl", "oauthClientId", "oauthClientSecret", "modifiedById"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateConnectionItemRequest:
        """Create an instance of CreateConnectionItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateConnectionItemRequest:
        """Create an instance of CreateConnectionItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateConnectionItemRequest.parse_obj(obj)

        _obj = CreateConnectionItemRequest.parse_obj({
            "type": obj.get("type"),
            "name": obj.get("name"),
            "host": obj.get("host"),
            "port": obj.get("port"),
            "user": obj.get("user"),
            "password": obj.get("password"),
            "ftp_ssl": obj.get("ftpSsl"),
            "oauth_grant_type": obj.get("oauthGrantType"),
            "oauth_url": obj.get("oauthUrl"),
            "oauth_client_id": obj.get("oauthClientId"),
            "oauth_client_secret": obj.get("oauthClientSecret"),
            "modified_by_id": obj.get("modifiedById")
        })
        return _obj


