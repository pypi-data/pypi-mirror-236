# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class CreateImportFeedItemRequest(BaseModel):
    """
    CreateImportFeedItemRequest
    """
    name: StrictStr = Field(...)
    code: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    max_per_job: Optional[StrictInt] = Field(None, alias="maxPerJob")
    is_active: Optional[StrictBool] = Field(None, alias="isActive")
    repeat_processing: StrictStr = Field(..., alias="repeatProcessing")
    type: StrictStr = Field(...)
    data: Optional[Dict[str, Any]] = None
    file_id: Optional[StrictStr] = Field(None, alias="fileId")
    sheet: Optional[StrictInt] = None
    file_field_delimiter: Optional[StrictStr] = Field(None, alias="fileFieldDelimiter")
    format: Optional[StrictStr] = None
    file_text_qualifier: Optional[StrictStr] = Field(None, alias="fileTextQualifier")
    file_data_action: Optional[StrictStr] = Field(None, alias="fileDataAction")
    is_file_header_row: Optional[StrictBool] = Field(None, alias="isFileHeaderRow")
    decimal_mark: StrictStr = Field(..., alias="decimalMark")
    thousand_separator: Optional[StrictStr] = Field(None, alias="thousandSeparator")
    adapter: Optional[StrictStr] = None
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    owner_user_id: Optional[StrictStr] = Field(None, alias="ownerUserId")
    assigned_user_id: Optional[StrictStr] = Field(None, alias="assignedUserId")
    teams_ids: Optional[conlist(StrictStr)] = Field(None, alias="teamsIds")
    entity: StrictStr = Field(...)
    excluded_nodes: Optional[conlist(StrictStr)] = Field(None, alias="excludedNodes")
    kept_string_nodes: Optional[conlist(StrictStr)] = Field(None, alias="keptStringNodes")
    delimiter: StrictStr = Field(...)
    field_delimiter_for_relation: StrictStr = Field(..., alias="fieldDelimiterForRelation")
    empty_value: Optional[StrictStr] = Field(None, alias="emptyValue")
    null_value: Optional[StrictStr] = Field(None, alias="nullValue")
    mark_for_no_relation: Optional[StrictStr] = Field(None, alias="markForNoRelation")
    source_fields: Optional[conlist(StrictStr)] = Field(None, alias="sourceFields")
    connection_id: Optional[StrictStr] = Field(None, alias="connectionId")
    last_time: Optional[StrictStr] = Field(None, alias="lastTime")
    assigned_accounts_ids: Optional[conlist(StrictStr)] = Field(None, alias="assignedAccountsIds")
    last_status: Optional[StrictStr] = Field(None, alias="lastStatus")
    __properties = ["name", "code", "description", "maxPerJob", "isActive", "repeatProcessing", "type", "data", "fileId", "sheet", "fileFieldDelimiter", "format", "fileTextQualifier", "fileDataAction", "isFileHeaderRow", "decimalMark", "thousandSeparator", "adapter", "modifiedById", "ownerUserId", "assignedUserId", "teamsIds", "entity", "excludedNodes", "keptStringNodes", "delimiter", "fieldDelimiterForRelation", "emptyValue", "nullValue", "markForNoRelation", "sourceFields", "connectionId", "lastTime", "assignedAccountsIds", "lastStatus"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateImportFeedItemRequest:
        """Create an instance of CreateImportFeedItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateImportFeedItemRequest:
        """Create an instance of CreateImportFeedItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateImportFeedItemRequest.parse_obj(obj)

        _obj = CreateImportFeedItemRequest.parse_obj({
            "name": obj.get("name"),
            "code": obj.get("code"),
            "description": obj.get("description"),
            "max_per_job": obj.get("maxPerJob"),
            "is_active": obj.get("isActive"),
            "repeat_processing": obj.get("repeatProcessing"),
            "type": obj.get("type"),
            "data": obj.get("data"),
            "file_id": obj.get("fileId"),
            "sheet": obj.get("sheet"),
            "file_field_delimiter": obj.get("fileFieldDelimiter"),
            "format": obj.get("format"),
            "file_text_qualifier": obj.get("fileTextQualifier"),
            "file_data_action": obj.get("fileDataAction"),
            "is_file_header_row": obj.get("isFileHeaderRow"),
            "decimal_mark": obj.get("decimalMark"),
            "thousand_separator": obj.get("thousandSeparator"),
            "adapter": obj.get("adapter"),
            "modified_by_id": obj.get("modifiedById"),
            "owner_user_id": obj.get("ownerUserId"),
            "assigned_user_id": obj.get("assignedUserId"),
            "teams_ids": obj.get("teamsIds"),
            "entity": obj.get("entity"),
            "excluded_nodes": obj.get("excludedNodes"),
            "kept_string_nodes": obj.get("keptStringNodes"),
            "delimiter": obj.get("delimiter"),
            "field_delimiter_for_relation": obj.get("fieldDelimiterForRelation"),
            "empty_value": obj.get("emptyValue"),
            "null_value": obj.get("nullValue"),
            "mark_for_no_relation": obj.get("markForNoRelation"),
            "source_fields": obj.get("sourceFields"),
            "connection_id": obj.get("connectionId"),
            "last_time": obj.get("lastTime"),
            "assigned_accounts_ids": obj.get("assignedAccountsIds"),
            "last_status": obj.get("lastStatus")
        })
        return _obj


