# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class CreateImportJobItemRequest(BaseModel):
    """
    CreateImportJobItemRequest
    """
    name: StrictStr = Field(...)
    trial: Optional[StrictInt] = None
    import_feed_id: Optional[StrictStr] = Field(None, alias="importFeedId")
    sort_order: Optional[StrictStr] = Field(None, alias="sortOrder")
    state: StrictStr = Field(...)
    message: Optional[StrictStr] = None
    start: Optional[StrictStr] = None
    end: Optional[StrictStr] = None
    created_count: Optional[StrictInt] = Field(None, alias="createdCount")
    updated_count: Optional[StrictInt] = Field(None, alias="updatedCount")
    deleted_count: Optional[StrictInt] = Field(None, alias="deletedCount")
    errors_count: Optional[StrictInt] = Field(None, alias="errorsCount")
    attachment_id: Optional[StrictStr] = Field(None, alias="attachmentId")
    uploaded_file_id: Optional[StrictStr] = Field(None, alias="uploadedFileId")
    converted_file_id: Optional[StrictStr] = Field(None, alias="convertedFileId")
    errors_attachment_id: Optional[StrictStr] = Field(None, alias="errorsAttachmentId")
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    __properties = ["name", "trial", "importFeedId", "sortOrder", "state", "message", "start", "end", "createdCount", "updatedCount", "deletedCount", "errorsCount", "attachmentId", "uploadedFileId", "convertedFileId", "errorsAttachmentId", "modifiedById"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateImportJobItemRequest:
        """Create an instance of CreateImportJobItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateImportJobItemRequest:
        """Create an instance of CreateImportJobItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateImportJobItemRequest.parse_obj(obj)

        _obj = CreateImportJobItemRequest.parse_obj({
            "name": obj.get("name"),
            "trial": obj.get("trial"),
            "import_feed_id": obj.get("importFeedId"),
            "sort_order": obj.get("sortOrder"),
            "state": obj.get("state"),
            "message": obj.get("message"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "created_count": obj.get("createdCount"),
            "updated_count": obj.get("updatedCount"),
            "deleted_count": obj.get("deletedCount"),
            "errors_count": obj.get("errorsCount"),
            "attachment_id": obj.get("attachmentId"),
            "uploaded_file_id": obj.get("uploadedFileId"),
            "converted_file_id": obj.get("convertedFileId"),
            "errors_attachment_id": obj.get("errorsAttachmentId"),
            "modified_by_id": obj.get("modifiedById")
        })
        return _obj


