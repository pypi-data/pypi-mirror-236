# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class CreateNotificationItemRequest(BaseModel):
    """
    CreateNotificationItemRequest
    """
    number: Optional[StrictInt] = None
    data: Optional[Dict[str, Any]] = None
    note_data: Optional[Dict[str, Any]] = Field(None, alias="noteData")
    type: Optional[StrictStr] = None
    read: Optional[StrictBool] = None
    user_id: Optional[StrictStr] = Field(None, alias="userId")
    message: Optional[StrictStr] = None
    related_id: Optional[StrictStr] = Field(None, alias="relatedId")
    related_parent_id: Optional[StrictStr] = Field(None, alias="relatedParentId")
    __properties = ["number", "data", "noteData", "type", "read", "userId", "message", "relatedId", "relatedParentId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateNotificationItemRequest:
        """Create an instance of CreateNotificationItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateNotificationItemRequest:
        """Create an instance of CreateNotificationItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateNotificationItemRequest.parse_obj(obj)

        _obj = CreateNotificationItemRequest.parse_obj({
            "number": obj.get("number"),
            "data": obj.get("data"),
            "note_data": obj.get("noteData"),
            "type": obj.get("type"),
            "read": obj.get("read"),
            "user_id": obj.get("userId"),
            "message": obj.get("message"),
            "related_id": obj.get("relatedId"),
            "related_parent_id": obj.get("relatedParentId")
        })
        return _obj


