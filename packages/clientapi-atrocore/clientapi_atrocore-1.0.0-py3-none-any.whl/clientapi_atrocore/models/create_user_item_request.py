# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class CreateUserItemRequest(BaseModel):
    """
    CreateUserItemRequest
    """
    type: Optional[StrictStr] = None
    account_id: Optional[StrictStr] = Field(None, alias="accountId")
    is_admin: Optional[StrictBool] = Field(None, alias="isAdmin")
    name: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    password_confirm: Optional[StrictStr] = Field(None, alias="passwordConfirm")
    is_active: Optional[StrictBool] = Field(None, alias="isActive")
    is_portal_user: Optional[StrictBool] = Field(None, alias="isPortalUser")
    is_super_admin: Optional[StrictBool] = Field(None, alias="isSuperAdmin")
    title: Optional[StrictStr] = None
    position: Optional[StrictStr] = None
    email_address: StrictStr = Field(..., alias="emailAddress")
    phone_number: Optional[StrictStr] = Field(None, alias="phoneNumber")
    token: Optional[StrictStr] = None
    auth_token_id: Optional[StrictStr] = Field(None, alias="authTokenId")
    auth_log_record_id: Optional[StrictStr] = Field(None, alias="authLogRecordId")
    ip_address: Optional[StrictStr] = Field(None, alias="ipAddress")
    default_team_id: Optional[StrictStr] = Field(None, alias="defaultTeamId")
    acceptance_status: Optional[StrictStr] = Field(None, alias="acceptanceStatus")
    team_role: Optional[StrictStr] = Field(None, alias="teamRole")
    teams_ids: Optional[conlist(StrictStr)] = Field(None, alias="teamsIds")
    roles_ids: Optional[conlist(StrictStr)] = Field(None, alias="rolesIds")
    portal_id: Optional[StrictStr] = Field(None, alias="portalId")
    portal_roles_ids: Optional[conlist(StrictStr)] = Field(None, alias="portalRolesIds")
    avatar_id: Optional[StrictStr] = Field(None, alias="avatarId")
    send_access_info: Optional[StrictBool] = Field(None, alias="sendAccessInfo")
    gender: Optional[StrictStr] = None
    last_access: Optional[StrictStr] = Field(None, alias="lastAccess")
    __properties = ["type", "accountId", "isAdmin", "name", "password", "passwordConfirm", "isActive", "isPortalUser", "isSuperAdmin", "title", "position", "emailAddress", "phoneNumber", "token", "authTokenId", "authLogRecordId", "ipAddress", "defaultTeamId", "acceptanceStatus", "teamRole", "teamsIds", "rolesIds", "portalId", "portalRolesIds", "avatarId", "sendAccessInfo", "gender", "lastAccess"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateUserItemRequest:
        """Create an instance of CreateUserItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateUserItemRequest:
        """Create an instance of CreateUserItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateUserItemRequest.parse_obj(obj)

        _obj = CreateUserItemRequest.parse_obj({
            "type": obj.get("type"),
            "account_id": obj.get("accountId"),
            "is_admin": obj.get("isAdmin"),
            "name": obj.get("name"),
            "password": obj.get("password"),
            "password_confirm": obj.get("passwordConfirm"),
            "is_active": obj.get("isActive"),
            "is_portal_user": obj.get("isPortalUser"),
            "is_super_admin": obj.get("isSuperAdmin"),
            "title": obj.get("title"),
            "position": obj.get("position"),
            "email_address": obj.get("emailAddress"),
            "phone_number": obj.get("phoneNumber"),
            "token": obj.get("token"),
            "auth_token_id": obj.get("authTokenId"),
            "auth_log_record_id": obj.get("authLogRecordId"),
            "ip_address": obj.get("ipAddress"),
            "default_team_id": obj.get("defaultTeamId"),
            "acceptance_status": obj.get("acceptanceStatus"),
            "team_role": obj.get("teamRole"),
            "teams_ids": obj.get("teamsIds"),
            "roles_ids": obj.get("rolesIds"),
            "portal_id": obj.get("portalId"),
            "portal_roles_ids": obj.get("portalRolesIds"),
            "avatar_id": obj.get("avatarId"),
            "send_access_info": obj.get("sendAccessInfo"),
            "gender": obj.get("gender"),
            "last_access": obj.get("lastAccess")
        })
        return _obj


