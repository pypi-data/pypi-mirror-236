# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class ExportFeed(BaseModel):
    """
    ExportFeed
    """
    id: Optional[StrictStr] = None
    deleted: Optional[StrictBool] = None
    name: StrictStr = Field(...)
    code: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    limit: StrictInt = Field(...)
    separate_job: Optional[StrictBool] = Field(None, alias="separateJob")
    created_at: Optional[StrictStr] = Field(None, alias="createdAt")
    modified_at: Optional[StrictStr] = Field(None, alias="modifiedAt")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById")
    created_by_name: Optional[StrictStr] = Field(None, alias="createdByName")
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    modified_by_name: Optional[StrictStr] = Field(None, alias="modifiedByName")
    owner_user_id: Optional[StrictStr] = Field(None, alias="ownerUserId")
    owner_user_name: Optional[StrictStr] = Field(None, alias="ownerUserName")
    assigned_user_id: Optional[StrictStr] = Field(None, alias="assignedUserId")
    assigned_user_name: Optional[StrictStr] = Field(None, alias="assignedUserName")
    teams_ids: Optional[conlist(StrictStr)] = Field(None, alias="teamsIds")
    teams_names: Optional[Dict[str, Any]] = Field(None, alias="teamsNames")
    type: StrictStr = Field(...)
    language: Optional[StrictStr] = None
    is_active: Optional[StrictBool] = Field(None, alias="isActive")
    file_type: StrictStr = Field(..., alias="fileType")
    is_file_header_row: Optional[StrictBool] = Field(None, alias="isFileHeaderRow")
    csv_field_delimiter: Optional[StrictStr] = Field(None, alias="csvFieldDelimiter")
    csv_text_qualifier: Optional[StrictStr] = Field(None, alias="csvTextQualifier")
    entity: Optional[StrictStr] = None
    convert_collection_to_string: Optional[StrictBool] = Field(None, alias="convertCollectionToString")
    delimiter: Optional[StrictStr] = None
    replace_attribute_values: Optional[StrictBool] = Field(None, alias="replaceAttributeValues")
    convert_relations_to_string: Optional[StrictBool] = Field(None, alias="convertRelationsToString")
    field_delimiter_for_relation: Optional[StrictStr] = Field(None, alias="fieldDelimiterForRelation")
    empty_value: Optional[StrictStr] = Field(None, alias="emptyValue")
    null_value: Optional[StrictStr] = Field(None, alias="nullValue")
    mark_for_no_relation: Optional[StrictStr] = Field(None, alias="markForNoRelation")
    decimal_mark: Optional[StrictStr] = Field(None, alias="decimalMark")
    thousand_separator: Optional[StrictStr] = Field(None, alias="thousandSeparator")
    data: Optional[Dict[str, Any]] = None
    sort_order_field: Optional[StrictStr] = Field(None, alias="sortOrderField")
    sort_order_direction: Optional[StrictStr] = Field(None, alias="sortOrderDirection")
    template: Optional[StrictStr] = None
    last_time: Optional[StrictStr] = Field(None, alias="lastTime")
    export_by_max_depth: Optional[StrictStr] = Field(None, alias="exportByMaxDepth")
    assigned_accounts_ids: Optional[conlist(StrictStr)] = Field(None, alias="assignedAccountsIds")
    assigned_accounts_names: Optional[Dict[str, Any]] = Field(None, alias="assignedAccountsNames")
    last_status: Optional[StrictStr] = Field(None, alias="lastStatus")
    __properties = ["id", "deleted", "name", "code", "description", "limit", "separateJob", "createdAt", "modifiedAt", "createdById", "createdByName", "modifiedById", "modifiedByName", "ownerUserId", "ownerUserName", "assignedUserId", "assignedUserName", "teamsIds", "teamsNames", "type", "language", "isActive", "fileType", "isFileHeaderRow", "csvFieldDelimiter", "csvTextQualifier", "entity", "convertCollectionToString", "delimiter", "replaceAttributeValues", "convertRelationsToString", "fieldDelimiterForRelation", "emptyValue", "nullValue", "markForNoRelation", "decimalMark", "thousandSeparator", "data", "sortOrderField", "sortOrderDirection", "template", "lastTime", "exportByMaxDepth", "assignedAccountsIds", "assignedAccountsNames", "lastStatus"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportFeed:
        """Create an instance of ExportFeed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportFeed:
        """Create an instance of ExportFeed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportFeed.parse_obj(obj)

        _obj = ExportFeed.parse_obj({
            "id": obj.get("id"),
            "deleted": obj.get("deleted"),
            "name": obj.get("name"),
            "code": obj.get("code"),
            "description": obj.get("description"),
            "limit": obj.get("limit"),
            "separate_job": obj.get("separateJob"),
            "created_at": obj.get("createdAt"),
            "modified_at": obj.get("modifiedAt"),
            "created_by_id": obj.get("createdById"),
            "created_by_name": obj.get("createdByName"),
            "modified_by_id": obj.get("modifiedById"),
            "modified_by_name": obj.get("modifiedByName"),
            "owner_user_id": obj.get("ownerUserId"),
            "owner_user_name": obj.get("ownerUserName"),
            "assigned_user_id": obj.get("assignedUserId"),
            "assigned_user_name": obj.get("assignedUserName"),
            "teams_ids": obj.get("teamsIds"),
            "teams_names": obj.get("teamsNames"),
            "type": obj.get("type"),
            "language": obj.get("language"),
            "is_active": obj.get("isActive"),
            "file_type": obj.get("fileType"),
            "is_file_header_row": obj.get("isFileHeaderRow"),
            "csv_field_delimiter": obj.get("csvFieldDelimiter"),
            "csv_text_qualifier": obj.get("csvTextQualifier"),
            "entity": obj.get("entity"),
            "convert_collection_to_string": obj.get("convertCollectionToString"),
            "delimiter": obj.get("delimiter"),
            "replace_attribute_values": obj.get("replaceAttributeValues"),
            "convert_relations_to_string": obj.get("convertRelationsToString"),
            "field_delimiter_for_relation": obj.get("fieldDelimiterForRelation"),
            "empty_value": obj.get("emptyValue"),
            "null_value": obj.get("nullValue"),
            "mark_for_no_relation": obj.get("markForNoRelation"),
            "decimal_mark": obj.get("decimalMark"),
            "thousand_separator": obj.get("thousandSeparator"),
            "data": obj.get("data"),
            "sort_order_field": obj.get("sortOrderField"),
            "sort_order_direction": obj.get("sortOrderDirection"),
            "template": obj.get("template"),
            "last_time": obj.get("lastTime"),
            "export_by_max_depth": obj.get("exportByMaxDepth"),
            "assigned_accounts_ids": obj.get("assignedAccountsIds"),
            "assigned_accounts_names": obj.get("assignedAccountsNames"),
            "last_status": obj.get("lastStatus")
        })
        return _obj


