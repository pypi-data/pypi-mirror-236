# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class Preferences(BaseModel):
    """
    Preferences
    """
    id: Optional[StrictStr] = None
    deleted: Optional[StrictBool] = None
    locale: Optional[StrictStr] = None
    locale_id: Optional[StrictStr] = Field(None, alias="localeId")
    language: Optional[StrictStr] = None
    decimal_mark: Optional[StrictStr] = Field(None, alias="decimalMark")
    time_format: Optional[StrictStr] = Field(None, alias="timeFormat")
    thousand_separator: Optional[StrictStr] = Field(None, alias="thousandSeparator")
    week_start: Optional[StrictInt] = Field(None, alias="weekStart")
    date_format: Optional[StrictStr] = Field(None, alias="dateFormat")
    time_zone: Optional[StrictStr] = Field(None, alias="timeZone")
    default_currency: Optional[StrictStr] = Field(None, alias="defaultCurrency")
    dashboard_layout: Optional[Dict[str, Any]] = Field(None, alias="dashboardLayout")
    dashlets_options: Optional[Dict[str, Any]] = Field(None, alias="dashletsOptions")
    shared_calendar_user_list: Optional[Dict[str, Any]] = Field(None, alias="sharedCalendarUserList")
    calendar_view_data_list: Optional[Dict[str, Any]] = Field(None, alias="calendarViewDataList")
    preset_filters: Optional[Dict[str, Any]] = Field(None, alias="presetFilters")
    receive_assignment_email_notifications: Optional[StrictBool] = Field(None, alias="receiveAssignmentEmailNotifications")
    receive_mention_email_notifications: Optional[StrictBool] = Field(None, alias="receiveMentionEmailNotifications")
    receive_stream_email_notifications: Optional[StrictBool] = Field(None, alias="receiveStreamEmailNotifications")
    assignment_notifications: Optional[StrictBool] = Field(None, alias="assignmentNotifications")
    auto_follow_entity_type_list: Optional[conlist(StrictStr)] = Field(None, alias="autoFollowEntityTypeList")
    theme: Optional[StrictStr] = None
    use_custom_tab_list: Optional[StrictBool] = Field(None, alias="useCustomTabList")
    tab_list: Optional[conlist(StrictStr)] = Field(None, alias="tabList")
    is_portal_user: Optional[StrictBool] = Field(None, alias="isPortalUser")
    follow_entity_on_stream_post: Optional[StrictBool] = Field(None, alias="followEntityOnStreamPost")
    follow_created_entities: Optional[StrictBool] = Field(None, alias="followCreatedEntities")
    follow_created_entity_type_list: Optional[conlist(StrictStr)] = Field(None, alias="followCreatedEntityTypeList")
    scope_colors_disabled: Optional[StrictBool] = Field(None, alias="scopeColorsDisabled")
    tab_colors_disabled: Optional[StrictBool] = Field(None, alias="tabColorsDisabled")
    __properties = ["id", "deleted", "locale", "localeId", "language", "decimalMark", "timeFormat", "thousandSeparator", "weekStart", "dateFormat", "timeZone", "defaultCurrency", "dashboardLayout", "dashletsOptions", "sharedCalendarUserList", "calendarViewDataList", "presetFilters", "receiveAssignmentEmailNotifications", "receiveMentionEmailNotifications", "receiveStreamEmailNotifications", "assignmentNotifications", "autoFollowEntityTypeList", "theme", "useCustomTabList", "tabList", "isPortalUser", "followEntityOnStreamPost", "followCreatedEntities", "followCreatedEntityTypeList", "scopeColorsDisabled", "tabColorsDisabled"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Preferences:
        """Create an instance of Preferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Preferences:
        """Create an instance of Preferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Preferences.parse_obj(obj)

        _obj = Preferences.parse_obj({
            "id": obj.get("id"),
            "deleted": obj.get("deleted"),
            "locale": obj.get("locale"),
            "locale_id": obj.get("localeId"),
            "language": obj.get("language"),
            "decimal_mark": obj.get("decimalMark"),
            "time_format": obj.get("timeFormat"),
            "thousand_separator": obj.get("thousandSeparator"),
            "week_start": obj.get("weekStart"),
            "date_format": obj.get("dateFormat"),
            "time_zone": obj.get("timeZone"),
            "default_currency": obj.get("defaultCurrency"),
            "dashboard_layout": obj.get("dashboardLayout"),
            "dashlets_options": obj.get("dashletsOptions"),
            "shared_calendar_user_list": obj.get("sharedCalendarUserList"),
            "calendar_view_data_list": obj.get("calendarViewDataList"),
            "preset_filters": obj.get("presetFilters"),
            "receive_assignment_email_notifications": obj.get("receiveAssignmentEmailNotifications"),
            "receive_mention_email_notifications": obj.get("receiveMentionEmailNotifications"),
            "receive_stream_email_notifications": obj.get("receiveStreamEmailNotifications"),
            "assignment_notifications": obj.get("assignmentNotifications"),
            "auto_follow_entity_type_list": obj.get("autoFollowEntityTypeList"),
            "theme": obj.get("theme"),
            "use_custom_tab_list": obj.get("useCustomTabList"),
            "tab_list": obj.get("tabList"),
            "is_portal_user": obj.get("isPortalUser"),
            "follow_entity_on_stream_post": obj.get("followEntityOnStreamPost"),
            "follow_created_entities": obj.get("followCreatedEntities"),
            "follow_created_entity_type_list": obj.get("followCreatedEntityTypeList"),
            "scope_colors_disabled": obj.get("scopeColorsDisabled"),
            "tab_colors_disabled": obj.get("tabColorsDisabled")
        })
        return _obj


