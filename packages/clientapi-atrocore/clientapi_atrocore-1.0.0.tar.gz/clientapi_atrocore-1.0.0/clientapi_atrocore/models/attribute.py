# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class Attribute(BaseModel):
    """
    Attribute
    """
    id: Optional[StrictStr] = None
    deleted: Optional[StrictBool] = None
    name: StrictStr = Field(...)
    name_de_de: StrictStr = Field(..., alias="nameDeDe")
    created_at: Optional[StrictStr] = Field(None, alias="createdAt")
    modified_at: Optional[StrictStr] = Field(None, alias="modifiedAt")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById")
    created_by_name: Optional[StrictStr] = Field(None, alias="createdByName")
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    modified_by_name: Optional[StrictStr] = Field(None, alias="modifiedByName")
    owner_user_id: Optional[StrictStr] = Field(None, alias="ownerUserId")
    owner_user_name: Optional[StrictStr] = Field(None, alias="ownerUserName")
    assigned_user_id: Optional[StrictStr] = Field(None, alias="assignedUserId")
    assigned_user_name: Optional[StrictStr] = Field(None, alias="assignedUserName")
    teams_ids: Optional[conlist(StrictStr)] = Field(None, alias="teamsIds")
    teams_names: Optional[Dict[str, Any]] = Field(None, alias="teamsNames")
    attribute_group_id: Optional[StrictStr] = Field(None, alias="attributeGroupId")
    attribute_group_name: Optional[StrictStr] = Field(None, alias="attributeGroupName")
    attribute_tab_id: Optional[StrictStr] = Field(None, alias="attributeTabId")
    attribute_tab_name: Optional[StrictStr] = Field(None, alias="attributeTabName")
    extensible_enum_id: Optional[StrictStr] = Field(None, alias="extensibleEnumId")
    extensible_enum_name: Optional[StrictStr] = Field(None, alias="extensibleEnumName")
    code: Optional[StrictStr] = None
    type: StrictStr = Field(...)
    asset_type: Optional[StrictStr] = Field(None, alias="assetType")
    is_multilang: Optional[StrictBool] = Field(None, alias="isMultilang")
    pattern: Optional[StrictStr] = None
    unique: Optional[StrictBool] = None
    prohibited_empty_value: Optional[StrictBool] = Field(None, alias="prohibitedEmptyValue")
    virtual_product_field: Optional[StrictBool] = Field(None, alias="virtualProductField")
    measure_id: Optional[StrictStr] = Field(None, alias="measureId")
    measure_name: Optional[StrictStr] = Field(None, alias="measureName")
    default_unit: Optional[StrictStr] = Field(None, alias="defaultUnit")
    default_scope: Optional[StrictStr] = Field(None, alias="defaultScope")
    default_channel_id: Optional[StrictStr] = Field(None, alias="defaultChannelId")
    default_channel_name: Optional[StrictStr] = Field(None, alias="defaultChannelName")
    is_required: Optional[StrictBool] = Field(None, alias="isRequired")
    sort_order_in_attribute_group: Optional[StrictInt] = Field(None, alias="sortOrderInAttributeGroup")
    sort_order: Optional[StrictInt] = Field(None, alias="sortOrder")
    sort_order_in_product: Optional[StrictInt] = Field(None, alias="sortOrderInProduct")
    tooltip: Optional[StrictStr] = None
    tooltip_de_de: Optional[StrictStr] = Field(None, alias="tooltipDeDe")
    description: Optional[StrictStr] = None
    description_de_de: Optional[StrictStr] = Field(None, alias="descriptionDeDe")
    amount_of_digits_after_comma: Optional[StrictInt] = Field(None, alias="amountOfDigitsAfterComma")
    use_disabled_textarea_in_view_mode: Optional[StrictBool] = Field(None, alias="useDisabledTextareaInViewMode")
    __properties = ["id", "deleted", "name", "nameDeDe", "createdAt", "modifiedAt", "createdById", "createdByName", "modifiedById", "modifiedByName", "ownerUserId", "ownerUserName", "assignedUserId", "assignedUserName", "teamsIds", "teamsNames", "attributeGroupId", "attributeGroupName", "attributeTabId", "attributeTabName", "extensibleEnumId", "extensibleEnumName", "code", "type", "assetType", "isMultilang", "pattern", "unique", "prohibitedEmptyValue", "virtualProductField", "measureId", "measureName", "defaultUnit", "defaultScope", "defaultChannelId", "defaultChannelName", "isRequired", "sortOrderInAttributeGroup", "sortOrder", "sortOrderInProduct", "tooltip", "tooltipDeDe", "description", "descriptionDeDe", "amountOfDigitsAfterComma", "useDisabledTextareaInViewMode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Attribute:
        """Create an instance of Attribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Attribute:
        """Create an instance of Attribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Attribute.parse_obj(obj)

        _obj = Attribute.parse_obj({
            "id": obj.get("id"),
            "deleted": obj.get("deleted"),
            "name": obj.get("name"),
            "name_de_de": obj.get("nameDeDe"),
            "created_at": obj.get("createdAt"),
            "modified_at": obj.get("modifiedAt"),
            "created_by_id": obj.get("createdById"),
            "created_by_name": obj.get("createdByName"),
            "modified_by_id": obj.get("modifiedById"),
            "modified_by_name": obj.get("modifiedByName"),
            "owner_user_id": obj.get("ownerUserId"),
            "owner_user_name": obj.get("ownerUserName"),
            "assigned_user_id": obj.get("assignedUserId"),
            "assigned_user_name": obj.get("assignedUserName"),
            "teams_ids": obj.get("teamsIds"),
            "teams_names": obj.get("teamsNames"),
            "attribute_group_id": obj.get("attributeGroupId"),
            "attribute_group_name": obj.get("attributeGroupName"),
            "attribute_tab_id": obj.get("attributeTabId"),
            "attribute_tab_name": obj.get("attributeTabName"),
            "extensible_enum_id": obj.get("extensibleEnumId"),
            "extensible_enum_name": obj.get("extensibleEnumName"),
            "code": obj.get("code"),
            "type": obj.get("type"),
            "asset_type": obj.get("assetType"),
            "is_multilang": obj.get("isMultilang"),
            "pattern": obj.get("pattern"),
            "unique": obj.get("unique"),
            "prohibited_empty_value": obj.get("prohibitedEmptyValue"),
            "virtual_product_field": obj.get("virtualProductField"),
            "measure_id": obj.get("measureId"),
            "measure_name": obj.get("measureName"),
            "default_unit": obj.get("defaultUnit"),
            "default_scope": obj.get("defaultScope"),
            "default_channel_id": obj.get("defaultChannelId"),
            "default_channel_name": obj.get("defaultChannelName"),
            "is_required": obj.get("isRequired"),
            "sort_order_in_attribute_group": obj.get("sortOrderInAttributeGroup"),
            "sort_order": obj.get("sortOrder"),
            "sort_order_in_product": obj.get("sortOrderInProduct"),
            "tooltip": obj.get("tooltip"),
            "tooltip_de_de": obj.get("tooltipDeDe"),
            "description": obj.get("description"),
            "description_de_de": obj.get("descriptionDeDe"),
            "amount_of_digits_after_comma": obj.get("amountOfDigitsAfterComma"),
            "use_disabled_textarea_in_view_mode": obj.get("useDisabledTextareaInViewMode")
        })
        return _obj


