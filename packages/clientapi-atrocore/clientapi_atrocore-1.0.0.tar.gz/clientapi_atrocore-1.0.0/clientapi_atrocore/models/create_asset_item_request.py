# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class CreateAssetItemRequest(BaseModel):
    """
    CreateAssetItemRequest
    """
    preview: Optional[StrictStr] = None
    icon: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    after_save_message: Optional[StrictStr] = Field(None, alias="afterSaveMessage")
    height: Optional[StrictInt] = None
    width: Optional[StrictInt] = None
    color_space: Optional[StrictStr] = Field(None, alias="colorSpace")
    color_depth: Optional[StrictStr] = Field(None, alias="colorDepth")
    orientation: Optional[StrictStr] = None
    is_active: Optional[StrictBool] = Field(None, alias="isActive")
    tags: Optional[conlist(StrictStr)] = None
    library_id: Optional[StrictStr] = Field(None, alias="libraryId")
    asset_categories_ids: Optional[conlist(StrictStr)] = Field(None, alias="assetCategoriesIds")
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    description_de_de: Optional[StrictStr] = Field(None, alias="descriptionDeDe")
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    private: Optional[StrictBool] = None
    file_id: Optional[StrictStr] = Field(None, alias="fileId")
    files: StrictStr = Field(...)
    size: Optional[StrictStr] = None
    parents_ids: Optional[conlist(StrictStr)] = Field(None, alias="parentsIds")
    sort_order: Optional[StrictInt] = Field(None, alias="sortOrder")
    __properties = ["preview", "icon", "url", "afterSaveMessage", "height", "width", "colorSpace", "colorDepth", "orientation", "isActive", "tags", "libraryId", "assetCategoriesIds", "name", "description", "descriptionDeDe", "modifiedById", "private", "fileId", "files", "size", "parentsIds", "sortOrder"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAssetItemRequest:
        """Create an instance of CreateAssetItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAssetItemRequest:
        """Create an instance of CreateAssetItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAssetItemRequest.parse_obj(obj)

        _obj = CreateAssetItemRequest.parse_obj({
            "preview": obj.get("preview"),
            "icon": obj.get("icon"),
            "url": obj.get("url"),
            "after_save_message": obj.get("afterSaveMessage"),
            "height": obj.get("height"),
            "width": obj.get("width"),
            "color_space": obj.get("colorSpace"),
            "color_depth": obj.get("colorDepth"),
            "orientation": obj.get("orientation"),
            "is_active": obj.get("isActive"),
            "tags": obj.get("tags"),
            "library_id": obj.get("libraryId"),
            "asset_categories_ids": obj.get("assetCategoriesIds"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "description_de_de": obj.get("descriptionDeDe"),
            "modified_by_id": obj.get("modifiedById"),
            "private": obj.get("private"),
            "file_id": obj.get("fileId"),
            "files": obj.get("files"),
            "size": obj.get("size"),
            "parents_ids": obj.get("parentsIds"),
            "sort_order": obj.get("sortOrder")
        })
        return _obj


