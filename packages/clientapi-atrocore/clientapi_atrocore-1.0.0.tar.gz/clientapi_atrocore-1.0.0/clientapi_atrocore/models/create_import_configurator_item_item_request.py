# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class CreateImportConfiguratorItemItemRequest(BaseModel):
    """
    CreateImportConfiguratorItemItemRequest
    """
    name: Optional[StrictStr] = None
    entity_identifier: Optional[StrictBool] = Field(None, alias="entityIdentifier")
    column: Optional[conlist(StrictStr)] = None
    import_by: Optional[conlist(StrictStr)] = Field(None, alias="importBy")
    create_if_not_exist: Optional[StrictBool] = Field(None, alias="createIfNotExist")
    replace_array: Optional[StrictBool] = Field(None, alias="replaceArray")
    type: Optional[StrictStr] = None
    foreign_column: Optional[conlist(StrictStr)] = Field(None, alias="foreignColumn")
    foreign_import_by: Optional[conlist(StrictStr)] = Field(None, alias="foreignImportBy")
    attribute_id: Optional[StrictStr] = Field(None, alias="attributeId")
    scope: Optional[StrictStr] = None
    channel_id: Optional[StrictStr] = Field(None, alias="channelId")
    locale: Optional[StrictStr] = None
    default_container: Optional[StrictStr] = Field(None, alias="defaultContainer")
    default: Optional[StrictStr] = None
    default_from: Optional[StrictStr] = Field(None, alias="defaultFrom")
    default_to: Optional[StrictStr] = Field(None, alias="defaultTo")
    default_currency: Optional[StrictStr] = Field(None, alias="defaultCurrency")
    default_id: Optional[StrictStr] = Field(None, alias="defaultId")
    default_paths_data: Optional[Dict[str, Any]] = Field(None, alias="defaultPathsData")
    default_ids: Optional[conlist(StrictStr)] = Field(None, alias="defaultIds")
    entity: Optional[StrictStr] = None
    source_fields: Optional[conlist(StrictStr)] = Field(None, alias="sourceFields")
    import_feed_id: Optional[StrictStr] = Field(None, alias="importFeedId")
    sort_order: Optional[StrictInt] = Field(None, alias="sortOrder")
    attribute_value: Optional[StrictStr] = Field(None, alias="attributeValue")
    __properties = ["name", "entityIdentifier", "column", "importBy", "createIfNotExist", "replaceArray", "type", "foreignColumn", "foreignImportBy", "attributeId", "scope", "channelId", "locale", "defaultContainer", "default", "defaultFrom", "defaultTo", "defaultCurrency", "defaultId", "defaultPathsData", "defaultIds", "entity", "sourceFields", "importFeedId", "sortOrder", "attributeValue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateImportConfiguratorItemItemRequest:
        """Create an instance of CreateImportConfiguratorItemItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateImportConfiguratorItemItemRequest:
        """Create an instance of CreateImportConfiguratorItemItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateImportConfiguratorItemItemRequest.parse_obj(obj)

        _obj = CreateImportConfiguratorItemItemRequest.parse_obj({
            "name": obj.get("name"),
            "entity_identifier": obj.get("entityIdentifier"),
            "column": obj.get("column"),
            "import_by": obj.get("importBy"),
            "create_if_not_exist": obj.get("createIfNotExist"),
            "replace_array": obj.get("replaceArray"),
            "type": obj.get("type"),
            "foreign_column": obj.get("foreignColumn"),
            "foreign_import_by": obj.get("foreignImportBy"),
            "attribute_id": obj.get("attributeId"),
            "scope": obj.get("scope"),
            "channel_id": obj.get("channelId"),
            "locale": obj.get("locale"),
            "default_container": obj.get("defaultContainer"),
            "default": obj.get("default"),
            "default_from": obj.get("defaultFrom"),
            "default_to": obj.get("defaultTo"),
            "default_currency": obj.get("defaultCurrency"),
            "default_id": obj.get("defaultId"),
            "default_paths_data": obj.get("defaultPathsData"),
            "default_ids": obj.get("defaultIds"),
            "entity": obj.get("entity"),
            "source_fields": obj.get("sourceFields"),
            "import_feed_id": obj.get("importFeedId"),
            "sort_order": obj.get("sortOrder"),
            "attribute_value": obj.get("attributeValue")
        })
        return _obj


