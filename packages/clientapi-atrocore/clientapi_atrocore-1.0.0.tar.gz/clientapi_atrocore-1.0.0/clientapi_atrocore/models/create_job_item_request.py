# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class CreateJobItemRequest(BaseModel):
    """
    CreateJobItemRequest
    """
    queue_item_id: Optional[StrictStr] = Field(None, alias="queueItemId")
    name: StrictStr = Field(...)
    status: Optional[StrictStr] = None
    execute_time: StrictStr = Field(..., alias="executeTime")
    method: StrictStr = Field(...)
    data: Optional[Dict[str, Any]] = None
    scheduled_job_id: Optional[StrictStr] = Field(None, alias="scheduledJobId")
    scheduled_job_job: Optional[StrictStr] = Field(None, alias="scheduledJobJob")
    pid: Optional[StrictInt] = None
    attempts: Optional[StrictInt] = None
    target_id: Optional[StrictStr] = Field(None, alias="targetId")
    target_type: Optional[StrictStr] = Field(None, alias="targetType")
    failed_attempts: Optional[StrictInt] = Field(None, alias="failedAttempts")
    __properties = ["queueItemId", "name", "status", "executeTime", "method", "data", "scheduledJobId", "scheduledJobJob", "pid", "attempts", "targetId", "targetType", "failedAttempts"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateJobItemRequest:
        """Create an instance of CreateJobItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateJobItemRequest:
        """Create an instance of CreateJobItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateJobItemRequest.parse_obj(obj)

        _obj = CreateJobItemRequest.parse_obj({
            "queue_item_id": obj.get("queueItemId"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "execute_time": obj.get("executeTime"),
            "method": obj.get("method"),
            "data": obj.get("data"),
            "scheduled_job_id": obj.get("scheduledJobId"),
            "scheduled_job_job": obj.get("scheduledJobJob"),
            "pid": obj.get("pid"),
            "attempts": obj.get("attempts"),
            "target_id": obj.get("targetId"),
            "target_type": obj.get("targetType"),
            "failed_attempts": obj.get("failedAttempts")
        })
        return _obj


