# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class CreatePortalItemRequest(BaseModel):
    """
    CreatePortalItemRequest
    """
    name: Optional[StrictStr] = None
    logo_id: Optional[StrictStr] = Field(None, alias="logoId")
    url: Optional[StrictStr] = None
    custom_id: Optional[StrictStr] = Field(None, alias="customId")
    is_active: Optional[StrictBool] = Field(None, alias="isActive")
    is_default: Optional[StrictBool] = Field(None, alias="isDefault")
    portal_roles_ids: Optional[conlist(StrictStr)] = Field(None, alias="portalRolesIds")
    tab_list: Optional[conlist(StrictStr)] = Field(None, alias="tabList")
    quick_create_list: Optional[conlist(StrictStr)] = Field(None, alias="quickCreateList")
    company_logo_id: Optional[StrictStr] = Field(None, alias="companyLogoId")
    theme: Optional[StrictStr] = None
    locale_id: Optional[StrictStr] = Field(None, alias="localeId")
    language: Optional[StrictStr] = None
    date_format: Optional[StrictStr] = Field(None, alias="dateFormat")
    time_format: Optional[StrictStr] = Field(None, alias="timeFormat")
    week_start: Optional[StrictInt] = Field(None, alias="weekStart")
    default_currency: Optional[StrictStr] = Field(None, alias="defaultCurrency")
    dashboard_layout: Optional[Dict[str, Any]] = Field(None, alias="dashboardLayout")
    dashlets_options: Optional[Dict[str, Any]] = Field(None, alias="dashletsOptions")
    custom_url: Optional[StrictStr] = Field(None, alias="customUrl")
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    __properties = ["name", "logoId", "url", "customId", "isActive", "isDefault", "portalRolesIds", "tabList", "quickCreateList", "companyLogoId", "theme", "localeId", "language", "dateFormat", "timeFormat", "weekStart", "defaultCurrency", "dashboardLayout", "dashletsOptions", "customUrl", "modifiedById"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePortalItemRequest:
        """Create an instance of CreatePortalItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePortalItemRequest:
        """Create an instance of CreatePortalItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePortalItemRequest.parse_obj(obj)

        _obj = CreatePortalItemRequest.parse_obj({
            "name": obj.get("name"),
            "logo_id": obj.get("logoId"),
            "url": obj.get("url"),
            "custom_id": obj.get("customId"),
            "is_active": obj.get("isActive"),
            "is_default": obj.get("isDefault"),
            "portal_roles_ids": obj.get("portalRolesIds"),
            "tab_list": obj.get("tabList"),
            "quick_create_list": obj.get("quickCreateList"),
            "company_logo_id": obj.get("companyLogoId"),
            "theme": obj.get("theme"),
            "locale_id": obj.get("localeId"),
            "language": obj.get("language"),
            "date_format": obj.get("dateFormat"),
            "time_format": obj.get("timeFormat"),
            "week_start": obj.get("weekStart"),
            "default_currency": obj.get("defaultCurrency"),
            "dashboard_layout": obj.get("dashboardLayout"),
            "dashlets_options": obj.get("dashletsOptions"),
            "custom_url": obj.get("customUrl"),
            "modified_by_id": obj.get("modifiedById")
        })
        return _obj


