# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class CreateProductAttributeValueItemRequest(BaseModel):
    """
    CreateProductAttributeValueItemRequest
    """
    product_id: Optional[StrictStr] = Field(None, alias="productId")
    attribute_id: Optional[StrictStr] = Field(None, alias="attributeId")
    language: Optional[StrictStr] = None
    scope: StrictStr = Field(...)
    channel_id: Optional[StrictStr] = Field(None, alias="channelId")
    is_variant_specific_attribute: Optional[StrictBool] = Field(None, alias="isVariantSpecificAttribute")
    count_bytes_instead_of_characters: Optional[StrictBool] = Field(None, alias="countBytesInsteadOfCharacters")
    amount_of_digits_after_comma: Optional[StrictInt] = Field(None, alias="amountOfDigitsAfterComma")
    value: Optional[StrictStr] = None
    attribute_type: Optional[StrictStr] = Field(None, alias="attributeType")
    attribute_asset_type: Optional[StrictStr] = Field(None, alias="attributeAssetType")
    attribute_tooltip: Optional[StrictStr] = Field(None, alias="attributeTooltip")
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    is_inherit_assigned_user: Optional[StrictBool] = Field(None, alias="isInheritAssignedUser")
    is_inherit_owner_user: Optional[StrictBool] = Field(None, alias="isInheritOwnerUser")
    is_inherit_teams: Optional[StrictBool] = Field(None, alias="isInheritTeams")
    owner_user_id: Optional[StrictStr] = Field(None, alias="ownerUserId")
    assigned_user_id: Optional[StrictStr] = Field(None, alias="assignedUserId")
    teams_ids: Optional[conlist(StrictStr)] = Field(None, alias="teamsIds")
    __properties = ["productId", "attributeId", "language", "scope", "channelId", "isVariantSpecificAttribute", "countBytesInsteadOfCharacters", "amountOfDigitsAfterComma", "value", "attributeType", "attributeAssetType", "attributeTooltip", "modifiedById", "isInheritAssignedUser", "isInheritOwnerUser", "isInheritTeams", "ownerUserId", "assignedUserId", "teamsIds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateProductAttributeValueItemRequest:
        """Create an instance of CreateProductAttributeValueItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateProductAttributeValueItemRequest:
        """Create an instance of CreateProductAttributeValueItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateProductAttributeValueItemRequest.parse_obj(obj)

        _obj = CreateProductAttributeValueItemRequest.parse_obj({
            "product_id": obj.get("productId"),
            "attribute_id": obj.get("attributeId"),
            "language": obj.get("language"),
            "scope": obj.get("scope"),
            "channel_id": obj.get("channelId"),
            "is_variant_specific_attribute": obj.get("isVariantSpecificAttribute"),
            "count_bytes_instead_of_characters": obj.get("countBytesInsteadOfCharacters"),
            "amount_of_digits_after_comma": obj.get("amountOfDigitsAfterComma"),
            "value": obj.get("value"),
            "attribute_type": obj.get("attributeType"),
            "attribute_asset_type": obj.get("attributeAssetType"),
            "attribute_tooltip": obj.get("attributeTooltip"),
            "modified_by_id": obj.get("modifiedById"),
            "is_inherit_assigned_user": obj.get("isInheritAssignedUser"),
            "is_inherit_owner_user": obj.get("isInheritOwnerUser"),
            "is_inherit_teams": obj.get("isInheritTeams"),
            "owner_user_id": obj.get("ownerUserId"),
            "assigned_user_id": obj.get("assignedUserId"),
            "teams_ids": obj.get("teamsIds")
        })
        return _obj


