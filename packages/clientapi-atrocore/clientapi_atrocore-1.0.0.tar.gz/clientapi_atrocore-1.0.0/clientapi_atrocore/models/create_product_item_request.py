# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class CreateProductItemRequest(BaseModel):
    """
    CreateProductItemRequest
    """
    name: StrictStr = Field(...)
    name_de_de: StrictStr = Field(..., alias="nameDeDe")
    classifications_ids: Optional[conlist(StrictStr)] = Field(None, alias="classificationsIds")
    brand_id: Optional[StrictStr] = Field(None, alias="brandId")
    sku: Optional[StrictStr] = None
    is_active: Optional[StrictBool] = Field(None, alias="isActive")
    amount: Optional[StrictStr] = None
    price: Optional[StrictStr] = None
    price_currency: Optional[StrictStr] = Field(None, alias="priceCurrency")
    product_status: StrictStr = Field(..., alias="productStatus")
    tax_id: Optional[StrictStr] = Field(None, alias="taxId")
    ean: Optional[StrictStr] = None
    mpn: Optional[StrictStr] = None
    packaging_id: Optional[StrictStr] = Field(None, alias="packagingId")
    uvp: Optional[StrictStr] = None
    tag: Optional[conlist(StrictStr)] = None
    long_description: Optional[StrictStr] = Field(None, alias="longDescription")
    long_description_de_de: Optional[StrictStr] = Field(None, alias="longDescriptionDeDe")
    product_serie_id: Optional[StrictStr] = Field(None, alias="productSerieId")
    parents_ids: Optional[conlist(StrictStr)] = Field(None, alias="parentsIds")
    sort_order: Optional[StrictInt] = Field(None, alias="sortOrder")
    data: Optional[Dict[str, Any]] = None
    catalog_id: Optional[StrictStr] = Field(None, alias="catalogId")
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    owner_user_id: Optional[StrictStr] = Field(None, alias="ownerUserId")
    assigned_user_id: Optional[StrictStr] = Field(None, alias="assignedUserId")
    teams_ids: Optional[conlist(StrictStr)] = Field(None, alias="teamsIds")
    sorting: Optional[StrictInt] = None
    contents_ids: Optional[conlist(StrictStr)] = Field(None, alias="contentsIds")
    is_inherit_assigned_user: Optional[StrictBool] = Field(None, alias="isInheritAssignedUser")
    is_inherit_owner_user: Optional[StrictBool] = Field(None, alias="isInheritOwnerUser")
    is_inherit_teams: Optional[StrictBool] = Field(None, alias="isInheritTeams")
    task_status: Optional[conlist(StrictStr)] = Field(None, alias="taskStatus")
    attachments: Optional[StrictStr] = None
    __properties = ["name", "nameDeDe", "classificationsIds", "brandId", "sku", "isActive", "amount", "price", "priceCurrency", "productStatus", "taxId", "ean", "mpn", "packagingId", "uvp", "tag", "longDescription", "longDescriptionDeDe", "productSerieId", "parentsIds", "sortOrder", "data", "catalogId", "modifiedById", "ownerUserId", "assignedUserId", "teamsIds", "sorting", "contentsIds", "isInheritAssignedUser", "isInheritOwnerUser", "isInheritTeams", "taskStatus", "attachments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateProductItemRequest:
        """Create an instance of CreateProductItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateProductItemRequest:
        """Create an instance of CreateProductItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateProductItemRequest.parse_obj(obj)

        _obj = CreateProductItemRequest.parse_obj({
            "name": obj.get("name"),
            "name_de_de": obj.get("nameDeDe"),
            "classifications_ids": obj.get("classificationsIds"),
            "brand_id": obj.get("brandId"),
            "sku": obj.get("sku"),
            "is_active": obj.get("isActive"),
            "amount": obj.get("amount"),
            "price": obj.get("price"),
            "price_currency": obj.get("priceCurrency"),
            "product_status": obj.get("productStatus"),
            "tax_id": obj.get("taxId"),
            "ean": obj.get("ean"),
            "mpn": obj.get("mpn"),
            "packaging_id": obj.get("packagingId"),
            "uvp": obj.get("uvp"),
            "tag": obj.get("tag"),
            "long_description": obj.get("longDescription"),
            "long_description_de_de": obj.get("longDescriptionDeDe"),
            "product_serie_id": obj.get("productSerieId"),
            "parents_ids": obj.get("parentsIds"),
            "sort_order": obj.get("sortOrder"),
            "data": obj.get("data"),
            "catalog_id": obj.get("catalogId"),
            "modified_by_id": obj.get("modifiedById"),
            "owner_user_id": obj.get("ownerUserId"),
            "assigned_user_id": obj.get("assignedUserId"),
            "teams_ids": obj.get("teamsIds"),
            "sorting": obj.get("sorting"),
            "contents_ids": obj.get("contentsIds"),
            "is_inherit_assigned_user": obj.get("isInheritAssignedUser"),
            "is_inherit_owner_user": obj.get("isInheritOwnerUser"),
            "is_inherit_teams": obj.get("isInheritTeams"),
            "task_status": obj.get("taskStatus"),
            "attachments": obj.get("attachments")
        })
        return _obj


