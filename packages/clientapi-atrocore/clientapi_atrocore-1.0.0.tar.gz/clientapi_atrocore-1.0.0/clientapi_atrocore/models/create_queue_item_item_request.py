# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class CreateQueueItemItemRequest(BaseModel):
    """
    CreateQueueItemItemRequest
    """
    name: StrictStr = Field(...)
    stream: Optional[StrictInt] = None
    data: Optional[Dict[str, Any]] = None
    parent_id: Optional[StrictStr] = Field(None, alias="parentId")
    sort_order: Optional[StrictStr] = Field(None, alias="sortOrder")
    priority: Optional[StrictStr] = None
    pid: Optional[StrictStr] = None
    md5_hash: Optional[StrictStr] = Field(None, alias="md5Hash")
    status: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    actions: Optional[Dict[str, Any]] = None
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    owner_user_id: Optional[StrictStr] = Field(None, alias="ownerUserId")
    assigned_user_id: Optional[StrictStr] = Field(None, alias="assignedUserId")
    teams_ids: Optional[conlist(StrictStr)] = Field(None, alias="teamsIds")
    __properties = ["name", "stream", "data", "parentId", "sortOrder", "priority", "pid", "md5Hash", "status", "message", "actions", "modifiedById", "ownerUserId", "assignedUserId", "teamsIds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateQueueItemItemRequest:
        """Create an instance of CreateQueueItemItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateQueueItemItemRequest:
        """Create an instance of CreateQueueItemItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateQueueItemItemRequest.parse_obj(obj)

        _obj = CreateQueueItemItemRequest.parse_obj({
            "name": obj.get("name"),
            "stream": obj.get("stream"),
            "data": obj.get("data"),
            "parent_id": obj.get("parentId"),
            "sort_order": obj.get("sortOrder"),
            "priority": obj.get("priority"),
            "pid": obj.get("pid"),
            "md5_hash": obj.get("md5Hash"),
            "status": obj.get("status"),
            "message": obj.get("message"),
            "actions": obj.get("actions"),
            "modified_by_id": obj.get("modifiedById"),
            "owner_user_id": obj.get("ownerUserId"),
            "assigned_user_id": obj.get("assignedUserId"),
            "teams_ids": obj.get("teamsIds")
        })
        return _obj


