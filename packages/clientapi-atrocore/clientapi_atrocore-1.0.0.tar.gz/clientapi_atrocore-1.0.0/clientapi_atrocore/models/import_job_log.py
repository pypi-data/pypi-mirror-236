# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class ImportJobLog(BaseModel):
    """
    ImportJobLog
    """
    id: Optional[StrictStr] = None
    deleted: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    import_job_id: Optional[StrictStr] = Field(None, alias="importJobId")
    import_job_name: Optional[StrictStr] = Field(None, alias="importJobName")
    type: Optional[StrictStr] = None
    entity_name: Optional[StrictStr] = Field(None, alias="entityName")
    entity_id: Optional[StrictStr] = Field(None, alias="entityId")
    message: Optional[StrictStr] = None
    row_number: Optional[StrictInt] = Field(None, alias="rowNumber")
    created_at: Optional[StrictStr] = Field(None, alias="createdAt")
    modified_at: Optional[StrictStr] = Field(None, alias="modifiedAt")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById")
    created_by_name: Optional[StrictStr] = Field(None, alias="createdByName")
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    modified_by_name: Optional[StrictStr] = Field(None, alias="modifiedByName")
    __properties = ["id", "deleted", "name", "importJobId", "importJobName", "type", "entityName", "entityId", "message", "rowNumber", "createdAt", "modifiedAt", "createdById", "createdByName", "modifiedById", "modifiedByName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImportJobLog:
        """Create an instance of ImportJobLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImportJobLog:
        """Create an instance of ImportJobLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImportJobLog.parse_obj(obj)

        _obj = ImportJobLog.parse_obj({
            "id": obj.get("id"),
            "deleted": obj.get("deleted"),
            "name": obj.get("name"),
            "import_job_id": obj.get("importJobId"),
            "import_job_name": obj.get("importJobName"),
            "type": obj.get("type"),
            "entity_name": obj.get("entityName"),
            "entity_id": obj.get("entityId"),
            "message": obj.get("message"),
            "row_number": obj.get("rowNumber"),
            "created_at": obj.get("createdAt"),
            "modified_at": obj.get("modifiedAt"),
            "created_by_id": obj.get("createdById"),
            "created_by_name": obj.get("createdByName"),
            "modified_by_id": obj.get("modifiedById"),
            "modified_by_name": obj.get("modifiedByName")
        })
        return _obj


