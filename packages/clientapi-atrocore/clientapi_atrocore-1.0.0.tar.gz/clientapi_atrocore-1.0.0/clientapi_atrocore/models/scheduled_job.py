# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class ScheduledJob(BaseModel):
    """
    ScheduledJob
    """
    id: Optional[StrictStr] = None
    deleted: Optional[StrictBool] = None
    name: StrictStr = Field(...)
    job: StrictStr = Field(...)
    status: StrictStr = Field(...)
    scheduling: StrictStr = Field(...)
    last_run: Optional[StrictStr] = Field(None, alias="lastRun")
    created_at: Optional[StrictStr] = Field(None, alias="createdAt")
    modified_at: Optional[StrictStr] = Field(None, alias="modifiedAt")
    created_by_id: Optional[StrictStr] = Field(None, alias="createdById")
    created_by_name: Optional[StrictStr] = Field(None, alias="createdByName")
    modified_by_id: Optional[StrictStr] = Field(None, alias="modifiedById")
    modified_by_name: Optional[StrictStr] = Field(None, alias="modifiedByName")
    is_internal: Optional[StrictBool] = Field(None, alias="isInternal")
    minimum_age: Optional[StrictInt] = None
    import_feed_id: Optional[StrictStr] = Field(None, alias="importFeedId")
    import_feed_name: Optional[StrictStr] = Field(None, alias="importFeedName")
    import_feeds_ids: Optional[conlist(StrictStr)] = Field(None, alias="importFeedsIds")
    import_feeds_names: Optional[Dict[str, Any]] = Field(None, alias="importFeedsNames")
    maximum_hours_to_look_back: Optional[StrictStr] = Field(None, alias="maximumHoursToLookBack")
    export_feed_id: Optional[StrictStr] = Field(None, alias="exportFeedId")
    export_feed_name: Optional[StrictStr] = Field(None, alias="exportFeedName")
    export_feeds_ids: Optional[conlist(StrictStr)] = Field(None, alias="exportFeedsIds")
    export_feeds_names: Optional[Dict[str, Any]] = Field(None, alias="exportFeedsNames")
    __properties = ["id", "deleted", "name", "job", "status", "scheduling", "lastRun", "createdAt", "modifiedAt", "createdById", "createdByName", "modifiedById", "modifiedByName", "isInternal", "minimum_age", "importFeedId", "importFeedName", "importFeedsIds", "importFeedsNames", "maximumHoursToLookBack", "exportFeedId", "exportFeedName", "exportFeedsIds", "exportFeedsNames"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScheduledJob:
        """Create an instance of ScheduledJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScheduledJob:
        """Create an instance of ScheduledJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScheduledJob.parse_obj(obj)

        _obj = ScheduledJob.parse_obj({
            "id": obj.get("id"),
            "deleted": obj.get("deleted"),
            "name": obj.get("name"),
            "job": obj.get("job"),
            "status": obj.get("status"),
            "scheduling": obj.get("scheduling"),
            "last_run": obj.get("lastRun"),
            "created_at": obj.get("createdAt"),
            "modified_at": obj.get("modifiedAt"),
            "created_by_id": obj.get("createdById"),
            "created_by_name": obj.get("createdByName"),
            "modified_by_id": obj.get("modifiedById"),
            "modified_by_name": obj.get("modifiedByName"),
            "is_internal": obj.get("isInternal"),
            "minimum_age": obj.get("minimum_age"),
            "import_feed_id": obj.get("importFeedId"),
            "import_feed_name": obj.get("importFeedName"),
            "import_feeds_ids": obj.get("importFeedsIds"),
            "import_feeds_names": obj.get("importFeedsNames"),
            "maximum_hours_to_look_back": obj.get("maximumHoursToLookBack"),
            "export_feed_id": obj.get("exportFeedId"),
            "export_feed_name": obj.get("exportFeedName"),
            "export_feeds_ids": obj.get("exportFeedsIds"),
            "export_feeds_names": obj.get("exportFeedsNames")
        })
        return _obj


