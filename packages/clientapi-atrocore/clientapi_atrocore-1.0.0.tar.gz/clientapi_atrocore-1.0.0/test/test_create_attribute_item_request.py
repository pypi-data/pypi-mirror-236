# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from clientapi_atrocore.models.create_attribute_item_request import CreateAttributeItemRequest  # noqa: E501

class TestCreateAttributeItemRequest(unittest.TestCase):
    """CreateAttributeItemRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateAttributeItemRequest:
        """Test CreateAttributeItemRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateAttributeItemRequest`
        """
        model = CreateAttributeItemRequest()  # noqa: E501
        if include_optional:
            return CreateAttributeItemRequest(
                name = '',
                name_de_de = '',
                modified_by_id = '',
                owner_user_id = '',
                assigned_user_id = '',
                teams_ids = [
                    ''
                    ],
                attribute_group_id = '',
                attribute_tab_id = '',
                extensible_enum_id = '',
                code = '',
                type = '',
                asset_type = '',
                is_multilang = True,
                pattern = '',
                unique = True,
                prohibited_empty_value = True,
                virtual_product_field = True,
                measure_id = '',
                default_unit = '',
                default_scope = '',
                default_channel_id = '',
                is_required = True,
                sort_order_in_attribute_group = 56,
                sort_order = 56,
                sort_order_in_product = 56,
                tooltip = '',
                tooltip_de_de = '',
                description = '',
                description_de_de = '',
                amount_of_digits_after_comma = 56,
                use_disabled_textarea_in_view_mode = True
            )
        else:
            return CreateAttributeItemRequest(
                name = '',
                name_de_de = '',
                type = '',
        )
        """

    def testCreateAttributeItemRequest(self):
        """Test CreateAttributeItemRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
