# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from clientapi_atrocore.models.import_feed import ImportFeed  # noqa: E501

class TestImportFeed(unittest.TestCase):
    """ImportFeed unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ImportFeed:
        """Test ImportFeed
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ImportFeed`
        """
        model = ImportFeed()  # noqa: E501
        if include_optional:
            return ImportFeed(
                id = '',
                deleted = True,
                name = '',
                code = '',
                description = '',
                max_per_job = 56,
                is_active = True,
                repeat_processing = '',
                type = '',
                data = None,
                file_id = '',
                file_name = '',
                sheet = 56,
                file_field_delimiter = '',
                format = '',
                file_text_qualifier = '',
                file_data_action = '',
                is_file_header_row = True,
                decimal_mark = '',
                thousand_separator = '',
                adapter = '',
                created_at = '',
                modified_at = '',
                created_by_id = '',
                created_by_name = '',
                modified_by_id = '',
                modified_by_name = '',
                owner_user_id = '',
                owner_user_name = '',
                assigned_user_id = '',
                assigned_user_name = '',
                teams_ids = [
                    ''
                    ],
                teams_names = None,
                entity = '',
                excluded_nodes = [
                    ''
                    ],
                kept_string_nodes = [
                    ''
                    ],
                delimiter = '',
                field_delimiter_for_relation = '',
                empty_value = '',
                null_value = '',
                mark_for_no_relation = '',
                source_fields = [
                    ''
                    ],
                connection_id = '',
                connection_name = '',
                last_time = '',
                assigned_accounts_ids = [
                    ''
                    ],
                assigned_accounts_names = None,
                last_status = ''
            )
        else:
            return ImportFeed(
                name = '',
                repeat_processing = '',
                type = '',
                decimal_mark = '',
                entity = '',
                delimiter = '',
                field_delimiter_for_relation = '',
        )
        """

    def testImportFeed(self):
        """Test ImportFeed"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
