# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from clientapi_atrocore.models.product import Product  # noqa: E501

class TestProduct(unittest.TestCase):
    """Product unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Product:
        """Test Product
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Product`
        """
        model = Product()  # noqa: E501
        if include_optional:
            return Product(
                id = '',
                deleted = True,
                name = '',
                name_de_de = '',
                classifications_ids = [
                    ''
                    ],
                classifications_names = None,
                brand_id = '',
                brand_name = '',
                sku = '',
                is_active = True,
                amount = '',
                price = '',
                price_currency = '',
                product_status = '',
                tax_id = '',
                tax_name = '',
                ean = '',
                mpn = '',
                packaging_id = '',
                packaging_name = '',
                uvp = '',
                tag = [
                    ''
                    ],
                long_description = '',
                long_description_de_de = '',
                product_serie_id = '',
                product_serie_name = '',
                parents_ids = [
                    ''
                    ],
                parents_names = None,
                sort_order = 56,
                data = None,
                catalog_id = '',
                catalog_name = '',
                created_at = '',
                modified_at = '',
                created_by_id = '',
                created_by_name = '',
                modified_by_id = '',
                modified_by_name = '',
                owner_user_id = '',
                owner_user_name = '',
                assigned_user_id = '',
                assigned_user_name = '',
                teams_ids = [
                    ''
                    ],
                teams_names = None,
                sorting = 56,
                contents_ids = [
                    ''
                    ],
                contents_names = None,
                is_inherit_assigned_user = True,
                is_inherit_owner_user = True,
                is_inherit_teams = True,
                task_status = [
                    ''
                    ],
                attachments = ''
            )
        else:
            return Product(
                name = '',
                name_de_de = '',
                product_status = '',
        )
        """

    def testProduct(self):
        """Test Product"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
