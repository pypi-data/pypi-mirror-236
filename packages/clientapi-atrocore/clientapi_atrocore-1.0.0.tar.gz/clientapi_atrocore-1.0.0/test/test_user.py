# coding: utf-8

"""
    AtroCore REST API documentation

    This is a REST API documentation for AtroCore data platform and its modules (AtroPIM, AtroDAM and others), which is based on [OpenAPI (Swagger) Specification](https://swagger.io/specification/). You can generate your client [here](https://openapi-generator.tech/docs/generators).<br><br><h3>Video tutorials:</h3><ul><li>[How to authorize?](https://youtu.be/GWfNRvCswXg)</li><li>[How to select specific fields?](https://youtu.be/i7o0aENuyuY)</li><li>[How to filter data records?](https://youtu.be/irgWkN4wlkM)</li></ul>

    The version of the OpenAPI document: 1.6.55
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from clientapi_atrocore.models.user import User  # noqa: E501

class TestUser(unittest.TestCase):
    """User unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> User:
        """Test User
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `User`
        """
        model = User()  # noqa: E501
        if include_optional:
            return User(
                id = '',
                deleted = True,
                type = '',
                account_id = '',
                account_name = '',
                is_admin = True,
                user_name = '',
                name = '',
                password = '',
                password_confirm = '',
                salutation_name = '',
                first_name = '',
                last_name = '',
                is_active = True,
                is_portal_user = True,
                is_super_admin = True,
                title = '',
                position = '',
                email_address = '',
                phone_number = '',
                token = '',
                auth_token_id = '',
                auth_log_record_id = '',
                ip_address = '',
                default_team_id = '',
                default_team_name = '',
                acceptance_status = '',
                team_role = '',
                teams_ids = [
                    ''
                    ],
                teams_names = None,
                roles_ids = [
                    ''
                    ],
                roles_names = None,
                portal_id = '',
                portal_name = '',
                portal_roles_ids = [
                    ''
                    ],
                portal_roles_names = None,
                avatar_id = '',
                avatar_name = '',
                send_access_info = True,
                gender = '',
                created_at = '',
                created_by_id = '',
                created_by_name = '',
                last_access = ''
            )
        else:
            return User(
                user_name = '',
                last_name = '',
                email_address = '',
        )
        """

    def testUser(self):
        """Test User"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
