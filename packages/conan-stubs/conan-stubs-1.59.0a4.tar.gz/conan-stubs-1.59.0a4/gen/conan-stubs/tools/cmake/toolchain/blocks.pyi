from _typeshed import Incomplete
from conan.tools._compilers import architecture_flag as architecture_flag, libcxx_flags as libcxx_flags
from conan.tools.android.utils import android_abi as android_abi
from conan.tools.apple.apple import is_apple_os as is_apple_os, to_apple_arch as to_apple_arch
from conan.tools.build import build_jobs as build_jobs
from conan.tools.build.cross_building import cross_building as cross_building
from conan.tools.cmake.toolchain import CONAN_TOOLCHAIN_FILENAME as CONAN_TOOLCHAIN_FILENAME
from conan.tools.intel import IntelCC as IntelCC
from conan.tools.microsoft.visual import msvc_version_to_toolset_version as msvc_version_to_toolset_version

class ToolchainBlocks:
    _blocks: Incomplete
    _conanfile: Incomplete
    _toolchain: Incomplete
    def __init__(self, conanfile, toolchain, items: Incomplete | None = ...) -> None: ...
    def remove(self, name) -> None: ...
    def __setitem__(self, name, block_type) -> None: ...
    def __getitem__(self, name): ...
    def process_blocks(self): ...

class Block:
    _conanfile: Incomplete
    _toolchain: Incomplete
    _context_values: Incomplete
    def __init__(self, conanfile, toolchain) -> None: ...
    @property
    def values(self): ...
    def get_rendered_content(self): ...
    def context(self): ...
    @property
    def template(self) -> None: ...

class VSRuntimeBlock(Block):
    template: Incomplete
    def context(self): ...

class FPicBlock(Block):
    template: Incomplete
    def context(self): ...

class GLibCXXBlock(Block):
    template: Incomplete
    def context(self): ...

class SkipRPath(Block):
    template: Incomplete
    skip_rpath: bool
    def context(self): ...

class ArchitectureBlock(Block):
    template: Incomplete
    def context(self): ...

class LinkerScriptsBlock(Block):
    template: Incomplete
    def context(self): ...

class CppStdBlock(Block):
    template: Incomplete
    def context(self): ...

class SharedLibBock(Block):
    template: Incomplete
    def context(self): ...

class ParallelBlock(Block):
    template: Incomplete
    def context(self): ...

class AndroidSystemBlock(Block):
    template: Incomplete
    def context(self): ...

class AppleSystemBlock(Block):
    template: Incomplete
    def _apple_sdk_name(self): ...
    def context(self): ...

class FindFiles(Block):
    template: Incomplete
    @staticmethod
    def _join_paths(paths): ...
    def context(self): ...

class PkgConfigBlock(Block):
    template: Incomplete
    def context(self): ...

class UserToolchain(Block):
    template: Incomplete
    def context(self): ...

class ExtraFlagsBlock(Block):
    template: Incomplete
    def context(self): ...

class CMakeFlagsInitBlock(Block):
    template: Incomplete

class TryCompileBlock(Block):
    template: Incomplete

class CompilersBlock(Block):
    template: Incomplete
    def context(self): ...

class GenericSystemBlock(Block):
    template: Incomplete
    def _get_toolset(self, generator): ...
    def _get_generator_platform(self, generator): ...
    def _get_generic_system_name(self): ...
    def _is_apple_cross_building(self): ...
    def _get_cross_build(self): ...
    def context(self): ...

class OutputDirsBlock(Block):
    @property
    def template(self): ...
    def _get_cpp_info_value(self, name): ...
    def context(self): ...
