from _typeshed import Incomplete
from collections.abc import Generator
from conan.tools import CONAN_TOOLCHAIN_ARGS_FILE as CONAN_TOOLCHAIN_ARGS_FILE, CONAN_TOOLCHAIN_ARGS_SECTION as CONAN_TOOLCHAIN_ARGS_SECTION
from conans.util.runners import check_output_runner as check_output_runner

def load(conanfile, path, encoding: str = ...): ...
def save(conanfile, path, content, append: bool = ..., encoding: str = ...) -> None: ...
def mkdir(conanfile, path) -> None: ...
def rmdir(conanfile, path) -> None: ...
def rm(conanfile, pattern, folder, recursive: bool = ...) -> None: ...
def get(conanfile, url, md5: Incomplete | None = ..., sha1: Incomplete | None = ..., sha256: Incomplete | None = ..., destination: str = ..., filename: str = ..., keep_permissions: bool = ..., pattern: Incomplete | None = ..., verify: bool = ..., retry: Incomplete | None = ..., retry_wait: Incomplete | None = ..., auth: Incomplete | None = ..., headers: Incomplete | None = ..., strip_root: bool = ...) -> None: ...
def ftp_download(conanfile, ip, filename, login: str = ..., password: str = ...) -> None: ...
def download(conanfile, url, filename, verify: bool = ..., retry: Incomplete | None = ..., retry_wait: Incomplete | None = ..., auth: Incomplete | None = ..., headers: Incomplete | None = ..., md5: Incomplete | None = ..., sha1: Incomplete | None = ..., sha256: Incomplete | None = ...) -> None: ...
def _copy_local_file_from_uri(conanfile, url, file_path, md5: Incomplete | None = ..., sha1: Incomplete | None = ..., sha256: Incomplete | None = ...) -> None: ...
def _path_from_file_uri(uri): ...
def rename(conanfile, src, dst) -> None: ...
def load_toolchain_args(generators_folder: Incomplete | None = ..., namespace: Incomplete | None = ...): ...
def save_toolchain_args(content, generators_folder: Incomplete | None = ..., namespace: Incomplete | None = ...) -> None: ...
def chdir(conanfile, newdir) -> Generator[None, None, None]: ...
def unzip(conanfile, filename, destination: str = ..., keep_permissions: bool = ..., pattern: Incomplete | None = ..., strip_root: bool = ...): ...
def untargz(filename, destination: str = ..., pattern: Incomplete | None = ..., strip_root: bool = ...): ...
def _human_size(size_bytes): ...
def check_sha1(conanfile, file_path, signature) -> None: ...
def check_md5(conanfile, file_path, signature) -> None: ...
def check_sha256(conanfile, file_path, signature) -> None: ...
def _check_with_algorithm_sum(algorithm_name, file_path, signature) -> None: ...
def _generic_algorithm_sum(file_path, algorithm_name): ...
def replace_in_file(conanfile, file_path, search, replace, strict: bool = ..., encoding: str = ...): ...
def collect_libs(conanfile, folder: Incomplete | None = ...): ...
def swap_child_folder(parent_folder, child_folder) -> None: ...
