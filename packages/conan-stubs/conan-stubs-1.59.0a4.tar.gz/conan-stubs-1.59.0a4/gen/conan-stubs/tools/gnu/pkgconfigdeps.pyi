from _typeshed import Incomplete
from conan.tools.gnu.gnudeps_flags import GnuDepsFlags as GnuDepsFlags
from typing import NamedTuple

def _get_name_with_namespace(namespace, name): ...
def _get_package_reference_name(dep): ...
def _get_package_aliases(dep): ...
def _get_component_aliases(dep, comp_name): ...
def _get_package_name(dep, build_context_suffix: Incomplete | None = ...): ...
def _get_component_name(dep, comp_name, build_context_suffix: Incomplete | None = ...): ...
def _get_suffix(req, build_context_suffix: Incomplete | None = ...): ...
def _get_formatted_dirs(folders, prefix_path_): ...

class _PCInfo(NamedTuple):
    name: Incomplete
    requires: Incomplete
    description: Incomplete
    cpp_info: Incomplete
    aliases: Incomplete

class _PCContentGenerator:
    template: Incomplete
    shortened_template: Incomplete
    _conanfile: Incomplete
    _dep: Incomplete
    def __init__(self, conanfile, dep) -> None: ...
    def content(self, info): ...
    def shortened_content(self, info): ...

class _PCGenerator:
    _conanfile: Incomplete
    _build_context_suffix: Incomplete
    _dep: Incomplete
    _content_generator: Incomplete
    def __init__(self, conanfile, dep, build_context_suffix: Incomplete | None = ...) -> None: ...
    def _get_cpp_info_requires_names(self, cpp_info): ...
    @property
    def components_info(self): ...
    @property
    def package_info(self): ...
    @property
    def pc_files(self): ...

class PkgConfigDeps:
    _conanfile: Incomplete
    build_context_activated: Incomplete
    build_context_suffix: Incomplete
    def __init__(self, conanfile) -> None: ...
    def _validate_build_requires(self, host_req, build_req) -> None: ...
    @property
    def content(self): ...
    def generate(self) -> None: ...
