from _typeshed import Incomplete
from collections.abc import Generator
from conans import __version__ as __version__
from conans.client.cache.cache import ClientCache as ClientCache
from conans.client.rest import response_to_str as response_to_str
from conans.errors import AuthenticationException as AuthenticationException, ConanException as ConanException, RequestErrorException as RequestErrorException
from conans.model.graph_lock import LOCKFILE_VERSION as LOCKFILE_VERSION
from conans.model.ref import ConanFileReference as ConanFileReference
from conans.paths import ARTIFACTS_PROPERTIES_PUT_PREFIX as ARTIFACTS_PROPERTIES_PUT_PREFIX, get_conan_user_home as get_conan_user_home
from conans.util.files import save as save
from typing import NamedTuple

class Artifact(NamedTuple('Artifact', [('sha1', Incomplete), ('md5', Incomplete), ('name', Incomplete), ('id', Incomplete), ('path', Incomplete)])):
    def __hash__(self): ...

def _parse_options(contents) -> Generator[Incomplete, None, None]: ...
def _parse_profile(contents) -> Generator[Incomplete, None, None]: ...

class BuildInfoCreator:
    _build_info_file: Incomplete
    _lockfile: Incomplete
    _user: Incomplete
    _password: Incomplete
    _apikey: Incomplete
    _output: Incomplete
    _conan_cache: Incomplete
    def __init__(self, output, build_info_file, lockfile, user: Incomplete | None = ..., password: Incomplete | None = ..., apikey: Incomplete | None = ...) -> None: ...
    def parse_ref(self, ref): ...
    def _get_reference(self, ref): ...
    def _get_package_reference(self, ref, pid, prev): ...
    def _get_metadata_artifacts(self, metadata, ref_path, use_id: bool = ..., name_format: str = ..., package_id: Incomplete | None = ...): ...
    def _get_repo(self, ref): ...
    def _get_recipe_rev(self, ref): ...
    def _get_user_channel(self, ref): ...
    def _get_recipe_path(self, ref): ...
    def _get_package_path(self, ref, pid, prev): ...
    def _get_metadata(self, ref): ...
    def _get_recipe_artifacts(self, ref, is_dependency): ...
    def _get_package_artifacts(self, ref, pid, prev, is_dependency): ...
    def process_lockfile(self): ...
    def create(self): ...

def create_build_info(output, build_info_file, lockfile, user, password, apikey) -> None: ...
def start_build_info(output, build_name, build_number) -> None: ...
def stop_build_info(output) -> None: ...
def publish_build_info(build_info_file, url, user, password, apikey) -> None: ...
def find_module(build_info, module_id): ...
def merge_artifacts(lhs, rhs, key, cmp_key): ...
def merge_buildinfo(lhs, rhs): ...
def update_build_info(buildinfo, output_file) -> None: ...
