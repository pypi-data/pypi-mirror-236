import argparse
from _typeshed import Incomplete
from conans.errors import ConanException as ConanException

class Extender(argparse.Action):
    def __call__(self, parser, namespace, values, option_strings: Incomplete | None = ...) -> None: ...

class OnceArgument(argparse.Action):
    def __call__(self, parser, namespace, values, option_string: Incomplete | None = ...) -> None: ...

class SmartFormatter(argparse.HelpFormatter):
    def _fill_text(self, text, width, indent): ...

class BaseConanCommand:
    _formatters: Incomplete
    _method: Incomplete
    _doc: Incomplete
    def __init__(self, method, formatters: Incomplete | None = ...) -> None: ...
    def _init_formatters(self) -> None: ...
    @property
    def name(self): ...
    @property
    def method(self): ...
    @property
    def doc(self): ...
    @property
    def parser(self): ...

class ConanCommand(BaseConanCommand):
    _subcommands: Incomplete
    _subcommand_parser: Incomplete
    _group: Incomplete
    _name: Incomplete
    _parser: Incomplete
    def __init__(self, method, group, formatters: Incomplete | None = ...) -> None: ...
    def add_subcommand(self, subcommand) -> None: ...
    def run(self, conan_api, parser, *args, **kwargs) -> None: ...
    @property
    def group(self): ...

class ConanSubCommand(BaseConanCommand):
    _parent_parser: Incomplete
    _parser: Incomplete
    _name: Incomplete
    def __init__(self, method, formatters: Incomplete | None = ...) -> None: ...
    def run(self, conan_api, *args) -> None: ...
    def set_parser(self, parent_parser, subcommand_parser) -> None: ...

def conan_command(group, formatters: Incomplete | None = ...): ...
def conan_subcommand(formatters: Incomplete | None = ...): ...
