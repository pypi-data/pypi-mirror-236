import logging
from _typeshed import Incomplete
from conans.util.env_reader import get_env as get_env

class Color:
    RED: Incomplete
    WHITE: Incomplete
    CYAN: Incomplete
    GREEN: Incomplete
    MAGENTA: Incomplete
    BLUE: Incomplete
    YELLOW: Incomplete
    BLACK: Incomplete
    BRIGHT_RED: Incomplete
    BRIGHT_BLUE: Incomplete
    BRIGHT_YELLOW: Incomplete
    BRIGHT_GREEN: Incomplete
    BRIGHT_CYAN: Incomplete
    BRIGHT_WHITE: Incomplete
    BRIGHT_MAGENTA: Incomplete

class NullHandler(logging.Handler):
    def handle(self, record) -> None: ...
    def emit(self, record) -> None: ...
    lock: Incomplete
    def createLock(self) -> None: ...

class TqdmHandler(logging.StreamHandler):
    _stream: Incomplete
    def __init__(self, stream: Incomplete | None = ...) -> None: ...
    def emit(self, record) -> None: ...

class ConanOutput:
    _logger: Incomplete
    _stream_handler: Incomplete
    _quiet: Incomplete
    _color: Incomplete
    _stream: Incomplete
    _scope: str
    def __init__(self, quiet: bool = ...) -> None: ...
    @property
    def stream(self): ...
    @property
    def color(self): ...
    @property
    def scope(self): ...
    @property
    def is_terminal(self): ...
    def _write(self, msg, level, fg: Incomplete | None = ..., bg: Incomplete | None = ...) -> None: ...
    def debug(self, msg) -> None: ...
    def info(self, msg, fg: Incomplete | None = ..., bg: Incomplete | None = ...) -> None: ...
    def warn(self, msg) -> None: ...
    def warning(self, msg) -> None: ...
    def error(self, msg) -> None: ...
    def critical(self, msg) -> None: ...
    def flush(self) -> None: ...
    @staticmethod
    def _init_colors(): ...
