from _typeshed import Incomplete
from conans.client import tools as tools
from conans.client.build import defs_to_string as defs_to_string, join_arguments as join_arguments
from conans.client.build.cmake_flags import CMakeDefinitionsBuilder as CMakeDefinitionsBuilder, build_type_definition as build_type_definition, cmake_in_local_cache_var_name as cmake_in_local_cache_var_name, cmake_install_prefix_var_name as cmake_install_prefix_var_name, get_generator as get_generator, get_generator_platform as get_generator_platform, get_toolset as get_toolset, is_generator_platform_supported as is_generator_platform_supported, is_multi_configuration as is_multi_configuration, is_toolset_supported as is_toolset_supported, runtime_definition_var_name as runtime_definition_var_name, verbose_definition as verbose_definition, verbose_definition_name as verbose_definition_name
from conans.client.output import ConanOutput as ConanOutput
from conans.client.tools.env import _environment_add as _environment_add, environment_append as environment_append
from conans.client.tools.oss import args_to_string as args_to_string, cpu_count as cpu_count
from conans.errors import ConanException as ConanException
from conans.model.version import Version as Version
from conans.util.conan_v2_mode import conan_v2_error as conan_v2_error
from conans.util.config_parser import get_bool_from_text as get_bool_from_text
from conans.util.env_reader import get_env as get_env
from conans.util.files import decode_text as decode_text, get_abs_path as get_abs_path, mkdir as mkdir, walk as walk
from conans.util.runners import version_runner as version_runner

class CMake:
    _append_vcvars: Incomplete
    _conanfile: Incomplete
    _settings: Incomplete
    _build_type: Incomplete
    _cmake_program: Incomplete
    parallel: Incomplete
    definitions: Incomplete
    toolset: Incomplete
    build_dir: Incomplete
    msbuild_verbosity: Incomplete
    def __init__(self, conanfile, generator: Incomplete | None = ..., cmake_system_name: bool = ..., parallel: bool = ..., build_type: Incomplete | None = ..., toolset: Incomplete | None = ..., make_program: Incomplete | None = ..., set_cmake_flags: bool = ..., msbuild_verbosity: str = ..., cmake_program: Incomplete | None = ..., generator_platform: Incomplete | None = ..., append_vcvars: bool = ...) -> None: ...
    @property
    def generator(self): ...
    @property
    def generator_platform(self): ...
    @property
    def build_folder(self): ...
    @property
    def build_type(self): ...
    @property
    def in_local_cache(self): ...
    @property
    def runtime(self): ...
    @property
    def flags(self): ...
    @property
    def is_multi_configuration(self): ...
    @property
    def command_line(self): ...
    @property
    def build_config(self): ...
    def _get_dirs(self, source_folder, build_folder, source_dir, build_dir, cache_build_folder): ...
    def _run(self, command) -> None: ...
    def configure(self, args: Incomplete | None = ..., defs: Incomplete | None = ..., source_dir: Incomplete | None = ..., build_dir: Incomplete | None = ..., source_folder: Incomplete | None = ..., build_folder: Incomplete | None = ..., cache_build_folder: Incomplete | None = ..., pkg_config_paths: Incomplete | None = ...) -> None: ...
    def build(self, args: Incomplete | None = ..., build_dir: Incomplete | None = ..., target: Incomplete | None = ...) -> None: ...
    def _build(self, args: Incomplete | None = ..., build_dir: Incomplete | None = ..., target: Incomplete | None = ...) -> None: ...
    def install(self, args: Incomplete | None = ..., build_dir: Incomplete | None = ...) -> None: ...
    def test(self, args: Incomplete | None = ..., build_dir: Incomplete | None = ..., target: Incomplete | None = ..., output_on_failure: bool = ...) -> None: ...
    @property
    def verbose(self): ...
    def patch_config_paths(self) -> None: ...
    @staticmethod
    def get_version(): ...
