from _typeshed import Incomplete
from conans.client.build.compiler_flags import build_type_define as build_type_define, build_type_flags as build_type_flags, format_defines as format_defines, include_path_option as include_path_option, parallel_compiler_cl_flag as parallel_compiler_cl_flag, visual_runtime as visual_runtime
from conans.client.build.cppstd_flags import cppstd_from_settings as cppstd_from_settings
from conans.client.tools.files import VALID_LIB_EXTENSIONS as VALID_LIB_EXTENSIONS

class VisualStudioBuildEnvironment:
    _with_build_type_flags: Incomplete
    _conanfile: Incomplete
    _settings: Incomplete
    _deps_cpp_info: Incomplete
    _runtime: Incomplete
    include_paths: Incomplete
    lib_paths: Incomplete
    defines: Incomplete
    flags: Incomplete
    cxx_flags: Incomplete
    link_flags: Incomplete
    libs: Incomplete
    std: Incomplete
    parallel: bool
    def __init__(self, conanfile, with_build_type_flags: bool = ...) -> None: ...
    def _configure_link_flags(self): ...
    def _configure_flags(self): ...
    def _get_cl_list(self, quotes: bool = ...): ...
    def _get_link_list(self): ...
    @property
    def vars(self): ...
    @property
    def vars_dict(self): ...
    def _std_cpp(self): ...

def vs_build_type_flags(settings, with_flags: bool = ...): ...
def vs_std_cpp(settings): ...
def _environ_value_prefix(var_name, prefix: str = ...): ...
