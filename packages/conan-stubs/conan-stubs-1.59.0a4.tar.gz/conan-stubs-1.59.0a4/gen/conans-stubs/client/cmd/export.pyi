from _typeshed import Incomplete
from conans.client.file_copier import FileCopier as FileCopier
from conans.client.output import Color as Color, ScopedOutput as ScopedOutput
from conans.client.remover import DiskRemover as DiskRemover
from conans.client.tools import chdir as chdir
from conans.errors import ConanException as ConanException, ConanV2Exception as ConanV2Exception, conanfile_exception_formatter as conanfile_exception_formatter
from conans.model.manifest import FileTreeManifest as FileTreeManifest
from conans.model.ref import ConanFileReference as ConanFileReference
from conans.model.scm import SCM as SCM, get_scm_data as get_scm_data
from conans.paths import CONANFILE as CONANFILE, DATA_YML as DATA_YML
from conans.search.search import search_packages as search_packages, search_recipes as search_recipes
from conans.util.conan_v2_mode import conan_v2_error as conan_v2_error
from conans.util.files import clean_dirty as clean_dirty, is_dirty as is_dirty, load as load, merge_directories as merge_directories, mkdir as mkdir, remove as remove, rmdir as rmdir, save as save, set_dirty as set_dirty
from conans.util.log import logger as logger

isPY38: Incomplete

def export_alias(package_layout, target_ref, output, revisions_enabled) -> None: ...
def check_casing_conflict(cache, ref) -> None: ...
def cmd_export(app, conanfile_path, name, version, user, channel, keep_source, export: bool = ..., graph_lock: Incomplete | None = ..., ignore_dirty: bool = ...): ...
def _check_settings_for_warnings(conanfile, output) -> None: ...
def _capture_scm_auto_fields(conanfile, conanfile_dir, package_layout, output, ignore_dirty, scm_to_conandata): ...
def _replace_scm_data_in_recipe(package_layout, scm_data, scm_to_conandata) -> None: ...
def _replace_scm_data_in_conanfile(conanfile_path, scm_data) -> None: ...
def _detect_scm_revision(path): ...
def _update_revision_in_metadata(package_layout, revisions_enabled, output, path, manifest, revision_mode): ...
def _classify_patterns(patterns): ...
def _export_scm(scm_data, origin_folder, scm_sources_folder, output) -> None: ...
def export_source(conanfile, origin_folder, destination_source_folder) -> None: ...
def export_recipe(conanfile, origin_folder, destination_folder) -> None: ...
def _run_method(conanfile, method, origin_folder, destination_folder, output) -> None: ...
