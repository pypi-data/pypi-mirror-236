from _typeshed import Incomplete
from conans.client.cache.cache import ClientCache as ClientCache
from conans.client.cmd.build import cmd_build as cmd_build
from conans.client.cmd.create import create as create
from conans.client.cmd.download import download as download
from conans.client.cmd.export import cmd_export as cmd_export, export_alias as export_alias
from conans.client.cmd.export_pkg import export_pkg as export_pkg
from conans.client.cmd.profile import cmd_profile_create as cmd_profile_create, cmd_profile_delete_key as cmd_profile_delete_key, cmd_profile_get as cmd_profile_get, cmd_profile_list as cmd_profile_list, cmd_profile_update as cmd_profile_update
from conans.client.cmd.search import Search as Search
from conans.client.cmd.test import install_build_and_test as install_build_and_test
from conans.client.cmd.uploader import CmdUpload as CmdUpload
from conans.client.cmd.user import token_present as token_present, user_set as user_set, users_clean as users_clean, users_list as users_list
from conans.client.conanfile.package import run_package_method as run_package_method
from conans.client.conf.required_version import check_required_conan_version as check_required_conan_version
from conans.client.generators import GeneratorManager as GeneratorManager
from conans.client.graph.graph import RECIPE_EDITABLE as RECIPE_EDITABLE
from conans.client.graph.graph_binaries import GraphBinariesAnalyzer as GraphBinariesAnalyzer
from conans.client.graph.graph_manager import GraphManager as GraphManager
from conans.client.graph.printer import print_graph as print_graph
from conans.client.graph.proxy import ConanProxy as ConanProxy
from conans.client.graph.python_requires import ConanPythonRequire as ConanPythonRequire, PyRequireLoader as PyRequireLoader
from conans.client.graph.range_resolver import RangeResolver as RangeResolver
from conans.client.hook_manager import HookManager as HookManager
from conans.client.importer import run_imports as run_imports, undo_imports as undo_imports
from conans.client.installer import BinaryInstaller as BinaryInstaller
from conans.client.loader import ConanFileLoader as ConanFileLoader
from conans.client.manager import deps_install as deps_install
from conans.client.migrations import ClientMigrator as ClientMigrator
from conans.client.output import ConanOutput as ConanOutput, colorama_initialize as colorama_initialize
from conans.client.profile_loader import profile_from_args as profile_from_args, read_profile as read_profile
from conans.client.recorder.action_recorder import ActionRecorder as ActionRecorder
from conans.client.recorder.search_recorder import SearchRecorder as SearchRecorder
from conans.client.recorder.upload_recoder import UploadRecorder as UploadRecorder
from conans.client.remote_manager import RemoteManager as RemoteManager
from conans.client.remover import ConanRemover as ConanRemover
from conans.client.rest.auth_manager import ConanApiAuthManager as ConanApiAuthManager
from conans.client.rest.conan_requester import ConanRequester as ConanRequester
from conans.client.rest.rest_client import RestApiClientFactory as RestApiClientFactory
from conans.client.runner import ConanRunner as ConanRunner
from conans.client.source import config_source_local as config_source_local
from conans.client.tools.env import environment_append as environment_append
from conans.client.userio import UserIO as UserIO
from conans.errors import ConanException as ConanException, NoRestV2Available as NoRestV2Available, NotFoundException as NotFoundException, PackageNotFoundException as PackageNotFoundException, RecipeNotFoundException as RecipeNotFoundException
from conans.model.editable_layout import get_editable_abs_path as get_editable_abs_path
from conans.model.graph_info import GRAPH_INFO_FILE as GRAPH_INFO_FILE, GraphInfo as GraphInfo
from conans.model.graph_lock import GraphLock as GraphLock, GraphLockFile as GraphLockFile, LOCKFILE as LOCKFILE
from conans.model.lock_bundle import LockBundle as LockBundle
from conans.model.ref import ConanFileReference as ConanFileReference, PackageReference as PackageReference, check_valid_ref as check_valid_ref
from conans.model.version import Version as Version
from conans.model.workspace import Workspace as Workspace
from conans.paths import BUILD_INFO as BUILD_INFO, CONANINFO as CONANINFO, get_conan_user_home as get_conan_user_home
from conans.paths.package_layouts.package_cache_layout import PackageCacheLayout as PackageCacheLayout
from conans.search.search import search_recipes as search_recipes
from conans.tools import set_global_instances as set_global_instances
from conans.util.conan_v2_mode import conan_v2_error as conan_v2_error
from conans.util.files import exception_message_safe as exception_message_safe, load as load, mkdir as mkdir, save as save, save_files as save_files
from conans.util.log import configure_logger as configure_logger
from conans.util.tracer import log_command as log_command, log_exception as log_exception
from typing import NamedTuple

default_manifest_folder: str

class ProfileData(NamedTuple('ProfileData', [('profiles', Incomplete), ('settings', Incomplete), ('options', Incomplete), ('env', Incomplete), ('conf', Incomplete)])):
    def __bool__(self) -> bool: ...
    __nonzero__ = __bool__

def api_method(f): ...
def _make_abs_path(path, cwd: Incomplete | None = ..., default: Incomplete | None = ...): ...
def _get_conanfile_path(path, cwd, py): ...

class ConanApp:
    user_io: Incomplete
    out: Incomplete
    cache_folder: Incomplete
    cache: Incomplete
    config: Incomplete
    hook_manager: Incomplete
    requester: Incomplete
    remote_manager: Incomplete
    runner: Incomplete
    proxy: Incomplete
    range_resolver: Incomplete
    generator_manager: Incomplete
    python_requires: Incomplete
    pyreq_loader: Incomplete
    loader: Incomplete
    binaries_analyzer: Incomplete
    graph_manager: Incomplete
    def __init__(self, cache_folder, user_io, http_requester: Incomplete | None = ..., runner: Incomplete | None = ..., quiet_output: Incomplete | None = ...) -> None: ...
    def load_remotes(self, remote_name: Incomplete | None = ..., update: bool = ..., check_updates: bool = ...): ...

class ConanAPIV1:
    @classmethod
    def factory(cls): ...
    color: Incomplete
    out: Incomplete
    user_io: Incomplete
    cache_folder: Incomplete
    http_requester: Incomplete
    runner: Incomplete
    app: Incomplete
    def __init__(self, cache_folder: Incomplete | None = ..., output: Incomplete | None = ..., user_io: Incomplete | None = ..., http_requester: Incomplete | None = ..., runner: Incomplete | None = ...) -> None: ...
    def create_app(self, quiet_output: Incomplete | None = ...) -> None: ...
    def new(self, name, header: bool = ..., pure_c: bool = ..., test: bool = ..., exports_sources: bool = ..., bare: bool = ..., cwd: Incomplete | None = ..., visual_versions: Incomplete | None = ..., linux_gcc_versions: Incomplete | None = ..., linux_clang_versions: Incomplete | None = ..., osx_clang_versions: Incomplete | None = ..., shared: Incomplete | None = ..., upload_url: Incomplete | None = ..., gitignore: Incomplete | None = ..., gitlab_gcc_versions: Incomplete | None = ..., gitlab_clang_versions: Incomplete | None = ..., circleci_gcc_versions: Incomplete | None = ..., circleci_clang_versions: Incomplete | None = ..., circleci_osx_versions: Incomplete | None = ..., template: Incomplete | None = ..., defines: Incomplete | None = ...) -> None: ...
    def inspect(self, path, attributes, remote_name: Incomplete | None = ...): ...
    def test(self, path, reference, profile_names: Incomplete | None = ..., settings: Incomplete | None = ..., options: Incomplete | None = ..., env: Incomplete | None = ..., remote_name: Incomplete | None = ..., update: bool = ..., build_modes: Incomplete | None = ..., cwd: Incomplete | None = ..., test_build_folder: Incomplete | None = ..., lockfile: Incomplete | None = ..., profile_build: Incomplete | None = ..., conf: Incomplete | None = ...) -> None: ...
    def create(self, conanfile_path, name: Incomplete | None = ..., version: Incomplete | None = ..., user: Incomplete | None = ..., channel: Incomplete | None = ..., profile_names: Incomplete | None = ..., settings: Incomplete | None = ..., options: Incomplete | None = ..., env: Incomplete | None = ..., test_folder: Incomplete | None = ..., not_export: bool = ..., build_modes: Incomplete | None = ..., keep_source: bool = ..., keep_build: bool = ..., verify: Incomplete | None = ..., manifests: Incomplete | None = ..., manifests_interactive: Incomplete | None = ..., remote_name: Incomplete | None = ..., update: bool = ..., cwd: Incomplete | None = ..., test_build_folder: Incomplete | None = ..., lockfile: Incomplete | None = ..., lockfile_out: Incomplete | None = ..., ignore_dirty: bool = ..., profile_build: Incomplete | None = ..., is_build_require: bool = ..., conf: Incomplete | None = ..., require_overrides: Incomplete | None = ...): ...
    def export_pkg(self, conanfile_path, name, channel, source_folder: Incomplete | None = ..., build_folder: Incomplete | None = ..., package_folder: Incomplete | None = ..., install_folder: Incomplete | None = ..., profile_names: Incomplete | None = ..., settings: Incomplete | None = ..., options: Incomplete | None = ..., env: Incomplete | None = ..., force: bool = ..., user: Incomplete | None = ..., version: Incomplete | None = ..., cwd: Incomplete | None = ..., lockfile: Incomplete | None = ..., lockfile_out: Incomplete | None = ..., ignore_dirty: bool = ..., profile_build: Incomplete | None = ..., conf: Incomplete | None = ...): ...
    def download(self, reference, remote_name: Incomplete | None = ..., packages: Incomplete | None = ..., recipe: bool = ...) -> None: ...
    def workspace_install(self, path, settings: Incomplete | None = ..., options: Incomplete | None = ..., env: Incomplete | None = ..., remote_name: Incomplete | None = ..., build: Incomplete | None = ..., profile_name: Incomplete | None = ..., update: bool = ..., cwd: Incomplete | None = ..., install_folder: Incomplete | None = ..., profile_build: Incomplete | None = ..., conf: Incomplete | None = ...) -> None: ...
    def install_reference(self, reference, settings: Incomplete | None = ..., options: Incomplete | None = ..., env: Incomplete | None = ..., remote_name: Incomplete | None = ..., verify: Incomplete | None = ..., manifests: Incomplete | None = ..., manifests_interactive: Incomplete | None = ..., build: Incomplete | None = ..., profile_names: Incomplete | None = ..., update: bool = ..., generators: Incomplete | None = ..., install_folder: Incomplete | None = ..., cwd: Incomplete | None = ..., lockfile: Incomplete | None = ..., lockfile_out: Incomplete | None = ..., profile_build: Incomplete | None = ..., lockfile_node_id: Incomplete | None = ..., is_build_require: bool = ..., conf: Incomplete | None = ..., require_overrides: Incomplete | None = ...): ...
    def install(self, path: str = ..., name: Incomplete | None = ..., version: Incomplete | None = ..., user: Incomplete | None = ..., channel: Incomplete | None = ..., settings: Incomplete | None = ..., options: Incomplete | None = ..., env: Incomplete | None = ..., remote_name: Incomplete | None = ..., verify: Incomplete | None = ..., manifests: Incomplete | None = ..., manifests_interactive: Incomplete | None = ..., build: Incomplete | None = ..., profile_names: Incomplete | None = ..., update: bool = ..., generators: Incomplete | None = ..., no_imports: bool = ..., install_folder: Incomplete | None = ..., output_folder: Incomplete | None = ..., cwd: Incomplete | None = ..., lockfile: Incomplete | None = ..., lockfile_out: Incomplete | None = ..., profile_build: Incomplete | None = ..., conf: Incomplete | None = ..., require_overrides: Incomplete | None = ...): ...
    def config_get(self, item): ...
    def config_set(self, item, value) -> None: ...
    def config_rm(self, item) -> None: ...
    def config_install_list(self): ...
    def config_install_remove(self, index) -> None: ...
    def config_install(self, path_or_url, verify_ssl, config_type: Incomplete | None = ..., args: Incomplete | None = ..., source_folder: Incomplete | None = ..., target_folder: Incomplete | None = ...): ...
    def config_home(self): ...
    def config_init(self, force: bool = ...) -> None: ...
    def _info_args(self, reference_or_path, install_folder, profile_host, profile_build, lockfile: Incomplete | None = ...): ...
    def info_build_order(self, reference, settings: Incomplete | None = ..., options: Incomplete | None = ..., env: Incomplete | None = ..., profile_names: Incomplete | None = ..., remote_name: Incomplete | None = ..., build_order: Incomplete | None = ..., check_updates: Incomplete | None = ..., install_folder: Incomplete | None = ..., profile_build: Incomplete | None = ..., conf: Incomplete | None = ...): ...
    def info_nodes_to_build(self, reference, build_modes, settings: Incomplete | None = ..., options: Incomplete | None = ..., env: Incomplete | None = ..., profile_names: Incomplete | None = ..., remote_name: Incomplete | None = ..., check_updates: Incomplete | None = ..., install_folder: Incomplete | None = ..., profile_build: Incomplete | None = ..., conf: Incomplete | None = ...): ...
    def info(self, reference_or_path, remote_name: Incomplete | None = ..., settings: Incomplete | None = ..., options: Incomplete | None = ..., env: Incomplete | None = ..., profile_names: Incomplete | None = ..., update: bool = ..., install_folder: Incomplete | None = ..., build: Incomplete | None = ..., lockfile: Incomplete | None = ..., profile_build: Incomplete | None = ..., conf: Incomplete | None = ...): ...
    def build(self, conanfile_path, source_folder: Incomplete | None = ..., package_folder: Incomplete | None = ..., build_folder: Incomplete | None = ..., install_folder: Incomplete | None = ..., should_configure: bool = ..., should_build: bool = ..., should_install: bool = ..., should_test: bool = ..., cwd: Incomplete | None = ...) -> None: ...
    def package(self, path, build_folder, package_folder, source_folder: Incomplete | None = ..., install_folder: Incomplete | None = ..., cwd: Incomplete | None = ...) -> None: ...
    def source(self, path, source_folder: Incomplete | None = ..., info_folder: Incomplete | None = ..., cwd: Incomplete | None = ...) -> None: ...
    def imports(self, path, dest: Incomplete | None = ..., info_folder: Incomplete | None = ..., cwd: Incomplete | None = ...) -> None: ...
    def imports_undo(self, manifest_path) -> None: ...
    def export(self, path, name, version, user, channel, keep_source: bool = ..., cwd: Incomplete | None = ..., lockfile: Incomplete | None = ..., lockfile_out: Incomplete | None = ..., ignore_dirty: bool = ...) -> None: ...
    def remove(self, pattern, query: Incomplete | None = ..., packages: Incomplete | None = ..., builds: Incomplete | None = ..., src: bool = ..., force: bool = ..., remote_name: Incomplete | None = ..., outdated: bool = ...) -> None: ...
    def copy(self, reference, user_channel, force: bool = ..., packages: Incomplete | None = ...) -> None: ...
    def authenticate(self, name, password, remote_name, skip_auth: bool = ...): ...
    def user_set(self, user, remote_name: Incomplete | None = ...): ...
    def users_clean(self) -> None: ...
    def users_list(self, remote_name: Incomplete | None = ...): ...
    def search_recipes(self, pattern, remote_name: Incomplete | None = ..., case_sensitive: bool = ..., fill_revisions: bool = ...): ...
    def search_packages(self, reference, query: Incomplete | None = ..., remote_name: Incomplete | None = ..., outdated: bool = ...): ...
    def upload(self, pattern, package: Incomplete | None = ..., remote_name: Incomplete | None = ..., all_packages: bool = ..., confirm: bool = ..., retry: Incomplete | None = ..., retry_wait: Incomplete | None = ..., integrity_check: bool = ..., policy: Incomplete | None = ..., query: Incomplete | None = ..., parallel_upload: bool = ...): ...
    def remote_list(self): ...
    def remote_add(self, remote_name, url, verify_ssl: bool = ..., insert: Incomplete | None = ..., force: Incomplete | None = ...): ...
    def remote_remove(self, remote_name): ...
    def remote_set_disabled_state(self, remote_name, state): ...
    def remote_update(self, remote_name, url, verify_ssl: bool = ..., insert: Incomplete | None = ...): ...
    def remote_rename(self, remote_name, new_new_remote): ...
    def remote_list_ref(self, no_remote: bool = ...): ...
    def remote_add_ref(self, reference, remote_name) -> None: ...
    def remote_remove_ref(self, reference) -> None: ...
    def remote_update_ref(self, reference, remote_name) -> None: ...
    def remote_list_pref(self, reference, no_remote: bool = ...): ...
    def remote_add_pref(self, package_reference, remote_name) -> None: ...
    def remote_remove_pref(self, package_reference) -> None: ...
    def remote_update_pref(self, package_reference, remote_name) -> None: ...
    def remote_clean(self): ...
    def remove_system_reqs(self, reference) -> None: ...
    def remove_system_reqs_by_pattern(self, pattern) -> None: ...
    def remove_locks(self) -> None: ...
    def profile_list(self): ...
    def create_profile(self, profile_name, detect: bool = ..., force: bool = ...): ...
    def update_profile(self, profile_name, key, value): ...
    def get_profile_key(self, profile_name, key): ...
    def delete_profile_key(self, profile_name, key): ...
    def read_profile(self, profile: Incomplete | None = ...): ...
    def get_path(self, reference, package_id: Incomplete | None = ..., path: Incomplete | None = ..., remote_name: Incomplete | None = ...): ...
    def export_alias(self, reference, target_reference): ...
    def get_default_remote(self): ...
    def get_remote_by_name(self, remote_name): ...
    def get_recipe_revisions(self, reference, remote_name: Incomplete | None = ...): ...
    def get_package_revisions(self, reference, remote_name: Incomplete | None = ...): ...
    def editable_add(self, path, reference, layout, output_folder, cwd) -> None: ...
    def editable_remove(self, reference): ...
    def editable_list(self): ...
    def lock_update(self, old_lockfile, new_lockfile, cwd: Incomplete | None = ...) -> None: ...
    def lock_build_order(self, lockfile, cwd: Incomplete | None = ...): ...
    def lock_clean_modified(self, lockfile, cwd: Incomplete | None = ...) -> None: ...
    def lock_install(self, lockfile, remote_name: Incomplete | None = ..., build: Incomplete | None = ..., generators: Incomplete | None = ..., install_folder: Incomplete | None = ..., cwd: Incomplete | None = ..., lockfile_out: Incomplete | None = ..., recipes: Incomplete | None = ...) -> None: ...
    def lock_bundle_create(self, lockfiles, lockfile_out, cwd: Incomplete | None = ...) -> None: ...
    def lock_bundle_build_order(self, lockfile, cwd: Incomplete | None = ...): ...
    def lock_bundle_update(self, lock_bundle_path, cwd: Incomplete | None = ...) -> None: ...
    def lock_bundle_clean_modified(self, lock_bundle_path, cwd: Incomplete | None = ...) -> None: ...
    def lock_create(self, path, lockfile_out, reference: Incomplete | None = ..., name: Incomplete | None = ..., version: Incomplete | None = ..., user: Incomplete | None = ..., channel: Incomplete | None = ..., profile_host: Incomplete | None = ..., profile_build: Incomplete | None = ..., remote_name: Incomplete | None = ..., update: Incomplete | None = ..., build: Incomplete | None = ..., base: Incomplete | None = ..., lockfile: Incomplete | None = ...) -> None: ...
Conan = ConanAPIV1

def get_graph_info(profile_host, profile_build, cwd, install_folder, cache, output, name: Incomplete | None = ..., version: Incomplete | None = ..., user: Incomplete | None = ..., channel: Incomplete | None = ..., lockfile: Incomplete | None = ...): ...
def _parse_manifests_arguments(verify, manifests, manifests_interactive, cwd): ...
def existing_info_files(folder): ...
