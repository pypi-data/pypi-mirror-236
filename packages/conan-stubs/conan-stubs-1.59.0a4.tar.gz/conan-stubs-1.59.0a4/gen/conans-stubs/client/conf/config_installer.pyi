from _typeshed import Incomplete
from collections.abc import Generator
from conans import load as load
from conans.client import tools as tools
from conans.client.cache.cache import ClientCache as ClientCache
from conans.client.cache.remote_registry import load_registry_txt as load_registry_txt, migrate_registry_file as migrate_registry_file
from conans.client.downloaders.file_downloader import FileDownloader as FileDownloader
from conans.client.tools import Git as Git
from conans.client.tools.files import unzip as unzip
from conans.errors import ConanException as ConanException
from conans.util.files import mkdir as mkdir, remove as remove, rmdir as rmdir, save as save, touch as touch, walk as walk

def _hide_password(resource): ...
def _handle_remotes(cache, remote_file) -> None: ...
def tmp_config_install_folder(cache) -> Generator[Incomplete, None, None]: ...
def _process_git_repo(config, cache, output) -> None: ...
def _process_zip_file(config, zippath, cache, output, tmp_folder, first_remove: bool = ...) -> None: ...
def _handle_conan_conf(current_conan_conf, new_conan_conf_path) -> None: ...
def _filecopy(src, filename, dst) -> None: ...
def _process_file(directory, filename, config, cache, output, folder) -> None: ...
def _process_folder(config, folder, cache, output) -> None: ...
def _process_download(config, cache, output, requester) -> None: ...

class _ConfigOrigin:
    type: Incomplete
    uri: Incomplete
    verify_ssl: Incomplete
    args: Incomplete
    source_folder: Incomplete
    target_folder: Incomplete
    def __init__(self, data) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def json(self): ...
    @staticmethod
    def from_item(uri, config_type, verify_ssl, args, source_folder, target_folder): ...

def _is_compressed_file(filename): ...
def _process_config(config, cache, output, requester) -> None: ...
def _save_configs(configs_file, configs) -> None: ...
def _load_configs(configs_file): ...
def configuration_install(app, uri, verify_ssl, config_type: Incomplete | None = ..., args: Incomplete | None = ..., source_folder: Incomplete | None = ..., target_folder: Incomplete | None = ...) -> None: ...
def _is_scheduled_intervals(file, interval): ...
def is_config_install_scheduled(api): ...
