from _typeshed import Incomplete
from conans.client.conanfile.configure import run_configure_method as run_configure_method
from conans.client.graph.graph import CONTEXT_BUILD as CONTEXT_BUILD, CONTEXT_HOST as CONTEXT_HOST, DepsGraph as DepsGraph, Node as Node, RECIPE_EDITABLE as RECIPE_EDITABLE
from conans.errors import ConanException as ConanException, ConanExceptionInUserConanfileMethod as ConanExceptionInUserConanfileMethod, ConanInvalidConfiguration as ConanInvalidConfiguration, conanfile_exception_formatter as conanfile_exception_formatter
from conans.model.conan_file import get_env_context_manager as get_env_context_manager
from conans.model.ref import ConanFileReference as ConanFileReference
from conans.model.requires import Requirement as Requirement, Requirements as Requirements
from conans.util.log import logger as logger

class DepsGraphBuilder:
    _proxy: Incomplete
    _output: Incomplete
    _loader: Incomplete
    _resolver: Incomplete
    _recorder: Incomplete
    def __init__(self, proxy, output, loader, resolver, recorder) -> None: ...
    def load_graph(self, root_node, check_updates, update, remotes, profile_host, profile_build, graph_lock: Incomplete | None = ...): ...
    def extend_build_requires(self, graph, node, build_requires_refs, check_updates, update, remotes, profile_host, profile_build, graph_lock): ...
    def _expand_node(self, node, graph, down_reqs, down_ref, down_options, check_updates, update, remotes, profile_host, profile_build, graph_lock) -> None: ...
    def _resolve_ranges(self, graph, requires, consumer, update, remotes) -> None: ...
    @staticmethod
    def _resolve_cached_alias(requires, graph) -> None: ...
    def _resolve_alias(self, node, require, graph, check_updates, update, remotes) -> None: ...
    def _get_node_requirements(self, node, graph, down_ref, down_options, down_reqs, graph_lock, update, remotes): ...
    def _expand_require(self, require, node, graph, check_updates, update, remotes, profile_host, profile_build, new_reqs, new_options, graph_lock, context_switch, populate_settings_target: bool = ...) -> None: ...
    @staticmethod
    def _conflicting_references(previous, new_ref, consumer_ref: Incomplete | None = ...): ...
    def _recurse(self, closure, new_reqs, new_options, context): ...
    @staticmethod
    def _config_node(node, down_ref, down_options): ...
    def _resolve_recipe(self, current_node, dep_graph, requirement, check_updates, update, remotes, profile, graph_lock, original_ref: Incomplete | None = ...): ...
    def _create_new_node(self, current_node, dep_graph, requirement, check_updates, update, remotes, profile_host, profile_build, graph_lock, context_switch, populate_settings_target): ...
