from _typeshed import Incomplete
from conans.client import tools as tools
from conans.client.conanfile.build import run_build_method as run_build_method
from conans.client.conanfile.package import run_package_method as run_package_method
from conans.client.file_copier import report_copied_files as report_copied_files
from conans.client.generators import TXTGenerator as TXTGenerator, write_toolchain as write_toolchain
from conans.client.graph.graph import BINARY_BUILD as BINARY_BUILD, BINARY_CACHE as BINARY_CACHE, BINARY_DOWNLOAD as BINARY_DOWNLOAD, BINARY_EDITABLE as BINARY_EDITABLE, BINARY_INVALID as BINARY_INVALID, BINARY_MISSING as BINARY_MISSING, BINARY_SKIP as BINARY_SKIP, BINARY_UNKNOWN as BINARY_UNKNOWN, BINARY_UPDATE as BINARY_UPDATE, CONTEXT_HOST as CONTEXT_HOST
from conans.client.importer import remove_imports as remove_imports, run_imports as run_imports
from conans.client.packager import update_package_metadata as update_package_metadata
from conans.client.recorder.action_recorder import INSTALL_ERROR_BUILDING as INSTALL_ERROR_BUILDING, INSTALL_ERROR_MISSING as INSTALL_ERROR_MISSING, INSTALL_ERROR_MISSING_BUILD_FOLDER as INSTALL_ERROR_MISSING_BUILD_FOLDER
from conans.client.source import config_source as config_source, retrieve_exports_sources as retrieve_exports_sources
from conans.client.tools.env import pythonpath as pythonpath
from conans.errors import ConanException as ConanException, ConanExceptionInUserConanfileMethod as ConanExceptionInUserConanfileMethod, ConanInvalidConfiguration as ConanInvalidConfiguration, conanfile_exception_formatter as conanfile_exception_formatter
from conans.model.build_info import CppInfo as CppInfo, CppInfoDefaultValues as CppInfoDefaultValues, DepCppInfo as DepCppInfo
from conans.model.conan_file import ConanFile as ConanFile
from conans.model.editable_layout import EditableLayout as EditableLayout
from conans.model.env_info import EnvInfo as EnvInfo
from conans.model.graph_info import GraphInfo as GraphInfo
from conans.model.graph_lock import GraphLockFile as GraphLockFile
from conans.model.info import PACKAGE_ID_UNKNOWN as PACKAGE_ID_UNKNOWN
from conans.model.new_build_info import NewCppInfo as NewCppInfo, fill_old_cppinfo as fill_old_cppinfo
from conans.model.ref import PackageReference as PackageReference
from conans.model.user_info import DepsUserInfo as DepsUserInfo, UserInfo as UserInfo
from conans.paths import BUILD_INFO as BUILD_INFO, CONANINFO as CONANINFO, RUN_LOG_NAME as RUN_LOG_NAME
from conans.util.env_reader import get_env as get_env
from conans.util.files import clean_dirty as clean_dirty, is_dirty as is_dirty, make_read_only as make_read_only, mkdir as mkdir, rmdir as rmdir, save as save, set_dirty as set_dirty
from conans.util.log import logger as logger
from conans.util.tracer import log_package_built as log_package_built, log_package_got_from_local_cache as log_package_got_from_local_cache

def build_id(conan_file): ...
def add_env_conaninfo(conan_file, subtree_libnames) -> None: ...

class _PackageBuilder:
    _cache: Incomplete
    _output: Incomplete
    _hook_manager: Incomplete
    _remote_manager: Incomplete
    _generator_manager: Incomplete
    def __init__(self, cache, output, hook_manager, remote_manager, generators) -> None: ...
    def _get_build_folder(self, conanfile, package_layout, pref, keep_build, recorder): ...
    def _prepare_sources(self, conanfile, pref, package_layout, remotes) -> None: ...
    @staticmethod
    def _copy_sources(conanfile, source_folder, build_folder) -> None: ...
    def _build(self, conanfile, pref) -> None: ...
    def _package(self, conanfile, pref, package_layout, conanfile_path): ...
    def build_package(self, node, keep_build, recorder, remotes): ...

def _remove_folder_raising(folder) -> None: ...
def _handle_system_requirements(conan_file, pref, cache, out) -> None: ...
def call_system_requirements(conanfile, output): ...

class BinaryInstaller:
    _cache: Incomplete
    _out: Incomplete
    _remote_manager: Incomplete
    _recorder: Incomplete
    _binaries_analyzer: Incomplete
    _hook_manager: Incomplete
    _generator_manager: Incomplete
    def __init__(self, app, recorder) -> None: ...
    def install(self, deps_graph, remotes, build_mode, update, profile_host, profile_build, graph_lock, keep_build: bool = ...) -> None: ...
    @staticmethod
    def _classify(nodes_by_level): ...
    def _raise_missing(self, missing) -> None: ...
    def _download(self, downloads, processed_package_refs) -> None: ...
    def _download_pkg(self, layout, node) -> None: ...
    def _build(self, nodes_by_level, keep_build, root_node, profile_host, profile_build, graph_lock, remotes, build_mode, update) -> None: ...
    def _handle_node_editable(self, node, profile_host, profile_build, graph_lock) -> None: ...
    def _handle_node_cache(self, node, keep_build, processed_package_references, remotes) -> None: ...
    def _build_package(self, node, output, keep_build, remotes): ...
    def _propagate_info(self, node, using_build_profile) -> None: ...
    def _call_package_info(self, conanfile, package_folder, ref, is_editable) -> None: ...
