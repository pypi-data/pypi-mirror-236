from _typeshed import Incomplete
from conans.util.env_reader import get_env as get_env
from conans.util.files import decode_text as decode_text

def colorama_initialize(): ...

class Color:
    RED: Incomplete
    WHITE: Incomplete
    CYAN: Incomplete
    GREEN: Incomplete
    MAGENTA: Incomplete
    BLUE: Incomplete
    YELLOW: Incomplete
    BLACK: Incomplete
    BRIGHT_RED: Incomplete
    BRIGHT_BLUE: Incomplete
    BRIGHT_YELLOW: Incomplete
    BRIGHT_GREEN: Incomplete
    BRIGHT_CYAN: Incomplete
    BRIGHT_WHITE: Incomplete
    BRIGHT_MAGENTA: Incomplete

class ConanOutput:
    _stream: Incomplete
    _stream_err: Incomplete
    _color: Incomplete
    def __init__(self, stream, stream_err: Incomplete | None = ..., color: bool = ...) -> None: ...
    @property
    def is_terminal(self): ...
    def writeln(self, data, front: Incomplete | None = ..., back: Incomplete | None = ..., error: bool = ...) -> None: ...
    def _write(self, data, newline: bool = ...) -> None: ...
    def _write_err(self, data, newline: bool = ...) -> None: ...
    def write(self, data, front: Incomplete | None = ..., back: Incomplete | None = ..., newline: bool = ..., error: bool = ...) -> None: ...
    def info(self, data) -> None: ...
    def highlight(self, data) -> None: ...
    def success(self, data) -> None: ...
    def warn(self, data) -> None: ...
    warning = warn
    def error(self, data) -> None: ...
    def input_text(self, data) -> None: ...
    def rewrite_line(self, line) -> None: ...
    def flush(self) -> None: ...

class ScopedOutput(ConanOutput):
    scope: Incomplete
    _stream: Incomplete
    _stream_err: Incomplete
    _color: Incomplete
    def __init__(self, scope, output) -> None: ...
    def write(self, data, front: Incomplete | None = ..., back: Incomplete | None = ..., newline: bool = ..., error: bool = ...) -> None: ...
