from _typeshed import Incomplete
from collections.abc import Generator
from conans.errors import ConanException as ConanException, ConanV2Exception as ConanV2Exception
from conans.model.conf import ConfDefinition as ConfDefinition
from conans.model.env_info import EnvValues as EnvValues, unquote as unquote
from conans.model.options import OptionsValues as OptionsValues
from conans.model.profile import Profile as Profile
from conans.model.ref import ConanFileReference as ConanFileReference
from conans.util.config_parser import ConfigParser as ConfigParser
from conans.util.files import load as load, mkdir as mkdir
from conans.util.log import logger as logger

class ProfileParser:
    vars: Incomplete
    includes: Incomplete
    profile_text: str
    def __init__(self, text) -> None: ...
    def apply_vars(self) -> None: ...
    def get_includes(self) -> Generator[Incomplete, None, None]: ...
    def update_vars(self, included_vars) -> None: ...
    def _apply_in_vars(self) -> None: ...
    def _apply_in_profile_text(self) -> None: ...

def get_profile_path(profile_name, default_folder, cwd, exists: bool = ...): ...
def read_profile(profile_name, cwd, default_folder): ...
def _load_profile(text, profile_path, default_folder): ...
def _load_single_build_require(profile, line) -> None: ...
def _apply_inner_profile(doc, base_profile): ...
def profile_from_args(profiles, settings, options, env, conf, cwd, cache, build_profile: bool = ...): ...
def _profile_parse_args(settings, options, envs, conf): ...
