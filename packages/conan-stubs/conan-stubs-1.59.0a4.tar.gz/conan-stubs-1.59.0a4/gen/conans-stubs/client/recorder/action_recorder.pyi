from _typeshed import Incomplete
from conans.model.ref import ConanFileReference as ConanFileReference, PackageReference as PackageReference
from typing import NamedTuple

INSTALL_CACHE: int
INSTALL_DOWNLOADED: int
INSTALL_BUILT: int
INSTALL_EXPORTED: int
INSTALL_ERROR: int
INSTALL_ERROR_MISSING: str
INSTALL_ERROR_NETWORK: str
INSTALL_ERROR_MISSING_BUILD_FOLDER: str
INSTALL_ERROR_BUILDING: str

def _cpp_info_to_dict(cpp_info): ...

class Action(NamedTuple('Action', [('type', Incomplete), ('full_ref', Incomplete), ('doc', Incomplete), ('time', Incomplete)])):
    def __new__(cls, the_type, full_ref, doc: Incomplete | None = ...): ...

class ActionRecorder:
    error: bool
    _inst_recipes_actions: Incomplete
    _inst_packages_actions: Incomplete
    _inst_recipes_develop: Incomplete
    _inst_packages_info: Incomplete
    def __init__(self) -> None: ...
    def add_recipe_being_developed(self, ref) -> None: ...
    def _add_recipe_action(self, ref, action) -> None: ...
    def _add_package_action(self, pref, action) -> None: ...
    def recipe_exported(self, ref) -> None: ...
    def recipe_fetched_from_cache(self, ref) -> None: ...
    def recipe_downloaded(self, ref, remote_name) -> None: ...
    def recipe_install_error(self, ref, error_type, description, remote_name) -> None: ...
    def package_exported(self, pref) -> None: ...
    def package_built(self, pref) -> None: ...
    def package_fetched_from_cache(self, pref) -> None: ...
    def package_downloaded(self, pref, remote_name) -> None: ...
    def package_install_error(self, pref, error_type, description, remote_name: Incomplete | None = ...) -> None: ...
    def package_cpp_info(self, pref, cpp_info) -> None: ...
    @property
    def install_errored(self): ...
    def _get_installed_packages(self, ref): ...
    def in_development_recipe(self, ref): ...
    def get_info(self, revisions_enabled): ...
    def get_install_info(self, revisions_enabled): ...
