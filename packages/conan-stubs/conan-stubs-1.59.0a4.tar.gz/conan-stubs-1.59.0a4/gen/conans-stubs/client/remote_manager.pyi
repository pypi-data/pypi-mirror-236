from _typeshed import Incomplete
from conans import DEFAULT_REVISION_V1 as DEFAULT_REVISION_V1
from conans.client.cache.remote_registry import Remote as Remote
from conans.errors import ConanConnectionError as ConanConnectionError, ConanException as ConanException, NoRestV2Available as NoRestV2Available, NotFoundException as NotFoundException, PackageNotFoundException as PackageNotFoundException
from conans.model.info import ConanInfo as ConanInfo
from conans.paths import EXPORT_SOURCES_TGZ_NAME as EXPORT_SOURCES_TGZ_NAME, EXPORT_TGZ_NAME as EXPORT_TGZ_NAME, PACKAGE_TGZ_NAME as PACKAGE_TGZ_NAME, rm_conandir as rm_conandir
from conans.search.search import filter_packages as filter_packages
from conans.util import progress_bar as progress_bar
from conans.util.env_reader import get_env as get_env
from conans.util.files import make_read_only as make_read_only, md5sum as md5sum, mkdir as mkdir, sha1sum as sha1sum, tar_extract as tar_extract, touch_folder as touch_folder
from conans.util.log import logger as logger
from conans.util.tracer import log_package_download as log_package_download, log_recipe_download as log_recipe_download, log_recipe_sources_download as log_recipe_sources_download, log_uncompressed_file as log_uncompressed_file

CONAN_REQUEST_HEADER_SETTINGS: str
CONAN_REQUEST_HEADER_OPTIONS: str

def _headers_for_info(info): ...

class RemoteManager:
    _cache: Incomplete
    _output: Incomplete
    _auth_manager: Incomplete
    _hook_manager: Incomplete
    def __init__(self, cache, auth_manager, output, hook_manager) -> None: ...
    def check_credentials(self, remote) -> None: ...
    def get_recipe_snapshot(self, ref, remote): ...
    def get_package_snapshot(self, pref, remote): ...
    def upload_recipe(self, ref, files_to_upload, deleted, remote, retry, retry_wait) -> None: ...
    def upload_package(self, pref, files_to_upload, deleted, remote, retry, retry_wait) -> None: ...
    def get_recipe_manifest(self, ref, remote): ...
    def get_package_manifest(self, pref, remote): ...
    def get_package_info(self, pref, remote, info: Incomplete | None = ...): ...
    def get_recipe(self, ref, remote): ...
    def get_recipe_sources(self, ref, layout, remote) -> None: ...
    def get_package(self, conanfile, pref, layout, remote, output, recorder) -> None: ...
    def _get_package(self, layout, pref, remote, output, recorder, info) -> None: ...
    def search_recipes(self, remote, pattern: Incomplete | None = ..., ignorecase: bool = ...): ...
    def search_packages(self, remote, ref, query): ...
    def remove_recipe(self, ref, remote): ...
    def remove_packages(self, ref, remove_ids, remote): ...
    def get_recipe_path(self, ref, path, remote): ...
    def get_package_path(self, pref, path, remote): ...
    def authenticate(self, remote, name, password): ...
    def get_recipe_revisions(self, ref, remote): ...
    def get_package_revisions(self, pref, remote): ...
    def get_latest_recipe_revision(self, ref, remote): ...
    def get_latest_package_revision(self, pref, remote, headers: Incomplete | None = ...): ...
    def _resolve_latest_ref(self, ref, remote): ...
    def _resolve_latest_pref(self, pref, remote, headers): ...
    def _call_remote(self, remote, method, *args, **kwargs): ...

def calc_files_checksum(files): ...
def is_package_snapshot_complete(snapshot): ...
def check_compressed_files(tgz_name, files) -> None: ...
def uncompress_file(src_path, dest_folder, output) -> None: ...
