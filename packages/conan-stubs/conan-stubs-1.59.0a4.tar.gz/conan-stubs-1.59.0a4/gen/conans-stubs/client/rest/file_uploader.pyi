from _typeshed import Incomplete
from conans.client.rest import response_to_str as response_to_str
from conans.errors import AuthenticationException as AuthenticationException, ConanException as ConanException, ForbiddenException as ForbiddenException, InternalErrorException as InternalErrorException, NotFoundException as NotFoundException, RequestErrorException as RequestErrorException
from conans.util import progress_bar as progress_bar
from conans.util.files import sha1sum as sha1sum

class FileUploader:
    _output: Incomplete
    _requester: Incomplete
    _config: Incomplete
    _verify_ssl: Incomplete
    def __init__(self, requester, output, verify, config) -> None: ...
    @staticmethod
    def _handle_400_response(response, auth) -> None: ...
    def _dedup(self, url, headers, auth): ...
    def upload(self, url, abs_path, auth: Incomplete | None = ..., dedup: bool = ..., retry: Incomplete | None = ..., retry_wait: Incomplete | None = ..., headers: Incomplete | None = ..., display_name: Incomplete | None = ...): ...
    def _upload_file(self, url, abs_path, headers, auth, display_name): ...

class IterableToFileAdapter:
    iterator: Incomplete
    total_size: Incomplete
    def __init__(self, iterable, total_size) -> None: ...
    def read(self, size: int = ...): ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
