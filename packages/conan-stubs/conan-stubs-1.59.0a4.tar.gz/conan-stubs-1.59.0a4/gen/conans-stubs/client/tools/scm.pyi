from _typeshed import Incomplete
from conans.client.tools.env import environment_append as environment_append, no_op as no_op
from conans.client.tools.files import chdir as chdir
from conans.errors import ConanException as ConanException
from conans.model.version import Version as Version
from conans.util.files import decode_text as decode_text, mkdir as mkdir, to_file_bytes as to_file_bytes, walk as walk
from conans.util.runners import check_output_runner as check_output_runner, input_runner as input_runner, muted_runner as muted_runner, pyinstaller_bundle_env_cleaned as pyinstaller_bundle_env_cleaned, version_runner as version_runner

def _check_repo(cmd, folder) -> None: ...

class SCMBase:
    cmd_command: Incomplete
    @classmethod
    def get_version(cls): ...
    folder: Incomplete
    _verify_ssl: Incomplete
    _force_eng: Incomplete
    _username: Incomplete
    _password: Incomplete
    _runner: Incomplete
    _output: Incomplete
    def __init__(self, folder: Incomplete | None = ..., verify_ssl: bool = ..., username: Incomplete | None = ..., password: Incomplete | None = ..., force_english: bool = ..., runner: Incomplete | None = ..., output: Incomplete | None = ...) -> None: ...
    def run(self, command): ...
    def _handle_scp_pattern(self, user, domain, url): ...
    def _handle_url_pattern(self, scheme, url, user: Incomplete | None = ..., password: Incomplete | None = ...): ...
    def get_url_with_credentials(self, url): ...
    @classmethod
    def _remove_credentials_url(cls, url): ...

class Git(SCMBase):
    cmd_command: str
    @property
    def _configure_ssl_verify(self): ...
    @property
    def version(self): ...
    def run(self, command): ...
    def _fetch(self, url, branch, shallow): ...
    def clone(self, url, branch: Incomplete | None = ..., args: str = ..., shallow: bool = ...): ...
    def checkout(self, element, submodule: Incomplete | None = ...): ...
    def checkout_submodules(self, submodule: Incomplete | None = ...): ...
    def excluded_files(self): ...
    def get_remote_url(self, remote_name: Incomplete | None = ..., remove_credentials: bool = ...): ...
    def is_local_repository(self): ...
    def get_commit(self): ...
    get_revision = get_commit
    def get_commit_message(self): ...
    def is_pristine(self): ...
    def get_repo_root(self): ...
    def get_branch(self): ...
    def get_tag(self): ...
    def check_repo(self) -> None: ...

class SVN(SCMBase):
    cmd_command: str
    file_protocol: Incomplete
    API_CHANGE_VERSION: Incomplete
    def __init__(self, folder: Incomplete | None = ..., runner: Incomplete | None = ..., *args, **kwargs) -> None: ...
    @property
    def version(self): ...
    def run(self, command): ...
    def _show_item(self, item, target: str = ...): ...
    def checkout(self, url, revision: str = ...): ...
    def update(self, revision: str = ...): ...
    def excluded_files(self): ...
    def get_remote_url(self, remove_credentials: bool = ...): ...
    def get_qualified_remote_url(self, remove_credentials: bool = ...): ...
    def is_local_repository(self): ...
    def is_pristine(self): ...
    def get_revision(self): ...
    def get_revision_message(self): ...
    def get_repo_root(self): ...
    def get_last_changed_revision(self, use_wc_root: bool = ...): ...
    def get_branch(self): ...
    def get_tag(self): ...
    def _get_item(self, pattern, item_name): ...
    def check_repo(self) -> None: ...
