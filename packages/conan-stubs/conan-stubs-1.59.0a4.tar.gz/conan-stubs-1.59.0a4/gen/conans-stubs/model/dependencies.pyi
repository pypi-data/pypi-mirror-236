from _typeshed import Incomplete
from conans.model.conanfile_interface import ConanFileInterface as ConanFileInterface
from conans.model.ref import ConanFileReference as ConanFileReference

class Requirement:
    ref: Incomplete
    build: Incomplete
    direct: Incomplete
    test: Incomplete
    visible: Incomplete
    def __init__(self, ref, build: bool = ..., direct: bool = ..., test: bool = ..., visible: bool = ...) -> None: ...
    def __repr__(self): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def aggregate(self, other) -> None: ...

class UserRequirementsDict:
    _data: Incomplete
    _require_filter: Incomplete
    def __init__(self, data, require_filter: Incomplete | None = ...) -> None: ...
    def filter(self, require_filter): ...
    def __bool__(self) -> bool: ...
    __nonzero__ = __bool__
    def _get_require(self, ref, **kwargs): ...
    def get(self, ref, **kwargs): ...
    def __getitem__(self, name): ...
    def __delitem__(self, name) -> None: ...
    def items(self): ...
    def values(self): ...

class ConanFileDependencies(UserRequirementsDict):
    @staticmethod
    def from_node(node): ...
    def filter(self, require_filter): ...
    @property
    def topological_sort(self): ...
    @property
    def direct_host(self): ...
    @property
    def direct_build(self): ...
    @property
    def host(self): ...
    @property
    def test(self): ...
    @property
    def build(self): ...
