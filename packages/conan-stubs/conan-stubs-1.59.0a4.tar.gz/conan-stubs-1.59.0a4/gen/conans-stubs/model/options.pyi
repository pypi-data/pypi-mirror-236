from _typeshed import Incomplete
from conans.errors import ConanException as ConanException
from conans.util.sha import sha1 as sha1

_falsey_options: Incomplete

def option_wrong_value_msg(name, value, value_range): ...
def option_not_exist_msg(option_name, existing_options): ...
def option_undefined_msg(name): ...

class PackageOptionValue(str):
    def __bool__(self) -> bool: ...
    def __nonzero__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class PackageOptionValues:
    _dict: Incomplete
    _modified: Incomplete
    _freeze: bool
    def __init__(self) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, key) -> bool: ...
    def __nonzero__(self): ...
    def __getattr__(self, attr): ...
    def __delattr__(self, attr) -> None: ...
    def clear(self) -> None: ...
    def __ne__(self, other): ...
    def __eq__(self, other): ...
    def __setattr__(self, attr, value): ...
    def copy(self): ...
    @property
    def fields(self): ...
    def keys(self): ...
    def items(self): ...
    def add(self, option_text) -> None: ...
    def add_option(self, option_name, option_value) -> None: ...
    def update(self, other) -> None: ...
    def remove(self, option_name) -> None: ...
    def freeze(self) -> None: ...
    def propagate_upstream(self, down_package_values, down_ref, own_ref, package_name) -> None: ...
    def serialize(self): ...
    @property
    def sha(self): ...

class OptionsValues:
    _package_values: Incomplete
    _reqs_options: Incomplete
    def __init__(self, values: Incomplete | None = ...) -> None: ...
    def update(self, other) -> None: ...
    def scope_options(self, name) -> None: ...
    def descope_options(self, name) -> None: ...
    def clear_unscoped_options(self) -> None: ...
    def __contains__(self, item) -> bool: ...
    def get_safe(self, attr): ...
    def rm_safe(self, attr) -> None: ...
    def __getitem__(self, item): ...
    def __setitem__(self, item, value) -> None: ...
    def pop(self, item): ...
    def remove(self, name, package: Incomplete | None = ...) -> None: ...
    def __ne__(self, other): ...
    def __eq__(self, other): ...
    def __repr__(self): ...
    def __getattr__(self, attr): ...
    def copy(self): ...
    def __setattr__(self, attr, value): ...
    def __delattr__(self, attr) -> None: ...
    def clear_indirect(self) -> None: ...
    def filter_used(self, used_pkg_names) -> None: ...
    def as_list(self): ...
    def dumps(self): ...
    @staticmethod
    def loads(text): ...
    @property
    def sha(self): ...
    def serialize(self): ...
    def clear(self) -> None: ...

class PackageOption:
    _name: Incomplete
    _value: Incomplete
    _possible_values: str
    def __init__(self, possible_values, name) -> None: ...
    def copy(self): ...
    def __bool__(self) -> bool: ...
    def __nonzero__(self): ...
    def __str__(self): ...
    def __int__(self) -> int: ...
    def _check_option_value(self, value) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def remove(self, values) -> None: ...
    @property
    def value(self): ...
    def validate(self) -> None: ...

class PackageOptions:
    _data: Incomplete
    _modified: Incomplete
    _freeze: bool
    def __init__(self, definition) -> None: ...
    def copy(self): ...
    def __contains__(self, option) -> bool: ...
    @staticmethod
    def loads(text): ...
    def get_safe(self, field, default: Incomplete | None = ...): ...
    def rm_safe(self, field) -> None: ...
    def validate(self) -> None: ...
    @property
    def fields(self): ...
    def remove(self, item) -> None: ...
    def clear(self) -> None: ...
    def _ensure_exists(self, field) -> None: ...
    def __getattr__(self, field): ...
    def __delattr__(self, field) -> None: ...
    def __setattr__(self, field, value): ...
    @property
    def values(self): ...
    def _items(self): ...
    def items(self): ...
    def iteritems(self): ...
    @values.setter
    def values(self, vals) -> None: ...
    def initialize_patterns(self, values) -> None: ...
    def freeze(self) -> None: ...
    def propagate_upstream(self, package_values, down_ref, own_ref, pattern_options) -> None: ...

class Options:
    _package_options: Incomplete
    _deps_package_values: Incomplete
    def __init__(self, options) -> None: ...
    def copy(self): ...
    def freeze(self) -> None: ...
    @property
    def deps_package_values(self): ...
    def clear(self) -> None: ...
    def __contains__(self, option) -> bool: ...
    def __getitem__(self, item): ...
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, value): ...
    def __delattr__(self, field) -> None: ...
    def rm_safe(self, field) -> None: ...
    @property
    def values(self): ...
    def propagate_upstream(self, down_package_values, down_ref, own_ref) -> None: ...
    def initialize_upstream(self, user_values, name: Incomplete | None = ...) -> None: ...
    def validate(self): ...
    def propagate_downstream(self, ref, options) -> None: ...
    def clear_unused(self, prefs) -> None: ...
