from _typeshed import Incomplete
from conans.errors import ConanException as ConanException, InvalidNameException as InvalidNameException
from conans.model.version import Version as Version
from typing import NamedTuple

def _split_pair(pair, split_char): ...
def _noneize(text): ...
def get_reference_fields(arg_reference, user_channel_input: bool = ...): ...
def check_valid_ref(reference, strict_mode: bool = ...): ...

class ConanName:
    _max_chars: int
    _min_chars: int
    _validation_pattern: Incomplete
    _validation_revision_pattern: Incomplete
    @staticmethod
    def raise_invalid_name_error(value, reference_token: Incomplete | None = ...) -> None: ...
    @staticmethod
    def raise_invalid_version_error(name, version) -> None: ...
    @staticmethod
    def validate_string(value, reference_token: Incomplete | None = ...) -> None: ...
    @staticmethod
    def validate_name(name, reference_token: Incomplete | None = ...) -> None: ...
    @staticmethod
    def validate_version(version, pkg_name) -> None: ...
    @staticmethod
    def validate_revision(revision) -> None: ...

class ConanFileReference(NamedTuple('ConanFileReference', [('name', Incomplete), ('version', Incomplete), ('user', Incomplete), ('channel', Incomplete), ('revision', Incomplete)])):
    def __new__(cls, name, version, user, channel, revision: Incomplete | None = ..., validate: bool = ...): ...
    def _validate(self) -> None: ...
    @staticmethod
    def loads(text, validate: bool = ...): ...
    @staticmethod
    def load_dir_repr(dir_repr): ...
    def __str__(self): ...
    def __repr__(self): ...
    def full_str(self): ...
    def dir_repr(self): ...
    def copy_with_rev(self, revision): ...
    def copy_clear_rev(self): ...
    def __lt__(self, other): ...
    def is_compatible_with(self, new_ref): ...

class PackageReference(NamedTuple('PackageReference', [('ref', Incomplete), ('id', Incomplete), ('revision', Incomplete)])):
    def __new__(cls, ref, package_id, revision: Incomplete | None = ..., validate: bool = ...): ...
    def validate(self) -> None: ...
    @staticmethod
    def loads(text, validate: bool = ...): ...
    def __repr__(self): ...
    def __str__(self): ...
    def __lt__(self, other): ...
    def full_str(self): ...
    def copy_with_revs(self, revision, p_revision): ...
    def copy_clear_prev(self): ...
    def copy_clear_revs(self): ...
    def is_compatible_with(self, new_ref): ...
