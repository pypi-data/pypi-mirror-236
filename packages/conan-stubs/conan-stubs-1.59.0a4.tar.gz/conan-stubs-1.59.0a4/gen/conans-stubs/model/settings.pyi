from _typeshed import Incomplete
from conans.errors import ConanException as ConanException
from conans.model.values import Values as Values

def bad_value_msg(name, value, value_range): ...
def undefined_field(name, field, fields: Incomplete | None = ..., value: Incomplete | None = ...): ...
def undefined_value(name): ...

class SettingsItem:
    _name: Incomplete
    _value: Incomplete
    _definition: Incomplete
    def __init__(self, definition, name) -> None: ...
    def __contains__(self, value) -> bool: ...
    def copy(self): ...
    def copy_values(self): ...
    @property
    def is_final(self): ...
    def __bool__(self) -> bool: ...
    def __nonzero__(self): ...
    def __str__(self): ...
    def _not_any(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __delattr__(self, item) -> None: ...
    def remove(self, values) -> None: ...
    def _get_child(self, item): ...
    def __getattr__(self, item): ...
    def __setattr__(self, item, value): ...
    def __getitem__(self, value): ...
    @property
    def value(self): ...
    @property
    def values_range(self): ...
    @property
    def values_list(self): ...
    def validate(self) -> None: ...

class Settings:
    _name: Incomplete
    _parent_value: Incomplete
    _data: Incomplete
    def __init__(self, definition: Incomplete | None = ..., name: str = ..., parent_value: Incomplete | None = ...) -> None: ...
    def get_safe(self, name, default: Incomplete | None = ...): ...
    def rm_safe(self, name) -> None: ...
    def copy(self): ...
    def copy_values(self): ...
    @staticmethod
    def loads(text): ...
    def validate(self) -> None: ...
    @property
    def fields(self): ...
    def remove(self, item) -> None: ...
    def clear(self) -> None: ...
    def _check_field(self, field) -> None: ...
    def __getattr__(self, field): ...
    def __delattr__(self, field) -> None: ...
    def __setattr__(self, field, value): ...
    @property
    def values(self): ...
    @property
    def values_list(self): ...
    def items(self): ...
    def iteritems(self): ...
    def update_values(self, vals) -> None: ...
    @values.setter
    def values(self, vals) -> None: ...
    def constraint(self, constraint_def) -> None: ...
