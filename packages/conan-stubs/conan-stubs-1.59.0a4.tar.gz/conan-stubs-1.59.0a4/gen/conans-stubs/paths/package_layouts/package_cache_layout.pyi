from _typeshed import Incomplete
from collections.abc import Generator
from conans.client.tools.oss import OSInfo as OSInfo
from conans.errors import ConanException as ConanException, NotFoundException as NotFoundException, PackageNotFoundException as PackageNotFoundException, RecipeNotFoundException as RecipeNotFoundException
from conans.model.manifest import FileTreeManifest as FileTreeManifest, discarded_file as discarded_file
from conans.model.package_metadata import PackageMetadata as PackageMetadata
from conans.model.ref import ConanFileReference as ConanFileReference, PackageReference as PackageReference
from conans.paths import BUILD_FOLDER as BUILD_FOLDER, CONANFILE as CONANFILE, EXPORT_FOLDER as EXPORT_FOLDER, EXPORT_SRC_FOLDER as EXPORT_SRC_FOLDER, PACKAGES_FOLDER as PACKAGES_FOLDER, PACKAGE_METADATA as PACKAGE_METADATA, SCM_SRC_FOLDER as SCM_SRC_FOLDER, SRC_FOLDER as SRC_FOLDER, SYSTEM_REQS as SYSTEM_REQS, SYSTEM_REQS_FOLDER as SYSTEM_REQS_FOLDER, rm_conandir as rm_conandir
from conans.util.env_reader import get_env as get_env
from conans.util.files import clean_dirty as clean_dirty, is_dirty as is_dirty, load as load, rmdir as rmdir, save as save, set_dirty as set_dirty
from conans.util.locks import Lock as Lock, NoLock as NoLock, ReadLock as ReadLock, SimpleLock as SimpleLock, WriteLock as WriteLock
from conans.util.log import logger as logger

def short_path(func): ...

class PackageCacheLayout:
    _ref: Incomplete
    _base_folder: Incomplete
    _short_paths: Incomplete
    _no_lock: Incomplete
    def __init__(self, base_folder, ref, short_paths, no_lock) -> None: ...
    @property
    def ref(self): ...
    def base_folder(self): ...
    def export(self): ...
    def conanfile(self): ...
    def export_sources(self): ...
    def source(self): ...
    def scm_sources(self): ...
    def builds(self): ...
    def build(self, pref): ...
    def system_reqs(self): ...
    def system_reqs_package(self, pref): ...
    def remove_system_reqs(self) -> None: ...
    def packages(self): ...
    def package(self, pref): ...
    def set_dirty_context_manager(self, pref) -> Generator[None, None, None]: ...
    def download_package(self, pref): ...
    def download_export(self): ...
    def package_is_dirty(self, pref): ...
    def package_id_exists(self, package_id): ...
    def package_remove(self, pref) -> None: ...
    def sources_remove(self) -> None: ...
    def export_remove(self) -> None: ...
    def package_metadata(self): ...
    def recipe_manifest(self): ...
    def package_manifests(self, pref): ...
    def recipe_exists(self): ...
    def package_exists(self, pref): ...
    def recipe_revision(self): ...
    def package_revision(self, pref): ...
    def conan_builds(self): ...
    def package_ids(self): ...
    def load_metadata(self): ...
    _metadata_locks: Incomplete
    def update_metadata(self) -> Generator[Incomplete, None, None]: ...
    def conanfile_read_lock(self, output): ...
    def conanfile_write_lock(self, output): ...
    def conanfile_lock_files(self, output): ...
    def package_lock(self, pref): ...
    def remove_package_locks(self) -> None: ...
    def get_path(self, path, package_id: Incomplete | None = ...): ...
