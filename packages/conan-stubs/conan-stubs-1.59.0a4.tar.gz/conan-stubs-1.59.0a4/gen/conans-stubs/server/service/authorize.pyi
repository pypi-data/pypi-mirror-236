import abc
from _typeshed import Incomplete
from abc import abstractmethod
from conans.errors import AuthenticationException as AuthenticationException, ForbiddenException as ForbiddenException, InternalErrorException as InternalErrorException
from conans.model.ref import ConanFileReference as ConanFileReference

class Authorizer(metaclass=abc.ABCMeta):
    @abstractmethod
    def check_read_conan(self, username, ref): ...
    @abstractmethod
    def check_write_conan(self, username, ref): ...
    @abstractmethod
    def check_delete_conan(self, username, ref): ...
    @abstractmethod
    def check_read_package(self, username, pref): ...
    @abstractmethod
    def check_write_package(self, username, pref): ...
    @abstractmethod
    def check_delete_package(self, username, pref): ...

class Authenticator(metaclass=abc.ABCMeta):
    @abstractmethod
    def valid_user(self, username, plain_password): ...

class BasicAuthenticator(Authenticator):
    users: Incomplete
    def __init__(self, users) -> None: ...
    def valid_user(self, username, plain_password): ...

class BasicAuthorizer(Authorizer):
    read_permissions: Incomplete
    write_permissions: Incomplete
    def __init__(self, read_permissions, write_permissions) -> None: ...
    def check_read_conan(self, username, ref) -> None: ...
    def check_write_conan(self, username, ref): ...
    def check_delete_conan(self, username, ref) -> None: ...
    def check_read_package(self, username, pref) -> None: ...
    def check_write_package(self, username, pref) -> None: ...
    def check_delete_package(self, username, pref) -> None: ...
    def _check_any_rule_ok(self, username, rules, *args, **kwargs): ...
    def _check_rule_ok(self, username, rule, ref): ...
    def _check_ref_apply_for_rule(self, rule_ref, ref): ...
