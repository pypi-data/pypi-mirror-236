from _typeshed import Incomplete
from conans import DEFAULT_REVISION_V1 as DEFAULT_REVISION_V1
from conans.errors import ConanException as ConanException, PackageNotFoundException as PackageNotFoundException, RecipeNotFoundException as RecipeNotFoundException
from conans.model.ref import ConanFileReference as ConanFileReference, PackageReference as PackageReference
from conans.paths import EXPORT_FOLDER as EXPORT_FOLDER, PACKAGES_FOLDER as PACKAGES_FOLDER
from conans.server.revision_list import RevisionList as RevisionList

REVISIONS_FILE: str

class ServerStore:
    _storage_adapter: Incomplete
    _store_folder: Incomplete
    def __init__(self, storage_adapter) -> None: ...
    @property
    def store(self): ...
    def base_folder(self, ref): ...
    def conan_revisions_root(self, ref): ...
    def packages(self, ref): ...
    def package_revisions_root(self, pref): ...
    def package(self, pref): ...
    def export(self, ref): ...
    def get_conanfile_file_path(self, ref, filename): ...
    def get_package_file_path(self, pref, filename): ...
    def path_exists(self, path): ...
    def get_recipe_snapshot(self, ref): ...
    def get_package_snapshot(self, pref): ...
    def _get_snapshot_of_files(self, relative_path): ...
    def get_recipe_file_list(self, ref): ...
    def get_package_file_list(self, pref): ...
    def _get_file_list(self, relative_path): ...
    def _delete_empty_dirs(self, ref) -> None: ...
    def remove_conanfile(self, ref) -> None: ...
    def remove_packages(self, ref, package_ids_filter) -> None: ...
    def remove_package(self, pref) -> None: ...
    def remove_all_packages(self, ref) -> None: ...
    def remove_conanfile_files(self, ref, files) -> None: ...
    def remove_package_files(self, pref, files) -> None: ...
    def get_download_conanfile_urls(self, ref, files_subset: Incomplete | None = ..., user: Incomplete | None = ...): ...
    def get_download_package_urls(self, pref, files_subset: Incomplete | None = ..., user: Incomplete | None = ...): ...
    def get_upload_conanfile_urls(self, ref, filesizes, user): ...
    def get_upload_package_urls(self, pref, filesizes, user): ...
    def _get_download_urls(self, relative_path, files_subset: Incomplete | None = ..., user: Incomplete | None = ...): ...
    def _get_upload_urls(self, relative_path, filesizes, user: Incomplete | None = ...): ...
    @staticmethod
    def _relativize_keys(the_dict, basepath): ...
    def get_last_revision(self, ref): ...
    def get_recipe_revisions(self, ref): ...
    def get_last_package_revision(self, pref): ...
    def update_last_revision(self, ref) -> None: ...
    def update_last_package_revision(self, pref) -> None: ...
    def _update_last_revision(self, rev_file_path, ref) -> None: ...
    def get_package_revisions(self, pref): ...
    def _get_revisions_list(self, rev_file_path): ...
    def _get_latest_revision(self, rev_file_path): ...
    def _recipe_revisions_file(self, ref): ...
    def _package_revisions_file(self, pref): ...
    def get_revision_time(self, ref): ...
    def get_package_revision_time(self, pref): ...
    def _remove_revision_from_index(self, ref) -> None: ...
    def _remove_package_revision_from_index(self, pref) -> None: ...
    def _load_revision_list(self, ref): ...
    def _save_revision_list(self, rev_list, ref) -> None: ...
    def _save_package_revision_list(self, rev_list, pref) -> None: ...
    def _load_package_revision_list(self, pref): ...
