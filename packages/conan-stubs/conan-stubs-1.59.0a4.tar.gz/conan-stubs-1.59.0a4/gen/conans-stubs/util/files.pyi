from _typeshed import Incomplete
from collections.abc import Generator
from conans.util.log import logger as logger

def walk(top, **kwargs): ...
def make_read_only(folder_path) -> None: ...
def make_file_read_only(file_path) -> None: ...

_DIRTY_FOLDER: str

def set_dirty(folder) -> None: ...
def clean_dirty(folder) -> None: ...
def is_dirty(folder): ...
def set_dirty_context_manager(folder) -> Generator[None, None, None]: ...
def _detect_encoding(text): ...
def decode_text(text, encoding: str = ...): ...
def touch(fname, times: Incomplete | None = ...) -> None: ...
def touch_folder(folder) -> None: ...
def normalize(text): ...
def md5(content): ...
def md5sum(file_path): ...
def sha1sum(file_path): ...
def sha256sum(file_path): ...
def _generic_algorithm_sum(file_path, algorithm_name): ...
def save_append(path, content, encoding: str = ...) -> None: ...
def save(path, content, only_if_modified: bool = ..., encoding: str = ...) -> None: ...
def mkdir_tmp(): ...
def to_file_bytes(content, encoding: str = ...): ...
def save_files(path, files, only_if_modified: bool = ..., encoding: str = ...) -> None: ...
def load(path, binary: bool = ..., encoding: str = ...): ...
def relative_dirs(path): ...
def get_abs_path(folder, origin): ...
def _change_permissions(func, path, exc_info) -> None: ...
def rmdir(path) -> None: ...
def remove(path) -> None: ...
def mkdir(path) -> None: ...
def path_exists(path, basedir): ...
def gzopen_without_timestamps(name, mode: str = ..., fileobj: Incomplete | None = ..., **kwargs): ...
def tar_extract(fileobj, destination_dir): ...
def list_folder_subdirs(basedir, level): ...
def exception_message_safe(exc): ...
def merge_directories(src, dst, excluded: Incomplete | None = ...): ...
