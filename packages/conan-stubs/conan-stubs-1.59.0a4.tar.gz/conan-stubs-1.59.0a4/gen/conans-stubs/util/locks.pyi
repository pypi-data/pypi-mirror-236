from _typeshed import Incomplete
from conans.util.files import load as load, save as save
from conans.util.log import logger as logger

class NoLock:
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

class SimpleLock:
    _lock: Incomplete
    def __init__(self, filename) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

READ_BUSY_DELAY: float
WRITE_BUSY_DELAY: float

class Lock:
    @staticmethod
    def clean(folder) -> None: ...
    _count_file: Incomplete
    _count_lock_file: Incomplete
    _locked_item: Incomplete
    _output: Incomplete
    _first_lock: bool
    def __init__(self, folder, locked_item, output) -> None: ...
    @property
    def files(self): ...
    def _info_locked(self) -> None: ...
    def _readers(self): ...

class ReadLock(Lock):
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

class WriteLock(Lock):
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
