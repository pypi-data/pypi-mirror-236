from _typeshed import Incomplete
from collections.abc import Generator
from conans.client.output import ConanOutput as ConanOutput

TIMEOUT_BEAT_SECONDS: int
TIMEOUT_BEAT_CHARACTER: str
LEFT_JUSTIFY_DESC: int
LEFT_JUSTIFY_MESSAGE: int

def left_justify_message(msg): ...
def left_justify_description(msg): ...

class ProgressOutput(ConanOutput):
    def __init__(self, output) -> None: ...
    def _write(self, data, newline: bool = ...) -> None: ...
    def _write_err(self, data, newline: bool = ...) -> None: ...

class Progress:
    _tqdm_bar: Incomplete
    _total_length: Incomplete
    _output: Incomplete
    _processed_size: int
    _description: Incomplete
    _post_description: Incomplete
    _last_time: Incomplete
    def __init__(self, length, output, description, post_description: Incomplete | None = ...) -> None: ...
    def initial_value(self, value) -> None: ...
    def _pb_update(self, chunk_size) -> None: ...
    def update(self, chunks) -> Generator[Incomplete, None, None]: ...
    def pb_close(self) -> None: ...

class FileWrapper(Progress):
    _fileobj: Incomplete
    def __init__(self, fileobj, output, description, post_description: Incomplete | None = ...) -> None: ...
    def seekable(self): ...
    def seek(self, *args, **kwargs): ...
    def tell(self): ...
    def read(self, size): ...

class ListWrapper:
    _files_list: Incomplete
    _total_length: Incomplete
    _iterator: Incomplete
    _last_progress: Incomplete
    _i_file: int
    _output: Incomplete
    _description: Incomplete
    _post_description: Incomplete
    _last_time: Incomplete
    _tqdm_bar: Incomplete
    def __init__(self, files_list, output, description, post_description: Incomplete | None = ...) -> None: ...
    def update(self) -> None: ...
    def pb_close(self) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...
    def next(self): ...

def open_binary(path, output, description) -> Generator[Incomplete, None, None]: ...
def iterate_list_with_progress(files_list, output, description) -> Generator[Incomplete, None, None]: ...
