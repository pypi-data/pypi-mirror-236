from _typeshed import Incomplete
from conans.errors import ConanException as ConanException
from conans.model.ref import ConanFileReference as ConanFileReference, PackageReference as PackageReference
from conans.util.files import md5sum as md5sum, sha1sum as sha1sum
from conans.util.log import logger as logger

TRACER_ACTIONS: Incomplete
MASKED_FIELD: str

def _validate_action(action_name) -> None: ...
def _get_tracer_file(): ...
def _append_to_log(obj) -> None: ...
def _append_action(action_name, props) -> None: ...
def _file_document(name, path): ...
def log_recipe_upload(ref, duration, files_uploaded, remote_name) -> None: ...
def log_package_upload(pref, duration, files_uploaded, remote) -> None: ...
def log_recipe_download(ref, duration, remote_name, files_downloaded) -> None: ...
def log_recipe_sources_download(ref, duration, remote_name, files_downloaded) -> None: ...
def log_package_download(pref, duration, remote, files_downloaded) -> None: ...
def log_recipe_got_from_local_cache(ref) -> None: ...
def log_package_got_from_local_cache(pref) -> None: ...
def log_package_built(pref, duration, log_run: Incomplete | None = ...) -> None: ...
def log_client_rest_api_call(url, method, duration, headers) -> None: ...
def log_command(name, parameters) -> None: ...
def log_exception(exc, message) -> None: ...
def log_download(url, duration) -> None: ...
def log_uncompressed_file(src_path, duration, dest_folder) -> None: ...
def log_compressed_files(files, duration, tgz_path) -> None: ...
