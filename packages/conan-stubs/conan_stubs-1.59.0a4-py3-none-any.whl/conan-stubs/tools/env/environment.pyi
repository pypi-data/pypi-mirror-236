from _typeshed import Incomplete
from collections.abc import Generator

class _EnvVarPlaceHolder: ...

def environment_wrap_command(env_filenames, env_folder, cmd, subsystem: Incomplete | None = ..., accepted_extensions: Incomplete | None = ...): ...

class _EnvValue:
    _name: Incomplete
    _values: Incomplete
    _path: Incomplete
    _sep: Incomplete
    def __init__(self, name, value: Incomplete | None = ..., separator: str = ..., path: bool = ...) -> None: ...
    def dumps(self): ...
    def copy(self): ...
    @property
    def is_path(self): ...
    def remove(self, value) -> None: ...
    def append(self, value, separator: Incomplete | None = ...) -> None: ...
    def prepend(self, value, separator: Incomplete | None = ...) -> None: ...
    def compose_env_value(self, other) -> None: ...
    def get_str(self, placeholder, subsystem, pathsep): ...
    def get_value(self, subsystem, pathsep): ...
    def set_relative_base_folder(self, folder) -> None: ...

class Environment:
    _values: Incomplete
    def __init__(self) -> None: ...
    def __bool__(self) -> bool: ...
    __nonzero__ = __bool__
    def copy(self): ...
    def __repr__(self): ...
    def dumps(self): ...
    def define(self, name, value, separator: str = ...) -> None: ...
    def define_path(self, name, value) -> None: ...
    def unset(self, name) -> None: ...
    def append(self, name, value, separator: Incomplete | None = ...) -> None: ...
    def append_path(self, name, value) -> None: ...
    def prepend(self, name, value, separator: Incomplete | None = ...) -> None: ...
    def prepend_path(self, name, value) -> None: ...
    def remove(self, name, value) -> None: ...
    def compose_env(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def vars(self, conanfile, scope: str = ...): ...
    def set_relative_base_folder(self, folder) -> None: ...

class EnvVars:
    _values: Incomplete
    _conanfile: Incomplete
    _scope: Incomplete
    _subsystem: Incomplete
    def __init__(self, conanfile, values, scope) -> None: ...
    @property
    def _pathsep(self): ...
    def __getitem__(self, name): ...
    def keys(self): ...
    def get(self, name, default: Incomplete | None = ..., variable_reference: Incomplete | None = ...): ...
    def items(self, variable_reference: Incomplete | None = ...): ...
    def apply(self) -> Generator[None, None, None]: ...
    def save_bat(self, file_location, generate_deactivate: bool = ...) -> None: ...
    def save_ps1(self, file_location, generate_deactivate: bool = ...) -> None: ...
    def save_sh(self, file_location, generate_deactivate: bool = ...) -> None: ...
    def save_script(self, filename) -> None: ...

class ProfileEnvironment:
    _environments: Incomplete
    def __init__(self) -> None: ...
    def __repr__(self): ...
    def __bool__(self) -> bool: ...
    __nonzero__ = __bool__
    def get_profile_env(self, ref): ...
    def update_profile_env(self, other) -> None: ...
    def dumps(self): ...
    @staticmethod
    def loads(text): ...

def create_env_script(conanfile, content, filename, scope) -> None: ...
def register_env_script(conanfile, env_script_path, scope) -> None: ...
