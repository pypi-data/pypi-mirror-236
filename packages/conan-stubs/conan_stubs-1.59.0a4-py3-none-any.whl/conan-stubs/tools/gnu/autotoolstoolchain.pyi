from _typeshed import Incomplete
from conan.tools._check_build_profile import check_using_build_profile as check_using_build_profile
from conan.tools._compilers import architecture_flag as architecture_flag, build_type_flags as build_type_flags, build_type_link_flags as build_type_link_flags, cppstd_flag as cppstd_flag, libcxx_flags as libcxx_flags
from conan.tools.apple.apple import apple_min_version_flag as apple_min_version_flag, apple_sdk_path as apple_sdk_path, to_apple_arch as to_apple_arch
from conan.tools.build.cross_building import cross_building as cross_building, get_cross_building_settings as get_cross_building_settings
from conan.tools.env import Environment as Environment
from conan.tools.files.files import save_toolchain_args as save_toolchain_args
from conan.tools.gnu.get_gnu_triplet import _get_gnu_triplet as _get_gnu_triplet
from conan.tools.microsoft import VCVars as VCVars, msvc_runtime_flag as msvc_runtime_flag

class AutotoolsToolchain:
    _conanfile: Incomplete
    _namespace: Incomplete
    _prefix: Incomplete
    extra_cxxflags: Incomplete
    extra_cflags: Incomplete
    extra_ldflags: Incomplete
    extra_defines: Incomplete
    ndebug: Incomplete
    build_type_flags: Incomplete
    build_type_link_flags: Incomplete
    cppstd: Incomplete
    arch_flag: Incomplete
    fpic: Incomplete
    msvc_runtime_flag: Incomplete
    _host: Incomplete
    _build: Incomplete
    _target: Incomplete
    apple_arch_flag: Incomplete
    apple_min_version_flag: Incomplete
    sysroot_flag: Incomplete
    apple_isysroot_flag: Incomplete
    configure_args: Incomplete
    autoreconf_args: Incomplete
    make_args: Incomplete
    def __init__(self, conanfile, namespace: Incomplete | None = ..., prefix: str = ...) -> None: ...
    def _get_msvc_runtime_flag(self): ...
    @staticmethod
    def _filter_list_empty_fields(v): ...
    @property
    def cxxflags(self): ...
    @property
    def cflags(self): ...
    @property
    def ldflags(self): ...
    @property
    def defines(self): ...
    def environment(self): ...
    def vars(self): ...
    def generate(self, env: Incomplete | None = ..., scope: str = ...) -> None: ...
    def _default_configure_shared_flags(self): ...
    def _default_configure_install_flags(self): ...
    @staticmethod
    def _default_autoreconf_flags(): ...
    def _get_triplets(self): ...
    def update_configure_args(self, updated_flags) -> None: ...
    def update_make_args(self, updated_flags) -> None: ...
    def update_autoreconf_args(self, updated_flags) -> None: ...
    def _update_flags(self, attr_name, updated_flags): ...
    def generate_args(self) -> None: ...
