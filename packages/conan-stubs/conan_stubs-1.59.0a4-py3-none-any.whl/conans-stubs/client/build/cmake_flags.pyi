from _typeshed import Incomplete
from conans.client import tools as tools
from conans.client.build.compiler_flags import architecture_flag as architecture_flag, parallel_compiler_cl_flag as parallel_compiler_cl_flag
from conans.client.build.cppstd_flags import cppstd_from_settings as cppstd_from_settings
from conans.client.tools import Version as Version, cross_building as cross_building
from conans.client.tools.apple import is_apple_os as is_apple_os
from conans.client.tools.oss import get_cross_building_settings as get_cross_building_settings
from conans.errors import ConanException as ConanException
from conans.model.build_info import DEFAULT_BIN as DEFAULT_BIN, DEFAULT_INCLUDE as DEFAULT_INCLUDE, DEFAULT_LIB as DEFAULT_LIB, DEFAULT_SHARE as DEFAULT_SHARE
from conans.util.env_reader import get_env as get_env
from conans.util.log import logger as logger

verbose_definition_name: str
cmake_install_prefix_var_name: str
runtime_definition_var_name: str
cmake_in_local_cache_var_name: str

def get_toolset(settings, generator): ...
def get_generator(conanfile): ...
def get_generator_platform(settings, generator): ...
def is_multi_configuration(generator): ...
def is_toolset_supported(generator): ...
def is_generator_platform_supported(generator): ...
def verbose_definition(value): ...
def in_local_cache_definition(value): ...
def runtime_definition(runtime): ...
def build_type_definition(new_build_type, old_build_type, generator, output): ...

class CMakeDefinitionsBuilder:
    _conanfile: Incomplete
    _forced_cmake_system_name: Incomplete
    _make_program: Incomplete
    _parallel: Incomplete
    _generator: Incomplete
    _set_cmake_flags: Incomplete
    _forced_build_type: Incomplete
    _output: Incomplete
    def __init__(self, conanfile, cmake_system_name: bool = ..., make_program: Incomplete | None = ..., parallel: bool = ..., generator: Incomplete | None = ..., set_cmake_flags: bool = ..., forced_build_type: Incomplete | None = ..., output: Incomplete | None = ...) -> None: ...
    def _ss(self, setname): ...
    def _get_cpp_standard_vars(self): ...
    def _cmake_cross_build_defines(self, cmake_version): ...
    def _get_make_program_definition(self): ...
    def get_definitions(self, cmake_version): ...
