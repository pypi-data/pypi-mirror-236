from _typeshed import Incomplete
from conans.client import tools as tools
from conans.client.build import defs_to_string as defs_to_string, join_arguments as join_arguments
from conans.client.build.autotools_environment import AutoToolsBuildEnvironment as AutoToolsBuildEnvironment
from conans.client.build.cppstd_flags import cppstd_from_settings as cppstd_from_settings
from conans.client.tools.env import _environment_add as _environment_add, environment_append as environment_append
from conans.client.tools.oss import args_to_string as args_to_string
from conans.errors import ConanException as ConanException
from conans.model.build_info import DEFAULT_BIN as DEFAULT_BIN, DEFAULT_INCLUDE as DEFAULT_INCLUDE, DEFAULT_LIB as DEFAULT_LIB
from conans.model.version import Version as Version
from conans.util.conan_v2_mode import conan_v2_error as conan_v2_error
from conans.util.env_reader import get_env as get_env
from conans.util.files import decode_text as decode_text, get_abs_path as get_abs_path, mkdir as mkdir
from conans.util.runners import version_runner as version_runner

class Meson:
    _conanfile: Incomplete
    _settings: Incomplete
    _append_vcvars: Incomplete
    _os: Incomplete
    _compiler: Incomplete
    _compiler_version: Incomplete
    _build_type: Incomplete
    backend: Incomplete
    options: Incomplete
    build_dir: Incomplete
    def __init__(self, conanfile, backend: Incomplete | None = ..., build_type: Incomplete | None = ..., append_vcvars: bool = ...) -> None: ...
    def _ss(self, setname): ...
    def _so(self, setname): ...
    @property
    def build_type(self): ...
    @property
    def build_folder(self): ...
    def _get_dirs(self, source_folder, build_folder, source_dir, build_dir, cache_build_folder): ...
    @property
    def flags(self): ...
    def configure(self, args: Incomplete | None = ..., defs: Incomplete | None = ..., source_dir: Incomplete | None = ..., build_dir: Incomplete | None = ..., pkg_config_paths: Incomplete | None = ..., cache_build_folder: Incomplete | None = ..., build_folder: Incomplete | None = ..., source_folder: Incomplete | None = ...) -> None: ...
    @property
    def _vcvars_needed(self): ...
    def _run(self, command) -> None: ...
    def _run_meson_targets(self, args: Incomplete | None = ..., build_dir: Incomplete | None = ..., targets: Incomplete | None = ...) -> None: ...
    def _run_meson_command(self, subcommand: Incomplete | None = ..., args: Incomplete | None = ..., build_dir: Incomplete | None = ...) -> None: ...
    def build(self, args: Incomplete | None = ..., build_dir: Incomplete | None = ..., targets: Incomplete | None = ...) -> None: ...
    def install(self, args: Incomplete | None = ..., build_dir: Incomplete | None = ...) -> None: ...
    def test(self, args: Incomplete | None = ..., build_dir: Incomplete | None = ..., targets: Incomplete | None = ...) -> None: ...
    def meson_install(self, args: Incomplete | None = ..., build_dir: Incomplete | None = ...) -> None: ...
    def meson_test(self, args: Incomplete | None = ..., build_dir: Incomplete | None = ...) -> None: ...
    @staticmethod
    def get_version(): ...
