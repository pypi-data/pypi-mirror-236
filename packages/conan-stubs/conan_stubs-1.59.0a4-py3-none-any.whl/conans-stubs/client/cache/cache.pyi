from _typeshed import Incomplete
from conans.assets.templates import dict_loader as dict_loader
from conans.client.cache.editable import EditablePackages as EditablePackages
from conans.client.cache.remote_registry import RemoteRegistry as RemoteRegistry
from conans.client.conf import ConanClientConfigParser as ConanClientConfigParser, get_default_client_conf as get_default_client_conf, get_default_settings_yml as get_default_settings_yml
from conans.client.conf.detect import detect_defaults_settings as detect_defaults_settings
from conans.client.output import Color as Color
from conans.client.profile_loader import read_profile as read_profile
from conans.client.store.localdb import LocalDB as LocalDB
from conans.errors import ConanException as ConanException
from conans.model.conf import ConfDefinition as ConfDefinition
from conans.model.profile import Profile as Profile
from conans.model.ref import ConanFileReference as ConanFileReference
from conans.model.settings import Settings as Settings
from conans.paths import ARTIFACTS_PROPERTIES_FILE as ARTIFACTS_PROPERTIES_FILE
from conans.paths.package_layouts.package_cache_layout import PackageCacheLayout as PackageCacheLayout
from conans.paths.package_layouts.package_editable_layout import PackageEditableLayout as PackageEditableLayout
from conans.util.files import list_folder_subdirs as list_folder_subdirs, load as load, normalize as normalize, remove as remove, save as save
from conans.util.locks import Lock as Lock

CONAN_CONF: str
CONAN_SETTINGS: str
LOCALDB: str
REMOTES: str
PROFILES_FOLDER: str
HOOKS_FOLDER: str
TEMPLATES_FOLDER: str
GENERATORS_FOLDER: str

def _is_case_insensitive_os(): ...
def _check_ref_case(ref, store_folder) -> None: ...

class ClientCache:
    cache_folder: Incomplete
    _output: Incomplete
    _no_lock: Incomplete
    _config: Incomplete
    _new_config: Incomplete
    editable_packages: Incomplete
    _store_folder: Incomplete
    def __init__(self, cache_folder, output) -> None: ...
    def all_refs(self): ...
    @property
    def store(self): ...
    def installed_as_editable(self, ref): ...
    @property
    def config_install_file(self): ...
    def package_layout(self, ref, short_paths: Incomplete | None = ...): ...
    @property
    def remotes_path(self): ...
    @property
    def registry(self): ...
    def _no_locks(self): ...
    @property
    def artifacts_properties_path(self): ...
    def read_artifacts_properties(self): ...
    @property
    def config(self): ...
    @property
    def new_config_path(self): ...
    @property
    def new_config(self): ...
    @property
    def localdb(self): ...
    @property
    def conan_conf_path(self): ...
    @property
    def profiles_path(self): ...
    @property
    def settings_path(self): ...
    @property
    def generators_path(self): ...
    @property
    def default_profile_path(self): ...
    @property
    def hooks_path(self): ...
    @property
    def default_profile(self): ...
    @property
    def settings(self): ...
    @property
    def hooks(self): ...
    @property
    def generators(self): ...
    def delete_empty_dirs(self, deleted_refs) -> None: ...
    def remove_locks(self) -> None: ...
    def get_template(self, template_name, user_overrides: bool = ...): ...
    def initialize_config(self) -> None: ...
    def reset_config(self) -> None: ...
    def initialize_default_profile(self) -> None: ...
    def reset_default_profile(self) -> None: ...
    def initialize_settings(self) -> None: ...
    def reset_settings(self) -> None: ...

def _mix_settings_with_env(settings): ...
