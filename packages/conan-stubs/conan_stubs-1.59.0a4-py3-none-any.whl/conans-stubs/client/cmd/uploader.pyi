from _typeshed import Incomplete
from conans.client.remote_manager import calc_files_checksum as calc_files_checksum, is_package_snapshot_complete as is_package_snapshot_complete
from conans.client.source import retrieve_exports_sources as retrieve_exports_sources
from conans.errors import ConanException as ConanException, NotFoundException as NotFoundException
from conans.model.manifest import FileTreeManifest as FileTreeManifest, gather_files as gather_files
from conans.model.ref import ConanFileReference as ConanFileReference, PackageReference as PackageReference, check_valid_ref as check_valid_ref
from conans.paths import CONANFILE as CONANFILE, CONANINFO as CONANINFO, CONAN_MANIFEST as CONAN_MANIFEST, EXPORT_SOURCES_TGZ_NAME as EXPORT_SOURCES_TGZ_NAME, EXPORT_TGZ_NAME as EXPORT_TGZ_NAME, PACKAGE_TGZ_NAME as PACKAGE_TGZ_NAME
from conans.search.search import search_packages as search_packages, search_recipes as search_recipes
from conans.tools import cpu_count as cpu_count
from conans.util import progress_bar as progress_bar
from conans.util.env_reader import get_env as get_env
from conans.util.files import clean_dirty as clean_dirty, gzopen_without_timestamps as gzopen_without_timestamps, is_dirty as is_dirty, load as load, set_dirty_context_manager as set_dirty_context_manager
from conans.util.log import logger as logger
from conans.util.progress_bar import left_justify_message as left_justify_message
from conans.util.tracer import log_compressed_files as log_compressed_files, log_package_upload as log_package_upload, log_recipe_upload as log_recipe_upload

UPLOAD_POLICY_FORCE: str
UPLOAD_POLICY_NO_OVERWRITE: str
UPLOAD_POLICY_NO_OVERWRITE_RECIPE: str
UPLOAD_POLICY_SKIP: str

class _UploadCollecter:
    _cache: Incomplete
    _user_io: Incomplete
    _output: Incomplete
    _loader: Incomplete
    def __init__(self, cache, user_io, output, loader) -> None: ...
    def collect(self, package_id, reference_or_pattern, confirm, remotes, all_packages, query): ...
    def _collects_refs_to_upload(self, package_id, reference_or_pattern, confirm): ...
    def _collect_packages_to_upload(self, refs, confirm, remotes, all_packages, query, package_id): ...

class _PackagePreparator:
    _cache: Incomplete
    _remote_manager: Incomplete
    _output: Incomplete
    _hook_manager: Incomplete
    def __init__(self, cache, remote_manager, hook_manager, output) -> None: ...
    def prepare_recipe(self, ref, conanfile, remote, remotes, policy): ...
    def _check_recipe_date(self, ref, remote, local_manifest): ...
    def _print_manifest_information(self, remote_recipe_manifest, local_manifest, ref, remote) -> None: ...
    def _recipe_files_to_upload(self, ref, policy, files, remote, remote_manifest, local_manifest): ...
    def _compress_recipe_files(self, layout, ref): ...
    def prepare_package(self, pref, integrity_check, policy, p_remote): ...
    def _compress_package_files(self, layout, pref, integrity_check): ...
    def _package_integrity_check(self, pref, files, package_folder) -> None: ...
    def _package_files_to_upload(self, pref, policy, the_files, remote): ...

class CmdUpload:
    _cache: Incomplete
    _user_io: Incomplete
    _output: Incomplete
    _remote_manager: Incomplete
    _loader: Incomplete
    _hook_manager: Incomplete
    _upload_thread_pool: Incomplete
    _exceptions_list: Incomplete
    _preparator: Incomplete
    def __init__(self, cache, user_io, remote_manager, loader, hook_manager) -> None: ...
    def upload(self, reference_or_pattern, remotes, upload_recorder, package_id: Incomplete | None = ..., all_packages: Incomplete | None = ..., confirm: bool = ..., retry: Incomplete | None = ..., retry_wait: Incomplete | None = ..., integrity_check: bool = ..., policy: Incomplete | None = ..., query: Incomplete | None = ..., parallel_upload: bool = ...) -> None: ...
    def _upload_ref(self, conanfile, ref, prefs, retry, retry_wait, integrity_check, policy, recipe_remote, upload_recorder, remotes): ...
    def _upload_recipe(self, ref, conanfile, retry, retry_wait, policy, remote, remotes): ...
    def _upload_package(self, pref, retry: Incomplete | None = ..., retry_wait: Incomplete | None = ..., integrity_check: bool = ..., policy: Incomplete | None = ..., p_remote: Incomplete | None = ...): ...

def compress_files(files, symlinks, name, dest_dir, output: Incomplete | None = ...): ...
