import argparse
from _typeshed import Incomplete
from conans.assets import templates as templates
from conans.cli.exit_codes import ERROR_GENERAL as ERROR_GENERAL, ERROR_INVALID_CONFIGURATION as ERROR_INVALID_CONFIGURATION, ERROR_INVALID_SYSTEM_REQUIREMENTS as ERROR_INVALID_SYSTEM_REQUIREMENTS, ERROR_MIGRATION as ERROR_MIGRATION, ERROR_SIGTERM as ERROR_SIGTERM, SUCCESS as SUCCESS, USER_CTRL_BREAK as USER_CTRL_BREAK, USER_CTRL_C as USER_CTRL_C
from conans.client.cmd.frogarian import cmd_frogarian as cmd_frogarian
from conans.client.cmd.uploader import UPLOAD_POLICY_FORCE as UPLOAD_POLICY_FORCE, UPLOAD_POLICY_NO_OVERWRITE as UPLOAD_POLICY_NO_OVERWRITE, UPLOAD_POLICY_NO_OVERWRITE_RECIPE as UPLOAD_POLICY_NO_OVERWRITE_RECIPE, UPLOAD_POLICY_SKIP as UPLOAD_POLICY_SKIP
from conans.client.conan_api import Conan as Conan, ProfileData as ProfileData, _make_abs_path as _make_abs_path, default_manifest_folder as default_manifest_folder
from conans.client.conan_command_output import CommandOutputer as CommandOutputer
from conans.client.conf.config_installer import is_config_install_scheduled as is_config_install_scheduled
from conans.client.output import Color as Color
from conans.client.printer import Printer as Printer
from conans.errors import ConanException as ConanException, ConanInvalidConfiguration as ConanInvalidConfiguration, ConanInvalidSystemRequirements as ConanInvalidSystemRequirements, ConanMigrationError as ConanMigrationError, NoRemoteAvailable as NoRemoteAvailable
from conans.model.conf import BUILT_IN_CONFS as BUILT_IN_CONFS
from conans.model.ref import ConanFileReference as ConanFileReference, PackageReference as PackageReference, check_valid_ref as check_valid_ref, get_reference_fields as get_reference_fields
from conans.util.config_parser import get_bool_from_text as get_bool_from_text
from conans.util.files import exception_message_safe as exception_message_safe, save as save
from conans.util.log import logger as logger

class Extender(argparse.Action):
    def __call__(self, parser, namespace, values, option_strings: Incomplete | None = ...) -> None: ...

class OnceArgument(argparse.Action):
    def __call__(self, parser, namespace, values, option_string: Incomplete | None = ...) -> None: ...

class SmartFormatter(argparse.HelpFormatter):
    def _fill_text(self, text, width, indent): ...

_QUERY_EXAMPLE: str
_PATTERN_EXAMPLE: str
_REFERENCE_EXAMPLE: str
_PREF_EXAMPLE: str
_BUILD_FOLDER_HELP: str
_INSTALL_FOLDER_HELP: str
_KEEP_SOURCE_HELP: str
_PATTERN_OR_REFERENCE_HELP: Incomplete
_PATTERN_REF_OR_PREF_HELP: Incomplete
_REF_OR_PREF_HELP: Incomplete
_PATH_HELP: str
_QUERY_HELP: Incomplete
_SOURCE_FOLDER_HELP: str

class Command:
    _conan: Incomplete
    _out: Incomplete
    def __init__(self, conan_api) -> None: ...
    @property
    def _outputer(self): ...
    def help(self, *args) -> None: ...
    def new(self, *args) -> None: ...
    def inspect(self, *args): ...
    def test(self, *args): ...
    def create(self, *args) -> None: ...
    def download(self, *args): ...
    def install(self, *args) -> None: ...
    def config(self, *args): ...
    def info(self, *args) -> None: ...
    def source(self, *args): ...
    def build(self, *args): ...
    def package(self, *args): ...
    def imports(self, *args): ...
    def export_pkg(self, *args) -> None: ...
    def export(self, *args): ...
    def remove(self, *args): ...
    def copy(self, *args): ...
    def user(self, *args) -> None: ...
    def search(self, *args) -> None: ...
    def upload(self, *args) -> None: ...
    def remote(self, *args): ...
    def profile(self, *args) -> None: ...
    def get(self, *args) -> None: ...
    def alias(self, *args) -> None: ...
    def workspace(self, *args) -> None: ...
    def editable(self, *args) -> None: ...
    def frogarian(self, *args) -> None: ...
    def lock(self, *args) -> None: ...
    def _show_help(self): ...
    def _commands(self): ...
    def _print_similar(self, command) -> None: ...
    @staticmethod
    def _check_lockfile_args(args) -> None: ...
    def _warn_python_version(self) -> None: ...
    def run(self, *args): ...

def _add_manifests_arguments(parser) -> None: ...
def _add_common_install_arguments(parser, build_help, update_help: Incomplete | None = ..., lockfile: bool = ...) -> None: ...
def _add_profile_arguments(parser) -> None: ...

_help_build_policies: str

def main(args) -> None: ...
