from _typeshed import Incomplete
from conans.errors import ConanException as ConanException
from conans.model.env_info import unquote as unquote
from conans.paths import CACERT_FILE as CACERT_FILE, DEFAULT_PROFILE_NAME as DEFAULT_PROFILE_NAME, conan_expand_user as conan_expand_user
from conans.util.dates import timedelta_from_text as timedelta_from_text
from conans.util.env_reader import get_env as get_env
from conans.util.files import load as load
from six.moves.configparser import ConfigParser

_t_default_settings_yml: Incomplete

def get_default_settings_yml(): ...

_t_default_client_conf: Incomplete

def get_default_client_conf(force_v1: bool = ...): ...

class ConanClientConfigParser(ConfigParser):
    optionxform = str
    _table_vars: Incomplete
    filename: Incomplete
    def __init__(self, filename) -> None: ...
    @property
    def env_vars(self): ...
    def _env_c(self, var_name, env_var_name, default_value): ...
    def get_item(self, item): ...
    def set_item(self, key, value) -> None: ...
    def rm_item(self, item) -> None: ...
    def _get_conf(self, varname): ...
    @property
    def default_profile(self): ...
    @property
    def cache_no_locks(self): ...
    @property
    def request_timeout(self): ...
    @property
    def revisions_enabled(self): ...
    @property
    def parallel_download(self): ...
    @property
    def download_cache(self): ...
    @property
    def scm_to_conandata(self): ...
    @property
    def default_package_id_mode(self): ...
    @property
    def default_python_requires_id_mode(self): ...
    @property
    def full_transitive_package_id(self): ...
    @property
    def short_paths_home(self): ...
    @property
    def storage_path(self): ...
    @property
    def proxies(self): ...
    @property
    def cacert_path(self): ...
    @property
    def client_cert_path(self): ...
    @property
    def client_cert_key_path(self): ...
    @property
    def hooks(self): ...
    @property
    def non_interactive(self): ...
    @property
    def logging_level(self): ...
    @property
    def logging_file(self): ...
    @property
    def print_commands_to_output(self): ...
    @property
    def retry(self): ...
    @property
    def retry_wait(self): ...
    @property
    def generate_run_log_file(self): ...
    @property
    def log_run_to_output(self): ...
    @staticmethod
    def get_log_level_by_name(level_name): ...
    @property
    def config_install_interval(self): ...
    @property
    def required_conan_version(self): ...
