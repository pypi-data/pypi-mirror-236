from conans.client.conf.compiler_id import LLVM_GCC as LLVM_GCC, UNKNOWN_COMPILER as UNKNOWN_COMPILER, detect_compiler_id as detect_compiler_id
from conans.client.output import Color as Color
from conans.client.tools import detected_architecture as detected_architecture, detected_os as detected_os
from conans.client.tools.win import latest_visual_studio_version_installed as latest_visual_studio_version_installed
from conans.model.version import Version as Version
from conans.util.conan_v2_mode import CONAN_V2_MODE_ENVVAR as CONAN_V2_MODE_ENVVAR
from conans.util.env_reader import get_env as get_env
from conans.util.files import save as save
from conans.util.runners import detect_runner as detect_runner

def _get_compiler_and_version(output, compiler_exe): ...
def _gcc_compiler(output, compiler_exe: str = ...): ...
def _clang_compiler(output, compiler_exe: str = ...): ...
def _sun_cc_compiler(output, compiler_exe: str = ...): ...
def _get_default_compiler(output): ...
def _get_profile_compiler_version(compiler, version, output): ...
def _detect_gcc_libcxx(executable, version, output, profile_name, profile_path): ...
def _detect_compiler_version(result, output, profile_path) -> None: ...
def _detect_os_arch(result, output) -> None: ...
def detect_defaults_settings(output, profile_path): ...
