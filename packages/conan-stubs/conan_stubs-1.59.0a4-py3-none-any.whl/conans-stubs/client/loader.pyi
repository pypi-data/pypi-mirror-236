from _typeshed import Incomplete
from conans.client.conf.required_version import validate_conan_version as validate_conan_version
from conans.client.loader_txt import ConanFileTextLoader as ConanFileTextLoader
from conans.client.tools.files import chdir as chdir
from conans.errors import ConanException as ConanException, ConanInvalidConfiguration as ConanInvalidConfiguration, NotFoundException as NotFoundException, conanfile_exception_formatter as conanfile_exception_formatter
from conans.model.conan_file import ConanFile as ConanFile
from conans.model.conan_generator import Generator as Generator
from conans.model.options import OptionsValues as OptionsValues
from conans.model.ref import ConanFileReference as ConanFileReference
from conans.model.settings import Settings as Settings
from conans.paths import DATA_YML as DATA_YML
from conans.util.files import load as load

class ConanFileLoader:
    _runner: Incomplete
    _generator_manager: Incomplete
    _output: Incomplete
    _pyreq_loader: Incomplete
    _python_requires: Incomplete
    _cached_conanfile_classes: Incomplete
    _requester: Incomplete
    def __init__(self, runner, output, python_requires, generator_manager: Incomplete | None = ..., pyreq_loader: Incomplete | None = ..., requester: Incomplete | None = ...) -> None: ...
    def load_basic(self, conanfile_path, lock_python_requires: Incomplete | None = ..., user: Incomplete | None = ..., channel: Incomplete | None = ..., display: str = ...): ...
    def load_basic_module(self, conanfile_path, lock_python_requires: Incomplete | None = ..., user: Incomplete | None = ..., channel: Incomplete | None = ..., display: str = ...): ...
    def load_generators(self, conanfile_path) -> None: ...
    @staticmethod
    def _load_data(conanfile_path): ...
    def load_named(self, conanfile_path, name, version, user, channel, lock_python_requires: Incomplete | None = ...): ...
    def load_export(self, conanfile_path, name, version, user, channel, lock_python_requires: Incomplete | None = ...): ...
    @staticmethod
    def _initialize_conanfile(conanfile, profile) -> None: ...
    def load_consumer(self, conanfile_path, profile_host, name: Incomplete | None = ..., version: Incomplete | None = ..., user: Incomplete | None = ..., channel: Incomplete | None = ..., lock_python_requires: Incomplete | None = ..., require_overrides: Incomplete | None = ...): ...
    def load_conanfile(self, conanfile_path, profile, ref, lock_python_requires: Incomplete | None = ...): ...
    def load_conanfile_txt(self, conan_txt_path, profile_host, ref: Incomplete | None = ..., require_overrides: Incomplete | None = ...): ...
    def _parse_conan_txt(self, contents, path, display_name, profile): ...
    def load_virtual(self, references, profile_host, scope_options: bool = ..., build_requires_options: Incomplete | None = ..., is_build_require: bool = ..., require_overrides: Incomplete | None = ...): ...

def _parse_module(conanfile_module, module_id, generator_manager): ...
def parse_conanfile(conanfile_path, python_requires, generator_manager): ...
def _parse_conanfile(conan_file_path): ...
def _get_required_conan_version_without_loading(conan_file_path): ...
