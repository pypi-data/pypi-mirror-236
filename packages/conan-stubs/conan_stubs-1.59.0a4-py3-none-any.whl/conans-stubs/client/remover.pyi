from _typeshed import Incomplete
from conans.client.cache.remote_registry import Remote as Remote
from conans.errors import ConanException as ConanException, NotFoundException as NotFoundException, PackageNotFoundException as PackageNotFoundException, RecipeNotFoundException as RecipeNotFoundException
from conans.model.ref import ConanFileReference as ConanFileReference, PackageReference as PackageReference, check_valid_ref as check_valid_ref
from conans.paths import SYSTEM_REQS as SYSTEM_REQS, rm_conandir as rm_conandir
from conans.search.search import filter_outdated as filter_outdated, search_packages as search_packages, search_recipes as search_recipes
from conans.util.log import logger as logger

class DiskRemover:
    def _remove(self, path, ref, msg: str = ...) -> None: ...
    def _remove_file(self, path, ref, msg: str = ...) -> None: ...
    def remove_recipe(self, package_layout, output) -> None: ...
    def remove(self, package_layout, output) -> None: ...
    def remove_src(self, package_layout) -> None: ...
    def remove_builds(self, package_layout, ids: Incomplete | None = ...) -> None: ...
    def remove_packages(self, package_layout, ids_filter: Incomplete | None = ...) -> None: ...

class ConanRemover:
    _user_io: Incomplete
    _cache: Incomplete
    _remote_manager: Incomplete
    _remotes: Incomplete
    def __init__(self, cache, remote_manager, user_io, remotes) -> None: ...
    def _remote_remove(self, ref, package_ids, remote): ...
    @staticmethod
    def _message_removing_editable(ref): ...
    def _local_remove(self, ref, src, build_ids, package_ids) -> None: ...
    def remove(self, pattern, remote_name, src: Incomplete | None = ..., build_ids: Incomplete | None = ..., package_ids_filter: Incomplete | None = ..., force: bool = ..., packages_query: Incomplete | None = ..., outdated: bool = ...) -> None: ...
    def _ask_permission(self, ref, src, build_ids, package_ids_filter, force): ...
