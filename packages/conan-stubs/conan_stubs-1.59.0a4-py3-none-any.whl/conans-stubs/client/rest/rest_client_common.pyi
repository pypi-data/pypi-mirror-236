from _typeshed import Incomplete
from conans.client.rest import response_to_str as response_to_str
from conans.errors import AuthenticationException as AuthenticationException, ConanException as ConanException, EXCEPTION_CODE_MAPPING as EXCEPTION_CODE_MAPPING, PackageNotFoundException as PackageNotFoundException, RecipeNotFoundException as RecipeNotFoundException
from conans.model.ref import ConanFileReference as ConanFileReference
from conans.util.files import decode_text as decode_text
from conans.util.log import logger as logger
from requests.auth import AuthBase

class JWTAuth(AuthBase):
    token: Incomplete
    def __init__(self, token) -> None: ...
    def __call__(self, request): ...

def get_exception_from_error(error_code): ...
def handle_return_deserializer(deserializer: Incomplete | None = ...): ...

class RestCommonMethods:
    token: Incomplete
    remote_url: Incomplete
    custom_headers: Incomplete
    _output: Incomplete
    requester: Incomplete
    _config: Incomplete
    verify_ssl: Incomplete
    _artifacts_properties: Incomplete
    _matrix_params: Incomplete
    def __init__(self, remote_url, token, custom_headers, output, requester, config, verify_ssl, artifacts_properties: Incomplete | None = ..., matrix_params: bool = ...) -> None: ...
    @property
    def auth(self): ...
    @staticmethod
    def _check_error_response(ret) -> None: ...
    def authenticate(self, user, password): ...
    def authenticate_oauth(self, user, password): ...
    def refresh_token(self, token, refresh_token): ...
    def check_credentials(self): ...
    def server_capabilities(self, user: Incomplete | None = ..., password: Incomplete | None = ...): ...
    def get_json(self, url, data: Incomplete | None = ..., headers: Incomplete | None = ...): ...
    def upload_recipe(self, ref, files_to_upload, deleted, retry, retry_wait) -> None: ...
    def get_recipe_snapshot(self, ref): ...
    def get_package_snapshot(self, pref): ...
    def upload_package(self, pref, files_to_upload, deleted, retry, retry_wait) -> None: ...
    def search(self, pattern: Incomplete | None = ..., ignorecase: bool = ...): ...
    def search_packages(self, ref): ...
