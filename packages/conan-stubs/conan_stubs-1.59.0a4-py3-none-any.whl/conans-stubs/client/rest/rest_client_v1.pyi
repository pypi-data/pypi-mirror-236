from _typeshed import Incomplete
from collections.abc import Generator
from conans.client.downloaders.download import run_downloader as run_downloader
from conans.client.downloaders.file_downloader import FileDownloader as FileDownloader
from conans.client.remote_manager import check_compressed_files as check_compressed_files
from conans.client.rest.client_routes import ClientV1Router as ClientV1Router
from conans.client.rest.file_uploader import FileUploader as FileUploader
from conans.client.rest.rest_client_common import RestCommonMethods as RestCommonMethods, handle_return_deserializer as handle_return_deserializer
from conans.errors import ConanException as ConanException, NoRestV2Available as NoRestV2Available, NotFoundException as NotFoundException, PackageNotFoundException as PackageNotFoundException
from conans.model.info import ConanInfo as ConanInfo
from conans.model.manifest import FileTreeManifest as FileTreeManifest
from conans.paths import CONANINFO as CONANINFO, CONAN_MANIFEST as CONAN_MANIFEST, EXPORT_SOURCES_TGZ_NAME as EXPORT_SOURCES_TGZ_NAME, EXPORT_TGZ_NAME as EXPORT_TGZ_NAME, PACKAGE_TGZ_NAME as PACKAGE_TGZ_NAME
from conans.util.files import decode_text as decode_text
from conans.util.log import logger as logger

def complete_url(base_url, url): ...

class RestV1Methods(RestCommonMethods):
    @property
    def router(self): ...
    def _download_files(self, file_urls, snapshot_md5) -> Generator[Incomplete, None, None]: ...
    def _file_server_capabilities(self, resource_url): ...
    def get_recipe_manifest(self, ref): ...
    def get_package_manifest(self, pref): ...
    def get_package_info(self, pref, headers): ...
    def _get_file_to_url_dict(self, url, data: Incomplete | None = ..., headers: Incomplete | None = ...): ...
    def _upload_recipe(self, ref, files_to_upload, retry, retry_wait) -> None: ...
    def _upload_package(self, pref, files_to_upload, retry, retry_wait) -> None: ...
    def _upload_files(self, file_urls, files, output, retry, retry_wait, display_name: Incomplete | None = ...) -> None: ...
    def _download_files_to_folder(self, file_urls, to_folder, snapshot_md5): ...
    def get_recipe(self, ref, dest_folder): ...
    def get_recipe_sources(self, ref, dest_folder): ...
    def _get_recipe_urls(self, ref): ...
    def get_package(self, pref, dest_folder): ...
    def _get_package_urls(self, pref): ...
    def get_recipe_path(self, ref, path): ...
    def get_package_path(self, pref, path): ...
    def _get_path(self, url, path): ...
    def _get_snapshot(self, url): ...
    def _remove_conanfile_files(self, ref, files): ...
    def remove_packages(self, ref, package_ids): ...
    def remove_conanfile(self, ref): ...
    def get_recipe_revisions(self, ref) -> None: ...
    def get_package_revisions(self, pref) -> None: ...
    def get_latest_recipe_revision(self, ref) -> None: ...
    def get_latest_package_revision(self, pref, headers) -> None: ...
    def _post_json(self, url, payload): ...
