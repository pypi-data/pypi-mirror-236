from conans.client import tools as tools
from conans.client.cmd.export import export_recipe as export_recipe, export_source as export_source
from conans.errors import ConanException as ConanException, ConanExceptionInUserConanfileMethod as ConanExceptionInUserConanfileMethod, conanfile_exception_formatter as conanfile_exception_formatter
from conans.model.conan_file import get_env_context_manager as get_env_context_manager
from conans.model.scm import SCM as SCM, get_scm_data as get_scm_data
from conans.paths import CONANFILE as CONANFILE, CONAN_MANIFEST as CONAN_MANIFEST, EXPORT_SOURCES_TGZ_NAME as EXPORT_SOURCES_TGZ_NAME, EXPORT_TGZ_NAME as EXPORT_TGZ_NAME
from conans.util.conan_v2_mode import conan_v2_property as conan_v2_property
from conans.util.files import clean_dirty as clean_dirty, is_dirty as is_dirty, merge_directories as merge_directories, mkdir as mkdir, rmdir as rmdir, set_dirty_context_manager as set_dirty_context_manager

def retrieve_exports_sources(remote_manager, cache, conanfile, ref, remotes) -> None: ...
def config_source_local(conanfile, conanfile_path, hook_manager) -> None: ...
def config_source(export_folder, export_source_folder, scm_sources_folder, conanfile, output, conanfile_path, reference, hook_manager, cache) -> None: ...
def _run_source(conanfile, conanfile_path, hook_manager, reference, cache, get_sources_from_exports) -> None: ...
def _clean_source_folder(folder) -> None: ...
def _run_cache_scm(conanfile, scm_sources_folder, output) -> None: ...
def _run_local_scm(conanfile, conanfile_folder, src_folder, output) -> None: ...
