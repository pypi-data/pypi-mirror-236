from _typeshed import Incomplete
from collections.abc import Generator
from conans.client.output import ConanOutput as ConanOutput
from conans.errors import ConanException as ConanException
from conans.util.fallbacks import default_output as default_output
from conans.util.files import _generic_algorithm_sum as _generic_algorithm_sum, load as load, save as save

UNIT_SIZE: float
VALID_LIB_EXTENSIONS: Incomplete

def chdir(newdir) -> Generator[None, None, None]: ...
def human_size(size_bytes): ...
def unzip(filename, destination: str = ..., keep_permissions: bool = ..., pattern: Incomplete | None = ..., output: Incomplete | None = ..., strip_root: bool = ...): ...
def untargz(filename, destination: str = ..., pattern: Incomplete | None = ..., strip_root: bool = ...): ...
def check_with_algorithm_sum(algorithm_name, file_path, signature) -> None: ...
def check_sha1(file_path, signature) -> None: ...
def check_md5(file_path, signature) -> None: ...
def check_sha256(file_path, signature) -> None: ...
def patch(base_path: Incomplete | None = ..., patch_file: Incomplete | None = ..., patch_string: Incomplete | None = ..., strip: int = ..., output: Incomplete | None = ..., fuzz: bool = ...) -> None: ...
def _manage_text_not_found(search, file_path, strict, function_name, output): ...
def _add_write_permissions(file_path) -> Generator[None, None, None]: ...
def replace_in_file(file_path, search, replace, strict: bool = ..., output: Incomplete | None = ..., encoding: Incomplete | None = ...) -> None: ...
def replace_path_in_file(file_path, search, replace, strict: bool = ..., windows_paths: Incomplete | None = ..., output: Incomplete | None = ..., encoding: Incomplete | None = ...): ...
def replace_prefix_in_pc_file(pc_file, new_prefix) -> None: ...
def _path_equals(path1, path2): ...
def collect_libs(conanfile, folder: Incomplete | None = ...): ...
def which(filename): ...
def _replace_with_separator(filepath, sep) -> None: ...
def unix2dos(filepath) -> None: ...
def dos2unix(filepath) -> None: ...
def rename(src, dst) -> None: ...
def remove_files_by_mask(directory, pattern): ...
def fix_symlinks(conanfile, raise_if_error: bool = ...) -> None: ...
