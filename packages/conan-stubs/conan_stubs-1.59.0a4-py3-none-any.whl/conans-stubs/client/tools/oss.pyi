from _typeshed import Incomplete
from conans.client.tools.env import environment_append as environment_append
from conans.client.tools.files import load as load, which as which
from conans.errors import CalledProcessErrorWithStderr as CalledProcessErrorWithStderr, ConanException as ConanException
from conans.model.version import Version as Version
from conans.util.runners import check_output_runner as check_output_runner

def args_to_string(args): ...

class CpuProperties:
    def get_cpu_quota(self): ...
    def get_cpu_period(self): ...
    def get_cpus(self): ...

def cpu_count(output: Incomplete | None = ...): ...
def detected_os(): ...
def detected_architecture(): ...

class OSInfo:
    os_version: Incomplete
    os_version_name: Incomplete
    is_linux: Incomplete
    linux_distro: Incomplete
    is_msys: Incomplete
    is_cygwin: Incomplete
    is_windows: Incomplete
    is_macos: Incomplete
    is_freebsd: Incomplete
    is_solaris: Incomplete
    is_aix: Incomplete
    is_posix: Incomplete
    def __init__(self) -> None: ...
    def _get_linux_distro_info(self) -> None: ...
    @property
    def with_apt(self): ...
    @property
    def with_yum(self): ...
    @property
    def with_dnf(self): ...
    @property
    def with_pacman(self): ...
    @property
    def with_zypper(self): ...
    @staticmethod
    def get_win_os_version(): ...
    @staticmethod
    def get_debian_version_name(version): ...
    @staticmethod
    def get_win_version_name(version): ...
    @staticmethod
    def get_osx_version_name(version): ...
    @staticmethod
    def get_aix_architecture(): ...
    @staticmethod
    def get_solaris_architecture(): ...
    @staticmethod
    def get_e2k_architecture(): ...
    @staticmethod
    def get_freebsd_version(): ...
    @staticmethod
    def get_solaris_version_name(version): ...
    @staticmethod
    def get_aix_version(): ...
    @staticmethod
    def bash_path(): ...
    @staticmethod
    def uname(options: Incomplete | None = ...): ...
    @staticmethod
    def get_aix_conf(options: Incomplete | None = ...): ...
    @staticmethod
    def detect_windows_subsystem(): ...

def cross_building(conanfile: Incomplete | None = ..., self_os: Incomplete | None = ..., self_arch: Incomplete | None = ..., skip_x64_x86: bool = ..., settings: Incomplete | None = ...): ...
def get_cross_building_settings(conanfile, self_os: Incomplete | None = ..., self_arch: Incomplete | None = ...): ...
def get_gnu_triplet(os_, arch, compiler: Incomplete | None = ...): ...
def get_build_os_arch(conanfile): ...
def get_target_os_arch(conanfile): ...
