from _typeshed import Incomplete
from conans.client.runner import ConanRunner as ConanRunner
from conans.client.tools.files import which as which
from conans.client.tools.oss import OSInfo as OSInfo, cross_building as cross_building, get_cross_building_settings as get_cross_building_settings
from conans.errors import ConanException as ConanException, ConanInvalidSystemRequirements as ConanInvalidSystemRequirements
from conans.util.env_reader import get_env as get_env
from conans.util.fallbacks import default_output as default_output

class SystemPackageTool:
    _output: Incomplete
    _is_up_to_date: bool
    _tool: Incomplete
    _conanfile: Incomplete
    _default_mode: Incomplete
    def __init__(self, runner: Incomplete | None = ..., os_info: Incomplete | None = ..., tool: Incomplete | None = ..., recommends: bool = ..., output: Incomplete | None = ..., conanfile: Incomplete | None = ..., default_mode: str = ...) -> None: ...
    @staticmethod
    def _get_sudo_str(): ...
    @staticmethod
    def _is_sudo_enabled(): ...
    @staticmethod
    def _create_tool(os_info, output): ...
    def _get_sysrequire_mode(self): ...
    def add_repository(self, repository, repo_key: Incomplete | None = ..., update: bool = ...) -> None: ...
    def update(self) -> None: ...
    def install(self, packages, update: bool = ..., force: bool = ..., arch_names: Incomplete | None = ...) -> None: ...
    def install_packages(self, packages, update: bool = ..., force: bool = ..., arch_names: Incomplete | None = ...): ...
    def _get_package_names(self, packages, arch_names): ...
    def installed(self, package_name): ...
    def _to_be_installed(self, packages): ...
    def _installed(self, packages): ...
    def _install_all(self, packages) -> None: ...
    def _install_any(self, packages): ...

class BaseTool:
    _output: Incomplete
    def __init__(self, output: Incomplete | None = ...) -> None: ...
    def get_package_name(self, package, arch, arch_names): ...

class NullTool(BaseTool):
    def add_repository(self, repository, repo_key: Incomplete | None = ...) -> None: ...
    def update(self) -> None: ...
    def install(self, package_name) -> None: ...
    def installed(self, package_name): ...

class AptTool(BaseTool):
    def add_repository(self, repository, repo_key: Incomplete | None = ...) -> None: ...
    def update(self) -> None: ...
    def install(self, package_name) -> None: ...
    def installed(self, package_name): ...
    def get_package_name(self, package, arch, arch_names): ...

class YumTool(BaseTool):
    def add_repository(self, repository, repo_key: Incomplete | None = ...) -> None: ...
    def update(self) -> None: ...
    def install(self, package_name) -> None: ...
    def installed(self, package_name): ...
    def get_package_name(self, package, arch, arch_names): ...

class DnfTool(YumTool):
    def add_repository(self, repository, repo_key: Incomplete | None = ...) -> None: ...
    def update(self) -> None: ...
    def install(self, package_name) -> None: ...

class BrewTool(BaseTool):
    def add_repository(self, repository, repo_key: Incomplete | None = ...) -> None: ...
    def update(self) -> None: ...
    def install(self, package_name) -> None: ...
    def installed(self, package_name): ...

class PkgTool(BaseTool):
    def add_repository(self, repository, repo_key: Incomplete | None = ...) -> None: ...
    def update(self) -> None: ...
    def install(self, package_name) -> None: ...
    def installed(self, package_name): ...

class PkgUtilTool(BaseTool):
    def add_repository(self, repository, repo_key: Incomplete | None = ...) -> None: ...
    def update(self) -> None: ...
    def install(self, package_name) -> None: ...
    def installed(self, package_name): ...

class ChocolateyTool(BaseTool):
    def add_repository(self, repository, repo_key: Incomplete | None = ...) -> None: ...
    def update(self) -> None: ...
    def install(self, package_name) -> None: ...
    def installed(self, package_name): ...

class PacManTool(BaseTool):
    def add_repository(self, repository, repo_key: Incomplete | None = ...) -> None: ...
    def update(self) -> None: ...
    def install(self, package_name) -> None: ...
    def installed(self, package_name): ...
    def get_package_name(self, package, arch, arch_names): ...

class ZypperTool(BaseTool):
    def add_repository(self, repository, repo_key: Incomplete | None = ...) -> None: ...
    def update(self) -> None: ...
    def install(self, package_name) -> None: ...
    def installed(self, package_name): ...
    def get_package_name(self, package, arch, arch_names): ...

def _run(runner, command, output, accepted_returns: Incomplete | None = ...) -> None: ...
