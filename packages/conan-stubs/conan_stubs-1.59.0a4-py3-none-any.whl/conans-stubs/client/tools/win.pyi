from _typeshed import Incomplete
from collections.abc import Generator
from conans.client.tools import which as which
from conans.client.tools.env import environment_append as environment_append
from conans.client.tools.oss import OSInfo as OSInfo, detected_architecture as detected_architecture, get_build_os_arch as get_build_os_arch
from conans.errors import ConanException as ConanException
from conans.model.version import Version as Version
from conans.util.conan_v2_mode import conan_v2_error as conan_v2_error
from conans.util.env_reader import get_env as get_env
from conans.util.fallbacks import default_output as default_output
from conans.util.files import mkdir_tmp as mkdir_tmp, save as save
from conans.util.runners import check_output_runner as check_output_runner

def _visual_compiler_cygwin(output, version): ...
def _system_registry_key(key, subkey, query): ...
def is_win64(): ...
def _visual_compiler(output, version): ...
def latest_vs_version_installed(output): ...

MSVS_YEAR: Incomplete
MSVS_DEFAULT_TOOLSETS: Incomplete
MSVS_DEFAULT_TOOLSETS_INVERSE: Incomplete

def msvs_toolset(conanfile): ...
def latest_visual_studio_version_installed(output): ...
def msvc_build_command(settings, sln_path, targets: Incomplete | None = ..., upgrade_project: bool = ..., build_type: Incomplete | None = ..., arch: Incomplete | None = ..., parallel: bool = ..., force_vcvars: bool = ..., toolset: Incomplete | None = ..., platforms: Incomplete | None = ..., output: Incomplete | None = ...): ...
def build_sln_command(settings, sln_path, targets: Incomplete | None = ..., upgrade_project: bool = ..., build_type: Incomplete | None = ..., arch: Incomplete | None = ..., parallel: bool = ..., toolset: Incomplete | None = ..., platforms: Incomplete | None = ..., output: Incomplete | None = ..., verbosity: Incomplete | None = ..., definitions: Incomplete | None = ...): ...
def vs_installation_path(version, preference: Incomplete | None = ...): ...
def vswhere(all_: bool = ..., prerelease: bool = ..., products: Incomplete | None = ..., requires: Incomplete | None = ..., version: str = ..., latest: bool = ..., legacy: bool = ..., property_: str = ..., nologo: bool = ...): ...
def vs_comntools(compiler_version): ...
def find_windows_10_sdk(): ...
def vcvars_command(conanfile: Incomplete | None = ..., arch: Incomplete | None = ..., compiler_version: Incomplete | None = ..., force: bool = ..., vcvars_ver: Incomplete | None = ..., winsdk_version: Incomplete | None = ..., output: Incomplete | None = ..., settings: Incomplete | None = ...): ...
def vcvars_dict(conanfile: Incomplete | None = ..., arch: Incomplete | None = ..., compiler_version: Incomplete | None = ..., force: bool = ..., filter_known_paths: bool = ..., vcvars_ver: Incomplete | None = ..., winsdk_version: Incomplete | None = ..., only_diff: bool = ..., output: Incomplete | None = ..., settings: Incomplete | None = ...): ...
def vcvars(*args, **kwargs) -> Generator[None, None, None]: ...
def escape_windows_cmd(command): ...
def get_cased_path(name): ...

MSYS2: str
MSYS: str
CYGWIN: str
WSL: str
SFU: str

def unix_path(path, path_flavor: Incomplete | None = ...): ...
def run_in_windows_bash(conanfile, bashcmd, cwd: Incomplete | None = ..., subsystem: Incomplete | None = ..., msys_mingw: bool = ..., env: Incomplete | None = ..., with_login: bool = ...): ...
