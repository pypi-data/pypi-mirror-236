import abc
from _typeshed import Incomplete
from conans.errors import ConanException as ConanException
from conans.model.build_info import COMPONENT_SCOPE as COMPONENT_SCOPE

class Generator(metaclass=abc.ABCMeta):
    name: Incomplete
    conanfile: Incomplete
    normalize: bool
    _deps_build_info: Incomplete
    _deps_env_info: Incomplete
    _env_info: Incomplete
    _deps_user_info: Incomplete
    _user_info_build: Incomplete
    def __init__(self, conanfile) -> None: ...
    @classmethod
    def _get_name(cls, obj): ...
    @property
    def deps_build_info(self): ...
    @property
    def deps_env_info(self): ...
    @property
    def deps_user_info(self): ...
    @property
    def env_info(self): ...
    @property
    def settings(self): ...
    @property
    @abc.abstractmethod
    def content(self): ...
    @property
    @abc.abstractmethod
    def filename(self): ...
    def get_public_deps(self, cpp_info): ...

class GeneratorComponentsMixin:
    @classmethod
    def sorted_components(self, cpp_info): ...
    def _validate_components(self, cpp_info) -> None: ...
    def _get_require_name(self, pkg_name, req): ...
    def _get_components(self, pkg_name, cpp_info): ...
    @classmethod
    def get_public_deps(cls, cpp_info): ...
