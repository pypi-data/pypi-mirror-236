from _typeshed import Incomplete
from collections.abc import Generator
from conans.errors import ConanException as ConanException

BUILT_IN_CONFS: Incomplete

def _is_profile_module(module_name): ...

class _ConfVarPlaceHolder: ...

class _ConfValue:
    _name: Incomplete
    _value: Incomplete
    _value_type: Incomplete
    _path: Incomplete
    def __init__(self, name, value, path: bool = ...) -> None: ...
    def __repr__(self): ...
    @property
    def value(self): ...
    def copy(self): ...
    def dumps(self): ...
    def update(self, value) -> None: ...
    def remove(self, value) -> None: ...
    def append(self, value) -> None: ...
    def prepend(self, value) -> None: ...
    def compose_conf_value(self, other) -> None: ...
    def set_relative_base_folder(self, folder) -> None: ...

class Conf:
    boolean_false_expressions: Incomplete
    _values: Incomplete
    def __init__(self) -> None: ...
    def __bool__(self) -> bool: ...
    __nonzero__ = __bool__
    def __repr__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __getitem__(self, name): ...
    def __setitem__(self, name, value) -> None: ...
    def __delitem__(self, name) -> None: ...
    def items(self) -> Generator[Incomplete, None, None]: ...
    @property
    def sha(self): ...
    @staticmethod
    def _get_boolean_value(value): ...
    def get(self, conf_name, default: Incomplete | None = ..., check_type: Incomplete | None = ...): ...
    def pop(self, conf_name, default: Incomplete | None = ...): ...
    @staticmethod
    def _validate_lower_case(name) -> None: ...
    def copy(self): ...
    def dumps(self): ...
    def define(self, name, value) -> None: ...
    def define_path(self, name, value) -> None: ...
    def unset(self, name) -> None: ...
    def update(self, name, value) -> None: ...
    def update_path(self, name, value) -> None: ...
    def append(self, name, value) -> None: ...
    def append_path(self, name, value) -> None: ...
    def prepend(self, name, value) -> None: ...
    def prepend_path(self, name, value) -> None: ...
    def remove(self, name, value) -> None: ...
    def compose_conf(self, other): ...
    def filter_user_modules(self): ...
    def set_relative_base_folder(self, folder) -> None: ...

class ConfDefinition:
    actions: Incomplete
    _pattern_confs: Incomplete
    def __init__(self) -> None: ...
    def __repr__(self): ...
    def __bool__(self) -> bool: ...
    __nonzero__ = __bool__
    def __getitem__(self, module_name): ...
    def __delitem__(self, module_name) -> None: ...
    def get(self, conf_name, default: Incomplete | None = ..., check_type: Incomplete | None = ...): ...
    def pop(self, conf_name, default: Incomplete | None = ...): ...
    @staticmethod
    def _split_pattern_name(pattern_name): ...
    def get_conanfile_conf(self, ref): ...
    def update_conf_definition(self, other) -> None: ...
    def _update_conf_definition(self, pattern, conf) -> None: ...
    def rebase_conf_definition(self, other) -> None: ...
    def update(self, key, value, profile: bool = ..., method: str = ...) -> None: ...
    def as_list(self): ...
    def dumps(self): ...
    @staticmethod
    def _get_evaluated_value(__v): ...
    def loads(self, text, profile: bool = ...) -> None: ...
