from _typeshed import Incomplete
from conans.errors import ConanException as ConanException
from conans.model.ref import ConanFileReference as ConanFileReference
from conans.util.log import logger as logger

def unquote(text): ...

class EnvValues:
    _data: Incomplete
    def __init__(self) -> None: ...
    def copy(self): ...
    @staticmethod
    def load_value(the_value): ...
    @staticmethod
    def loads(text): ...
    def dumps(self): ...
    @property
    def data(self): ...
    @property
    def _sorted_data(self): ...
    def add(self, name, value, package: Incomplete | None = ...) -> None: ...
    def remove(self, name, package: Incomplete | None = ...) -> None: ...
    def update_replace(self, key, value) -> None: ...
    def update(self, env_obj) -> None: ...
    def env_dicts(self, package_name, version: Incomplete | None = ..., user: Incomplete | None = ..., channel: Incomplete | None = ...): ...
    def __repr__(self): ...

class EnvInfo:
    _values_: Incomplete
    def __init__(self) -> None: ...
    @staticmethod
    def _adjust_casing(name): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value): ...
    @property
    def vars(self): ...

class DepsEnvInfo(EnvInfo):
    _dependencies_: Incomplete
    def __init__(self) -> None: ...
    @property
    def dependencies(self): ...
    @property
    def deps(self): ...
    def __getitem__(self, item): ...
    def update(self, dep_env_info, pkg_name): ...
    def update_deps_env_info(self, dep_env_info) -> None: ...
    @staticmethod
    def loads(text): ...
    def dumps(self): ...
