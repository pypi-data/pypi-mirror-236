from _typeshed import Incomplete
from conans.client.build.cppstd_flags import cppstd_default as cppstd_default
from conans.client.tools.win import MSVS_DEFAULT_TOOLSETS_INVERSE as MSVS_DEFAULT_TOOLSETS_INVERSE
from conans.errors import ConanException as ConanException
from conans.model.env_info import EnvValues as EnvValues
from conans.model.options import OptionsValues as OptionsValues
from conans.model.ref import PackageReference as PackageReference
from conans.model.values import Values as Values
from conans.paths import CONANINFO as CONANINFO
from conans.util.config_parser import ConfigParser as ConfigParser
from conans.util.files import load as load
from conans.util.sha import sha1 as sha1

PREV_UNKNOWN: str
PACKAGE_ID_UNKNOWN: str
PACKAGE_ID_INVALID: str

class RequirementInfo:
    package: Incomplete
    full_name: Incomplete
    full_version: Incomplete
    full_user: Incomplete
    full_channel: Incomplete
    full_recipe_revision: Incomplete
    full_package_id: Incomplete
    full_package_revision: Incomplete
    _indirect: Incomplete
    def __init__(self, pref, default_package_id_mode, indirect: bool = ...) -> None: ...
    def copy(self): ...
    def dumps(self): ...
    @property
    def sha(self): ...
    name: Incomplete
    recipe_revision: Incomplete
    def unrelated_mode(self) -> None: ...
    def semver_direct_mode(self) -> None: ...
    version: Incomplete
    user: Incomplete
    def semver_mode(self) -> None: ...
    semver = semver_mode
    def full_version_mode(self) -> None: ...
    def patch_mode(self) -> None: ...
    def base_mode(self) -> None: ...
    def minor_mode(self) -> None: ...
    def major_mode(self) -> None: ...
    channel: Incomplete
    package_id: Incomplete
    def full_recipe_mode(self) -> None: ...
    def full_package_mode(self) -> None: ...
    package_revision: Incomplete
    def recipe_revision_mode(self) -> None: ...
    def package_revision_mode(self) -> None: ...

class RequirementsInfo:
    _data: Incomplete
    def __init__(self, prefs, default_package_id_mode) -> None: ...
    def copy(self): ...
    def clear(self) -> None: ...
    def remove(self, *args) -> None: ...
    def add(self, prefs_indirect, default_package_id_mode) -> None: ...
    def refs(self): ...
    def _get_key(self, item): ...
    def __getitem__(self, item): ...
    @property
    def pkg_names(self): ...
    @property
    def sha(self): ...
    def dumps(self): ...
    def unrelated_mode(self) -> None: ...
    def semver_direct_mode(self) -> None: ...
    def semver_mode(self) -> None: ...
    def patch_mode(self) -> None: ...
    def minor_mode(self) -> None: ...
    def major_mode(self) -> None: ...
    def base_mode(self) -> None: ...
    def full_version_mode(self) -> None: ...
    def full_recipe_mode(self) -> None: ...
    def full_package_mode(self) -> None: ...
    def recipe_revision_mode(self) -> None: ...
    def package_revision_mode(self) -> None: ...

class PythonRequireInfo:
    _ref: Incomplete
    _name: Incomplete
    _version: Incomplete
    _user: Incomplete
    _channel: Incomplete
    _revision: Incomplete
    def __init__(self, ref, default_package_id_mode) -> None: ...
    @property
    def sha(self): ...
    def semver_mode(self) -> None: ...
    def full_version_mode(self) -> None: ...
    def patch_mode(self) -> None: ...
    def minor_mode(self) -> None: ...
    def major_mode(self) -> None: ...
    def full_recipe_mode(self) -> None: ...
    def recipe_revision_mode(self) -> None: ...
    def unrelated_mode(self) -> None: ...

class PythonRequiresInfo:
    _default_package_id_mode: Incomplete
    _refs: Incomplete
    def __init__(self, refs, default_package_id_mode) -> None: ...
    def copy(self): ...
    def __bool__(self) -> bool: ...
    def __nonzero__(self): ...
    def clear(self) -> None: ...
    @property
    def sha(self): ...
    def unrelated_mode(self) -> None: ...
    def semver_mode(self) -> None: ...
    def patch_mode(self) -> None: ...
    def minor_mode(self) -> None: ...
    def major_mode(self) -> None: ...
    def full_version_mode(self) -> None: ...
    def full_recipe_mode(self) -> None: ...
    def recipe_revision_mode(self) -> None: ...

class _PackageReferenceList(list):
    @staticmethod
    def loads(text): ...
    def dumps(self): ...
    def serialize(self): ...

class ConanInfo:
    def copy(self): ...
    @staticmethod
    def create(settings, options, prefs_direct, prefs_indirect, default_package_id_mode, python_requires, default_python_requires_id_mode): ...
    @staticmethod
    def loads(text): ...
    def dumps(self): ...
    def clone(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    @staticmethod
    def load_file(conan_info_path): ...
    @staticmethod
    def load_from_package(package_folder): ...
    invalid: str
    def package_id(self): ...
    def serialize_min(self): ...
    def header_only(self) -> None: ...
    clear = header_only
    def msvc_compatible(self): ...
    def apple_clang_compatible(self): ...
    def vs_toolset_compatible(self) -> None: ...
    def vs_toolset_incompatible(self) -> None: ...
    def discard_build_settings(self) -> None: ...
    def include_build_settings(self) -> None: ...
    def default_std_matching(self) -> None: ...
    def default_std_non_matching(self) -> None: ...
    def shared_library_package_id(self) -> None: ...
    def parent_compatible(self, *_, **kwargs) -> None: ...
    def base_compatible(self) -> None: ...
