from _typeshed import Incomplete
from collections import OrderedDict
from conans.errors import ConanException as ConanException
from conans.model.ref import ConanFileReference as ConanFileReference
from conans.util.env_reader import get_env as get_env

class Requirement:
    ref: Incomplete
    range_ref: Incomplete
    override: Incomplete
    private: Incomplete
    build_require: bool
    build_require_context: Incomplete
    force_host_context: bool
    _locked_id: Incomplete
    def __init__(self, ref, private: bool = ..., override: bool = ...) -> None: ...
    def lock(self, locked_ref, locked_id) -> None: ...
    @property
    def locked_id(self): ...
    @property
    def version_range(self): ...
    @property
    def alias(self): ...
    @property
    def is_resolved(self): ...
    def __repr__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class Requirements(OrderedDict):
    def __init__(self, *args) -> None: ...
    def copy(self): ...
    def iteritems(self): ...
    def add(self, reference, private: bool = ..., override: bool = ...) -> None: ...
    def add_ref(self, ref, private: bool = ..., override: bool = ...) -> None: ...
    def override(self, ref) -> None: ...
    def update(self, down_reqs, output, own_ref, down_ref): ...
    def __call__(self, reference, private: bool = ..., override: bool = ..., **kwargs) -> None: ...
    def __repr__(self): ...
