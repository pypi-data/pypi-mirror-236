from _typeshed import Incomplete
from conans.client.tools.scm import Git as Git, SVN as SVN
from conans.errors import ConanException as ConanException
from conans.util.files import rmdir as rmdir

def get_scm_data(conanfile): ...
def _get_dict_value(data, key, expected_type, default: Incomplete | None = ..., disallowed_type: Incomplete | None = ...): ...

class SCMData:
    VERIFY_SSL_DEFAULT: bool
    SHALLOW_DEFAULT: bool
    type: Incomplete
    url: Incomplete
    revision: Incomplete
    verify_ssl: Incomplete
    username: Incomplete
    password: Incomplete
    subfolder: Incomplete
    submodule: Incomplete
    shallow: Incomplete
    def __init__(self, conanfile) -> None: ...
    @property
    def capture_origin(self): ...
    @property
    def capture_revision(self): ...
    @property
    def recipe_revision(self): ...
    def as_dict(self): ...
    def __repr__(self): ...

class SCM:
    availables: Incomplete
    _data: Incomplete
    _output: Incomplete
    repo_folder: Incomplete
    repo: Incomplete
    def __init__(self, data, repo_folder, output) -> None: ...
    @classmethod
    def detect_scm(cls, folder): ...
    def _get_repo(self): ...
    @property
    def excluded_files(self): ...
    def checkout(self): ...
    def get_remote_url(self, remove_credentials): ...
    def get_revision(self): ...
    def is_pristine(self): ...
    def get_repo_root(self): ...
    def get_qualified_remote_url(self, remove_credentials): ...
    def is_local_repository(self): ...
    @staticmethod
    def clean_url(url): ...
    def get_local_path_to_url(self, url): ...
