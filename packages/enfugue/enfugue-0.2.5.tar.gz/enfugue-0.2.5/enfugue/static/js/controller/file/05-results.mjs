import{MenuController}from"../menu.mjs";import{ModelTableView}from"../../view/table.mjs";import{ImageView}from"../../view/image.mjs";import{isEmpty,humanDuration,sleep}from"../../base/helpers.mjs";import{ElementBuilder}from"../../base/builder.mjs";const E=new ElementBuilder({invocationOutputs:"enfugue-invocation-outputs",invocationOutput:"enfugue-invocation-output"});class InvocationTableView extends ModelTableView{static className="invocation-history";static searchFields=["plan"];static buttons=[{icon:"fa-solid fa-trash",label:"Delete",click:async function(t){await InvocationTableView.deleteInvocation(t.id),await sleep(100),await this.parent.requery()}}];static sortGroups=[{column:"started",direction:"desc"}];static printKwargs={prompt:"Prompt",negative_prompt:"Negative Prompt",width:"Width",height:"Height",image_width:"Engine Width",image_height:"Engine Height",model:"Checkpoint",inversion:"Textual Inversion(s)",lora:"LoRA(s)"};static columnFormatters={duration:t=>humanDuration(parseFloat(t),!0,!0),plan:t=>JSON.stringify(t),prompt:(t,i)=>i.plan.prompt,seed:(t,i)=>i.plan.seed.toString(),outputs:async function(t,i){if(t>0){let e=E.invocationOutputs();for(let o=0;o<t;o++){let t=`${i.id}_${o}.png`,n=`/api/invocation/images/${t}`,a=`/api/invocation/thumbnails/${t}`,s=new ImageView(this.config,a,!1),r=E.invocationOutput().content(await s.getNode()).on("click",(async()=>{InvocationTableView.setCurrentInvocationImage(n)}));e.append(r)}return e}return isEmpty(i.error)?"None":`Error: ${i.error}`}};static columns={started:"Started",duration:"Duration",seed:"Seed",prompt:"Prompt",plan:"Parameters",outputs:"Output"}}class ResultsController extends MenuController{static historyTableWidth=1e3;static historyTableHeight=500;static menuName="Results";static menuIcon="fa-solid fa-images";static menuShortcut="r";async initialize(){await super.initialize(),InvocationTableView.deleteInvocation=t=>{this.model.delete(`/invocation/${t}`)},InvocationTableView.setCurrentInvocationImage=t=>this.application.images.setCurrentInvocationImage(t)}async createResultsWindow(){return await this.spawnWindow("Results",new InvocationTableView(this.config,this.model.DiffusionInvocation),this.constructor.historyTableWidth,this.constructor.historyTableHeight)}async onClick(){isEmpty(this.historyWindow)?(this.historyWindow=await this.createResultsWindow(),this.historyWindow.onClose((()=>{delete this.historyWindow}))):this.historyWindow.focus()}}export{ResultsController as MenuController};
