# This file was auto-generated by Fern from our API Definition.

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...environment import MergeEnvironment
from .resources.account_details.client import AccountDetailsClient, AsyncAccountDetailsClient
from .resources.account_token.client import AccountTokenClient, AsyncAccountTokenClient
from .resources.async_passthrough.client import AsyncAsyncPassthroughClient
from .resources.async_passthrough.client import (
    AsyncPassthroughClient as resources_hris_resources_async_passthrough_client_AsyncPassthroughClient,
)
from .resources.available_actions.client import AsyncAvailableActionsClient, AvailableActionsClient
from .resources.bank_info.client import AsyncBankInfoClient, BankInfoClient
from .resources.benefits.client import AsyncBenefitsClient, BenefitsClient
from .resources.companies.client import AsyncCompaniesClient, CompaniesClient
from .resources.delete_account.client import AsyncDeleteAccountClient, DeleteAccountClient
from .resources.dependents.client import AsyncDependentsClient, DependentsClient
from .resources.employee_payroll_runs.client import AsyncEmployeePayrollRunsClient, EmployeePayrollRunsClient
from .resources.employees.client import AsyncEmployeesClient, EmployeesClient
from .resources.employer_benefits.client import AsyncEmployerBenefitsClient, EmployerBenefitsClient
from .resources.employments.client import AsyncEmploymentsClient, EmploymentsClient
from .resources.force_resync.client import AsyncForceResyncClient, ForceResyncClient
from .resources.generate_key.client import AsyncGenerateKeyClient, GenerateKeyClient
from .resources.groups.client import AsyncGroupsClient, GroupsClient
from .resources.issues.client import AsyncIssuesClient, IssuesClient
from .resources.link_token.client import AsyncLinkTokenClient, LinkTokenClient
from .resources.linked_accounts.client import AsyncLinkedAccountsClient, LinkedAccountsClient
from .resources.locations.client import AsyncLocationsClient, LocationsClient
from .resources.passthrough.client import (
    AsyncPassthroughClient as resources_hris_resources_passthrough_client_AsyncPassthroughClient,
)
from .resources.passthrough.client import PassthroughClient
from .resources.pay_groups.client import AsyncPayGroupsClient, PayGroupsClient
from .resources.payroll_runs.client import AsyncPayrollRunsClient, PayrollRunsClient
from .resources.regenerate_key.client import AsyncRegenerateKeyClient, RegenerateKeyClient
from .resources.selective_sync.client import AsyncSelectiveSyncClient, SelectiveSyncClient
from .resources.sync_status.client import AsyncSyncStatusClient, SyncStatusClient
from .resources.teams.client import AsyncTeamsClient, TeamsClient
from .resources.time_off.client import AsyncTimeOffClient, TimeOffClient
from .resources.time_off_balances.client import AsyncTimeOffBalancesClient, TimeOffBalancesClient
from .resources.webhook_receivers.client import AsyncWebhookReceiversClient, WebhookReceiversClient


class HrisClient:
    def __init__(
        self, *, environment: MergeEnvironment = MergeEnvironment.PRODUCTION, client_wrapper: SyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper
        self.account_details = AccountDetailsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.account_token = AccountTokenClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.async_passthrough = resources_hris_resources_async_passthrough_client_AsyncPassthroughClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.available_actions = AvailableActionsClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.bank_info = BankInfoClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.benefits = BenefitsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.companies = CompaniesClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.delete_account = DeleteAccountClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.dependents = DependentsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.employee_payroll_runs = EmployeePayrollRunsClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.employees = EmployeesClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.employer_benefits = EmployerBenefitsClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.employments = EmploymentsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.generate_key = GenerateKeyClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.groups = GroupsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.issues = IssuesClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.link_token = LinkTokenClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.linked_accounts = LinkedAccountsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.locations = LocationsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.passthrough = PassthroughClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.pay_groups = PayGroupsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.payroll_runs = PayrollRunsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.regenerate_key = RegenerateKeyClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.selective_sync = SelectiveSyncClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.sync_status = SyncStatusClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.force_resync = ForceResyncClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.teams = TeamsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.time_off = TimeOffClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.time_off_balances = TimeOffBalancesClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.webhook_receivers = WebhookReceiversClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )


class AsyncHrisClient:
    def __init__(
        self, *, environment: MergeEnvironment = MergeEnvironment.PRODUCTION, client_wrapper: AsyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper
        self.account_details = AsyncAccountDetailsClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.account_token = AsyncAccountTokenClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.async_passthrough = AsyncAsyncPassthroughClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.available_actions = AsyncAvailableActionsClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.bank_info = AsyncBankInfoClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.benefits = AsyncBenefitsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.companies = AsyncCompaniesClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.delete_account = AsyncDeleteAccountClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.dependents = AsyncDependentsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.employee_payroll_runs = AsyncEmployeePayrollRunsClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.employees = AsyncEmployeesClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.employer_benefits = AsyncEmployerBenefitsClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.employments = AsyncEmploymentsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.generate_key = AsyncGenerateKeyClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.groups = AsyncGroupsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.issues = AsyncIssuesClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.link_token = AsyncLinkTokenClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.linked_accounts = AsyncLinkedAccountsClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.locations = AsyncLocationsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.passthrough = resources_hris_resources_passthrough_client_AsyncPassthroughClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.pay_groups = AsyncPayGroupsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.payroll_runs = AsyncPayrollRunsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.regenerate_key = AsyncRegenerateKeyClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.selective_sync = AsyncSelectiveSyncClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.sync_status = AsyncSyncStatusClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.force_resync = AsyncForceResyncClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.teams = AsyncTeamsClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.time_off = AsyncTimeOffClient(environment=self._environment, client_wrapper=self._client_wrapper)
        self.time_off_balances = AsyncTimeOffBalancesClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
        self.webhook_receivers = AsyncWebhookReceiversClient(
            environment=self._environment, client_wrapper=self._client_wrapper
        )
