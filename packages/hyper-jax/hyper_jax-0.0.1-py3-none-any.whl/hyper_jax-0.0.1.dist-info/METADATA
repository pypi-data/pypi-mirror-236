Metadata-Version: 2.1
Name: hyper-jax
Version: 0.0.1
Summary: Hyperdimensional computing with Jax
Author-email: marklar <ddillon@gmail.com>
License: MIT License
        
        Copyright (c) 2023 mmarklar
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Keywords: hyperdimensional computing,jax,vector symbolic architecture
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: jax >=0.4.19

# hyper-jax
[Hyperdimensional computing](https://en.wikipedia.org/wiki/Hyperdimensional_computing) with Jax. This library provides a very minimal implementation of MAP (Multiply, add, permute) operations over bipolar vectors originally proposed [here](https://www.researchgate.net/publication/215992330_Multiplicative_Binding_Representation_Operators_Analogy).

# Install

Coming soon...

# How to use
Generate 2 random vectors with dimension of 10 000
```
from generator import random_vectors

dimensions = 10000
count = 2

key = random.PRNGKey(0)
vectors = random_vectors(key, dimensions, count)
```

Bundle two hypervectors
```
from operation import bundle, unbundle

hypervector = bundle(vectors[0], vectors[1])
```
Unbundle two hypervectors
```
# original_vector == vectors[0]
original_vector = unbundle(hypervector, vectors[1])
```
Bind two hypervectors
```
from operation import bind, unbind

bound_vector = bind(vectors[0], vectors[1])
```
Unbind the hypervector
```
# original_vector == vectors[1]
unbound_vector = unbind(bound_vector, vectors[0])
```
