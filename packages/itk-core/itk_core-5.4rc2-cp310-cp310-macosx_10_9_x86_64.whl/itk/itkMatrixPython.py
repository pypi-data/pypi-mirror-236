# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMatrixPython
else:
    import _itkMatrixPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMatrixPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMatrixPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython

def itkMatrixF22_New():
  return itkMatrixF22.New()


def itkMatrixD22_New():
  return itkMatrixD22.New()


def itkMatrixF23_New():
  return itkMatrixF23.New()


def itkMatrixD23_New():
  return itkMatrixD23.New()


def itkMatrixF24_New():
  return itkMatrixF24.New()


def itkMatrixD24_New():
  return itkMatrixD24.New()


def itkMatrixF25_New():
  return itkMatrixF25.New()


def itkMatrixD25_New():
  return itkMatrixD25.New()


def itkMatrixF32_New():
  return itkMatrixF32.New()


def itkMatrixD32_New():
  return itkMatrixD32.New()


def itkMatrixF33_New():
  return itkMatrixF33.New()


def itkMatrixD33_New():
  return itkMatrixD33.New()


def itkMatrixF34_New():
  return itkMatrixF34.New()


def itkMatrixD34_New():
  return itkMatrixD34.New()


def itkMatrixF35_New():
  return itkMatrixF35.New()


def itkMatrixD35_New():
  return itkMatrixD35.New()


def itkMatrixF42_New():
  return itkMatrixF42.New()


def itkMatrixD42_New():
  return itkMatrixD42.New()


def itkMatrixF43_New():
  return itkMatrixF43.New()


def itkMatrixD43_New():
  return itkMatrixD43.New()


def itkMatrixF44_New():
  return itkMatrixF44.New()


def itkMatrixD44_New():
  return itkMatrixD44.New()


def itkMatrixF45_New():
  return itkMatrixF45.New()


def itkMatrixD45_New():
  return itkMatrixD45.New()


def itkMatrixF52_New():
  return itkMatrixF52.New()


def itkMatrixD52_New():
  return itkMatrixD52.New()


def itkMatrixF53_New():
  return itkMatrixF53.New()


def itkMatrixD53_New():
  return itkMatrixD53.New()


def itkMatrixF54_New():
  return itkMatrixF54.New()


def itkMatrixD54_New():
  return itkMatrixD54.New()


def itkMatrixF55_New():
  return itkMatrixF55.New()


def itkMatrixD55_New():
  return itkMatrixD55.New()

class itkMatrixD22(object):
    r"""Proxy of C++ itkMatrixD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD22___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD22___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD22_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD22_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD22

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD22

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_2_2 const &

        __init__(self) -> itkMatrixD22
        __init__(self, arg0) -> itkMatrixD22

        Parameters
        ----------
        arg0: itkMatrixD22 const &

        """
        _itkMatrixPython.itkMatrixD22_swiginit(self, _itkMatrixPython.new_itkMatrixD22(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD22

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD22 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD22_swigregister(itkMatrixD22)
itkMatrixD22_GetIdentity = _itkMatrixPython.itkMatrixD22_GetIdentity

class itkMatrixD23(object):
    r"""Proxy of C++ itkMatrixD23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD23___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD23___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD23_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD23_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD23

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD23

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_2_3 const &

        __init__(self) -> itkMatrixD23
        __init__(self, arg0) -> itkMatrixD23

        Parameters
        ----------
        arg0: itkMatrixD23 const &

        """
        _itkMatrixPython.itkMatrixD23_swiginit(self, _itkMatrixPython.new_itkMatrixD23(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD23

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD23 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD23_swigregister(itkMatrixD23)
itkMatrixD23_GetIdentity = _itkMatrixPython.itkMatrixD23_GetIdentity

class itkMatrixD24(object):
    r"""Proxy of C++ itkMatrixD24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD24___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD24___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD24_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD24_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD24

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD24

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,2,4 > const &

        __init__(self) -> itkMatrixD24
        __init__(self, arg0) -> itkMatrixD24

        Parameters
        ----------
        arg0: itkMatrixD24 const &

        """
        _itkMatrixPython.itkMatrixD24_swiginit(self, _itkMatrixPython.new_itkMatrixD24(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD24

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD24 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD24_swigregister(itkMatrixD24)
itkMatrixD24_GetIdentity = _itkMatrixPython.itkMatrixD24_GetIdentity

class itkMatrixD25(object):
    r"""Proxy of C++ itkMatrixD25 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD25___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD25___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD25_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD25_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD25

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD25

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,2,5 > const &

        __init__(self) -> itkMatrixD25
        __init__(self, arg0) -> itkMatrixD25

        Parameters
        ----------
        arg0: itkMatrixD25 const &

        """
        _itkMatrixPython.itkMatrixD25_swiginit(self, _itkMatrixPython.new_itkMatrixD25(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD25

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD25 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD25_swigregister(itkMatrixD25)
itkMatrixD25_GetIdentity = _itkMatrixPython.itkMatrixD25_GetIdentity

class itkMatrixD32(object):
    r"""Proxy of C++ itkMatrixD32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD32___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD32_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD32_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD32

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD32

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,3,2 > const &

        __init__(self) -> itkMatrixD32
        __init__(self, arg0) -> itkMatrixD32

        Parameters
        ----------
        arg0: itkMatrixD32 const &

        """
        _itkMatrixPython.itkMatrixD32_swiginit(self, _itkMatrixPython.new_itkMatrixD32(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD32

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD32 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD32_swigregister(itkMatrixD32)
itkMatrixD32_GetIdentity = _itkMatrixPython.itkMatrixD32_GetIdentity

class itkMatrixD33(object):
    r"""Proxy of C++ itkMatrixD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD33___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD33___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD33_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD33_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD33

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD33

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_3_3 const &

        __init__(self) -> itkMatrixD33
        __init__(self, arg0) -> itkMatrixD33

        Parameters
        ----------
        arg0: itkMatrixD33 const &

        """
        _itkMatrixPython.itkMatrixD33_swiginit(self, _itkMatrixPython.new_itkMatrixD33(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD33

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD33 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD33_swigregister(itkMatrixD33)
itkMatrixD33_GetIdentity = _itkMatrixPython.itkMatrixD33_GetIdentity

class itkMatrixD34(object):
    r"""Proxy of C++ itkMatrixD34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD34___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD34___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD34_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD34_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD34

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD34

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_3_4 const &

        __init__(self) -> itkMatrixD34
        __init__(self, arg0) -> itkMatrixD34

        Parameters
        ----------
        arg0: itkMatrixD34 const &

        """
        _itkMatrixPython.itkMatrixD34_swiginit(self, _itkMatrixPython.new_itkMatrixD34(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD34

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD34 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD34_swigregister(itkMatrixD34)
itkMatrixD34_GetIdentity = _itkMatrixPython.itkMatrixD34_GetIdentity

class itkMatrixD35(object):
    r"""Proxy of C++ itkMatrixD35 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD35___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD35___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD35_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD35_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD35

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD35

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,3,5 > const &

        __init__(self) -> itkMatrixD35
        __init__(self, arg0) -> itkMatrixD35

        Parameters
        ----------
        arg0: itkMatrixD35 const &

        """
        _itkMatrixPython.itkMatrixD35_swiginit(self, _itkMatrixPython.new_itkMatrixD35(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD35

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD35 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD35_swigregister(itkMatrixD35)
itkMatrixD35_GetIdentity = _itkMatrixPython.itkMatrixD35_GetIdentity

class itkMatrixD42(object):
    r"""Proxy of C++ itkMatrixD42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD42___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD42___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD42_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD42_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD42

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD42

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,4,2 > const &

        __init__(self) -> itkMatrixD42
        __init__(self, arg0) -> itkMatrixD42

        Parameters
        ----------
        arg0: itkMatrixD42 const &

        """
        _itkMatrixPython.itkMatrixD42_swiginit(self, _itkMatrixPython.new_itkMatrixD42(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD42

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD42 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD42_swigregister(itkMatrixD42)
itkMatrixD42_GetIdentity = _itkMatrixPython.itkMatrixD42_GetIdentity

class itkMatrixD43(object):
    r"""Proxy of C++ itkMatrixD43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD43___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD43___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD43_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD43_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD43

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD43

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_4_3 const &

        __init__(self) -> itkMatrixD43
        __init__(self, arg0) -> itkMatrixD43

        Parameters
        ----------
        arg0: itkMatrixD43 const &

        """
        _itkMatrixPython.itkMatrixD43_swiginit(self, _itkMatrixPython.new_itkMatrixD43(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD43

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD43 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD43_swigregister(itkMatrixD43)
itkMatrixD43_GetIdentity = _itkMatrixPython.itkMatrixD43_GetIdentity

class itkMatrixD44(object):
    r"""Proxy of C++ itkMatrixD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD44___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD44___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD44_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD44_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD44

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD44

        Parameters
        ----------
        matrix: vnl_matrix_fixedD_4_4 const &

        __init__(self) -> itkMatrixD44
        __init__(self, arg0) -> itkMatrixD44

        Parameters
        ----------
        arg0: itkMatrixD44 const &

        """
        _itkMatrixPython.itkMatrixD44_swiginit(self, _itkMatrixPython.new_itkMatrixD44(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD44

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD44 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD44_swigregister(itkMatrixD44)
itkMatrixD44_GetIdentity = _itkMatrixPython.itkMatrixD44_GetIdentity

class itkMatrixD45(object):
    r"""Proxy of C++ itkMatrixD45 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD45___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD45___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD45_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD45_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD45

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD45

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,4,5 > const &

        __init__(self) -> itkMatrixD45
        __init__(self, arg0) -> itkMatrixD45

        Parameters
        ----------
        arg0: itkMatrixD45 const &

        """
        _itkMatrixPython.itkMatrixD45_swiginit(self, _itkMatrixPython.new_itkMatrixD45(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD45

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD45 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD45_swigregister(itkMatrixD45)
itkMatrixD45_GetIdentity = _itkMatrixPython.itkMatrixD45_GetIdentity

class itkMatrixD52(object):
    r"""Proxy of C++ itkMatrixD52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD52___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD52___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD52_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD52_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD52

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD52

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,5,2 > const &

        __init__(self) -> itkMatrixD52
        __init__(self, arg0) -> itkMatrixD52

        Parameters
        ----------
        arg0: itkMatrixD52 const &

        """
        _itkMatrixPython.itkMatrixD52_swiginit(self, _itkMatrixPython.new_itkMatrixD52(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD52

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD52 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD52_swigregister(itkMatrixD52)
itkMatrixD52_GetIdentity = _itkMatrixPython.itkMatrixD52_GetIdentity

class itkMatrixD53(object):
    r"""Proxy of C++ itkMatrixD53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD53___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD53___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD53_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD53_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD53

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD53

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,5,3 > const &

        __init__(self) -> itkMatrixD53
        __init__(self, arg0) -> itkMatrixD53

        Parameters
        ----------
        arg0: itkMatrixD53 const &

        """
        _itkMatrixPython.itkMatrixD53_swiginit(self, _itkMatrixPython.new_itkMatrixD53(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD53

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD53 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD53_swigregister(itkMatrixD53)
itkMatrixD53_GetIdentity = _itkMatrixPython.itkMatrixD53_GetIdentity

class itkMatrixD54(object):
    r"""Proxy of C++ itkMatrixD54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD54___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD54___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD54_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD54_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD54

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD54

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,5,4 > const &

        __init__(self) -> itkMatrixD54
        __init__(self, arg0) -> itkMatrixD54

        Parameters
        ----------
        arg0: itkMatrixD54 const &

        """
        _itkMatrixPython.itkMatrixD54_swiginit(self, _itkMatrixPython.new_itkMatrixD54(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD54

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD54 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD54_swigregister(itkMatrixD54)
itkMatrixD54_GetIdentity = _itkMatrixPython.itkMatrixD54_GetIdentity

class itkMatrixD55(object):
    r"""Proxy of C++ itkMatrixD55 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixD55___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixD55___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixD55_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixD55_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixD55

        Parameters
        ----------
        matrix: vnl_matrixD const &

        __init__(self, matrix) -> itkMatrixD55

        Parameters
        ----------
        matrix: vnl_matrix_fixed< double,5,5 > const &

        __init__(self) -> itkMatrixD55
        __init__(self, arg0) -> itkMatrixD55

        Parameters
        ----------
        arg0: itkMatrixD55 const &

        """
        _itkMatrixPython.itkMatrixD55_swiginit(self, _itkMatrixPython.new_itkMatrixD55(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixD55

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixD55 in _itkMatrixPython:
_itkMatrixPython.itkMatrixD55_swigregister(itkMatrixD55)
itkMatrixD55_GetIdentity = _itkMatrixPython.itkMatrixD55_GetIdentity

class itkMatrixF22(object):
    r"""Proxy of C++ itkMatrixF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF22___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF22___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF22_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF22_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF22

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF22

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_2_2 const &

        __init__(self) -> itkMatrixF22
        __init__(self, arg0) -> itkMatrixF22

        Parameters
        ----------
        arg0: itkMatrixF22 const &

        """
        _itkMatrixPython.itkMatrixF22_swiginit(self, _itkMatrixPython.new_itkMatrixF22(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF22

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF22 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF22_swigregister(itkMatrixF22)
itkMatrixF22_GetIdentity = _itkMatrixPython.itkMatrixF22_GetIdentity

class itkMatrixF23(object):
    r"""Proxy of C++ itkMatrixF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF23___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF23___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF23_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF23_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF23

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF23

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_2_3 const &

        __init__(self) -> itkMatrixF23
        __init__(self, arg0) -> itkMatrixF23

        Parameters
        ----------
        arg0: itkMatrixF23 const &

        """
        _itkMatrixPython.itkMatrixF23_swiginit(self, _itkMatrixPython.new_itkMatrixF23(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF23

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF23 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF23_swigregister(itkMatrixF23)
itkMatrixF23_GetIdentity = _itkMatrixPython.itkMatrixF23_GetIdentity

class itkMatrixF24(object):
    r"""Proxy of C++ itkMatrixF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF24___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF24___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF24_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF24_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF24

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF24

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,2,4 > const &

        __init__(self) -> itkMatrixF24
        __init__(self, arg0) -> itkMatrixF24

        Parameters
        ----------
        arg0: itkMatrixF24 const &

        """
        _itkMatrixPython.itkMatrixF24_swiginit(self, _itkMatrixPython.new_itkMatrixF24(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF24

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF24 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF24_swigregister(itkMatrixF24)
itkMatrixF24_GetIdentity = _itkMatrixPython.itkMatrixF24_GetIdentity

class itkMatrixF25(object):
    r"""Proxy of C++ itkMatrixF25 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF25___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF25___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF25_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF25_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF25

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF25

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,2,5 > const &

        __init__(self) -> itkMatrixF25
        __init__(self, arg0) -> itkMatrixF25

        Parameters
        ----------
        arg0: itkMatrixF25 const &

        """
        _itkMatrixPython.itkMatrixF25_swiginit(self, _itkMatrixPython.new_itkMatrixF25(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF25

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF25 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF25_swigregister(itkMatrixF25)
itkMatrixF25_GetIdentity = _itkMatrixPython.itkMatrixF25_GetIdentity

class itkMatrixF32(object):
    r"""Proxy of C++ itkMatrixF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF32___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF32_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF32_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF32

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF32

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,3,2 > const &

        __init__(self) -> itkMatrixF32
        __init__(self, arg0) -> itkMatrixF32

        Parameters
        ----------
        arg0: itkMatrixF32 const &

        """
        _itkMatrixPython.itkMatrixF32_swiginit(self, _itkMatrixPython.new_itkMatrixF32(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF32

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF32 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF32_swigregister(itkMatrixF32)
itkMatrixF32_GetIdentity = _itkMatrixPython.itkMatrixF32_GetIdentity

class itkMatrixF33(object):
    r"""Proxy of C++ itkMatrixF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF33___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF33___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF33_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF33_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF33

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF33

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_3_3 const &

        __init__(self) -> itkMatrixF33
        __init__(self, arg0) -> itkMatrixF33

        Parameters
        ----------
        arg0: itkMatrixF33 const &

        """
        _itkMatrixPython.itkMatrixF33_swiginit(self, _itkMatrixPython.new_itkMatrixF33(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF33

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF33 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF33_swigregister(itkMatrixF33)
itkMatrixF33_GetIdentity = _itkMatrixPython.itkMatrixF33_GetIdentity

class itkMatrixF34(object):
    r"""Proxy of C++ itkMatrixF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF34___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF34___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF34_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF34_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF34

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF34

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_3_4 const &

        __init__(self) -> itkMatrixF34
        __init__(self, arg0) -> itkMatrixF34

        Parameters
        ----------
        arg0: itkMatrixF34 const &

        """
        _itkMatrixPython.itkMatrixF34_swiginit(self, _itkMatrixPython.new_itkMatrixF34(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF34

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF34 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF34_swigregister(itkMatrixF34)
itkMatrixF34_GetIdentity = _itkMatrixPython.itkMatrixF34_GetIdentity

class itkMatrixF35(object):
    r"""Proxy of C++ itkMatrixF35 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF35___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF35___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF35_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF35_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF35

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF35

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,3,5 > const &

        __init__(self) -> itkMatrixF35
        __init__(self, arg0) -> itkMatrixF35

        Parameters
        ----------
        arg0: itkMatrixF35 const &

        """
        _itkMatrixPython.itkMatrixF35_swiginit(self, _itkMatrixPython.new_itkMatrixF35(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF35

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF35 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF35_swigregister(itkMatrixF35)
itkMatrixF35_GetIdentity = _itkMatrixPython.itkMatrixF35_GetIdentity

class itkMatrixF42(object):
    r"""Proxy of C++ itkMatrixF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF42___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF42___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF42_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF42_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF42

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF42

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,4,2 > const &

        __init__(self) -> itkMatrixF42
        __init__(self, arg0) -> itkMatrixF42

        Parameters
        ----------
        arg0: itkMatrixF42 const &

        """
        _itkMatrixPython.itkMatrixF42_swiginit(self, _itkMatrixPython.new_itkMatrixF42(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF42

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF42 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF42_swigregister(itkMatrixF42)
itkMatrixF42_GetIdentity = _itkMatrixPython.itkMatrixF42_GetIdentity

class itkMatrixF43(object):
    r"""Proxy of C++ itkMatrixF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF43___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF43___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF43_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF43_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF43

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF43

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_4_3 const &

        __init__(self) -> itkMatrixF43
        __init__(self, arg0) -> itkMatrixF43

        Parameters
        ----------
        arg0: itkMatrixF43 const &

        """
        _itkMatrixPython.itkMatrixF43_swiginit(self, _itkMatrixPython.new_itkMatrixF43(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF43

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF43 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF43_swigregister(itkMatrixF43)
itkMatrixF43_GetIdentity = _itkMatrixPython.itkMatrixF43_GetIdentity

class itkMatrixF44(object):
    r"""Proxy of C++ itkMatrixF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF44___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF44___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF44_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF44_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF44

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF44

        Parameters
        ----------
        matrix: vnl_matrix_fixedF_4_4 const &

        __init__(self) -> itkMatrixF44
        __init__(self, arg0) -> itkMatrixF44

        Parameters
        ----------
        arg0: itkMatrixF44 const &

        """
        _itkMatrixPython.itkMatrixF44_swiginit(self, _itkMatrixPython.new_itkMatrixF44(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF44

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF44 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF44_swigregister(itkMatrixF44)
itkMatrixF44_GetIdentity = _itkMatrixPython.itkMatrixF44_GetIdentity

class itkMatrixF45(object):
    r"""Proxy of C++ itkMatrixF45 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF45___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF45___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF45_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF45_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF45

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF45

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,4,5 > const &

        __init__(self) -> itkMatrixF45
        __init__(self, arg0) -> itkMatrixF45

        Parameters
        ----------
        arg0: itkMatrixF45 const &

        """
        _itkMatrixPython.itkMatrixF45_swiginit(self, _itkMatrixPython.new_itkMatrixF45(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF45

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF45 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF45_swigregister(itkMatrixF45)
itkMatrixF45_GetIdentity = _itkMatrixPython.itkMatrixF45_GetIdentity

class itkMatrixF52(object):
    r"""Proxy of C++ itkMatrixF52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF52___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF52___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF52_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF52_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF52

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF52

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,5,2 > const &

        __init__(self) -> itkMatrixF52
        __init__(self, arg0) -> itkMatrixF52

        Parameters
        ----------
        arg0: itkMatrixF52 const &

        """
        _itkMatrixPython.itkMatrixF52_swiginit(self, _itkMatrixPython.new_itkMatrixF52(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF52

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF52 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF52_swigregister(itkMatrixF52)
itkMatrixF52_GetIdentity = _itkMatrixPython.itkMatrixF52_GetIdentity

class itkMatrixF53(object):
    r"""Proxy of C++ itkMatrixF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF53___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF53___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF53_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF53_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF53

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF53

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,5,3 > const &

        __init__(self) -> itkMatrixF53
        __init__(self, arg0) -> itkMatrixF53

        Parameters
        ----------
        arg0: itkMatrixF53 const &

        """
        _itkMatrixPython.itkMatrixF53_swiginit(self, _itkMatrixPython.new_itkMatrixF53(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF53

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF53 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF53_swigregister(itkMatrixF53)
itkMatrixF53_GetIdentity = _itkMatrixPython.itkMatrixF53_GetIdentity

class itkMatrixF54(object):
    r"""Proxy of C++ itkMatrixF54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF54___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF54___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF54_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF54_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF54

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF54

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,5,4 > const &

        __init__(self) -> itkMatrixF54
        __init__(self, arg0) -> itkMatrixF54

        Parameters
        ----------
        arg0: itkMatrixF54 const &

        """
        _itkMatrixPython.itkMatrixF54_swiginit(self, _itkMatrixPython.new_itkMatrixF54(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF54

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF54 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF54_swigregister(itkMatrixF54)
itkMatrixF54_GetIdentity = _itkMatrixPython.itkMatrixF54_GetIdentity

class itkMatrixF55(object):
    r"""Proxy of C++ itkMatrixF55 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __add__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55___add__)
    __iadd__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55___iadd__)
    __sub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55___sub__)
    __isub__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55___isub__)
    __imul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55___imul__)
    __mul__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55___mul__)

    def __itruediv__(self, *args):
        return _itkMatrixPython.itkMatrixF55___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _itkMatrixPython.itkMatrixF55___truediv__(self, *args)
    __div__ = __truediv__


    __call__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55___call__)
    __GetVnlMatrix_orig__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55___GetVnlMatrix_orig__)
    SetIdentity = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55_SetIdentity)
    GetIdentity = _swig_new_static_method(_itkMatrixPython.itkMatrixF55_GetIdentity)
    Fill = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55_Fill)
    __eq__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55___eq__)
    __ne__ = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55___ne__)
    GetInverse = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55_GetInverse)
    GetTranspose = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55_GetTranspose)
    swap = _swig_new_instance_method(_itkMatrixPython.itkMatrixF55_swap)

    def __init__(self, *args):
        r"""
        __init__(self, matrix) -> itkMatrixF55

        Parameters
        ----------
        matrix: vnl_matrixF const &

        __init__(self, matrix) -> itkMatrixF55

        Parameters
        ----------
        matrix: vnl_matrix_fixed< float,5,5 > const &

        __init__(self) -> itkMatrixF55
        __init__(self, arg0) -> itkMatrixF55

        Parameters
        ----------
        arg0: itkMatrixF55 const &

        """
        _itkMatrixPython.itkMatrixF55_swiginit(self, _itkMatrixPython.new_itkMatrixF55(*args))
    __swig_destroy__ = _itkMatrixPython.delete_itkMatrixF55

    def GetVnlMatrix(self):
        vnl_reference = self.__GetVnlMatrix_orig__()
        vnl_copy = type(vnl_reference)(vnl_reference)
        return vnl_copy

    def __repr__(self):
        vnl_mat = self.GetVnlMatrix()
        python_list_mat = [
          [vnl_mat.get(i, j) for j in range(vnl_mat.cols())]
          for i in range(vnl_mat.rows())
        ]
        return type(self).__name__ + " (" + repr(python_list_mat) + ")"

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_matrix(self)
        return np.asarray(array, dtype=dtype)



# Register itkMatrixF55 in _itkMatrixPython:
_itkMatrixPython.itkMatrixF55_swigregister(itkMatrixF55)
itkMatrixF55_GetIdentity = _itkMatrixPython.itkMatrixF55_GetIdentity



