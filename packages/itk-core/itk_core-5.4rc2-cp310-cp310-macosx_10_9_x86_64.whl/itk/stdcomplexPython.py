# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _stdcomplexPython
else:
    import _stdcomplexPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _stdcomplexPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _stdcomplexPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.pyBasePython
class stdcomplexD(object):
    r"""Proxy of C++ stdcomplexD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _stdcomplexPython.delete_stdcomplexD

    def __init__(self, *args):
        r"""
        __init__(self, arg0) -> stdcomplexD

        Parameters
        ----------
        arg0: stdcomplexD const &

        __init__(self, __z) -> stdcomplexD

        Parameters
        ----------
        __z: stdcomplexD

        __init__(self, __r=0.0, __i=0.0) -> stdcomplexD

        Parameters
        ----------
        __r: double
        __i: double

        __init__(self, __z) -> stdcomplexD

        Parameters
        ----------
        __z: stdcomplexF const &

        """
        _stdcomplexPython.stdcomplexD_swiginit(self, _stdcomplexPython.new_stdcomplexD(*args))
    real = _swig_new_instance_method(_stdcomplexPython.stdcomplexD_real)
    imag = _swig_new_instance_method(_stdcomplexPython.stdcomplexD_imag)
    __iadd__ = _swig_new_instance_method(_stdcomplexPython.stdcomplexD___iadd__)
    __isub__ = _swig_new_instance_method(_stdcomplexPython.stdcomplexD___isub__)
    __imul__ = _swig_new_instance_method(_stdcomplexPython.stdcomplexD___imul__)

    def __itruediv__(self, *args):
        return _stdcomplexPython.stdcomplexD___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __repr__(self):
        return "stdcomplexD (%s, %s)" % (self.real(), self.imag())

    def __complex__(self):
        return complex(self.real(), self.imag())


# Register stdcomplexD in _stdcomplexPython:
_stdcomplexPython.stdcomplexD_swigregister(stdcomplexD)

class stdcomplexF(object):
    r"""Proxy of C++ stdcomplexF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _stdcomplexPython.delete_stdcomplexF

    def __init__(self, *args):
        r"""
        __init__(self, arg0) -> stdcomplexF

        Parameters
        ----------
        arg0: stdcomplexF const &

        __init__(self, __z) -> stdcomplexF

        Parameters
        ----------
        __z: stdcomplexF

        __init__(self, r=0.0, i=0.0) -> stdcomplexF

        Parameters
        ----------
        r: float
        i: float

        __init__(self, __z) -> stdcomplexF

        Parameters
        ----------
        __z: stdcomplexD const &

        """
        _stdcomplexPython.stdcomplexF_swiginit(self, _stdcomplexPython.new_stdcomplexF(*args))
    real = _swig_new_instance_method(_stdcomplexPython.stdcomplexF_real)
    imag = _swig_new_instance_method(_stdcomplexPython.stdcomplexF_imag)
    __iadd__ = _swig_new_instance_method(_stdcomplexPython.stdcomplexF___iadd__)
    __isub__ = _swig_new_instance_method(_stdcomplexPython.stdcomplexF___isub__)
    __imul__ = _swig_new_instance_method(_stdcomplexPython.stdcomplexF___imul__)

    def __itruediv__(self, *args):
        return _stdcomplexPython.stdcomplexF___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __repr__(self):
        return "stdcomplexF (%s, %s)" % (self.real(), self.imag())

    def __complex__(self):
        return complex(self.real(), self.imag())


# Register stdcomplexF in _stdcomplexPython:
_stdcomplexPython.stdcomplexF_swigregister(stdcomplexF)



