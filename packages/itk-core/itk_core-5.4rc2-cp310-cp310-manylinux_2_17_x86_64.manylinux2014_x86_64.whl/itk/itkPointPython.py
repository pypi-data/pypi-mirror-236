# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPointPython
else:
    import _itkPointPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPointPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPointPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
class vectoritkPointF2(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkPointF2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF2___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF2___bool__)
    __len__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF2___len__)
    __getslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF2___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF2___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF2___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF2___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF2___setitem__)
    pop = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_pop)
    append = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_append)
    empty = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_empty)
    size = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_size)
    swap = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_swap)
    begin = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_begin)
    end = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_end)
    rbegin = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_rbegin)
    rend = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_rend)
    clear = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_clear)
    get_allocator = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_get_allocator)
    pop_back = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_pop_back)
    erase = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkPointF2
        __init__(self, other) -> vectoritkPointF2

        Parameters
        ----------
        other: std::vector< itkPointF2 > const &

        __init__(self, size) -> vectoritkPointF2

        Parameters
        ----------
        size: std::vector< itkPointF2 >::size_type

        __init__(self, size, value) -> vectoritkPointF2

        Parameters
        ----------
        size: std::vector< itkPointF2 >::size_type
        value: std::vector< itkPointF2 >::value_type const &

        """
        _itkPointPython.vectoritkPointF2_swiginit(self, _itkPointPython.new_vectoritkPointF2(*args))
    push_back = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_push_back)
    front = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_front)
    back = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_back)
    assign = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_assign)
    resize = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_resize)
    insert = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_insert)
    reserve = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_reserve)
    capacity = _swig_new_instance_method(_itkPointPython.vectoritkPointF2_capacity)
    __swig_destroy__ = _itkPointPython.delete_vectoritkPointF2

# Register vectoritkPointF2 in _itkPointPython:
_itkPointPython.vectoritkPointF2_swigregister(vectoritkPointF2)

class vectoritkPointD2(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkPointD2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD2___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD2___bool__)
    __len__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD2___len__)
    __getslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD2___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD2___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD2___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD2___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD2___setitem__)
    pop = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_pop)
    append = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_append)
    empty = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_empty)
    size = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_size)
    swap = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_swap)
    begin = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_begin)
    end = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_end)
    rbegin = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_rbegin)
    rend = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_rend)
    clear = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_clear)
    get_allocator = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_get_allocator)
    pop_back = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_pop_back)
    erase = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkPointD2
        __init__(self, other) -> vectoritkPointD2

        Parameters
        ----------
        other: std::vector< itkPointD2 > const &

        __init__(self, size) -> vectoritkPointD2

        Parameters
        ----------
        size: std::vector< itkPointD2 >::size_type

        __init__(self, size, value) -> vectoritkPointD2

        Parameters
        ----------
        size: std::vector< itkPointD2 >::size_type
        value: std::vector< itkPointD2 >::value_type const &

        """
        _itkPointPython.vectoritkPointD2_swiginit(self, _itkPointPython.new_vectoritkPointD2(*args))
    push_back = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_push_back)
    front = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_front)
    back = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_back)
    assign = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_assign)
    resize = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_resize)
    insert = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_insert)
    reserve = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_reserve)
    capacity = _swig_new_instance_method(_itkPointPython.vectoritkPointD2_capacity)
    __swig_destroy__ = _itkPointPython.delete_vectoritkPointD2

# Register vectoritkPointD2 in _itkPointPython:
_itkPointPython.vectoritkPointD2_swigregister(vectoritkPointD2)

class vectoritkPointF3(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkPointF3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF3___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF3___bool__)
    __len__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF3___len__)
    __getslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF3___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF3___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF3___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF3___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF3___setitem__)
    pop = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_pop)
    append = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_append)
    empty = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_empty)
    size = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_size)
    swap = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_swap)
    begin = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_begin)
    end = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_end)
    rbegin = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_rbegin)
    rend = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_rend)
    clear = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_clear)
    get_allocator = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_get_allocator)
    pop_back = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_pop_back)
    erase = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkPointF3
        __init__(self, other) -> vectoritkPointF3

        Parameters
        ----------
        other: std::vector< itkPointF3 > const &

        __init__(self, size) -> vectoritkPointF3

        Parameters
        ----------
        size: std::vector< itkPointF3 >::size_type

        __init__(self, size, value) -> vectoritkPointF3

        Parameters
        ----------
        size: std::vector< itkPointF3 >::size_type
        value: std::vector< itkPointF3 >::value_type const &

        """
        _itkPointPython.vectoritkPointF3_swiginit(self, _itkPointPython.new_vectoritkPointF3(*args))
    push_back = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_push_back)
    front = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_front)
    back = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_back)
    assign = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_assign)
    resize = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_resize)
    insert = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_insert)
    reserve = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_reserve)
    capacity = _swig_new_instance_method(_itkPointPython.vectoritkPointF3_capacity)
    __swig_destroy__ = _itkPointPython.delete_vectoritkPointF3

# Register vectoritkPointF3 in _itkPointPython:
_itkPointPython.vectoritkPointF3_swigregister(vectoritkPointF3)

class vectoritkPointD3(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkPointD3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD3___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD3___bool__)
    __len__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD3___len__)
    __getslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD3___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD3___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD3___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD3___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD3___setitem__)
    pop = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_pop)
    append = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_append)
    empty = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_empty)
    size = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_size)
    swap = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_swap)
    begin = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_begin)
    end = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_end)
    rbegin = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_rbegin)
    rend = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_rend)
    clear = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_clear)
    get_allocator = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_get_allocator)
    pop_back = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_pop_back)
    erase = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkPointD3
        __init__(self, other) -> vectoritkPointD3

        Parameters
        ----------
        other: std::vector< itkPointD3 > const &

        __init__(self, size) -> vectoritkPointD3

        Parameters
        ----------
        size: std::vector< itkPointD3 >::size_type

        __init__(self, size, value) -> vectoritkPointD3

        Parameters
        ----------
        size: std::vector< itkPointD3 >::size_type
        value: std::vector< itkPointD3 >::value_type const &

        """
        _itkPointPython.vectoritkPointD3_swiginit(self, _itkPointPython.new_vectoritkPointD3(*args))
    push_back = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_push_back)
    front = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_front)
    back = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_back)
    assign = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_assign)
    resize = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_resize)
    insert = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_insert)
    reserve = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_reserve)
    capacity = _swig_new_instance_method(_itkPointPython.vectoritkPointD3_capacity)
    __swig_destroy__ = _itkPointPython.delete_vectoritkPointD3

# Register vectoritkPointD3 in _itkPointPython:
_itkPointPython.vectoritkPointD3_swigregister(vectoritkPointD3)

class vectoritkPointF4(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkPointF4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF4___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF4___bool__)
    __len__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF4___len__)
    __getslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF4___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF4___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF4___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF4___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF4___setitem__)
    pop = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_pop)
    append = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_append)
    empty = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_empty)
    size = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_size)
    swap = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_swap)
    begin = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_begin)
    end = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_end)
    rbegin = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_rbegin)
    rend = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_rend)
    clear = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_clear)
    get_allocator = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_get_allocator)
    pop_back = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_pop_back)
    erase = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkPointF4
        __init__(self, other) -> vectoritkPointF4

        Parameters
        ----------
        other: std::vector< itkPointF4 > const &

        __init__(self, size) -> vectoritkPointF4

        Parameters
        ----------
        size: std::vector< itkPointF4 >::size_type

        __init__(self, size, value) -> vectoritkPointF4

        Parameters
        ----------
        size: std::vector< itkPointF4 >::size_type
        value: std::vector< itkPointF4 >::value_type const &

        """
        _itkPointPython.vectoritkPointF4_swiginit(self, _itkPointPython.new_vectoritkPointF4(*args))
    push_back = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_push_back)
    front = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_front)
    back = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_back)
    assign = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_assign)
    resize = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_resize)
    insert = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_insert)
    reserve = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_reserve)
    capacity = _swig_new_instance_method(_itkPointPython.vectoritkPointF4_capacity)
    __swig_destroy__ = _itkPointPython.delete_vectoritkPointF4

# Register vectoritkPointF4 in _itkPointPython:
_itkPointPython.vectoritkPointF4_swigregister(vectoritkPointF4)

class vectoritkPointD4(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkPointD4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD4___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD4___bool__)
    __len__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD4___len__)
    __getslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD4___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD4___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD4___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD4___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD4___setitem__)
    pop = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_pop)
    append = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_append)
    empty = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_empty)
    size = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_size)
    swap = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_swap)
    begin = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_begin)
    end = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_end)
    rbegin = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_rbegin)
    rend = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_rend)
    clear = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_clear)
    get_allocator = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_get_allocator)
    pop_back = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_pop_back)
    erase = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkPointD4
        __init__(self, other) -> vectoritkPointD4

        Parameters
        ----------
        other: std::vector< itkPointD4 > const &

        __init__(self, size) -> vectoritkPointD4

        Parameters
        ----------
        size: std::vector< itkPointD4 >::size_type

        __init__(self, size, value) -> vectoritkPointD4

        Parameters
        ----------
        size: std::vector< itkPointD4 >::size_type
        value: std::vector< itkPointD4 >::value_type const &

        """
        _itkPointPython.vectoritkPointD4_swiginit(self, _itkPointPython.new_vectoritkPointD4(*args))
    push_back = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_push_back)
    front = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_front)
    back = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_back)
    assign = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_assign)
    resize = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_resize)
    insert = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_insert)
    reserve = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_reserve)
    capacity = _swig_new_instance_method(_itkPointPython.vectoritkPointD4_capacity)
    __swig_destroy__ = _itkPointPython.delete_vectoritkPointD4

# Register vectoritkPointD4 in _itkPointPython:
_itkPointPython.vectoritkPointD4_swigregister(vectoritkPointD4)

class vectoritkPointF5(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkPointF5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF5___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF5___bool__)
    __len__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF5___len__)
    __getslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF5___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF5___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF5___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF5___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF5___setitem__)
    pop = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_pop)
    append = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_append)
    empty = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_empty)
    size = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_size)
    swap = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_swap)
    begin = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_begin)
    end = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_end)
    rbegin = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_rbegin)
    rend = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_rend)
    clear = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_clear)
    get_allocator = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_get_allocator)
    pop_back = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_pop_back)
    erase = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkPointF5
        __init__(self, other) -> vectoritkPointF5

        Parameters
        ----------
        other: std::vector< itkPointF5 > const &

        __init__(self, size) -> vectoritkPointF5

        Parameters
        ----------
        size: std::vector< itkPointF5 >::size_type

        __init__(self, size, value) -> vectoritkPointF5

        Parameters
        ----------
        size: std::vector< itkPointF5 >::size_type
        value: std::vector< itkPointF5 >::value_type const &

        """
        _itkPointPython.vectoritkPointF5_swiginit(self, _itkPointPython.new_vectoritkPointF5(*args))
    push_back = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_push_back)
    front = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_front)
    back = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_back)
    assign = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_assign)
    resize = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_resize)
    insert = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_insert)
    reserve = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_reserve)
    capacity = _swig_new_instance_method(_itkPointPython.vectoritkPointF5_capacity)
    __swig_destroy__ = _itkPointPython.delete_vectoritkPointF5

# Register vectoritkPointF5 in _itkPointPython:
_itkPointPython.vectoritkPointF5_swigregister(vectoritkPointF5)

class vectoritkPointD5(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkPointD5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD5___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD5___bool__)
    __len__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD5___len__)
    __getslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD5___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD5___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD5___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD5___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD5___setitem__)
    pop = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_pop)
    append = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_append)
    empty = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_empty)
    size = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_size)
    swap = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_swap)
    begin = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_begin)
    end = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_end)
    rbegin = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_rbegin)
    rend = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_rend)
    clear = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_clear)
    get_allocator = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_get_allocator)
    pop_back = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_pop_back)
    erase = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkPointD5
        __init__(self, other) -> vectoritkPointD5

        Parameters
        ----------
        other: std::vector< itkPointD5 > const &

        __init__(self, size) -> vectoritkPointD5

        Parameters
        ----------
        size: std::vector< itkPointD5 >::size_type

        __init__(self, size, value) -> vectoritkPointD5

        Parameters
        ----------
        size: std::vector< itkPointD5 >::size_type
        value: std::vector< itkPointD5 >::value_type const &

        """
        _itkPointPython.vectoritkPointD5_swiginit(self, _itkPointPython.new_vectoritkPointD5(*args))
    push_back = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_push_back)
    front = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_front)
    back = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_back)
    assign = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_assign)
    resize = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_resize)
    insert = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_insert)
    reserve = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_reserve)
    capacity = _swig_new_instance_method(_itkPointPython.vectoritkPointD5_capacity)
    __swig_destroy__ = _itkPointPython.delete_vectoritkPointD5

# Register vectoritkPointD5 in _itkPointPython:
_itkPointPython.vectoritkPointD5_swigregister(vectoritkPointD5)

class vectoritkPointF6(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkPointF6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF6___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF6___bool__)
    __len__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF6___len__)
    __getslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF6___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF6___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF6___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF6___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointF6___setitem__)
    pop = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_pop)
    append = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_append)
    empty = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_empty)
    size = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_size)
    swap = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_swap)
    begin = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_begin)
    end = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_end)
    rbegin = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_rbegin)
    rend = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_rend)
    clear = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_clear)
    get_allocator = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_get_allocator)
    pop_back = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_pop_back)
    erase = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkPointF6
        __init__(self, other) -> vectoritkPointF6

        Parameters
        ----------
        other: std::vector< itkPointF6 > const &

        __init__(self, size) -> vectoritkPointF6

        Parameters
        ----------
        size: std::vector< itkPointF6 >::size_type

        __init__(self, size, value) -> vectoritkPointF6

        Parameters
        ----------
        size: std::vector< itkPointF6 >::size_type
        value: std::vector< itkPointF6 >::value_type const &

        """
        _itkPointPython.vectoritkPointF6_swiginit(self, _itkPointPython.new_vectoritkPointF6(*args))
    push_back = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_push_back)
    front = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_front)
    back = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_back)
    assign = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_assign)
    resize = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_resize)
    insert = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_insert)
    reserve = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_reserve)
    capacity = _swig_new_instance_method(_itkPointPython.vectoritkPointF6_capacity)
    __swig_destroy__ = _itkPointPython.delete_vectoritkPointF6

# Register vectoritkPointF6 in _itkPointPython:
_itkPointPython.vectoritkPointF6_swigregister(vectoritkPointF6)

class vectoritkPointD6(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkPointD6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD6___nonzero__)
    __bool__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD6___bool__)
    __len__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD6___len__)
    __getslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD6___getslice__)
    __setslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD6___setslice__)
    __delslice__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD6___delslice__)
    __delitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD6___delitem__)
    __getitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.vectoritkPointD6___setitem__)
    pop = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_pop)
    append = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_append)
    empty = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_empty)
    size = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_size)
    swap = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_swap)
    begin = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_begin)
    end = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_end)
    rbegin = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_rbegin)
    rend = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_rend)
    clear = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_clear)
    get_allocator = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_get_allocator)
    pop_back = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_pop_back)
    erase = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkPointD6
        __init__(self, other) -> vectoritkPointD6

        Parameters
        ----------
        other: std::vector< itkPointD6 > const &

        __init__(self, size) -> vectoritkPointD6

        Parameters
        ----------
        size: std::vector< itkPointD6 >::size_type

        __init__(self, size, value) -> vectoritkPointD6

        Parameters
        ----------
        size: std::vector< itkPointD6 >::size_type
        value: std::vector< itkPointD6 >::value_type const &

        """
        _itkPointPython.vectoritkPointD6_swiginit(self, _itkPointPython.new_vectoritkPointD6(*args))
    push_back = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_push_back)
    front = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_front)
    back = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_back)
    assign = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_assign)
    resize = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_resize)
    insert = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_insert)
    reserve = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_reserve)
    capacity = _swig_new_instance_method(_itkPointPython.vectoritkPointD6_capacity)
    __swig_destroy__ = _itkPointPython.delete_vectoritkPointD6

# Register vectoritkPointD6 in _itkPointPython:
_itkPointPython.vectoritkPointD6_swigregister(vectoritkPointD6)

class itkPointD2(itk.itkFixedArrayPython.itkFixedArrayD2):
    r"""Proxy of C++ itkPointD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetPointDimension = _swig_new_static_method(_itkPointPython.itkPointD2_GetPointDimension)
    __eq__ = _swig_new_instance_method(_itkPointPython.itkPointD2___eq__)
    __ne__ = _swig_new_instance_method(_itkPointPython.itkPointD2___ne__)
    __iadd__ = _swig_new_instance_method(_itkPointPython.itkPointD2___iadd__)
    __isub__ = _swig_new_instance_method(_itkPointPython.itkPointD2___isub__)
    __add__ = _swig_new_instance_method(_itkPointPython.itkPointD2___add__)
    __sub__ = _swig_new_instance_method(_itkPointPython.itkPointD2___sub__)
    GetVectorFromOrigin = _swig_new_instance_method(_itkPointPython.itkPointD2_GetVectorFromOrigin)
    GetVnlVector = _swig_new_instance_method(_itkPointPython.itkPointD2_GetVnlVector)
    SetToMidPoint = _swig_new_instance_method(_itkPointPython.itkPointD2_SetToMidPoint)
    SetToBarycentricCombination = _swig_new_instance_method(_itkPointPython.itkPointD2_SetToBarycentricCombination)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPointD2
        __init__(self, r) -> itkPointD2

        Parameters
        ----------
        r: double const *

        __init__(self, v) -> itkPointD2

        Parameters
        ----------
        v: double const &

        __init__(self, stdArray) -> itkPointD2

        Parameters
        ----------
        stdArray: std::array< double,2 > const &

        __init__(self, arg0) -> itkPointD2

        Parameters
        ----------
        arg0: itkPointD2 const &

        """
        _itkPointPython.itkPointD2_swiginit(self, _itkPointPython.new_itkPointD2(*args))
    __swig_destroy__ = _itkPointPython.delete_itkPointD2
    __getitem__ = _swig_new_instance_method(_itkPointPython.itkPointD2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.itkPointD2___setitem__)
    __len__ = _swig_new_static_method(_itkPointPython.itkPointD2___len__)
    __repr__ = _swig_new_instance_method(_itkPointPython.itkPointD2___repr__)

# Register itkPointD2 in _itkPointPython:
_itkPointPython.itkPointD2_swigregister(itkPointD2)
itkPointD2_GetPointDimension = _itkPointPython.itkPointD2_GetPointDimension
itkPointD2___len__ = _itkPointPython.itkPointD2___len__

class itkPointD3(itk.itkFixedArrayPython.itkFixedArrayD3):
    r"""Proxy of C++ itkPointD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetPointDimension = _swig_new_static_method(_itkPointPython.itkPointD3_GetPointDimension)
    __eq__ = _swig_new_instance_method(_itkPointPython.itkPointD3___eq__)
    __ne__ = _swig_new_instance_method(_itkPointPython.itkPointD3___ne__)
    __iadd__ = _swig_new_instance_method(_itkPointPython.itkPointD3___iadd__)
    __isub__ = _swig_new_instance_method(_itkPointPython.itkPointD3___isub__)
    __add__ = _swig_new_instance_method(_itkPointPython.itkPointD3___add__)
    __sub__ = _swig_new_instance_method(_itkPointPython.itkPointD3___sub__)
    GetVectorFromOrigin = _swig_new_instance_method(_itkPointPython.itkPointD3_GetVectorFromOrigin)
    GetVnlVector = _swig_new_instance_method(_itkPointPython.itkPointD3_GetVnlVector)
    SetToMidPoint = _swig_new_instance_method(_itkPointPython.itkPointD3_SetToMidPoint)
    SetToBarycentricCombination = _swig_new_instance_method(_itkPointPython.itkPointD3_SetToBarycentricCombination)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPointD3
        __init__(self, r) -> itkPointD3

        Parameters
        ----------
        r: double const *

        __init__(self, v) -> itkPointD3

        Parameters
        ----------
        v: double const &

        __init__(self, stdArray) -> itkPointD3

        Parameters
        ----------
        stdArray: std::array< double,3 > const &

        __init__(self, arg0) -> itkPointD3

        Parameters
        ----------
        arg0: itkPointD3 const &

        """
        _itkPointPython.itkPointD3_swiginit(self, _itkPointPython.new_itkPointD3(*args))
    __swig_destroy__ = _itkPointPython.delete_itkPointD3
    __getitem__ = _swig_new_instance_method(_itkPointPython.itkPointD3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.itkPointD3___setitem__)
    __len__ = _swig_new_static_method(_itkPointPython.itkPointD3___len__)
    __repr__ = _swig_new_instance_method(_itkPointPython.itkPointD3___repr__)

# Register itkPointD3 in _itkPointPython:
_itkPointPython.itkPointD3_swigregister(itkPointD3)
itkPointD3_GetPointDimension = _itkPointPython.itkPointD3_GetPointDimension
itkPointD3___len__ = _itkPointPython.itkPointD3___len__

class itkPointD4(itk.itkFixedArrayPython.itkFixedArrayD4):
    r"""Proxy of C++ itkPointD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetPointDimension = _swig_new_static_method(_itkPointPython.itkPointD4_GetPointDimension)
    __eq__ = _swig_new_instance_method(_itkPointPython.itkPointD4___eq__)
    __ne__ = _swig_new_instance_method(_itkPointPython.itkPointD4___ne__)
    __iadd__ = _swig_new_instance_method(_itkPointPython.itkPointD4___iadd__)
    __isub__ = _swig_new_instance_method(_itkPointPython.itkPointD4___isub__)
    __add__ = _swig_new_instance_method(_itkPointPython.itkPointD4___add__)
    __sub__ = _swig_new_instance_method(_itkPointPython.itkPointD4___sub__)
    GetVectorFromOrigin = _swig_new_instance_method(_itkPointPython.itkPointD4_GetVectorFromOrigin)
    GetVnlVector = _swig_new_instance_method(_itkPointPython.itkPointD4_GetVnlVector)
    SetToMidPoint = _swig_new_instance_method(_itkPointPython.itkPointD4_SetToMidPoint)
    SetToBarycentricCombination = _swig_new_instance_method(_itkPointPython.itkPointD4_SetToBarycentricCombination)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPointD4
        __init__(self, r) -> itkPointD4

        Parameters
        ----------
        r: double const *

        __init__(self, v) -> itkPointD4

        Parameters
        ----------
        v: double const &

        __init__(self, stdArray) -> itkPointD4

        Parameters
        ----------
        stdArray: std::array< double,4 > const &

        __init__(self, arg0) -> itkPointD4

        Parameters
        ----------
        arg0: itkPointD4 const &

        """
        _itkPointPython.itkPointD4_swiginit(self, _itkPointPython.new_itkPointD4(*args))
    __swig_destroy__ = _itkPointPython.delete_itkPointD4
    __getitem__ = _swig_new_instance_method(_itkPointPython.itkPointD4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.itkPointD4___setitem__)
    __len__ = _swig_new_static_method(_itkPointPython.itkPointD4___len__)
    __repr__ = _swig_new_instance_method(_itkPointPython.itkPointD4___repr__)

# Register itkPointD4 in _itkPointPython:
_itkPointPython.itkPointD4_swigregister(itkPointD4)
itkPointD4_GetPointDimension = _itkPointPython.itkPointD4_GetPointDimension
itkPointD4___len__ = _itkPointPython.itkPointD4___len__

class itkPointD5(itk.itkFixedArrayPython.itkFixedArrayD5):
    r"""Proxy of C++ itkPointD5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetPointDimension = _swig_new_static_method(_itkPointPython.itkPointD5_GetPointDimension)
    __eq__ = _swig_new_instance_method(_itkPointPython.itkPointD5___eq__)
    __ne__ = _swig_new_instance_method(_itkPointPython.itkPointD5___ne__)
    __iadd__ = _swig_new_instance_method(_itkPointPython.itkPointD5___iadd__)
    __isub__ = _swig_new_instance_method(_itkPointPython.itkPointD5___isub__)
    __add__ = _swig_new_instance_method(_itkPointPython.itkPointD5___add__)
    __sub__ = _swig_new_instance_method(_itkPointPython.itkPointD5___sub__)
    GetVectorFromOrigin = _swig_new_instance_method(_itkPointPython.itkPointD5_GetVectorFromOrigin)
    GetVnlVector = _swig_new_instance_method(_itkPointPython.itkPointD5_GetVnlVector)
    SetToMidPoint = _swig_new_instance_method(_itkPointPython.itkPointD5_SetToMidPoint)
    SetToBarycentricCombination = _swig_new_instance_method(_itkPointPython.itkPointD5_SetToBarycentricCombination)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPointD5
        __init__(self, r) -> itkPointD5

        Parameters
        ----------
        r: double const *

        __init__(self, v) -> itkPointD5

        Parameters
        ----------
        v: double const &

        __init__(self, stdArray) -> itkPointD5

        Parameters
        ----------
        stdArray: std::array< double,5 > const &

        __init__(self, arg0) -> itkPointD5

        Parameters
        ----------
        arg0: itkPointD5 const &

        """
        _itkPointPython.itkPointD5_swiginit(self, _itkPointPython.new_itkPointD5(*args))
    __swig_destroy__ = _itkPointPython.delete_itkPointD5
    __getitem__ = _swig_new_instance_method(_itkPointPython.itkPointD5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.itkPointD5___setitem__)
    __len__ = _swig_new_static_method(_itkPointPython.itkPointD5___len__)
    __repr__ = _swig_new_instance_method(_itkPointPython.itkPointD5___repr__)

# Register itkPointD5 in _itkPointPython:
_itkPointPython.itkPointD5_swigregister(itkPointD5)
itkPointD5_GetPointDimension = _itkPointPython.itkPointD5_GetPointDimension
itkPointD5___len__ = _itkPointPython.itkPointD5___len__

class itkPointD6(itk.itkFixedArrayPython.itkFixedArrayD6):
    r"""Proxy of C++ itkPointD6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetPointDimension = _swig_new_static_method(_itkPointPython.itkPointD6_GetPointDimension)
    __eq__ = _swig_new_instance_method(_itkPointPython.itkPointD6___eq__)
    __ne__ = _swig_new_instance_method(_itkPointPython.itkPointD6___ne__)
    __iadd__ = _swig_new_instance_method(_itkPointPython.itkPointD6___iadd__)
    __isub__ = _swig_new_instance_method(_itkPointPython.itkPointD6___isub__)
    __add__ = _swig_new_instance_method(_itkPointPython.itkPointD6___add__)
    __sub__ = _swig_new_instance_method(_itkPointPython.itkPointD6___sub__)
    GetVectorFromOrigin = _swig_new_instance_method(_itkPointPython.itkPointD6_GetVectorFromOrigin)
    GetVnlVector = _swig_new_instance_method(_itkPointPython.itkPointD6_GetVnlVector)
    SetToMidPoint = _swig_new_instance_method(_itkPointPython.itkPointD6_SetToMidPoint)
    SetToBarycentricCombination = _swig_new_instance_method(_itkPointPython.itkPointD6_SetToBarycentricCombination)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPointD6
        __init__(self, r) -> itkPointD6

        Parameters
        ----------
        r: double const *

        __init__(self, v) -> itkPointD6

        Parameters
        ----------
        v: double const &

        __init__(self, stdArray) -> itkPointD6

        Parameters
        ----------
        stdArray: std::array< double,6 > const &

        __init__(self, arg0) -> itkPointD6

        Parameters
        ----------
        arg0: itkPointD6 const &

        """
        _itkPointPython.itkPointD6_swiginit(self, _itkPointPython.new_itkPointD6(*args))
    __swig_destroy__ = _itkPointPython.delete_itkPointD6
    __getitem__ = _swig_new_instance_method(_itkPointPython.itkPointD6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.itkPointD6___setitem__)
    __len__ = _swig_new_static_method(_itkPointPython.itkPointD6___len__)
    __repr__ = _swig_new_instance_method(_itkPointPython.itkPointD6___repr__)

# Register itkPointD6 in _itkPointPython:
_itkPointPython.itkPointD6_swigregister(itkPointD6)
itkPointD6_GetPointDimension = _itkPointPython.itkPointD6_GetPointDimension
itkPointD6___len__ = _itkPointPython.itkPointD6___len__

class itkPointF2(itk.itkFixedArrayPython.itkFixedArrayF2):
    r"""Proxy of C++ itkPointF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetPointDimension = _swig_new_static_method(_itkPointPython.itkPointF2_GetPointDimension)
    __eq__ = _swig_new_instance_method(_itkPointPython.itkPointF2___eq__)
    __ne__ = _swig_new_instance_method(_itkPointPython.itkPointF2___ne__)
    __iadd__ = _swig_new_instance_method(_itkPointPython.itkPointF2___iadd__)
    __isub__ = _swig_new_instance_method(_itkPointPython.itkPointF2___isub__)
    __add__ = _swig_new_instance_method(_itkPointPython.itkPointF2___add__)
    __sub__ = _swig_new_instance_method(_itkPointPython.itkPointF2___sub__)
    GetVectorFromOrigin = _swig_new_instance_method(_itkPointPython.itkPointF2_GetVectorFromOrigin)
    GetVnlVector = _swig_new_instance_method(_itkPointPython.itkPointF2_GetVnlVector)
    SetToMidPoint = _swig_new_instance_method(_itkPointPython.itkPointF2_SetToMidPoint)
    SetToBarycentricCombination = _swig_new_instance_method(_itkPointPython.itkPointF2_SetToBarycentricCombination)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPointF2
        __init__(self, r) -> itkPointF2

        Parameters
        ----------
        r: float const *

        __init__(self, v) -> itkPointF2

        Parameters
        ----------
        v: float const &

        __init__(self, stdArray) -> itkPointF2

        Parameters
        ----------
        stdArray: std::array< float,2 > const &

        __init__(self, arg0) -> itkPointF2

        Parameters
        ----------
        arg0: itkPointF2 const &

        """
        _itkPointPython.itkPointF2_swiginit(self, _itkPointPython.new_itkPointF2(*args))
    __swig_destroy__ = _itkPointPython.delete_itkPointF2
    __getitem__ = _swig_new_instance_method(_itkPointPython.itkPointF2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.itkPointF2___setitem__)
    __len__ = _swig_new_static_method(_itkPointPython.itkPointF2___len__)
    __repr__ = _swig_new_instance_method(_itkPointPython.itkPointF2___repr__)

# Register itkPointF2 in _itkPointPython:
_itkPointPython.itkPointF2_swigregister(itkPointF2)
itkPointF2_GetPointDimension = _itkPointPython.itkPointF2_GetPointDimension
itkPointF2___len__ = _itkPointPython.itkPointF2___len__

class itkPointF3(itk.itkFixedArrayPython.itkFixedArrayF3):
    r"""Proxy of C++ itkPointF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetPointDimension = _swig_new_static_method(_itkPointPython.itkPointF3_GetPointDimension)
    __eq__ = _swig_new_instance_method(_itkPointPython.itkPointF3___eq__)
    __ne__ = _swig_new_instance_method(_itkPointPython.itkPointF3___ne__)
    __iadd__ = _swig_new_instance_method(_itkPointPython.itkPointF3___iadd__)
    __isub__ = _swig_new_instance_method(_itkPointPython.itkPointF3___isub__)
    __add__ = _swig_new_instance_method(_itkPointPython.itkPointF3___add__)
    __sub__ = _swig_new_instance_method(_itkPointPython.itkPointF3___sub__)
    GetVectorFromOrigin = _swig_new_instance_method(_itkPointPython.itkPointF3_GetVectorFromOrigin)
    GetVnlVector = _swig_new_instance_method(_itkPointPython.itkPointF3_GetVnlVector)
    SetToMidPoint = _swig_new_instance_method(_itkPointPython.itkPointF3_SetToMidPoint)
    SetToBarycentricCombination = _swig_new_instance_method(_itkPointPython.itkPointF3_SetToBarycentricCombination)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPointF3
        __init__(self, r) -> itkPointF3

        Parameters
        ----------
        r: float const *

        __init__(self, v) -> itkPointF3

        Parameters
        ----------
        v: float const &

        __init__(self, stdArray) -> itkPointF3

        Parameters
        ----------
        stdArray: std::array< float,3 > const &

        __init__(self, arg0) -> itkPointF3

        Parameters
        ----------
        arg0: itkPointF3 const &

        """
        _itkPointPython.itkPointF3_swiginit(self, _itkPointPython.new_itkPointF3(*args))
    __swig_destroy__ = _itkPointPython.delete_itkPointF3
    __getitem__ = _swig_new_instance_method(_itkPointPython.itkPointF3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.itkPointF3___setitem__)
    __len__ = _swig_new_static_method(_itkPointPython.itkPointF3___len__)
    __repr__ = _swig_new_instance_method(_itkPointPython.itkPointF3___repr__)

# Register itkPointF3 in _itkPointPython:
_itkPointPython.itkPointF3_swigregister(itkPointF3)
itkPointF3_GetPointDimension = _itkPointPython.itkPointF3_GetPointDimension
itkPointF3___len__ = _itkPointPython.itkPointF3___len__

class itkPointF4(itk.itkFixedArrayPython.itkFixedArrayF4):
    r"""Proxy of C++ itkPointF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetPointDimension = _swig_new_static_method(_itkPointPython.itkPointF4_GetPointDimension)
    __eq__ = _swig_new_instance_method(_itkPointPython.itkPointF4___eq__)
    __ne__ = _swig_new_instance_method(_itkPointPython.itkPointF4___ne__)
    __iadd__ = _swig_new_instance_method(_itkPointPython.itkPointF4___iadd__)
    __isub__ = _swig_new_instance_method(_itkPointPython.itkPointF4___isub__)
    __add__ = _swig_new_instance_method(_itkPointPython.itkPointF4___add__)
    __sub__ = _swig_new_instance_method(_itkPointPython.itkPointF4___sub__)
    GetVectorFromOrigin = _swig_new_instance_method(_itkPointPython.itkPointF4_GetVectorFromOrigin)
    GetVnlVector = _swig_new_instance_method(_itkPointPython.itkPointF4_GetVnlVector)
    SetToMidPoint = _swig_new_instance_method(_itkPointPython.itkPointF4_SetToMidPoint)
    SetToBarycentricCombination = _swig_new_instance_method(_itkPointPython.itkPointF4_SetToBarycentricCombination)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPointF4
        __init__(self, r) -> itkPointF4

        Parameters
        ----------
        r: float const *

        __init__(self, v) -> itkPointF4

        Parameters
        ----------
        v: float const &

        __init__(self, stdArray) -> itkPointF4

        Parameters
        ----------
        stdArray: std::array< float,4 > const &

        __init__(self, arg0) -> itkPointF4

        Parameters
        ----------
        arg0: itkPointF4 const &

        """
        _itkPointPython.itkPointF4_swiginit(self, _itkPointPython.new_itkPointF4(*args))
    __swig_destroy__ = _itkPointPython.delete_itkPointF4
    __getitem__ = _swig_new_instance_method(_itkPointPython.itkPointF4___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.itkPointF4___setitem__)
    __len__ = _swig_new_static_method(_itkPointPython.itkPointF4___len__)
    __repr__ = _swig_new_instance_method(_itkPointPython.itkPointF4___repr__)

# Register itkPointF4 in _itkPointPython:
_itkPointPython.itkPointF4_swigregister(itkPointF4)
itkPointF4_GetPointDimension = _itkPointPython.itkPointF4_GetPointDimension
itkPointF4___len__ = _itkPointPython.itkPointF4___len__

class itkPointF5(itk.itkFixedArrayPython.itkFixedArrayF5):
    r"""Proxy of C++ itkPointF5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetPointDimension = _swig_new_static_method(_itkPointPython.itkPointF5_GetPointDimension)
    __eq__ = _swig_new_instance_method(_itkPointPython.itkPointF5___eq__)
    __ne__ = _swig_new_instance_method(_itkPointPython.itkPointF5___ne__)
    __iadd__ = _swig_new_instance_method(_itkPointPython.itkPointF5___iadd__)
    __isub__ = _swig_new_instance_method(_itkPointPython.itkPointF5___isub__)
    __add__ = _swig_new_instance_method(_itkPointPython.itkPointF5___add__)
    __sub__ = _swig_new_instance_method(_itkPointPython.itkPointF5___sub__)
    GetVectorFromOrigin = _swig_new_instance_method(_itkPointPython.itkPointF5_GetVectorFromOrigin)
    GetVnlVector = _swig_new_instance_method(_itkPointPython.itkPointF5_GetVnlVector)
    SetToMidPoint = _swig_new_instance_method(_itkPointPython.itkPointF5_SetToMidPoint)
    SetToBarycentricCombination = _swig_new_instance_method(_itkPointPython.itkPointF5_SetToBarycentricCombination)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPointF5
        __init__(self, r) -> itkPointF5

        Parameters
        ----------
        r: float const *

        __init__(self, v) -> itkPointF5

        Parameters
        ----------
        v: float const &

        __init__(self, stdArray) -> itkPointF5

        Parameters
        ----------
        stdArray: std::array< float,5 > const &

        __init__(self, arg0) -> itkPointF5

        Parameters
        ----------
        arg0: itkPointF5 const &

        """
        _itkPointPython.itkPointF5_swiginit(self, _itkPointPython.new_itkPointF5(*args))
    __swig_destroy__ = _itkPointPython.delete_itkPointF5
    __getitem__ = _swig_new_instance_method(_itkPointPython.itkPointF5___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.itkPointF5___setitem__)
    __len__ = _swig_new_static_method(_itkPointPython.itkPointF5___len__)
    __repr__ = _swig_new_instance_method(_itkPointPython.itkPointF5___repr__)

# Register itkPointF5 in _itkPointPython:
_itkPointPython.itkPointF5_swigregister(itkPointF5)
itkPointF5_GetPointDimension = _itkPointPython.itkPointF5_GetPointDimension
itkPointF5___len__ = _itkPointPython.itkPointF5___len__

class itkPointF6(itk.itkFixedArrayPython.itkFixedArrayF6):
    r"""Proxy of C++ itkPointF6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetPointDimension = _swig_new_static_method(_itkPointPython.itkPointF6_GetPointDimension)
    __eq__ = _swig_new_instance_method(_itkPointPython.itkPointF6___eq__)
    __ne__ = _swig_new_instance_method(_itkPointPython.itkPointF6___ne__)
    __iadd__ = _swig_new_instance_method(_itkPointPython.itkPointF6___iadd__)
    __isub__ = _swig_new_instance_method(_itkPointPython.itkPointF6___isub__)
    __add__ = _swig_new_instance_method(_itkPointPython.itkPointF6___add__)
    __sub__ = _swig_new_instance_method(_itkPointPython.itkPointF6___sub__)
    GetVectorFromOrigin = _swig_new_instance_method(_itkPointPython.itkPointF6_GetVectorFromOrigin)
    GetVnlVector = _swig_new_instance_method(_itkPointPython.itkPointF6_GetVnlVector)
    SetToMidPoint = _swig_new_instance_method(_itkPointPython.itkPointF6_SetToMidPoint)
    SetToBarycentricCombination = _swig_new_instance_method(_itkPointPython.itkPointF6_SetToBarycentricCombination)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPointF6
        __init__(self, r) -> itkPointF6

        Parameters
        ----------
        r: float const *

        __init__(self, v) -> itkPointF6

        Parameters
        ----------
        v: float const &

        __init__(self, stdArray) -> itkPointF6

        Parameters
        ----------
        stdArray: std::array< float,6 > const &

        __init__(self, arg0) -> itkPointF6

        Parameters
        ----------
        arg0: itkPointF6 const &

        """
        _itkPointPython.itkPointF6_swiginit(self, _itkPointPython.new_itkPointF6(*args))
    __swig_destroy__ = _itkPointPython.delete_itkPointF6
    __getitem__ = _swig_new_instance_method(_itkPointPython.itkPointF6___getitem__)
    __setitem__ = _swig_new_instance_method(_itkPointPython.itkPointF6___setitem__)
    __len__ = _swig_new_static_method(_itkPointPython.itkPointF6___len__)
    __repr__ = _swig_new_instance_method(_itkPointPython.itkPointF6___repr__)

# Register itkPointF6 in _itkPointPython:
_itkPointPython.itkPointF6_swigregister(itkPointF6)
itkPointF6_GetPointDimension = _itkPointPython.itkPointF6_GetPointDimension
itkPointF6___len__ = _itkPointPython.itkPointF6___len__



