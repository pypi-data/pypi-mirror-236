# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMapContainerPython
else:
    import _itkMapContainerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMapContainerPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMapContainerPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython

def itkMapContainerULD_New():
    return itkMapContainerULD.New()

class itkMapContainerULD(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULD
        __init__(self, comp) -> itkMapContainerULD

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULD_swiginit(self, _itkMapContainerPython.new_itkMapContainerULD(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULD___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULD_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULD
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULD_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULD

        Create a new object of the class itkMapContainerULD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULD in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULD_swigregister(itkMapContainerULD)
itkMapContainerULD___New_orig__ = _itkMapContainerPython.itkMapContainerULD___New_orig__
itkMapContainerULD_cast = _itkMapContainerPython.itkMapContainerULD_cast


def itkMapContainerULF_New():
    return itkMapContainerULF.New()

class itkMapContainerULF(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULF
        __init__(self, comp) -> itkMapContainerULF

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULF_swiginit(self, _itkMapContainerPython.new_itkMapContainerULF(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULF___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULF_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULF
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULF_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULF

        Create a new object of the class itkMapContainerULF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULF in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULF_swigregister(itkMapContainerULF)
itkMapContainerULF___New_orig__ = _itkMapContainerPython.itkMapContainerULF___New_orig__
itkMapContainerULF_cast = _itkMapContainerPython.itkMapContainerULF_cast


def itkMapContainerULPD2_New():
    return itkMapContainerULPD2.New()

class itkMapContainerULPD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULPD2
        __init__(self, comp) -> itkMapContainerULPD2

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULPD2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULPD2(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPD2___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD2_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPD2
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPD2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPD2

        Create a new object of the class itkMapContainerULPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULPD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULPD2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULPD2_swigregister(itkMapContainerULPD2)
itkMapContainerULPD2___New_orig__ = _itkMapContainerPython.itkMapContainerULPD2___New_orig__
itkMapContainerULPD2_cast = _itkMapContainerPython.itkMapContainerULPD2_cast


def itkMapContainerULPD3_New():
    return itkMapContainerULPD3.New()

class itkMapContainerULPD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULPD3
        __init__(self, comp) -> itkMapContainerULPD3

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULPD3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULPD3(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPD3___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD3_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPD3
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPD3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPD3

        Create a new object of the class itkMapContainerULPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULPD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULPD3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULPD3_swigregister(itkMapContainerULPD3)
itkMapContainerULPD3___New_orig__ = _itkMapContainerPython.itkMapContainerULPD3___New_orig__
itkMapContainerULPD3_cast = _itkMapContainerPython.itkMapContainerULPD3_cast


def itkMapContainerULPD4_New():
    return itkMapContainerULPD4.New()

class itkMapContainerULPD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULPD4
        __init__(self, comp) -> itkMapContainerULPD4

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULPD4_swiginit(self, _itkMapContainerPython.new_itkMapContainerULPD4(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPD4___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPD4_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPD4
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPD4_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPD4

        Create a new object of the class itkMapContainerULPD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULPD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULPD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULPD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULPD4 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULPD4_swigregister(itkMapContainerULPD4)
itkMapContainerULPD4___New_orig__ = _itkMapContainerPython.itkMapContainerULPD4___New_orig__
itkMapContainerULPD4_cast = _itkMapContainerPython.itkMapContainerULPD4_cast


def itkMapContainerULPF2_New():
    return itkMapContainerULPF2.New()

class itkMapContainerULPF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULPF2
        __init__(self, comp) -> itkMapContainerULPF2

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULPF2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULPF2(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF2_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPF2
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPF2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPF2

        Create a new object of the class itkMapContainerULPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULPF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULPF2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULPF2_swigregister(itkMapContainerULPF2)
itkMapContainerULPF2___New_orig__ = _itkMapContainerPython.itkMapContainerULPF2___New_orig__
itkMapContainerULPF2_cast = _itkMapContainerPython.itkMapContainerULPF2_cast


def itkMapContainerULPF3_New():
    return itkMapContainerULPF3.New()

class itkMapContainerULPF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULPF3
        __init__(self, comp) -> itkMapContainerULPF3

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULPF3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULPF3(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF3_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPF3
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPF3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPF3

        Create a new object of the class itkMapContainerULPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULPF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULPF3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULPF3_swigregister(itkMapContainerULPF3)
itkMapContainerULPF3___New_orig__ = _itkMapContainerPython.itkMapContainerULPF3___New_orig__
itkMapContainerULPF3_cast = _itkMapContainerPython.itkMapContainerULPF3_cast


def itkMapContainerULPF4_New():
    return itkMapContainerULPF4.New()

class itkMapContainerULPF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULPF4
        __init__(self, comp) -> itkMapContainerULPF4

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULPF4_swiginit(self, _itkMapContainerPython.new_itkMapContainerULPF4(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPF4___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULPF4_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPF4
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULPF4_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPF4

        Create a new object of the class itkMapContainerULPF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULPF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULPF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULPF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULPF4 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULPF4_swigregister(itkMapContainerULPF4)
itkMapContainerULPF4___New_orig__ = _itkMapContainerPython.itkMapContainerULPF4___New_orig__
itkMapContainerULPF4_cast = _itkMapContainerPython.itkMapContainerULPF4_cast


def itkMapContainerULSIT_New():
    return itkMapContainerULSIT.New()

class itkMapContainerULSIT(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULSIT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULSIT
        __init__(self, comp) -> itkMapContainerULSIT

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULSIT_swiginit(self, _itkMapContainerPython.new_itkMapContainerULSIT(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULSIT___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULSIT_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULSIT
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULSIT_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULSIT

        Create a new object of the class itkMapContainerULSIT and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULSIT.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULSIT.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULSIT.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULSIT in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULSIT_swigregister(itkMapContainerULSIT)
itkMapContainerULSIT___New_orig__ = _itkMapContainerPython.itkMapContainerULSIT___New_orig__
itkMapContainerULSIT_cast = _itkMapContainerPython.itkMapContainerULSIT_cast


def itkMapContainerULVD2_New():
    return itkMapContainerULVD2.New()

class itkMapContainerULVD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULVD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULVD2
        __init__(self, comp) -> itkMapContainerULVD2

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULVD2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULVD2(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVD2___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD2_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVD2
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVD2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVD2

        Create a new object of the class itkMapContainerULVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULVD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULVD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULVD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULVD2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULVD2_swigregister(itkMapContainerULVD2)
itkMapContainerULVD2___New_orig__ = _itkMapContainerPython.itkMapContainerULVD2___New_orig__
itkMapContainerULVD2_cast = _itkMapContainerPython.itkMapContainerULVD2_cast


def itkMapContainerULVD3_New():
    return itkMapContainerULVD3.New()

class itkMapContainerULVD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULVD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULVD3
        __init__(self, comp) -> itkMapContainerULVD3

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULVD3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULVD3(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVD3___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD3_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVD3
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVD3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVD3

        Create a new object of the class itkMapContainerULVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULVD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULVD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULVD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULVD3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULVD3_swigregister(itkMapContainerULVD3)
itkMapContainerULVD3___New_orig__ = _itkMapContainerPython.itkMapContainerULVD3___New_orig__
itkMapContainerULVD3_cast = _itkMapContainerPython.itkMapContainerULVD3_cast


def itkMapContainerULVD4_New():
    return itkMapContainerULVD4.New()

class itkMapContainerULVD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULVD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULVD4
        __init__(self, comp) -> itkMapContainerULVD4

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULVD4_swiginit(self, _itkMapContainerPython.new_itkMapContainerULVD4(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVD4___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVD4_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVD4
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVD4_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVD4

        Create a new object of the class itkMapContainerULVD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULVD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULVD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULVD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULVD4 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULVD4_swigregister(itkMapContainerULVD4)
itkMapContainerULVD4___New_orig__ = _itkMapContainerPython.itkMapContainerULVD4___New_orig__
itkMapContainerULVD4_cast = _itkMapContainerPython.itkMapContainerULVD4_cast


def itkMapContainerULVF2_New():
    return itkMapContainerULVF2.New()

class itkMapContainerULVF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULVF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULVF2
        __init__(self, comp) -> itkMapContainerULVF2

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULVF2_swiginit(self, _itkMapContainerPython.new_itkMapContainerULVF2(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF2_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVF2
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVF2_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVF2

        Create a new object of the class itkMapContainerULVF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULVF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULVF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULVF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULVF2 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULVF2_swigregister(itkMapContainerULVF2)
itkMapContainerULVF2___New_orig__ = _itkMapContainerPython.itkMapContainerULVF2___New_orig__
itkMapContainerULVF2_cast = _itkMapContainerPython.itkMapContainerULVF2_cast


def itkMapContainerULVF3_New():
    return itkMapContainerULVF3.New()

class itkMapContainerULVF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULVF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULVF3
        __init__(self, comp) -> itkMapContainerULVF3

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULVF3_swiginit(self, _itkMapContainerPython.new_itkMapContainerULVF3(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF3_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVF3
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVF3_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVF3

        Create a new object of the class itkMapContainerULVF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULVF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULVF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULVF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULVF3 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULVF3_swigregister(itkMapContainerULVF3)
itkMapContainerULVF3___New_orig__ = _itkMapContainerPython.itkMapContainerULVF3___New_orig__
itkMapContainerULVF3_cast = _itkMapContainerPython.itkMapContainerULVF3_cast


def itkMapContainerULVF4_New():
    return itkMapContainerULVF4.New()

class itkMapContainerULVF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkMapContainerULVF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkMapContainerULVF4
        __init__(self, comp) -> itkMapContainerULVF4

        Parameters
        ----------
        comp: std::less< unsigned long > const &

        """
        _itkMapContainerPython.itkMapContainerULVF4_swiginit(self, _itkMapContainerPython.new_itkMapContainerULVF4(*args))
    __New_orig__ = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVF4___New_orig__)
    Clone = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_GetElement)
    SetElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_SetElement)
    InsertElement = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_InsertElement)
    IndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_DeleteIndex)
    Size = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_Size)
    Reserve = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_Reserve)
    Squeeze = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_Squeeze)
    Initialize = _swig_new_instance_method(_itkMapContainerPython.itkMapContainerULVF4_Initialize)
    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVF4
    cast = _swig_new_static_method(_itkMapContainerPython.itkMapContainerULVF4_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVF4

        Create a new object of the class itkMapContainerULVF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerULVF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerULVF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerULVF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerULVF4 in _itkMapContainerPython:
_itkMapContainerPython.itkMapContainerULVF4_swigregister(itkMapContainerULVF4)
itkMapContainerULVF4___New_orig__ = _itkMapContainerPython.itkMapContainerULVF4___New_orig__
itkMapContainerULVF4_cast = _itkMapContainerPython.itkMapContainerULVF4_cast



