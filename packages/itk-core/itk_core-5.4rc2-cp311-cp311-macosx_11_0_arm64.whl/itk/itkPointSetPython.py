# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPointSetPython
else:
    import _itkPointSetPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPointSetPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPointSetPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorContainerPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkArrayPython

def itkPointSetAD2_New():
    return itkPointSetAD2.New()

class itkPointSetAD2(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetAD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetAD2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD2_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetAD2
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetAD2_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetAD2

        Create a new object of the class itkPointSetAD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetAD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetAD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetAD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetAD2 in _itkPointSetPython:
_itkPointSetPython.itkPointSetAD2_swigregister(itkPointSetAD2)
itkPointSetAD2___New_orig__ = _itkPointSetPython.itkPointSetAD2___New_orig__
itkPointSetAD2_cast = _itkPointSetPython.itkPointSetAD2_cast


def itkPointSetAD3_New():
    return itkPointSetAD3.New()

class itkPointSetAD3(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetAD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetAD3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD3_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetAD3
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetAD3_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetAD3

        Create a new object of the class itkPointSetAD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetAD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetAD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetAD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetAD3 in _itkPointSetPython:
_itkPointSetPython.itkPointSetAD3_swigregister(itkPointSetAD3)
itkPointSetAD3___New_orig__ = _itkPointSetPython.itkPointSetAD3___New_orig__
itkPointSetAD3_cast = _itkPointSetPython.itkPointSetAD3_cast


def itkPointSetAD4_New():
    return itkPointSetAD4.New()

class itkPointSetAD4(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetAD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetAD4___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetAD4_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetAD4
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetAD4_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetAD4

        Create a new object of the class itkPointSetAD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetAD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetAD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetAD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetAD4 in _itkPointSetPython:
_itkPointSetPython.itkPointSetAD4_swigregister(itkPointSetAD4)
itkPointSetAD4___New_orig__ = _itkPointSetPython.itkPointSetAD4___New_orig__
itkPointSetAD4_cast = _itkPointSetPython.itkPointSetAD4_cast


def itkPointSetD2_New():
    return itkPointSetD2.New()

class itkPointSetD2(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetD2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD2_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD2
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetD2_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetD2

        Create a new object of the class itkPointSetD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD2 in _itkPointSetPython:
_itkPointSetPython.itkPointSetD2_swigregister(itkPointSetD2)
itkPointSetD2___New_orig__ = _itkPointSetPython.itkPointSetD2___New_orig__
itkPointSetD2_cast = _itkPointSetPython.itkPointSetD2_cast


def itkPointSetD3_New():
    return itkPointSetD3.New()

class itkPointSetD3(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetD3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD3_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD3
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetD3_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetD3

        Create a new object of the class itkPointSetD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD3 in _itkPointSetPython:
_itkPointSetPython.itkPointSetD3_swigregister(itkPointSetD3)
itkPointSetD3___New_orig__ = _itkPointSetPython.itkPointSetD3___New_orig__
itkPointSetD3_cast = _itkPointSetPython.itkPointSetD3_cast


def itkPointSetD4_New():
    return itkPointSetD4.New()

class itkPointSetD4(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetD4___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetD4_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetD4
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetD4_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetD4

        Create a new object of the class itkPointSetD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetD4 in _itkPointSetPython:
_itkPointSetPython.itkPointSetD4_swigregister(itkPointSetD4)
itkPointSetD4___New_orig__ = _itkPointSetPython.itkPointSetD4___New_orig__
itkPointSetD4_cast = _itkPointSetPython.itkPointSetD4_cast


def itkPointSetF2_New():
    return itkPointSetF2.New()

class itkPointSetF2(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetF2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF2_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetF2
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetF2_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetF2

        Create a new object of the class itkPointSetF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetF2 in _itkPointSetPython:
_itkPointSetPython.itkPointSetF2_swigregister(itkPointSetF2)
itkPointSetF2___New_orig__ = _itkPointSetPython.itkPointSetF2___New_orig__
itkPointSetF2_cast = _itkPointSetPython.itkPointSetF2_cast


def itkPointSetF3_New():
    return itkPointSetF3.New()

class itkPointSetF3(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetF3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF3_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetF3
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetF3_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetF3

        Create a new object of the class itkPointSetF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetF3 in _itkPointSetPython:
_itkPointSetPython.itkPointSetF3_swigregister(itkPointSetF3)
itkPointSetF3___New_orig__ = _itkPointSetPython.itkPointSetF3___New_orig__
itkPointSetF3_cast = _itkPointSetPython.itkPointSetF3_cast


def itkPointSetF4_New():
    return itkPointSetF4.New()

class itkPointSetF4(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetF4___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetF4_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetF4
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetF4_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetF4

        Create a new object of the class itkPointSetF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetF4 in _itkPointSetPython:
_itkPointSetPython.itkPointSetF4_swigregister(itkPointSetF4)
itkPointSetF4___New_orig__ = _itkPointSetPython.itkPointSetF4___New_orig__
itkPointSetF4_cast = _itkPointSetPython.itkPointSetF4_cast


def itkPointSetMD22_New():
    return itkPointSetMD22.New()

class itkPointSetMD22(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetMD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetMD22___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD22_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetMD22
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetMD22_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetMD22

        Create a new object of the class itkPointSetMD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetMD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetMD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetMD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetMD22 in _itkPointSetPython:
_itkPointSetPython.itkPointSetMD22_swigregister(itkPointSetMD22)
itkPointSetMD22___New_orig__ = _itkPointSetPython.itkPointSetMD22___New_orig__
itkPointSetMD22_cast = _itkPointSetPython.itkPointSetMD22_cast


def itkPointSetMD33_New():
    return itkPointSetMD33.New()

class itkPointSetMD33(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetMD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetMD33___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD33_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetMD33
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetMD33_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetMD33

        Create a new object of the class itkPointSetMD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetMD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetMD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetMD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetMD33 in _itkPointSetPython:
_itkPointSetPython.itkPointSetMD33_swigregister(itkPointSetMD33)
itkPointSetMD33___New_orig__ = _itkPointSetPython.itkPointSetMD33___New_orig__
itkPointSetMD33_cast = _itkPointSetPython.itkPointSetMD33_cast


def itkPointSetMD44_New():
    return itkPointSetMD44.New()

class itkPointSetMD44(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetMD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetMD44___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetMD44_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetMD44
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetMD44_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetMD44

        Create a new object of the class itkPointSetMD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetMD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetMD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetMD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetMD44 in _itkPointSetPython:
_itkPointSetPython.itkPointSetMD44_swigregister(itkPointSetMD44)
itkPointSetMD44___New_orig__ = _itkPointSetPython.itkPointSetMD44___New_orig__
itkPointSetMD44_cast = _itkPointSetPython.itkPointSetMD44_cast


def itkPointSetPD22STD22DD_New():
    return itkPointSetPD22STD22DD.New()

class itkPointSetPD22STD22DD(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetPD22STD22DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetPD22STD22DD___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD22STD22DD_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetPD22STD22DD
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetPD22STD22DD_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetPD22STD22DD

        Create a new object of the class itkPointSetPD22STD22DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetPD22STD22DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetPD22STD22DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetPD22STD22DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetPD22STD22DD in _itkPointSetPython:
_itkPointSetPython.itkPointSetPD22STD22DD_swigregister(itkPointSetPD22STD22DD)
itkPointSetPD22STD22DD___New_orig__ = _itkPointSetPython.itkPointSetPD22STD22DD___New_orig__
itkPointSetPD22STD22DD_cast = _itkPointSetPython.itkPointSetPD22STD22DD_cast


def itkPointSetPD33STD33DD_New():
    return itkPointSetPD33STD33DD.New()

class itkPointSetPD33STD33DD(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetPD33STD33DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetPD33STD33DD___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD33STD33DD_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetPD33STD33DD
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetPD33STD33DD_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetPD33STD33DD

        Create a new object of the class itkPointSetPD33STD33DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetPD33STD33DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetPD33STD33DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetPD33STD33DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetPD33STD33DD in _itkPointSetPython:
_itkPointSetPython.itkPointSetPD33STD33DD_swigregister(itkPointSetPD33STD33DD)
itkPointSetPD33STD33DD___New_orig__ = _itkPointSetPython.itkPointSetPD33STD33DD___New_orig__
itkPointSetPD33STD33DD_cast = _itkPointSetPython.itkPointSetPD33STD33DD_cast


def itkPointSetPD44STD44DD_New():
    return itkPointSetPD44STD44DD.New()

class itkPointSetPD44STD44DD(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetPD44STD44DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetPD44STD44DD___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetPD44STD44DD_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetPD44STD44DD
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetPD44STD44DD_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetPD44STD44DD

        Create a new object of the class itkPointSetPD44STD44DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetPD44STD44DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetPD44STD44DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetPD44STD44DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetPD44STD44DD in _itkPointSetPython:
_itkPointSetPython.itkPointSetPD44STD44DD_swigregister(itkPointSetPD44STD44DD)
itkPointSetPD44STD44DD___New_orig__ = _itkPointSetPython.itkPointSetPD44STD44DD___New_orig__
itkPointSetPD44STD44DD_cast = _itkPointSetPython.itkPointSetPD44STD44DD_cast


def itkPointSetSS2_New():
    return itkPointSetSS2.New()

class itkPointSetSS2(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS2_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetSS2
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetSS2_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetSS2

        Create a new object of the class itkPointSetSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetSS2 in _itkPointSetPython:
_itkPointSetPython.itkPointSetSS2_swigregister(itkPointSetSS2)
itkPointSetSS2___New_orig__ = _itkPointSetPython.itkPointSetSS2___New_orig__
itkPointSetSS2_cast = _itkPointSetPython.itkPointSetSS2_cast


def itkPointSetSS3_New():
    return itkPointSetSS3.New()

class itkPointSetSS3(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS3_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetSS3
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetSS3_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetSS3

        Create a new object of the class itkPointSetSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetSS3 in _itkPointSetPython:
_itkPointSetPython.itkPointSetSS3_swigregister(itkPointSetSS3)
itkPointSetSS3___New_orig__ = _itkPointSetPython.itkPointSetSS3___New_orig__
itkPointSetSS3_cast = _itkPointSetPython.itkPointSetSS3_cast


def itkPointSetSS4_New():
    return itkPointSetSS4.New()

class itkPointSetSS4(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetSS4___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetSS4_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetSS4
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetSS4_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetSS4

        Create a new object of the class itkPointSetSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetSS4 in _itkPointSetPython:
_itkPointSetPython.itkPointSetSS4_swigregister(itkPointSetSS4)
itkPointSetSS4___New_orig__ = _itkPointSetPython.itkPointSetSS4___New_orig__
itkPointSetSS4_cast = _itkPointSetPython.itkPointSetSS4_cast


def itkPointSetUC2_New():
    return itkPointSetUC2.New()

class itkPointSetUC2(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC2_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUC2
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUC2_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetUC2

        Create a new object of the class itkPointSetUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUC2 in _itkPointSetPython:
_itkPointSetPython.itkPointSetUC2_swigregister(itkPointSetUC2)
itkPointSetUC2___New_orig__ = _itkPointSetPython.itkPointSetUC2___New_orig__
itkPointSetUC2_cast = _itkPointSetPython.itkPointSetUC2_cast


def itkPointSetUC3_New():
    return itkPointSetUC3.New()

class itkPointSetUC3(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC3_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUC3
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUC3_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetUC3

        Create a new object of the class itkPointSetUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUC3 in _itkPointSetPython:
_itkPointSetPython.itkPointSetUC3_swigregister(itkPointSetUC3)
itkPointSetUC3___New_orig__ = _itkPointSetPython.itkPointSetUC3___New_orig__
itkPointSetUC3_cast = _itkPointSetPython.itkPointSetUC3_cast


def itkPointSetUC4_New():
    return itkPointSetUC4.New()

class itkPointSetUC4(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUC4_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUC4
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUC4_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetUC4

        Create a new object of the class itkPointSetUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUC4 in _itkPointSetPython:
_itkPointSetPython.itkPointSetUC4_swigregister(itkPointSetUC4)
itkPointSetUC4___New_orig__ = _itkPointSetPython.itkPointSetUC4___New_orig__
itkPointSetUC4_cast = _itkPointSetPython.itkPointSetUC4_cast


def itkPointSetUI2DSMUI22FFUI_New():
    return itkPointSetUI2DSMUI22FFUI.New()

class itkPointSetUI2DSMUI22FFUI(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetUI2DSMUI22FFUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUI2DSMUI22FFUI
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetUI2DSMUI22FFUI

        Create a new object of the class itkPointSetUI2DSMUI22FFUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUI2DSMUI22FFUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUI2DSMUI22FFUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUI2DSMUI22FFUI.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUI2DSMUI22FFUI in _itkPointSetPython:
_itkPointSetPython.itkPointSetUI2DSMUI22FFUI_swigregister(itkPointSetUI2DSMUI22FFUI)
itkPointSetUI2DSMUI22FFUI___New_orig__ = _itkPointSetPython.itkPointSetUI2DSMUI22FFUI___New_orig__
itkPointSetUI2DSMUI22FFUI_cast = _itkPointSetPython.itkPointSetUI2DSMUI22FFUI_cast


def itkPointSetUI3DSMUI33FFUI_New():
    return itkPointSetUI3DSMUI33FFUI.New()

class itkPointSetUI3DSMUI33FFUI(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetUI3DSMUI33FFUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUI3DSMUI33FFUI
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetUI3DSMUI33FFUI

        Create a new object of the class itkPointSetUI3DSMUI33FFUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUI3DSMUI33FFUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUI3DSMUI33FFUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUI3DSMUI33FFUI.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUI3DSMUI33FFUI in _itkPointSetPython:
_itkPointSetPython.itkPointSetUI3DSMUI33FFUI_swigregister(itkPointSetUI3DSMUI33FFUI)
itkPointSetUI3DSMUI33FFUI___New_orig__ = _itkPointSetPython.itkPointSetUI3DSMUI33FFUI___New_orig__
itkPointSetUI3DSMUI33FFUI_cast = _itkPointSetPython.itkPointSetUI3DSMUI33FFUI_cast


def itkPointSetUI4DSMUI44FFUI_New():
    return itkPointSetUI4DSMUI44FFUI.New()

class itkPointSetUI4DSMUI44FFUI(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetUI4DSMUI44FFUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUI4DSMUI44FFUI
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetUI4DSMUI44FFUI

        Create a new object of the class itkPointSetUI4DSMUI44FFUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUI4DSMUI44FFUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUI4DSMUI44FFUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUI4DSMUI44FFUI.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUI4DSMUI44FFUI in _itkPointSetPython:
_itkPointSetPython.itkPointSetUI4DSMUI44FFUI_swigregister(itkPointSetUI4DSMUI44FFUI)
itkPointSetUI4DSMUI44FFUI___New_orig__ = _itkPointSetPython.itkPointSetUI4DSMUI44FFUI___New_orig__
itkPointSetUI4DSMUI44FFUI_cast = _itkPointSetPython.itkPointSetUI4DSMUI44FFUI_cast


def itkPointSetUS2_New():
    return itkPointSetUS2.New()

class itkPointSetUS2(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS2_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUS2
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUS2_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetUS2

        Create a new object of the class itkPointSetUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUS2 in _itkPointSetPython:
_itkPointSetPython.itkPointSetUS2_swigregister(itkPointSetUS2)
itkPointSetUS2___New_orig__ = _itkPointSetPython.itkPointSetUS2___New_orig__
itkPointSetUS2_cast = _itkPointSetPython.itkPointSetUS2_cast


def itkPointSetUS3_New():
    return itkPointSetUS3.New()

class itkPointSetUS3(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS3_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUS3
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUS3_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetUS3

        Create a new object of the class itkPointSetUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUS3 in _itkPointSetPython:
_itkPointSetPython.itkPointSetUS3_swigregister(itkPointSetUS3)
itkPointSetUS3___New_orig__ = _itkPointSetPython.itkPointSetUS3___New_orig__
itkPointSetUS3_cast = _itkPointSetPython.itkPointSetUS3_cast


def itkPointSetUS4_New():
    return itkPointSetUS4.New()

class itkPointSetUS4(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetUS4_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetUS4
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetUS4_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetUS4

        Create a new object of the class itkPointSetUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetUS4 in _itkPointSetPython:
_itkPointSetPython.itkPointSetUS4_swigregister(itkPointSetUS4)
itkPointSetUS4___New_orig__ = _itkPointSetPython.itkPointSetUS4___New_orig__
itkPointSetUS4_cast = _itkPointSetPython.itkPointSetUS4_cast


def itkPointSetVF33_New():
    return itkPointSetVF33.New()

class itkPointSetVF33(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkPointSetVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetPython.itkPointSetVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_Clone)
    GetMaximumNumberOfRegions = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_GetMaximumNumberOfRegions)
    PassStructure = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_PassStructure)
    GetNumberOfPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_GetNumberOfPoints)
    SetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_SetPoints)
    GetPoints = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_GetPoints)
    SetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_SetPoint)
    GetPoint = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_GetPoint)
    SetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_SetPointData)
    GetPointData = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_GetPointData)
    SetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_SetRequestedRegion)
    GetRequestedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_GetRequestedRegion)
    SetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_SetBufferedRegion)
    GetBufferedRegion = _swig_new_instance_method(_itkPointSetPython.itkPointSetVF33_GetBufferedRegion)
    __swig_destroy__ = _itkPointSetPython.delete_itkPointSetVF33
    cast = _swig_new_static_method(_itkPointSetPython.itkPointSetVF33_cast)

    def keys(self):
        """
        Return keys related to the pointset's metadata.
        These keys are used in the dictionary resulting from dict(pointset).
        """
        result = ['name', 'dimension', 'numberOfPoints', 'points', 'numberOfPointPixels', 'pointData']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(pointset.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_pointset(self)
            return state[key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'points':
                self.SetPoints(itk.vector_container_from_array(value))
            elif key == 'pointData':
                self.SetPointData(itk.vector_container_from_array(value))

    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_pointset(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.pointset_from_dict(state)
        self.__dict__['this'] = deserialized


    def New(*args, **kargs):
        """New() -> itkPointSetVF33

        Create a new object of the class itkPointSetVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetVF33 in _itkPointSetPython:
_itkPointSetPython.itkPointSetVF33_swigregister(itkPointSetVF33)
itkPointSetVF33___New_orig__ = _itkPointSetPython.itkPointSetVF33___New_orig__
itkPointSetVF33_cast = _itkPointSetPython.itkPointSetVF33_cast



