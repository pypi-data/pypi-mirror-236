# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkScalarImageToCooccurrenceMatrixFilterPython
else:
    import _itkScalarImageToCooccurrenceMatrixFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkScalarImageToCooccurrenceMatrixFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkScalarImageToCooccurrenceMatrixFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkArrayPython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython

def itkScalarImageToCooccurrenceMatrixFilterID2_New():
    return itkScalarImageToCooccurrenceMatrixFilterID2.New()

class itkScalarImageToCooccurrenceMatrixFilterID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterID2
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterID2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterID2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_swigregister(itkScalarImageToCooccurrenceMatrixFilterID2)
itkScalarImageToCooccurrenceMatrixFilterID2___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2___New_orig__
itkScalarImageToCooccurrenceMatrixFilterID2_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_cast


def itkScalarImageToCooccurrenceMatrixFilterID3_New():
    return itkScalarImageToCooccurrenceMatrixFilterID3.New()

class itkScalarImageToCooccurrenceMatrixFilterID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterID3
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterID3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterID3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_swigregister(itkScalarImageToCooccurrenceMatrixFilterID3)
itkScalarImageToCooccurrenceMatrixFilterID3___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3___New_orig__
itkScalarImageToCooccurrenceMatrixFilterID3_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_cast


def itkScalarImageToCooccurrenceMatrixFilterID4_New():
    return itkScalarImageToCooccurrenceMatrixFilterID4.New()

class itkScalarImageToCooccurrenceMatrixFilterID4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterID4
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterID4

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterID4 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_swigregister(itkScalarImageToCooccurrenceMatrixFilterID4)
itkScalarImageToCooccurrenceMatrixFilterID4___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4___New_orig__
itkScalarImageToCooccurrenceMatrixFilterID4_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID4_cast


def itkScalarImageToCooccurrenceMatrixFilterIF2_New():
    return itkScalarImageToCooccurrenceMatrixFilterIF2.New()

class itkScalarImageToCooccurrenceMatrixFilterIF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIF2
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIF2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIF2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIF2_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_cast


def itkScalarImageToCooccurrenceMatrixFilterIF3_New():
    return itkScalarImageToCooccurrenceMatrixFilterIF3.New()

class itkScalarImageToCooccurrenceMatrixFilterIF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIF3
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIF3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIF3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIF3_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_cast


def itkScalarImageToCooccurrenceMatrixFilterIF4_New():
    return itkScalarImageToCooccurrenceMatrixFilterIF4.New()

class itkScalarImageToCooccurrenceMatrixFilterIF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIF4
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIF4

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIF4 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_swigregister(itkScalarImageToCooccurrenceMatrixFilterIF4)
itkScalarImageToCooccurrenceMatrixFilterIF4___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIF4_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF4_cast


def itkScalarImageToCooccurrenceMatrixFilterISS2_New():
    return itkScalarImageToCooccurrenceMatrixFilterISS2.New()

class itkScalarImageToCooccurrenceMatrixFilterISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterISS2
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterISS2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterISS2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_swigregister(itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2___New_orig__
itkScalarImageToCooccurrenceMatrixFilterISS2_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_cast


def itkScalarImageToCooccurrenceMatrixFilterISS3_New():
    return itkScalarImageToCooccurrenceMatrixFilterISS3.New()

class itkScalarImageToCooccurrenceMatrixFilterISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterISS3
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterISS3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterISS3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_swigregister(itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3___New_orig__
itkScalarImageToCooccurrenceMatrixFilterISS3_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_cast


def itkScalarImageToCooccurrenceMatrixFilterISS4_New():
    return itkScalarImageToCooccurrenceMatrixFilterISS4.New()

class itkScalarImageToCooccurrenceMatrixFilterISS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterISS4
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterISS4

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterISS4 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_swigregister(itkScalarImageToCooccurrenceMatrixFilterISS4)
itkScalarImageToCooccurrenceMatrixFilterISS4___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4___New_orig__
itkScalarImageToCooccurrenceMatrixFilterISS4_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS4_cast


def itkScalarImageToCooccurrenceMatrixFilterIUC2_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUC2.New()

class itkScalarImageToCooccurrenceMatrixFilterIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUC2
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUC2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUC2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIUC2_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_cast


def itkScalarImageToCooccurrenceMatrixFilterIUC3_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUC3.New()

class itkScalarImageToCooccurrenceMatrixFilterIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUC3
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUC3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUC3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIUC3_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_cast


def itkScalarImageToCooccurrenceMatrixFilterIUC4_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUC4.New()

class itkScalarImageToCooccurrenceMatrixFilterIUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUC4
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUC4

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUC4 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUC4)
itkScalarImageToCooccurrenceMatrixFilterIUC4___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIUC4_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC4_cast


def itkScalarImageToCooccurrenceMatrixFilterIUS2_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUS2.New()

class itkScalarImageToCooccurrenceMatrixFilterIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUS2
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUS2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUS2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIUS2_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_cast


def itkScalarImageToCooccurrenceMatrixFilterIUS3_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUS3.New()

class itkScalarImageToCooccurrenceMatrixFilterIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUS3
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUS3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUS3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIUS3_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_cast


def itkScalarImageToCooccurrenceMatrixFilterIUS4_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUS4.New()

class itkScalarImageToCooccurrenceMatrixFilterIUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkScalarImageToCooccurrenceMatrixFilterIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUS4
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUS4

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUS4 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUS4)
itkScalarImageToCooccurrenceMatrixFilterIUS4___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIUS4_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def scalar_image_to_cooccurrence_matrix_filter(*args,  offsets: Sequence[Sequence[int]]=..., offset: Sequence[int]=..., number_of_bins_per_axis: int=..., pixel_value_min_max: float=..., normalize: bool=..., mask_image: itkt.Image=..., inside_pixel_value: float=...,**kwargs):
    """Functional interface for ScalarImageToCooccurrenceMatrixFilter"""
    import itk

    kwarg_typehints = { 'offsets':offsets,'offset':offset,'number_of_bins_per_axis':number_of_bins_per_axis,'pixel_value_min_max':pixel_value_min_max,'normalize':normalize,'mask_image':mask_image,'inside_pixel_value':inside_pixel_value }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ScalarImageToCooccurrenceMatrixFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def scalar_image_to_cooccurrence_matrix_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKStatistics.ScalarImageToCooccurrenceMatrixFilter
    scalar_image_to_cooccurrence_matrix_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    scalar_image_to_cooccurrence_matrix_filter.__doc__ = filter_object.__doc__




