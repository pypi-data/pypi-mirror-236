# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTransformBasePython
else:
    import _itkTransformBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkTransformBasePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkTransformBasePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
class listitkTransformBaseTemplateD_Pointer(collections.abc.MutableSequence):
    r"""Proxy of C++ std::list< itkTransformBaseTemplateD_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___nonzero__)
    __bool__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___bool__)
    __len__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___len__)
    __getslice__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___getslice__)
    __setslice__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___setslice__)
    __delslice__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___delslice__)
    __delitem__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___delitem__)
    __getitem__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___getitem__)
    __setitem__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer___setitem__)
    pop = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_pop)
    append = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_append)
    empty = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_empty)
    size = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_size)
    swap = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_swap)
    begin = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_begin)
    end = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_end)
    rbegin = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_rbegin)
    rend = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_rend)
    clear = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_clear)
    get_allocator = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_get_allocator)
    pop_back = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_pop_back)
    erase = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> listitkTransformBaseTemplateD_Pointer
        __init__(self, other) -> listitkTransformBaseTemplateD_Pointer

        Parameters
        ----------
        other: std::list< itkTransformBaseTemplateD_Pointer > const &

        __init__(self, size) -> listitkTransformBaseTemplateD_Pointer

        Parameters
        ----------
        size: std::list< itkTransformBaseTemplateD_Pointer >::size_type

        __init__(self, size, value) -> listitkTransformBaseTemplateD_Pointer

        Parameters
        ----------
        size: std::list< itkTransformBaseTemplateD_Pointer >::size_type
        value: std::list< itkTransformBaseTemplateD_Pointer >::value_type const &

        """
        _itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_swiginit(self, _itkTransformBasePython.new_listitkTransformBaseTemplateD_Pointer(*args))
    push_back = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_push_back)
    front = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_front)
    back = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_back)
    assign = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_assign)
    resize = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_resize)
    insert = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_insert)
    pop_front = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_pop_front)
    push_front = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_push_front)
    reverse = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_reverse)
    __swig_destroy__ = _itkTransformBasePython.delete_listitkTransformBaseTemplateD_Pointer

# Register listitkTransformBaseTemplateD_Pointer in _itkTransformBasePython:
_itkTransformBasePython.listitkTransformBaseTemplateD_Pointer_swigregister(listitkTransformBaseTemplateD_Pointer)

class listitkTransformBaseTemplateF_Pointer(collections.abc.MutableSequence):
    r"""Proxy of C++ std::list< itkTransformBaseTemplateF_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___nonzero__)
    __bool__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___bool__)
    __len__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___len__)
    __getslice__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___getslice__)
    __setslice__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___setslice__)
    __delslice__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___delslice__)
    __delitem__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___delitem__)
    __getitem__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___getitem__)
    __setitem__ = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer___setitem__)
    pop = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_pop)
    append = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_append)
    empty = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_empty)
    size = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_size)
    swap = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_swap)
    begin = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_begin)
    end = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_end)
    rbegin = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_rbegin)
    rend = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_rend)
    clear = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_clear)
    get_allocator = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_get_allocator)
    pop_back = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_pop_back)
    erase = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> listitkTransformBaseTemplateF_Pointer
        __init__(self, other) -> listitkTransformBaseTemplateF_Pointer

        Parameters
        ----------
        other: std::list< itkTransformBaseTemplateF_Pointer > const &

        __init__(self, size) -> listitkTransformBaseTemplateF_Pointer

        Parameters
        ----------
        size: std::list< itkTransformBaseTemplateF_Pointer >::size_type

        __init__(self, size, value) -> listitkTransformBaseTemplateF_Pointer

        Parameters
        ----------
        size: std::list< itkTransformBaseTemplateF_Pointer >::size_type
        value: std::list< itkTransformBaseTemplateF_Pointer >::value_type const &

        """
        _itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_swiginit(self, _itkTransformBasePython.new_listitkTransformBaseTemplateF_Pointer(*args))
    push_back = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_push_back)
    front = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_front)
    back = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_back)
    assign = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_assign)
    resize = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_resize)
    insert = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_insert)
    pop_front = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_pop_front)
    push_front = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_push_front)
    reverse = _swig_new_instance_method(_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_reverse)
    __swig_destroy__ = _itkTransformBasePython.delete_listitkTransformBaseTemplateF_Pointer

# Register listitkTransformBaseTemplateF_Pointer in _itkTransformBasePython:
_itkTransformBasePython.listitkTransformBaseTemplateF_Pointer_swigregister(listitkTransformBaseTemplateF_Pointer)


def itkDataObjectDecoratorTD22_New():
    return itkDataObjectDecoratorTD22.New()

class itkDataObjectDecoratorTD22(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD22_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD22_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD22_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD22_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD22_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD22
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD22_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD22

        Create a new object of the class itkDataObjectDecoratorTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD22 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD22_swigregister(itkDataObjectDecoratorTD22)
itkDataObjectDecoratorTD22___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTD22___New_orig__
itkDataObjectDecoratorTD22_cast = _itkTransformBasePython.itkDataObjectDecoratorTD22_cast


def itkDataObjectDecoratorTD23_New():
    return itkDataObjectDecoratorTD23.New()

class itkDataObjectDecoratorTD23(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD23___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD23_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD23_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD23_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD23_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD23_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD23
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD23_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD23

        Create a new object of the class itkDataObjectDecoratorTD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD23 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD23_swigregister(itkDataObjectDecoratorTD23)
itkDataObjectDecoratorTD23___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTD23___New_orig__
itkDataObjectDecoratorTD23_cast = _itkTransformBasePython.itkDataObjectDecoratorTD23_cast


def itkDataObjectDecoratorTD24_New():
    return itkDataObjectDecoratorTD24.New()

class itkDataObjectDecoratorTD24(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD24___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD24_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD24_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD24_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD24_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD24_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD24
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD24_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD24

        Create a new object of the class itkDataObjectDecoratorTD24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD24.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD24 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD24_swigregister(itkDataObjectDecoratorTD24)
itkDataObjectDecoratorTD24___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTD24___New_orig__
itkDataObjectDecoratorTD24_cast = _itkTransformBasePython.itkDataObjectDecoratorTD24_cast


def itkDataObjectDecoratorTD32_New():
    return itkDataObjectDecoratorTD32.New()

class itkDataObjectDecoratorTD32(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD32___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD32_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD32_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD32_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD32_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD32_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD32
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD32_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD32

        Create a new object of the class itkDataObjectDecoratorTD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD32 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD32_swigregister(itkDataObjectDecoratorTD32)
itkDataObjectDecoratorTD32___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTD32___New_orig__
itkDataObjectDecoratorTD32_cast = _itkTransformBasePython.itkDataObjectDecoratorTD32_cast


def itkDataObjectDecoratorTD33_New():
    return itkDataObjectDecoratorTD33.New()

class itkDataObjectDecoratorTD33(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD33_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD33_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD33_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD33_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD33_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD33
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD33_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD33

        Create a new object of the class itkDataObjectDecoratorTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD33 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD33_swigregister(itkDataObjectDecoratorTD33)
itkDataObjectDecoratorTD33___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTD33___New_orig__
itkDataObjectDecoratorTD33_cast = _itkTransformBasePython.itkDataObjectDecoratorTD33_cast


def itkDataObjectDecoratorTD34_New():
    return itkDataObjectDecoratorTD34.New()

class itkDataObjectDecoratorTD34(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD34___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD34_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD34_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD34_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD34_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD34_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD34
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD34_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD34

        Create a new object of the class itkDataObjectDecoratorTD34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD34 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD34_swigregister(itkDataObjectDecoratorTD34)
itkDataObjectDecoratorTD34___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTD34___New_orig__
itkDataObjectDecoratorTD34_cast = _itkTransformBasePython.itkDataObjectDecoratorTD34_cast


def itkDataObjectDecoratorTD42_New():
    return itkDataObjectDecoratorTD42.New()

class itkDataObjectDecoratorTD42(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD42___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD42_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD42_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD42_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD42_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD42_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD42
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD42_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD42

        Create a new object of the class itkDataObjectDecoratorTD42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD42 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD42_swigregister(itkDataObjectDecoratorTD42)
itkDataObjectDecoratorTD42___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTD42___New_orig__
itkDataObjectDecoratorTD42_cast = _itkTransformBasePython.itkDataObjectDecoratorTD42_cast


def itkDataObjectDecoratorTD43_New():
    return itkDataObjectDecoratorTD43.New()

class itkDataObjectDecoratorTD43(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD43___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD43_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD43_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD43_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD43_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD43_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD43
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD43_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD43

        Create a new object of the class itkDataObjectDecoratorTD43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD43 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD43_swigregister(itkDataObjectDecoratorTD43)
itkDataObjectDecoratorTD43___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTD43___New_orig__
itkDataObjectDecoratorTD43_cast = _itkTransformBasePython.itkDataObjectDecoratorTD43_cast


def itkDataObjectDecoratorTD44_New():
    return itkDataObjectDecoratorTD44.New()

class itkDataObjectDecoratorTD44(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD44_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD44_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD44_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD44_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTD44_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTD44
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTD44_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD44

        Create a new object of the class itkDataObjectDecoratorTD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTD44 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTD44_swigregister(itkDataObjectDecoratorTD44)
itkDataObjectDecoratorTD44___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTD44___New_orig__
itkDataObjectDecoratorTD44_cast = _itkTransformBasePython.itkDataObjectDecoratorTD44_cast


def itkDataObjectDecoratorTF22_New():
    return itkDataObjectDecoratorTF22.New()

class itkDataObjectDecoratorTF22(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF22_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF22_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF22_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF22_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF22_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF22
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF22_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF22

        Create a new object of the class itkDataObjectDecoratorTF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF22 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF22_swigregister(itkDataObjectDecoratorTF22)
itkDataObjectDecoratorTF22___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTF22___New_orig__
itkDataObjectDecoratorTF22_cast = _itkTransformBasePython.itkDataObjectDecoratorTF22_cast


def itkDataObjectDecoratorTF23_New():
    return itkDataObjectDecoratorTF23.New()

class itkDataObjectDecoratorTF23(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF23___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF23_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF23_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF23_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF23_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF23_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF23
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF23_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF23

        Create a new object of the class itkDataObjectDecoratorTF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF23 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF23_swigregister(itkDataObjectDecoratorTF23)
itkDataObjectDecoratorTF23___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTF23___New_orig__
itkDataObjectDecoratorTF23_cast = _itkTransformBasePython.itkDataObjectDecoratorTF23_cast


def itkDataObjectDecoratorTF24_New():
    return itkDataObjectDecoratorTF24.New()

class itkDataObjectDecoratorTF24(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF24___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF24_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF24_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF24_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF24_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF24_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF24
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF24_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF24

        Create a new object of the class itkDataObjectDecoratorTF24 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF24.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF24.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF24.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF24 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF24_swigregister(itkDataObjectDecoratorTF24)
itkDataObjectDecoratorTF24___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTF24___New_orig__
itkDataObjectDecoratorTF24_cast = _itkTransformBasePython.itkDataObjectDecoratorTF24_cast


def itkDataObjectDecoratorTF32_New():
    return itkDataObjectDecoratorTF32.New()

class itkDataObjectDecoratorTF32(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF32___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF32_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF32_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF32_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF32_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF32_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF32
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF32_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF32

        Create a new object of the class itkDataObjectDecoratorTF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF32.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF32 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF32_swigregister(itkDataObjectDecoratorTF32)
itkDataObjectDecoratorTF32___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTF32___New_orig__
itkDataObjectDecoratorTF32_cast = _itkTransformBasePython.itkDataObjectDecoratorTF32_cast


def itkDataObjectDecoratorTF33_New():
    return itkDataObjectDecoratorTF33.New()

class itkDataObjectDecoratorTF33(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF33_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF33_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF33_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF33_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF33_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF33
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF33_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF33

        Create a new object of the class itkDataObjectDecoratorTF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF33 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF33_swigregister(itkDataObjectDecoratorTF33)
itkDataObjectDecoratorTF33___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTF33___New_orig__
itkDataObjectDecoratorTF33_cast = _itkTransformBasePython.itkDataObjectDecoratorTF33_cast


def itkDataObjectDecoratorTF34_New():
    return itkDataObjectDecoratorTF34.New()

class itkDataObjectDecoratorTF34(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF34___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF34_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF34_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF34_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF34_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF34_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF34
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF34_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF34

        Create a new object of the class itkDataObjectDecoratorTF34 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF34.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF34.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF34.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF34 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF34_swigregister(itkDataObjectDecoratorTF34)
itkDataObjectDecoratorTF34___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTF34___New_orig__
itkDataObjectDecoratorTF34_cast = _itkTransformBasePython.itkDataObjectDecoratorTF34_cast


def itkDataObjectDecoratorTF42_New():
    return itkDataObjectDecoratorTF42.New()

class itkDataObjectDecoratorTF42(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF42___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF42_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF42_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF42_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF42_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF42_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF42
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF42_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF42

        Create a new object of the class itkDataObjectDecoratorTF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF42.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF42 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF42_swigregister(itkDataObjectDecoratorTF42)
itkDataObjectDecoratorTF42___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTF42___New_orig__
itkDataObjectDecoratorTF42_cast = _itkTransformBasePython.itkDataObjectDecoratorTF42_cast


def itkDataObjectDecoratorTF43_New():
    return itkDataObjectDecoratorTF43.New()

class itkDataObjectDecoratorTF43(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF43___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF43_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF43_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF43_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF43_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF43_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF43
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF43_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF43

        Create a new object of the class itkDataObjectDecoratorTF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF43 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF43_swigregister(itkDataObjectDecoratorTF43)
itkDataObjectDecoratorTF43___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTF43___New_orig__
itkDataObjectDecoratorTF43_cast = _itkTransformBasePython.itkDataObjectDecoratorTF43_cast


def itkDataObjectDecoratorTF44_New():
    return itkDataObjectDecoratorTF44.New()

class itkDataObjectDecoratorTF44(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ itkDataObjectDecoratorTF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF44_Clone)
    Set = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF44_Set)
    Get = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF44_Get)
    GetModifiable = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF44_GetModifiable)
    Graft = _swig_new_instance_method(_itkTransformBasePython.itkDataObjectDecoratorTF44_Graft)
    __swig_destroy__ = _itkTransformBasePython.delete_itkDataObjectDecoratorTF44
    cast = _swig_new_static_method(_itkTransformBasePython.itkDataObjectDecoratorTF44_cast)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTF44

        Create a new object of the class itkDataObjectDecoratorTF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDataObjectDecoratorTF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDataObjectDecoratorTF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDataObjectDecoratorTF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDataObjectDecoratorTF44 in _itkTransformBasePython:
_itkTransformBasePython.itkDataObjectDecoratorTF44_swigregister(itkDataObjectDecoratorTF44)
itkDataObjectDecoratorTF44___New_orig__ = _itkTransformBasePython.itkDataObjectDecoratorTF44___New_orig__
itkDataObjectDecoratorTF44_cast = _itkTransformBasePython.itkDataObjectDecoratorTF44_cast

class itkTransformBaseTemplateD(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformBaseTemplateD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNumberOfParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_GetNumberOfParameters)
    GetParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_GetParameters)
    GetInputSpaceDimension = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_GetInputSpaceDimension)
    GetOutputSpaceDimension = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_GetOutputSpaceDimension)
    SetParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_SetParameters)
    SetParametersByValue = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_SetParametersByValue)
    SetFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_SetFixedParameters)
    CopyInParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_CopyInParameters)
    CopyInFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_CopyInFixedParameters)
    GetFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_GetFixedParameters)
    GetTransformTypeAsString = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_GetTransformTypeAsString)
    GetTransformCategory = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_GetTransformCategory)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformBaseTemplateD
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformBaseTemplateD_cast)

    def keys(self):
        """
        Return keys related to the transform's metadata.
        These keys are used in the dictionary resulting from dict(transform).
        """
        result = ['name', 'inputDimension', 'outputDimension', 'inputSpaceName', 'outputSpaceName', 'numberOfParameters', 'numberOfFixedParameters', 'parameters', 'fixedParameters']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(transform.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_transform(self)
            return state[0][key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'inputSpaceName':
                self.SetInputSpaceName(value)
            elif key == 'outputSpaceName':
                self.SetOutputSpaceName(value)
            elif key == 'fixedParameters' or key == 'parameters':
                if key == 'fixedParameters':
                    o1 = self.GetFixedParameters()
                else:
                    o1 = self.GetParameters()

                o1.SetSize(value.shape[0])
                for i, v in enumerate(value):
                    o1.SetElement(i, v)

                if key == 'fixedParameters':
                    self.SetFixedParameters(o1)
                else:
                    self.SetParameters(o1)


    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_transform(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.transform_from_dict(state)
        self.__dict__['this'] = deserialized


# Register itkTransformBaseTemplateD in _itkTransformBasePython:
_itkTransformBasePython.itkTransformBaseTemplateD_swigregister(itkTransformBaseTemplateD)
itkTransformBaseTemplateD_cast = _itkTransformBasePython.itkTransformBaseTemplateD_cast

class itkTransformBaseTemplateD_ConstPointer(object):
    r"""Proxy of C++ itkTransformBaseTemplateD_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTransformBaseTemplateD_ConstPointer
        __init__(self, p) -> itkTransformBaseTemplateD_ConstPointer

        Parameters
        ----------
        p: itkTransformBaseTemplateD_ConstPointer const &

        __init__(self, p) -> itkTransformBaseTemplateD_ConstPointer

        Parameters
        ----------
        p: itkTransformBaseTemplateD const *

        """
        _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_swiginit(self, _itkTransformBasePython.new_itkTransformBaseTemplateD_ConstPointer(*args))
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformBaseTemplateD_ConstPointer
    __deref__ = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_Swap)

    def keys(self):
        """
        Return keys related to the transform's metadata.
        These keys are used in the dictionary resulting from dict(transform).
        """
        result = ['name', 'inputDimension', 'outputDimension', 'inputSpaceName', 'outputSpaceName', 'numberOfParameters', 'numberOfFixedParameters', 'parameters', 'fixedParameters']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(transform.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_transform(self)
            return state[0][key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'inputSpaceName':
                self.SetInputSpaceName(value)
            elif key == 'outputSpaceName':
                self.SetOutputSpaceName(value)
            elif key == 'fixedParameters' or key == 'parameters':
                if key == 'fixedParameters':
                    o1 = self.GetFixedParameters()
                else:
                    o1 = self.GetParameters()

                o1.SetSize(value.shape[0])
                for i, v in enumerate(value):
                    o1.SetElement(i, v)

                if key == 'fixedParameters':
                    self.SetFixedParameters(o1)
                else:
                    self.SetParameters(o1)


    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_transform(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.transform_from_dict(state)
        self.__dict__['this'] = deserialized

    GetNumberOfParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetNumberOfParameters)
    GetParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetParameters)
    GetInputSpaceDimension = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetInputSpaceDimension)
    GetOutputSpaceDimension = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetOutputSpaceDimension)
    GetFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetFixedParameters)
    GetTransformTypeAsString = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetTransformTypeAsString)
    GetTransformCategory = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetTransformCategory)
    DebugOn = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_CreateAnother)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_Clone)
    GetNameOfClass = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_GetReferenceCount)

# Register itkTransformBaseTemplateD_ConstPointer in _itkTransformBasePython:
_itkTransformBasePython.itkTransformBaseTemplateD_ConstPointer_swigregister(itkTransformBaseTemplateD_ConstPointer)

class itkTransformBaseTemplateEnums(object):
    r"""Proxy of C++ itkTransformBaseTemplateEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TransformCategory_UnknownTransformCategory = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_UnknownTransformCategory
    
    TransformCategory_Linear = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_Linear
    
    TransformCategory_BSpline = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_BSpline
    
    TransformCategory_Spline = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_Spline
    
    TransformCategory_DisplacementField = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_DisplacementField
    
    TransformCategory_VelocityField = _itkTransformBasePython.itkTransformBaseTemplateEnums_TransformCategory_VelocityField
    

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTransformBaseTemplateEnums
        __init__(self, arg0) -> itkTransformBaseTemplateEnums

        Parameters
        ----------
        arg0: itkTransformBaseTemplateEnums const &

        """
        _itkTransformBasePython.itkTransformBaseTemplateEnums_swiginit(self, _itkTransformBasePython.new_itkTransformBaseTemplateEnums(*args))
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformBaseTemplateEnums

# Register itkTransformBaseTemplateEnums in _itkTransformBasePython:
_itkTransformBasePython.itkTransformBaseTemplateEnums_swigregister(itkTransformBaseTemplateEnums)

class itkTransformBaseTemplateF(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkTransformBaseTemplateF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetNumberOfParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_GetNumberOfParameters)
    GetParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_GetParameters)
    GetInputSpaceDimension = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_GetInputSpaceDimension)
    GetOutputSpaceDimension = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_GetOutputSpaceDimension)
    SetParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_SetParameters)
    SetParametersByValue = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_SetParametersByValue)
    SetFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_SetFixedParameters)
    CopyInParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_CopyInParameters)
    CopyInFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_CopyInFixedParameters)
    GetFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_GetFixedParameters)
    GetTransformTypeAsString = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_GetTransformTypeAsString)
    GetTransformCategory = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_GetTransformCategory)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformBaseTemplateF
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformBaseTemplateF_cast)

    def keys(self):
        """
        Return keys related to the transform's metadata.
        These keys are used in the dictionary resulting from dict(transform).
        """
        result = ['name', 'inputDimension', 'outputDimension', 'inputSpaceName', 'outputSpaceName', 'numberOfParameters', 'numberOfFixedParameters', 'parameters', 'fixedParameters']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(transform.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_transform(self)
            return state[0][key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'inputSpaceName':
                self.SetInputSpaceName(value)
            elif key == 'outputSpaceName':
                self.SetOutputSpaceName(value)
            elif key == 'fixedParameters' or key == 'parameters':
                if key == 'fixedParameters':
                    o1 = self.GetFixedParameters()
                else:
                    o1 = self.GetParameters()

                o1.SetSize(value.shape[0])
                for i, v in enumerate(value):
                    o1.SetElement(i, v)

                if key == 'fixedParameters':
                    self.SetFixedParameters(o1)
                else:
                    self.SetParameters(o1)


    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_transform(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.transform_from_dict(state)
        self.__dict__['this'] = deserialized


# Register itkTransformBaseTemplateF in _itkTransformBasePython:
_itkTransformBasePython.itkTransformBaseTemplateF_swigregister(itkTransformBaseTemplateF)
itkTransformBaseTemplateF_cast = _itkTransformBasePython.itkTransformBaseTemplateF_cast

class itkTransformBaseTemplateF_ConstPointer(object):
    r"""Proxy of C++ itkTransformBaseTemplateF_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkTransformBaseTemplateF_ConstPointer
        __init__(self, p) -> itkTransformBaseTemplateF_ConstPointer

        Parameters
        ----------
        p: itkTransformBaseTemplateF_ConstPointer const &

        __init__(self, p) -> itkTransformBaseTemplateF_ConstPointer

        Parameters
        ----------
        p: itkTransformBaseTemplateF const *

        """
        _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_swiginit(self, _itkTransformBasePython.new_itkTransformBaseTemplateF_ConstPointer(*args))
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformBaseTemplateF_ConstPointer
    __deref__ = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_Swap)

    def keys(self):
        """
        Return keys related to the transform's metadata.
        These keys are used in the dictionary resulting from dict(transform).
        """
        result = ['name', 'inputDimension', 'outputDimension', 'inputSpaceName', 'outputSpaceName', 'numberOfParameters', 'numberOfFixedParameters', 'parameters', 'fixedParameters']
        return result

    def __getitem__(self, key):
        """Access metadata keys, see help(transform.keys), for string keys."""
        import itk
        if isinstance(key, str):
            state = itk.dict_from_transform(self)
            return state[0][key]

    def __setitem__(self, key, value):
        if isinstance(key, str):
            import numpy as np
            if key == 'name':
                self.SetObjectName(value)
            elif key == 'inputSpaceName':
                self.SetInputSpaceName(value)
            elif key == 'outputSpaceName':
                self.SetOutputSpaceName(value)
            elif key == 'fixedParameters' or key == 'parameters':
                if key == 'fixedParameters':
                    o1 = self.GetFixedParameters()
                else:
                    o1 = self.GetParameters()

                o1.SetSize(value.shape[0])
                for i, v in enumerate(value):
                    o1.SetElement(i, v)

                if key == 'fixedParameters':
                    self.SetFixedParameters(o1)
                else:
                    self.SetParameters(o1)


    def __getstate__(self):
        """Get object state, necessary for serialization with pickle."""
        import itk
        state = itk.dict_from_transform(self)
        return state

    def __setstate__(self, state):
        """Set object state, necessary for serialization with pickle."""
        import itk
        import numpy as np
        deserialized = itk.transform_from_dict(state)
        self.__dict__['this'] = deserialized

    GetNumberOfParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetNumberOfParameters)
    GetParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetParameters)
    GetInputSpaceDimension = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetInputSpaceDimension)
    GetOutputSpaceDimension = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetOutputSpaceDimension)
    GetFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetFixedParameters)
    GetTransformTypeAsString = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetTransformTypeAsString)
    GetTransformCategory = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetTransformCategory)
    DebugOn = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_CreateAnother)
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_Clone)
    GetNameOfClass = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_GetReferenceCount)

# Register itkTransformBaseTemplateF_ConstPointer in _itkTransformBasePython:
_itkTransformBasePython.itkTransformBaseTemplateF_ConstPointer_swigregister(itkTransformBaseTemplateF_ConstPointer)

class itkTransformD2(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD2_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD2
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD2_cast)

# Register itkTransformD2 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD2_swigregister(itkTransformD2)
itkTransformD2_cast = _itkTransformBasePython.itkTransformD2_cast

class itkTransformD22(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD22_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD22
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD22_cast)

# Register itkTransformD22 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD22_swigregister(itkTransformD22)
itkTransformD22_cast = _itkTransformBasePython.itkTransformD22_cast

class itkTransformD23(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD23_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD23
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD23_cast)

# Register itkTransformD23 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD23_swigregister(itkTransformD23)
itkTransformD23_cast = _itkTransformBasePython.itkTransformD23_cast

class itkTransformD24(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD24_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD24
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD24_cast)

# Register itkTransformD24 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD24_swigregister(itkTransformD24)
itkTransformD24_cast = _itkTransformBasePython.itkTransformD24_cast

class itkTransformD3(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD3_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD3
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD3_cast)

# Register itkTransformD3 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD3_swigregister(itkTransformD3)
itkTransformD3_cast = _itkTransformBasePython.itkTransformD3_cast

class itkTransformD32(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD32_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD32
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD32_cast)

# Register itkTransformD32 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD32_swigregister(itkTransformD32)
itkTransformD32_cast = _itkTransformBasePython.itkTransformD32_cast

class itkTransformD33(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD33_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD33
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD33_cast)

# Register itkTransformD33 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD33_swigregister(itkTransformD33)
itkTransformD33_cast = _itkTransformBasePython.itkTransformD33_cast

class itkTransformD34(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD34_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD34
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD34_cast)

# Register itkTransformD34 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD34_swigregister(itkTransformD34)
itkTransformD34_cast = _itkTransformBasePython.itkTransformD34_cast

class itkTransformD4(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD4_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD4
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD4_cast)

# Register itkTransformD4 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD4_swigregister(itkTransformD4)
itkTransformD4_cast = _itkTransformBasePython.itkTransformD4_cast

class itkTransformD42(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD42_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD42
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD42_cast)

# Register itkTransformD42 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD42_swigregister(itkTransformD42)
itkTransformD42_cast = _itkTransformBasePython.itkTransformD42_cast

class itkTransformD43(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD43_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD43
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD43_cast)

# Register itkTransformD43 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD43_swigregister(itkTransformD43)
itkTransformD43_cast = _itkTransformBasePython.itkTransformD43_cast

class itkTransformD44(itkTransformBaseTemplateD):
    r"""Proxy of C++ itkTransformD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformD44_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformD44
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformD44_cast)

# Register itkTransformD44 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformD44_swigregister(itkTransformD44)
itkTransformD44_cast = _itkTransformBasePython.itkTransformD44_cast

class itkTransformF2(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF2_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF2
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF2_cast)

# Register itkTransformF2 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF2_swigregister(itkTransformF2)
itkTransformF2_cast = _itkTransformBasePython.itkTransformF2_cast

class itkTransformF22(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF22_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF22
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF22_cast)

# Register itkTransformF22 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF22_swigregister(itkTransformF22)
itkTransformF22_cast = _itkTransformBasePython.itkTransformF22_cast

class itkTransformF23(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF23_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF23
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF23_cast)

# Register itkTransformF23 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF23_swigregister(itkTransformF23)
itkTransformF23_cast = _itkTransformBasePython.itkTransformF23_cast

class itkTransformF24(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF24 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF24_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF24
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF24_cast)

# Register itkTransformF24 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF24_swigregister(itkTransformF24)
itkTransformF24_cast = _itkTransformBasePython.itkTransformF24_cast

class itkTransformF3(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF3_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF3
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF3_cast)

# Register itkTransformF3 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF3_swigregister(itkTransformF3)
itkTransformF3_cast = _itkTransformBasePython.itkTransformF3_cast

class itkTransformF32(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF32_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF32
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF32_cast)

# Register itkTransformF32 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF32_swigregister(itkTransformF32)
itkTransformF32_cast = _itkTransformBasePython.itkTransformF32_cast

class itkTransformF33(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF33_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF33
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF33_cast)

# Register itkTransformF33 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF33_swigregister(itkTransformF33)
itkTransformF33_cast = _itkTransformBasePython.itkTransformF33_cast

class itkTransformF34(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF34 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF34_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF34
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF34_cast)

# Register itkTransformF34 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF34_swigregister(itkTransformF34)
itkTransformF34_cast = _itkTransformBasePython.itkTransformF34_cast

class itkTransformF4(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF4_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF4
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF4_cast)

# Register itkTransformF4 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF4_swigregister(itkTransformF4)
itkTransformF4_cast = _itkTransformBasePython.itkTransformF4_cast

class itkTransformF42(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF42_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF42
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF42_cast)

# Register itkTransformF42 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF42_swigregister(itkTransformF42)
itkTransformF42_cast = _itkTransformBasePython.itkTransformF42_cast

class itkTransformF43(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF43_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF43
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF43_cast)

# Register itkTransformF43 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF43_swigregister(itkTransformF43)
itkTransformF43_cast = _itkTransformBasePython.itkTransformF43_cast

class itkTransformF44(itkTransformBaseTemplateF):
    r"""Proxy of C++ itkTransformF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Clone = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_Clone)
    SetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_SetInputSpaceName)
    GetInputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_GetInputSpaceName)
    SetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_SetOutputSpaceName)
    GetOutputSpaceName = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_GetOutputSpaceName)
    TransformPoint = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_TransformPoint)
    TransformVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_TransformVector)
    TransformCovariantVector = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_TransformCovariantVector)
    TransformDiffusionTensor3D = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_TransformDiffusionTensor3D)
    TransformSymmetricSecondRankTensor = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_TransformSymmetricSecondRankTensor)
    UpdateTransformParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_UpdateTransformParameters)
    GetNumberOfLocalParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_GetNumberOfLocalParameters)
    GetNumberOfFixedParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_GetNumberOfFixedParameters)
    GetInverse = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_GetInverse)
    GetInverseTransform = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_GetInverseTransform)
    IsLinear = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_IsLinear)
    ComputeJacobianWithRespectToParameters = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_ComputeJacobianWithRespectToParameters)
    ComputeJacobianWithRespectToParametersCachedTemporaries = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_ComputeJacobianWithRespectToParametersCachedTemporaries)
    ComputeJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_ComputeJacobianWithRespectToPosition)
    ComputeInverseJacobianWithRespectToPosition = _swig_new_instance_method(_itkTransformBasePython.itkTransformF44_ComputeInverseJacobianWithRespectToPosition)
    __swig_destroy__ = _itkTransformBasePython.delete_itkTransformF44
    cast = _swig_new_static_method(_itkTransformBasePython.itkTransformF44_cast)

# Register itkTransformF44 in _itkTransformBasePython:
_itkTransformBasePython.itkTransformF44_swigregister(itkTransformF44)
itkTransformF44_cast = _itkTransformBasePython.itkTransformF44_cast



