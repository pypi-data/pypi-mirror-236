# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKMeshPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVTKPolyDataReaderPython
else:
    import _itkVTKPolyDataReaderPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVTKPolyDataReaderPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVTKPolyDataReaderPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkMeshBasePython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkArrayPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkPointSetPython

def itkVTKPolyDataReaderMD2_Superclass_New():
    return itkVTKPolyDataReaderMD2_Superclass.New()

class itkVTKPolyDataReaderMD2_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkVTKPolyDataReaderMD2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMD2_Superclass
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMD2_Superclass

        Create a new object of the class itkVTKPolyDataReaderMD2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMD2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMD2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMD2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMD2_Superclass in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_Superclass_swigregister(itkVTKPolyDataReaderMD2_Superclass)
itkVTKPolyDataReaderMD2_Superclass___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_Superclass___New_orig__
itkVTKPolyDataReaderMD2_Superclass_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_Superclass_cast


def itkVTKPolyDataReaderMD3_Superclass_New():
    return itkVTKPolyDataReaderMD3_Superclass.New()

class itkVTKPolyDataReaderMD3_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkVTKPolyDataReaderMD3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMD3_Superclass
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMD3_Superclass

        Create a new object of the class itkVTKPolyDataReaderMD3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMD3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMD3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMD3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMD3_Superclass in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_Superclass_swigregister(itkVTKPolyDataReaderMD3_Superclass)
itkVTKPolyDataReaderMD3_Superclass___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_Superclass___New_orig__
itkVTKPolyDataReaderMD3_Superclass_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_Superclass_cast


def itkVTKPolyDataReaderMD4_Superclass_New():
    return itkVTKPolyDataReaderMD4_Superclass.New()

class itkVTKPolyDataReaderMD4_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkVTKPolyDataReaderMD4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMD4_Superclass
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMD4_Superclass

        Create a new object of the class itkVTKPolyDataReaderMD4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMD4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMD4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMD4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMD4_Superclass in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_Superclass_swigregister(itkVTKPolyDataReaderMD4_Superclass)
itkVTKPolyDataReaderMD4_Superclass___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_Superclass___New_orig__
itkVTKPolyDataReaderMD4_Superclass_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_Superclass_cast


def itkVTKPolyDataReaderMF2_Superclass_New():
    return itkVTKPolyDataReaderMF2_Superclass.New()

class itkVTKPolyDataReaderMF2_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkVTKPolyDataReaderMF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMF2_Superclass
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMF2_Superclass

        Create a new object of the class itkVTKPolyDataReaderMF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMF2_Superclass in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_Superclass_swigregister(itkVTKPolyDataReaderMF2_Superclass)
itkVTKPolyDataReaderMF2_Superclass___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_Superclass___New_orig__
itkVTKPolyDataReaderMF2_Superclass_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_Superclass_cast


def itkVTKPolyDataReaderMF3_Superclass_New():
    return itkVTKPolyDataReaderMF3_Superclass.New()

class itkVTKPolyDataReaderMF3_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkVTKPolyDataReaderMF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMF3_Superclass
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMF3_Superclass

        Create a new object of the class itkVTKPolyDataReaderMF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMF3_Superclass in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_Superclass_swigregister(itkVTKPolyDataReaderMF3_Superclass)
itkVTKPolyDataReaderMF3_Superclass___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_Superclass___New_orig__
itkVTKPolyDataReaderMF3_Superclass_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_Superclass_cast


def itkVTKPolyDataReaderMF4_Superclass_New():
    return itkVTKPolyDataReaderMF4_Superclass.New()

class itkVTKPolyDataReaderMF4_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkVTKPolyDataReaderMF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_Superclass_Clone)
    GetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_Superclass_GetOutput)
    SetOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_Superclass_SetOutput)
    GraftOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_Superclass_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_Superclass_GraftNthOutput)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMF4_Superclass
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMF4_Superclass

        Create a new object of the class itkVTKPolyDataReaderMF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMF4_Superclass in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_Superclass_swigregister(itkVTKPolyDataReaderMF4_Superclass)
itkVTKPolyDataReaderMF4_Superclass___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_Superclass___New_orig__
itkVTKPolyDataReaderMF4_Superclass_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_Superclass_cast


def itkVTKPolyDataReaderMD2_New():
    return itkVTKPolyDataReaderMD2.New()

class itkVTKPolyDataReaderMD2(itkVTKPolyDataReaderMD2_Superclass):
    r"""Proxy of C++ itkVTKPolyDataReaderMD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_Clone)
    SetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_GetFileName)
    GetVersion = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_GetVersion)
    GetHeader = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_GetHeader)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMD2
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMD2

        Create a new object of the class itkVTKPolyDataReaderMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMD2 in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_swigregister(itkVTKPolyDataReaderMD2)
itkVTKPolyDataReaderMD2___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2___New_orig__
itkVTKPolyDataReaderMD2_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD2_cast


def itkVTKPolyDataReaderMD3_New():
    return itkVTKPolyDataReaderMD3.New()

class itkVTKPolyDataReaderMD3(itkVTKPolyDataReaderMD3_Superclass):
    r"""Proxy of C++ itkVTKPolyDataReaderMD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_Clone)
    SetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_GetFileName)
    GetVersion = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_GetVersion)
    GetHeader = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_GetHeader)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMD3
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMD3

        Create a new object of the class itkVTKPolyDataReaderMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMD3 in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_swigregister(itkVTKPolyDataReaderMD3)
itkVTKPolyDataReaderMD3___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3___New_orig__
itkVTKPolyDataReaderMD3_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD3_cast


def itkVTKPolyDataReaderMD4_New():
    return itkVTKPolyDataReaderMD4.New()

class itkVTKPolyDataReaderMD4(itkVTKPolyDataReaderMD4_Superclass):
    r"""Proxy of C++ itkVTKPolyDataReaderMD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_Clone)
    SetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_SetFileName)
    GetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_GetFileName)
    GetVersion = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_GetVersion)
    GetHeader = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_GetHeader)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMD4
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMD4

        Create a new object of the class itkVTKPolyDataReaderMD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMD4 in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_swigregister(itkVTKPolyDataReaderMD4)
itkVTKPolyDataReaderMD4___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4___New_orig__
itkVTKPolyDataReaderMD4_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMD4_cast


def itkVTKPolyDataReaderMF2_New():
    return itkVTKPolyDataReaderMF2.New()

class itkVTKPolyDataReaderMF2(itkVTKPolyDataReaderMF2_Superclass):
    r"""Proxy of C++ itkVTKPolyDataReaderMF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_Clone)
    SetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_GetFileName)
    GetVersion = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_GetVersion)
    GetHeader = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_GetHeader)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMF2
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMF2

        Create a new object of the class itkVTKPolyDataReaderMF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMF2 in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_swigregister(itkVTKPolyDataReaderMF2)
itkVTKPolyDataReaderMF2___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2___New_orig__
itkVTKPolyDataReaderMF2_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF2_cast


def itkVTKPolyDataReaderMF3_New():
    return itkVTKPolyDataReaderMF3.New()

class itkVTKPolyDataReaderMF3(itkVTKPolyDataReaderMF3_Superclass):
    r"""Proxy of C++ itkVTKPolyDataReaderMF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_Clone)
    SetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_GetFileName)
    GetVersion = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_GetVersion)
    GetHeader = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_GetHeader)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMF3
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMF3

        Create a new object of the class itkVTKPolyDataReaderMF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMF3 in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_swigregister(itkVTKPolyDataReaderMF3)
itkVTKPolyDataReaderMF3___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3___New_orig__
itkVTKPolyDataReaderMF3_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF3_cast


def itkVTKPolyDataReaderMF4_New():
    return itkVTKPolyDataReaderMF4.New()

class itkVTKPolyDataReaderMF4(itkVTKPolyDataReaderMF4_Superclass):
    r"""Proxy of C++ itkVTKPolyDataReaderMF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_Clone)
    SetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_SetFileName)
    GetFileName = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_GetFileName)
    GetVersion = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_GetVersion)
    GetHeader = _swig_new_instance_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_GetHeader)
    __swig_destroy__ = _itkVTKPolyDataReaderPython.delete_itkVTKPolyDataReaderMF4
    cast = _swig_new_static_method(_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_cast)

    def New(*args, **kargs):
        """New() -> itkVTKPolyDataReaderMF4

        Create a new object of the class itkVTKPolyDataReaderMF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKPolyDataReaderMF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKPolyDataReaderMF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKPolyDataReaderMF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKPolyDataReaderMF4 in _itkVTKPolyDataReaderPython:
_itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_swigregister(itkVTKPolyDataReaderMF4)
itkVTKPolyDataReaderMF4___New_orig__ = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4___New_orig__
itkVTKPolyDataReaderMF4_cast = _itkVTKPolyDataReaderPython.itkVTKPolyDataReaderMF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def mesh_source(*args,  output: itkt.Mesh=...,**kwargs):
    """Functional interface for MeshSource"""
    import itk

    kwarg_typehints = { 'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MeshSource.New(*args, **kwargs)

    return instance.__internal_call__()

def mesh_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKMesh.MeshSource
    mesh_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    mesh_source.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def vtk_poly_data_reader(*args,  file_name: str=..., output: itkt.Mesh=...,**kwargs)-> itkt.MeshSourceReturn:
    """Functional interface for VTKPolyDataReader"""
    import itk

    kwarg_typehints = { 'file_name':file_name,'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.VTKPolyDataReader.New(*args, **kwargs)

    return instance.__internal_call__()

def vtk_poly_data_reader_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKMesh.VTKPolyDataReader
    vtk_poly_data_reader.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    vtk_poly_data_reader.__doc__ = filter_object.__doc__




