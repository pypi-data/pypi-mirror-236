# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkForward1DFFTImageFilterPython
else:
    import _itkForward1DFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkForward1DFFTImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkForward1DFFTImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageToImageFilterBPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkForward1DFFTImageFilterID2_New():
    return itkForward1DFFTImageFilterID2.New()

class itkForward1DFFTImageFilterID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ICD2):
    r"""Proxy of C++ itkForward1DFFTImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID2_Clone)
    GetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID2_GetDirection)
    SetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID2_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkForward1DFFTImageFilterPython.delete_itkForward1DFFTImageFilterID2
    cast = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkForward1DFFTImageFilterID2

        Create a new object of the class itkForward1DFFTImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkForward1DFFTImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkForward1DFFTImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkForward1DFFTImageFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkForward1DFFTImageFilterID2 in _itkForward1DFFTImageFilterPython:
_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID2_swigregister(itkForward1DFFTImageFilterID2)
itkForward1DFFTImageFilterID2___New_orig__ = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID2___New_orig__
itkForward1DFFTImageFilterID2_cast = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID2_cast


def itkForward1DFFTImageFilterID3_New():
    return itkForward1DFFTImageFilterID3.New()

class itkForward1DFFTImageFilterID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ICD3):
    r"""Proxy of C++ itkForward1DFFTImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID3_Clone)
    GetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID3_GetDirection)
    SetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID3_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkForward1DFFTImageFilterPython.delete_itkForward1DFFTImageFilterID3
    cast = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkForward1DFFTImageFilterID3

        Create a new object of the class itkForward1DFFTImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkForward1DFFTImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkForward1DFFTImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkForward1DFFTImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkForward1DFFTImageFilterID3 in _itkForward1DFFTImageFilterPython:
_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID3_swigregister(itkForward1DFFTImageFilterID3)
itkForward1DFFTImageFilterID3___New_orig__ = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID3___New_orig__
itkForward1DFFTImageFilterID3_cast = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID3_cast


def itkForward1DFFTImageFilterID4_New():
    return itkForward1DFFTImageFilterID4.New()

class itkForward1DFFTImageFilterID4(itk.itkImageToImageFilterBPython.itkImageToImageFilterID4ICD4):
    r"""Proxy of C++ itkForward1DFFTImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID4___New_orig__)
    Clone = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID4_Clone)
    GetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID4_GetDirection)
    SetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID4_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID4_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkForward1DFFTImageFilterPython.delete_itkForward1DFFTImageFilterID4
    cast = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID4_cast)

    def New(*args, **kargs):
        """New() -> itkForward1DFFTImageFilterID4

        Create a new object of the class itkForward1DFFTImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkForward1DFFTImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkForward1DFFTImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkForward1DFFTImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkForward1DFFTImageFilterID4 in _itkForward1DFFTImageFilterPython:
_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID4_swigregister(itkForward1DFFTImageFilterID4)
itkForward1DFFTImageFilterID4___New_orig__ = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID4___New_orig__
itkForward1DFFTImageFilterID4_cast = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterID4_cast


def itkForward1DFFTImageFilterIF2_New():
    return itkForward1DFFTImageFilterIF2.New()

class itkForward1DFFTImageFilterIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2):
    r"""Proxy of C++ itkForward1DFFTImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF2_Clone)
    GetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF2_GetDirection)
    SetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF2_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkForward1DFFTImageFilterPython.delete_itkForward1DFFTImageFilterIF2
    cast = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkForward1DFFTImageFilterIF2

        Create a new object of the class itkForward1DFFTImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkForward1DFFTImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkForward1DFFTImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkForward1DFFTImageFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkForward1DFFTImageFilterIF2 in _itkForward1DFFTImageFilterPython:
_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF2_swigregister(itkForward1DFFTImageFilterIF2)
itkForward1DFFTImageFilterIF2___New_orig__ = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF2___New_orig__
itkForward1DFFTImageFilterIF2_cast = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF2_cast


def itkForward1DFFTImageFilterIF3_New():
    return itkForward1DFFTImageFilterIF3.New()

class itkForward1DFFTImageFilterIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3):
    r"""Proxy of C++ itkForward1DFFTImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF3_Clone)
    GetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF3_GetDirection)
    SetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF3_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkForward1DFFTImageFilterPython.delete_itkForward1DFFTImageFilterIF3
    cast = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkForward1DFFTImageFilterIF3

        Create a new object of the class itkForward1DFFTImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkForward1DFFTImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkForward1DFFTImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkForward1DFFTImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkForward1DFFTImageFilterIF3 in _itkForward1DFFTImageFilterPython:
_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF3_swigregister(itkForward1DFFTImageFilterIF3)
itkForward1DFFTImageFilterIF3___New_orig__ = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF3___New_orig__
itkForward1DFFTImageFilterIF3_cast = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF3_cast


def itkForward1DFFTImageFilterIF4_New():
    return itkForward1DFFTImageFilterIF4.New()

class itkForward1DFFTImageFilterIF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF4ICF4):
    r"""Proxy of C++ itkForward1DFFTImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF4___New_orig__)
    Clone = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF4_Clone)
    GetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF4_GetDirection)
    SetDirection = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF4_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF4_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkForward1DFFTImageFilterPython.delete_itkForward1DFFTImageFilterIF4
    cast = _swig_new_static_method(_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF4_cast)

    def New(*args, **kargs):
        """New() -> itkForward1DFFTImageFilterIF4

        Create a new object of the class itkForward1DFFTImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkForward1DFFTImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkForward1DFFTImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkForward1DFFTImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkForward1DFFTImageFilterIF4 in _itkForward1DFFTImageFilterPython:
_itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF4_swigregister(itkForward1DFFTImageFilterIF4)
itkForward1DFFTImageFilterIF4___New_orig__ = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF4___New_orig__
itkForward1DFFTImageFilterIF4_cast = _itkForward1DFFTImageFilterPython.itkForward1DFFTImageFilterIF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def forward1_dfft_image_filter(*args: itkt.ImageLike,  direction: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for Forward1DFFTImageFilter"""
    import itk

    kwarg_typehints = { 'direction':direction }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.Forward1DFFTImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def forward1_dfft_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKFFT.Forward1DFFTImageFilter
    forward1_dfft_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    forward1_dfft_image_filter.__doc__ = filter_object.__doc__




