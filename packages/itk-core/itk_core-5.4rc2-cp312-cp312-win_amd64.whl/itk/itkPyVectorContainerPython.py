# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKBridgeNumPyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPyVectorContainerPython
else:
    import _itkPyVectorContainerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPyVectorContainerPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPyVectorContainerPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkVectorContainerPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkArrayPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython


import numpy as np
class NDArrayITKBase(np.ndarray):
  """A numpy array that provides a view on the data associated with an optional itk "base" object."""

  def __new__(cls, input_array, itk_base=None):
      obj = np.asarray(input_array).view(cls)
      obj.itk_base = itk_base
      return obj

  def __array_finalize__(self, obj):
      if obj is None: return
      self.itk_base = getattr(obj, 'itk_base', None)

try:
    from distributed.protocol import dask_serialize, dask_deserialize
    from typing import Dict, List, Tuple
except (ImportError, RuntimeError):
    pass
else:
    @dask_serialize.register(NDArrayITKBase)
    def serialize(ndarray_itk_base: NDArrayITKBase) -> Tuple[Dict, List[bytes]]:
        dumps = dask_serialize.dispatch(np.ndarray)
        return dumps(ndarray_itk_base)

    @dask_deserialize.register(NDArrayITKBase)
    def deserialize(header: Dict, frames: List[bytes]) -> NDArrayITKBase:
        loads = dask_deserialize.dispatch(np.ndarray)
        return NDArrayITKBase(loads(header, frames))

def _get_numpy_pixelid(itk_Image_type):
    """Returns a ITK PixelID given a numpy array."""

# This is a Mapping from numpy array types to itk pixel types.
    _np_itk = {"UC":np.uint8,
               "US":np.uint16,
               "UI":np.uint32,
               "UL":np.uint64,
               "ULL":np.uint64,
               "SC":np.int8,
               "SS":np.int16,
               "SI":np.int32,
               "SL":np.int64,
               "SLL":np.int64,
               "F":np.float32,
               "D":np.float64,
               "PF2":np.float32,
               "PF3":np.float32,
                }
    import os
    if os.name == 'nt':
        _np_itk['UL'] = np.uint32
        _np_itk['SL'] = np.int32
    try:
        return _np_itk[itk_Image_type]
    except KeyError as e:
        raise e

class itkPyVectorContainerUCD(object):
    r"""Proxy of C++ itkPyVectorContainerUCD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCD__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCD__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUCD
        __init__(self, arg0) -> itkPyVectorContainerUCD

        Parameters
        ----------
        arg0: itkPyVectorContainerUCD const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUCD_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUCD(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUCD


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "D"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUCD._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUCD.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUCD._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUCD in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUCD_swigregister(itkPyVectorContainerUCD)
itkPyVectorContainerUCD__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUCD__array_view_from_vector_container
itkPyVectorContainerUCD__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUCD__vector_container_from_array

class itkPyVectorContainerUCF(object):
    r"""Proxy of C++ itkPyVectorContainerUCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCF__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCF__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUCF
        __init__(self, arg0) -> itkPyVectorContainerUCF

        Parameters
        ----------
        arg0: itkPyVectorContainerUCF const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUCF_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUCF(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUCF


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "F"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUCF._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUCF.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUCF._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUCF in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUCF_swigregister(itkPyVectorContainerUCF)
itkPyVectorContainerUCF__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUCF__array_view_from_vector_container
itkPyVectorContainerUCF__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUCF__vector_container_from_array

class itkPyVectorContainerUCO2(object):
    r"""Proxy of C++ itkPyVectorContainerUCO2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCO2__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCO2__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUCO2
        __init__(self, arg0) -> itkPyVectorContainerUCO2

        Parameters
        ----------
        arg0: itkPyVectorContainerUCO2 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUCO2_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUCO2(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUCO2


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "SLL"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUCO2._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUCO2.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUCO2._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUCO2 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUCO2_swigregister(itkPyVectorContainerUCO2)
itkPyVectorContainerUCO2__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUCO2__array_view_from_vector_container
itkPyVectorContainerUCO2__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUCO2__vector_container_from_array

class itkPyVectorContainerUCO3(object):
    r"""Proxy of C++ itkPyVectorContainerUCO3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCO3__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCO3__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUCO3
        __init__(self, arg0) -> itkPyVectorContainerUCO3

        Parameters
        ----------
        arg0: itkPyVectorContainerUCO3 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUCO3_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUCO3(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUCO3


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "SLL"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUCO3._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUCO3.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUCO3._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUCO3 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUCO3_swigregister(itkPyVectorContainerUCO3)
itkPyVectorContainerUCO3__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUCO3__array_view_from_vector_container
itkPyVectorContainerUCO3__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUCO3__vector_container_from_array

class itkPyVectorContainerUCO4(object):
    r"""Proxy of C++ itkPyVectorContainerUCO4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCO4__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCO4__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUCO4
        __init__(self, arg0) -> itkPyVectorContainerUCO4

        Parameters
        ----------
        arg0: itkPyVectorContainerUCO4 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUCO4_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUCO4(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUCO4


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "SLL"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUCO4._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUCO4.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUCO4._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUCO4 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUCO4_swigregister(itkPyVectorContainerUCO4)
itkPyVectorContainerUCO4__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUCO4__array_view_from_vector_container
itkPyVectorContainerUCO4__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUCO4__vector_container_from_array

class itkPyVectorContainerUCSS(object):
    r"""Proxy of C++ itkPyVectorContainerUCSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCSS__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCSS__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUCSS
        __init__(self, arg0) -> itkPyVectorContainerUCSS

        Parameters
        ----------
        arg0: itkPyVectorContainerUCSS const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUCSS_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUCSS(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUCSS


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "SS"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUCSS._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUCSS.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUCSS._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUCSS in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUCSS_swigregister(itkPyVectorContainerUCSS)
itkPyVectorContainerUCSS__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUCSS__array_view_from_vector_container
itkPyVectorContainerUCSS__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUCSS__vector_container_from_array

class itkPyVectorContainerUCUC(object):
    r"""Proxy of C++ itkPyVectorContainerUCUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCUC__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCUC__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUCUC
        __init__(self, arg0) -> itkPyVectorContainerUCUC

        Parameters
        ----------
        arg0: itkPyVectorContainerUCUC const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUCUC_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUCUC(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUCUC


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "UC"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUCUC._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUCUC.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUCUC._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUCUC in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUCUC_swigregister(itkPyVectorContainerUCUC)
itkPyVectorContainerUCUC__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUCUC__array_view_from_vector_container
itkPyVectorContainerUCUC__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUCUC__vector_container_from_array

class itkPyVectorContainerUCUI(object):
    r"""Proxy of C++ itkPyVectorContainerUCUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCUI__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCUI__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUCUI
        __init__(self, arg0) -> itkPyVectorContainerUCUI

        Parameters
        ----------
        arg0: itkPyVectorContainerUCUI const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUCUI_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUCUI(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUCUI


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "UI"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUCUI._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUCUI.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUCUI._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUCUI in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUCUI_swigregister(itkPyVectorContainerUCUI)
itkPyVectorContainerUCUI__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUCUI__array_view_from_vector_container
itkPyVectorContainerUCUI__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUCUI__vector_container_from_array

class itkPyVectorContainerUCULL(object):
    r"""Proxy of C++ itkPyVectorContainerUCULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCULL__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCULL__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUCULL
        __init__(self, arg0) -> itkPyVectorContainerUCULL

        Parameters
        ----------
        arg0: itkPyVectorContainerUCULL const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUCULL_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUCULL(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUCULL


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "ULL"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUCULL._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUCULL.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUCULL._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUCULL in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUCULL_swigregister(itkPyVectorContainerUCULL)
itkPyVectorContainerUCULL__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUCULL__array_view_from_vector_container
itkPyVectorContainerUCULL__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUCULL__vector_container_from_array

class itkPyVectorContainerUCUS(object):
    r"""Proxy of C++ itkPyVectorContainerUCUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCUS__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUCUS__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUCUS
        __init__(self, arg0) -> itkPyVectorContainerUCUS

        Parameters
        ----------
        arg0: itkPyVectorContainerUCUS const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUCUS_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUCUS(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUCUS


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "US"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUCUS._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUCUS.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUCUS._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUCUS in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUCUS_swigregister(itkPyVectorContainerUCUS)
itkPyVectorContainerUCUS__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUCUS__array_view_from_vector_container
itkPyVectorContainerUCUS__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUCUS__vector_container_from_array

class itkPyVectorContainerUICID2(object):
    r"""Proxy of C++ itkPyVectorContainerUICID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUICID2__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUICID2__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUICID2
        __init__(self, arg0) -> itkPyVectorContainerUICID2

        Parameters
        ----------
        arg0: itkPyVectorContainerUICID2 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUICID2_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUICID2(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUICID2


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "SLL"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUICID2._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUICID2.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUICID2._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUICID2 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUICID2_swigregister(itkPyVectorContainerUICID2)
itkPyVectorContainerUICID2__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUICID2__array_view_from_vector_container
itkPyVectorContainerUICID2__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUICID2__vector_container_from_array

class itkPyVectorContainerUICID3(object):
    r"""Proxy of C++ itkPyVectorContainerUICID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUICID3__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUICID3__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUICID3
        __init__(self, arg0) -> itkPyVectorContainerUICID3

        Parameters
        ----------
        arg0: itkPyVectorContainerUICID3 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUICID3_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUICID3(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUICID3


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "SLL"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUICID3._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUICID3.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUICID3._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUICID3 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUICID3_swigregister(itkPyVectorContainerUICID3)
itkPyVectorContainerUICID3__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUICID3__array_view_from_vector_container
itkPyVectorContainerUICID3__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUICID3__vector_container_from_array

class itkPyVectorContainerUICID4(object):
    r"""Proxy of C++ itkPyVectorContainerUICID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUICID4__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUICID4__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUICID4
        __init__(self, arg0) -> itkPyVectorContainerUICID4

        Parameters
        ----------
        arg0: itkPyVectorContainerUICID4 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUICID4_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUICID4(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUICID4


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "SLL"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUICID4._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUICID4.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUICID4._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUICID4 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUICID4_swigregister(itkPyVectorContainerUICID4)
itkPyVectorContainerUICID4__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUICID4__array_view_from_vector_container
itkPyVectorContainerUICID4__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUICID4__vector_container_from_array

class itkPyVectorContainerUIUC(object):
    r"""Proxy of C++ itkPyVectorContainerUIUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUIUC__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUIUC__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUIUC
        __init__(self, arg0) -> itkPyVectorContainerUIUC

        Parameters
        ----------
        arg0: itkPyVectorContainerUIUC const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUIUC_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUIUC(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUIUC


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "UC"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUIUC._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUIUC.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUIUC._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUIUC in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUIUC_swigregister(itkPyVectorContainerUIUC)
itkPyVectorContainerUIUC__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUIUC__array_view_from_vector_container
itkPyVectorContainerUIUC__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUIUC__vector_container_from_array

class itkPyVectorContainerUIUI(object):
    r"""Proxy of C++ itkPyVectorContainerUIUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUIUI__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUIUI__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUIUI
        __init__(self, arg0) -> itkPyVectorContainerUIUI

        Parameters
        ----------
        arg0: itkPyVectorContainerUIUI const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUIUI_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUIUI(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUIUI


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "UI"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUIUI._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUIUI.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUIUI._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUIUI in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUIUI_swigregister(itkPyVectorContainerUIUI)
itkPyVectorContainerUIUI__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUIUI__array_view_from_vector_container
itkPyVectorContainerUIUI__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUIUI__vector_container_from_array

class itkPyVectorContainerUIULL(object):
    r"""Proxy of C++ itkPyVectorContainerUIULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUIULL__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUIULL__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUIULL
        __init__(self, arg0) -> itkPyVectorContainerUIULL

        Parameters
        ----------
        arg0: itkPyVectorContainerUIULL const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUIULL_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUIULL(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUIULL


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "ULL"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUIULL._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUIULL.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUIULL._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUIULL in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUIULL_swigregister(itkPyVectorContainerUIULL)
itkPyVectorContainerUIULL__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUIULL__array_view_from_vector_container
itkPyVectorContainerUIULL__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUIULL__vector_container_from_array

class itkPyVectorContainerUIUS(object):
    r"""Proxy of C++ itkPyVectorContainerUIUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUIUS__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUIUS__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUIUS
        __init__(self, arg0) -> itkPyVectorContainerUIUS

        Parameters
        ----------
        arg0: itkPyVectorContainerUIUS const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUIUS_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUIUS(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUIUS


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "US"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUIUS._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUIUS.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUIUS._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUIUS in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUIUS_swigregister(itkPyVectorContainerUIUS)
itkPyVectorContainerUIUS__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUIUS__array_view_from_vector_container
itkPyVectorContainerUIUS__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUIUS__vector_container_from_array

class itkPyVectorContainerUIVUC1(object):
    r"""Proxy of C++ itkPyVectorContainerUIVUC1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUIVUC1__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUIVUC1__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUIVUC1
        __init__(self, arg0) -> itkPyVectorContainerUIVUC1

        Parameters
        ----------
        arg0: itkPyVectorContainerUIVUC1 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUIVUC1_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUIVUC1(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUIVUC1


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "UC"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUIVUC1._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUIVUC1.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUIVUC1._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUIVUC1 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUIVUC1_swigregister(itkPyVectorContainerUIVUC1)
itkPyVectorContainerUIVUC1__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUIVUC1__array_view_from_vector_container
itkPyVectorContainerUIVUC1__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUIVUC1__vector_container_from_array

class itkPyVectorContainerULLD(object):
    r"""Proxy of C++ itkPyVectorContainerULLD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLD__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLD__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLD
        __init__(self, arg0) -> itkPyVectorContainerULLD

        Parameters
        ----------
        arg0: itkPyVectorContainerULLD const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLD_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLD(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLD


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "D"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLD._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLD.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLD._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLD in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLD_swigregister(itkPyVectorContainerULLD)
itkPyVectorContainerULLD__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLD__array_view_from_vector_container
itkPyVectorContainerULLD__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLD__vector_container_from_array

class itkPyVectorContainerULLF(object):
    r"""Proxy of C++ itkPyVectorContainerULLF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLF__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLF__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLF
        __init__(self, arg0) -> itkPyVectorContainerULLF

        Parameters
        ----------
        arg0: itkPyVectorContainerULLF const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLF_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLF(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLF


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "F"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLF._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLF.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLF._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLF in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLF_swigregister(itkPyVectorContainerULLF)
itkPyVectorContainerULLF__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLF__array_view_from_vector_container
itkPyVectorContainerULLF__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLF__vector_container_from_array

class itkPyVectorContainerULLMD22(object):
    r"""Proxy of C++ itkPyVectorContainerULLMD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMD22__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMD22__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLMD22
        __init__(self, arg0) -> itkPyVectorContainerULLMD22

        Parameters
        ----------
        arg0: itkPyVectorContainerULLMD22 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLMD22_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLMD22(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLMD22


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "D"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLMD22._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLMD22.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLMD22._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLMD22 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLMD22_swigregister(itkPyVectorContainerULLMD22)
itkPyVectorContainerULLMD22__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLMD22__array_view_from_vector_container
itkPyVectorContainerULLMD22__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLMD22__vector_container_from_array

class itkPyVectorContainerULLMD33(object):
    r"""Proxy of C++ itkPyVectorContainerULLMD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMD33__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMD33__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLMD33
        __init__(self, arg0) -> itkPyVectorContainerULLMD33

        Parameters
        ----------
        arg0: itkPyVectorContainerULLMD33 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLMD33_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLMD33(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLMD33


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "D"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLMD33._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLMD33.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLMD33._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLMD33 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLMD33_swigregister(itkPyVectorContainerULLMD33)
itkPyVectorContainerULLMD33__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLMD33__array_view_from_vector_container
itkPyVectorContainerULLMD33__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLMD33__vector_container_from_array

class itkPyVectorContainerULLMD44(object):
    r"""Proxy of C++ itkPyVectorContainerULLMD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMD44__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMD44__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLMD44
        __init__(self, arg0) -> itkPyVectorContainerULLMD44

        Parameters
        ----------
        arg0: itkPyVectorContainerULLMD44 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLMD44_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLMD44(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLMD44


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "D"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLMD44._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLMD44.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLMD44._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLMD44 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLMD44_swigregister(itkPyVectorContainerULLMD44)
itkPyVectorContainerULLMD44__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLMD44__array_view_from_vector_container
itkPyVectorContainerULLMD44__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLMD44__vector_container_from_array

class itkPyVectorContainerULLMF22(object):
    r"""Proxy of C++ itkPyVectorContainerULLMF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMF22__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMF22__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLMF22
        __init__(self, arg0) -> itkPyVectorContainerULLMF22

        Parameters
        ----------
        arg0: itkPyVectorContainerULLMF22 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLMF22_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLMF22(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLMF22


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "F"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLMF22._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLMF22.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLMF22._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLMF22 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLMF22_swigregister(itkPyVectorContainerULLMF22)
itkPyVectorContainerULLMF22__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLMF22__array_view_from_vector_container
itkPyVectorContainerULLMF22__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLMF22__vector_container_from_array

class itkPyVectorContainerULLMF33(object):
    r"""Proxy of C++ itkPyVectorContainerULLMF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMF33__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMF33__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLMF33
        __init__(self, arg0) -> itkPyVectorContainerULLMF33

        Parameters
        ----------
        arg0: itkPyVectorContainerULLMF33 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLMF33_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLMF33(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLMF33


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "F"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLMF33._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLMF33.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLMF33._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLMF33 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLMF33_swigregister(itkPyVectorContainerULLMF33)
itkPyVectorContainerULLMF33__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLMF33__array_view_from_vector_container
itkPyVectorContainerULLMF33__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLMF33__vector_container_from_array

class itkPyVectorContainerULLMF44(object):
    r"""Proxy of C++ itkPyVectorContainerULLMF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMF44__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLMF44__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLMF44
        __init__(self, arg0) -> itkPyVectorContainerULLMF44

        Parameters
        ----------
        arg0: itkPyVectorContainerULLMF44 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLMF44_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLMF44(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLMF44


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "F"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLMF44._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLMF44.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLMF44._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLMF44 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLMF44_swigregister(itkPyVectorContainerULLMF44)
itkPyVectorContainerULLMF44__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLMF44__array_view_from_vector_container
itkPyVectorContainerULLMF44__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLMF44__vector_container_from_array

class itkPyVectorContainerULLPD2(object):
    r"""Proxy of C++ itkPyVectorContainerULLPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPD2__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPD2__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLPD2
        __init__(self, arg0) -> itkPyVectorContainerULLPD2

        Parameters
        ----------
        arg0: itkPyVectorContainerULLPD2 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLPD2_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLPD2(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLPD2


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "D"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLPD2._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLPD2.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLPD2._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLPD2 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLPD2_swigregister(itkPyVectorContainerULLPD2)
itkPyVectorContainerULLPD2__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLPD2__array_view_from_vector_container
itkPyVectorContainerULLPD2__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLPD2__vector_container_from_array

class itkPyVectorContainerULLPD3(object):
    r"""Proxy of C++ itkPyVectorContainerULLPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPD3__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPD3__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLPD3
        __init__(self, arg0) -> itkPyVectorContainerULLPD3

        Parameters
        ----------
        arg0: itkPyVectorContainerULLPD3 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLPD3_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLPD3(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLPD3


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "D"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLPD3._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLPD3.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLPD3._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLPD3 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLPD3_swigregister(itkPyVectorContainerULLPD3)
itkPyVectorContainerULLPD3__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLPD3__array_view_from_vector_container
itkPyVectorContainerULLPD3__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLPD3__vector_container_from_array

class itkPyVectorContainerULLPD4(object):
    r"""Proxy of C++ itkPyVectorContainerULLPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPD4__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPD4__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLPD4
        __init__(self, arg0) -> itkPyVectorContainerULLPD4

        Parameters
        ----------
        arg0: itkPyVectorContainerULLPD4 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLPD4_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLPD4(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLPD4


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "D"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLPD4._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLPD4.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLPD4._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLPD4 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLPD4_swigregister(itkPyVectorContainerULLPD4)
itkPyVectorContainerULLPD4__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLPD4__array_view_from_vector_container
itkPyVectorContainerULLPD4__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLPD4__vector_container_from_array

class itkPyVectorContainerULLPF2(object):
    r"""Proxy of C++ itkPyVectorContainerULLPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPF2__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPF2__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLPF2
        __init__(self, arg0) -> itkPyVectorContainerULLPF2

        Parameters
        ----------
        arg0: itkPyVectorContainerULLPF2 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLPF2_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLPF2(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLPF2


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "F"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLPF2._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLPF2.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLPF2._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLPF2 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLPF2_swigregister(itkPyVectorContainerULLPF2)
itkPyVectorContainerULLPF2__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLPF2__array_view_from_vector_container
itkPyVectorContainerULLPF2__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLPF2__vector_container_from_array

class itkPyVectorContainerULLPF3(object):
    r"""Proxy of C++ itkPyVectorContainerULLPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPF3__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPF3__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLPF3
        __init__(self, arg0) -> itkPyVectorContainerULLPF3

        Parameters
        ----------
        arg0: itkPyVectorContainerULLPF3 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLPF3_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLPF3(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLPF3


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "F"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLPF3._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLPF3.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLPF3._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLPF3 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLPF3_swigregister(itkPyVectorContainerULLPF3)
itkPyVectorContainerULLPF3__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLPF3__array_view_from_vector_container
itkPyVectorContainerULLPF3__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLPF3__vector_container_from_array

class itkPyVectorContainerULLPF4(object):
    r"""Proxy of C++ itkPyVectorContainerULLPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPF4__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLPF4__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLPF4
        __init__(self, arg0) -> itkPyVectorContainerULLPF4

        Parameters
        ----------
        arg0: itkPyVectorContainerULLPF4 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLPF4_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLPF4(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLPF4


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "F"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLPF4._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLPF4.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLPF4._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLPF4 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLPF4_swigregister(itkPyVectorContainerULLPF4)
itkPyVectorContainerULLPF4__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLPF4__array_view_from_vector_container
itkPyVectorContainerULLPF4__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLPF4__vector_container_from_array

class itkPyVectorContainerULLSS(object):
    r"""Proxy of C++ itkPyVectorContainerULLSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLSS__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLSS__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLSS
        __init__(self, arg0) -> itkPyVectorContainerULLSS

        Parameters
        ----------
        arg0: itkPyVectorContainerULLSS const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLSS_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLSS(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLSS


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "SS"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLSS._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLSS.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLSS._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLSS in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLSS_swigregister(itkPyVectorContainerULLSS)
itkPyVectorContainerULLSS__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLSS__array_view_from_vector_container
itkPyVectorContainerULLSS__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLSS__vector_container_from_array

class itkPyVectorContainerULLSULL(object):
    r"""Proxy of C++ itkPyVectorContainerULLSULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLSULL__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLSULL__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLSULL
        __init__(self, arg0) -> itkPyVectorContainerULLSULL

        Parameters
        ----------
        arg0: itkPyVectorContainerULLSULL const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLSULL_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLSULL(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLSULL


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "IT"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLSULL._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLSULL.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLSULL._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLSULL in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLSULL_swigregister(itkPyVectorContainerULLSULL)
itkPyVectorContainerULLSULL__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLSULL__array_view_from_vector_container
itkPyVectorContainerULLSULL__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLSULL__vector_container_from_array

class itkPyVectorContainerULLUC(object):
    r"""Proxy of C++ itkPyVectorContainerULLUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLUC__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLUC__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLUC
        __init__(self, arg0) -> itkPyVectorContainerULLUC

        Parameters
        ----------
        arg0: itkPyVectorContainerULLUC const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLUC_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLUC(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLUC


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "UC"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLUC._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLUC.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLUC._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLUC in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLUC_swigregister(itkPyVectorContainerULLUC)
itkPyVectorContainerULLUC__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLUC__array_view_from_vector_container
itkPyVectorContainerULLUC__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLUC__vector_container_from_array

class itkPyVectorContainerULLUI(object):
    r"""Proxy of C++ itkPyVectorContainerULLUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLUI__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLUI__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLUI
        __init__(self, arg0) -> itkPyVectorContainerULLUI

        Parameters
        ----------
        arg0: itkPyVectorContainerULLUI const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLUI_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLUI(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLUI


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "UI"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLUI._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLUI.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLUI._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLUI in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLUI_swigregister(itkPyVectorContainerULLUI)
itkPyVectorContainerULLUI__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLUI__array_view_from_vector_container
itkPyVectorContainerULLUI__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLUI__vector_container_from_array

class itkPyVectorContainerULLULL(object):
    r"""Proxy of C++ itkPyVectorContainerULLULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLULL__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLULL__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLULL
        __init__(self, arg0) -> itkPyVectorContainerULLULL

        Parameters
        ----------
        arg0: itkPyVectorContainerULLULL const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLULL_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLULL(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLULL


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "ULL"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLULL._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLULL.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLULL._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLULL in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLULL_swigregister(itkPyVectorContainerULLULL)
itkPyVectorContainerULLULL__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLULL__array_view_from_vector_container
itkPyVectorContainerULLULL__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLULL__vector_container_from_array

class itkPyVectorContainerULLUS(object):
    r"""Proxy of C++ itkPyVectorContainerULLUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLUS__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLUS__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLUS
        __init__(self, arg0) -> itkPyVectorContainerULLUS

        Parameters
        ----------
        arg0: itkPyVectorContainerULLUS const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLUS_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLUS(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLUS


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "US"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLUS._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLUS.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLUS._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLUS in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLUS_swigregister(itkPyVectorContainerULLUS)
itkPyVectorContainerULLUS__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLUS__array_view_from_vector_container
itkPyVectorContainerULLUS__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLUS__vector_container_from_array

class itkPyVectorContainerULLVD2(object):
    r"""Proxy of C++ itkPyVectorContainerULLVD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVD2__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVD2__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLVD2
        __init__(self, arg0) -> itkPyVectorContainerULLVD2

        Parameters
        ----------
        arg0: itkPyVectorContainerULLVD2 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLVD2_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLVD2(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLVD2


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "D"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLVD2._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLVD2.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLVD2._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLVD2 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLVD2_swigregister(itkPyVectorContainerULLVD2)
itkPyVectorContainerULLVD2__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLVD2__array_view_from_vector_container
itkPyVectorContainerULLVD2__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLVD2__vector_container_from_array

class itkPyVectorContainerULLVD3(object):
    r"""Proxy of C++ itkPyVectorContainerULLVD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVD3__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVD3__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLVD3
        __init__(self, arg0) -> itkPyVectorContainerULLVD3

        Parameters
        ----------
        arg0: itkPyVectorContainerULLVD3 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLVD3_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLVD3(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLVD3


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "D"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLVD3._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLVD3.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLVD3._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLVD3 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLVD3_swigregister(itkPyVectorContainerULLVD3)
itkPyVectorContainerULLVD3__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLVD3__array_view_from_vector_container
itkPyVectorContainerULLVD3__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLVD3__vector_container_from_array

class itkPyVectorContainerULLVD4(object):
    r"""Proxy of C++ itkPyVectorContainerULLVD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVD4__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVD4__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLVD4
        __init__(self, arg0) -> itkPyVectorContainerULLVD4

        Parameters
        ----------
        arg0: itkPyVectorContainerULLVD4 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLVD4_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLVD4(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLVD4


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "D"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLVD4._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLVD4.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLVD4._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLVD4 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLVD4_swigregister(itkPyVectorContainerULLVD4)
itkPyVectorContainerULLVD4__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLVD4__array_view_from_vector_container
itkPyVectorContainerULLVD4__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLVD4__vector_container_from_array

class itkPyVectorContainerULLVF2(object):
    r"""Proxy of C++ itkPyVectorContainerULLVF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVF2__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVF2__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLVF2
        __init__(self, arg0) -> itkPyVectorContainerULLVF2

        Parameters
        ----------
        arg0: itkPyVectorContainerULLVF2 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLVF2_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLVF2(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLVF2


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "F"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLVF2._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLVF2.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLVF2._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLVF2 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLVF2_swigregister(itkPyVectorContainerULLVF2)
itkPyVectorContainerULLVF2__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLVF2__array_view_from_vector_container
itkPyVectorContainerULLVF2__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLVF2__vector_container_from_array

class itkPyVectorContainerULLVF3(object):
    r"""Proxy of C++ itkPyVectorContainerULLVF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVF3__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVF3__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLVF3
        __init__(self, arg0) -> itkPyVectorContainerULLVF3

        Parameters
        ----------
        arg0: itkPyVectorContainerULLVF3 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLVF3_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLVF3(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLVF3


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "F"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLVF3._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLVF3.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLVF3._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLVF3 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLVF3_swigregister(itkPyVectorContainerULLVF3)
itkPyVectorContainerULLVF3__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLVF3__array_view_from_vector_container
itkPyVectorContainerULLVF3__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLVF3__vector_container_from_array

class itkPyVectorContainerULLVF4(object):
    r"""Proxy of C++ itkPyVectorContainerULLVF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVF4__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerULLVF4__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerULLVF4
        __init__(self, arg0) -> itkPyVectorContainerULLVF4

        Parameters
        ----------
        arg0: itkPyVectorContainerULLVF4 const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerULLVF4_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerULLVF4(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerULLVF4


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "F"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerULLVF4._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerULLVF4.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerULLVF4._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerULLVF4 in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerULLVF4_swigregister(itkPyVectorContainerULLVF4)
itkPyVectorContainerULLVF4__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerULLVF4__array_view_from_vector_container
itkPyVectorContainerULLVF4__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerULLVF4__vector_container_from_array

class itkPyVectorContainerUSUC(object):
    r"""Proxy of C++ itkPyVectorContainerUSUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUSUC__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUSUC__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUSUC
        __init__(self, arg0) -> itkPyVectorContainerUSUC

        Parameters
        ----------
        arg0: itkPyVectorContainerUSUC const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUSUC_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUSUC(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUSUC


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "UC"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUSUC._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUSUC.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUSUC._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUSUC in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUSUC_swigregister(itkPyVectorContainerUSUC)
itkPyVectorContainerUSUC__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUSUC__array_view_from_vector_container
itkPyVectorContainerUSUC__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUSUC__vector_container_from_array

class itkPyVectorContainerUSUI(object):
    r"""Proxy of C++ itkPyVectorContainerUSUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUSUI__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUSUI__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUSUI
        __init__(self, arg0) -> itkPyVectorContainerUSUI

        Parameters
        ----------
        arg0: itkPyVectorContainerUSUI const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUSUI_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUSUI(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUSUI


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "UI"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUSUI._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUSUI.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUSUI._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUSUI in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUSUI_swigregister(itkPyVectorContainerUSUI)
itkPyVectorContainerUSUI__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUSUI__array_view_from_vector_container
itkPyVectorContainerUSUI__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUSUI__vector_container_from_array

class itkPyVectorContainerUSULL(object):
    r"""Proxy of C++ itkPyVectorContainerUSULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUSULL__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUSULL__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUSULL
        __init__(self, arg0) -> itkPyVectorContainerUSULL

        Parameters
        ----------
        arg0: itkPyVectorContainerUSULL const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUSULL_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUSULL(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUSULL


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "ULL"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUSULL._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUSULL.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUSULL._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUSULL in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUSULL_swigregister(itkPyVectorContainerUSULL)
itkPyVectorContainerUSULL__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUSULL__array_view_from_vector_container
itkPyVectorContainerUSULL__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUSULL__vector_container_from_array

class itkPyVectorContainerUSUS(object):
    r"""Proxy of C++ itkPyVectorContainerUSUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _array_view_from_vector_container = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUSUS__array_view_from_vector_container)
    _vector_container_from_array = _swig_new_static_method(_itkPyVectorContainerPython.itkPyVectorContainerUSUS__vector_container_from_array)

    def __init__(self, *args):
        r"""
        __init__(self) -> itkPyVectorContainerUSUS
        __init__(self, arg0) -> itkPyVectorContainerUSUS

        Parameters
        ----------
        arg0: itkPyVectorContainerUSUS const &

        """
        _itkPyVectorContainerPython.itkPyVectorContainerUSUS_swiginit(self, _itkPyVectorContainerPython.new_itkPyVectorContainerUSUS(*args))
    __swig_destroy__ = _itkPyVectorContainerPython.delete_itkPyVectorContainerUSUS


    def array_view_from_vector_container(vector_container):
        """Get a NumPy array view of an itk.VectorContainer.

        Warning: No copy of the data is performed. Using an array
        view after its source vector has been deleted can results in corrupt values
        or a segfault.
        """

        import itk

        itksize = vector_container.Size()
        container_type = itk.template(vector_container)
        if isinstance(container_type[1][1], type):
            container_element_type = itk.template(container_type[1][1])
            dimension = container_element_type[1][1]
            shape   = (itksize, dimension)
        else:
            shape   = (itksize,)

        element_type     = "US"
        numpydatatype = _get_numpy_pixelid(element_type)
        memview       = itkPyVectorContainerUSUS._array_view_from_vector_container(vector_container)
        ndarrview  = np.asarray(memview).view(dtype = numpydatatype).reshape(shape).view(np.ndarray)

        return ndarrview

    array_view_from_vector_container = staticmethod(array_view_from_vector_container)

    def array_from_vector_container(vector_container):
        """Get a NumPy ndarray from an itk.VectorContainer.

        This is a deep copy of the itk.VectorContainer and is completely safe and without potential side effects.
        """

        arrayView = itkPyVectorContainerUSUS.array_view_from_vector_container(vector_container)

    # perform deep copy of the buffer
        return np.array(arrayView, copy=True)

    array_from_vector_container = staticmethod(array_from_vector_container)

    def vector_container_from_array(ndarr):
        """Get an itk.VectorContainer from a NumPy array.

        This is a deep copy of the NumPy array buffer and is completely safe without potential
        side effects.
        """

        assert ndarr.ndim == 1 , "Only arrays of 1 dimension are supported."

        vec = itkPyVectorContainerUSUS._vector_container_from_array(ndarr, ndarr.shape)

        return vec

    vector_container_from_array = staticmethod(vector_container_from_array)



# Register itkPyVectorContainerUSUS in _itkPyVectorContainerPython:
_itkPyVectorContainerPython.itkPyVectorContainerUSUS_swigregister(itkPyVectorContainerUSUS)
itkPyVectorContainerUSUS__array_view_from_vector_container = _itkPyVectorContainerPython.itkPyVectorContainerUSUS__array_view_from_vector_container
itkPyVectorContainerUSUS__vector_container_from_array = _itkPyVectorContainerPython.itkPyVectorContainerUSUS__vector_container_from_array



