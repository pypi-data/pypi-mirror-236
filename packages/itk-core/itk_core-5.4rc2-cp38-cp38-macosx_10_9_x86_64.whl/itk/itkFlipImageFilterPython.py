# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFlipImageFilterPython
else:
    import _itkFlipImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFlipImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFlipImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython

def itkFlipImageFilterID2_New():
    return itkFlipImageFilterID2.New()

class itkFlipImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkFlipImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID2_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID2_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID2_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID2_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID2_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID2_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID2_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterID2
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterID2

        Create a new object of the class itkFlipImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterID2 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterID2_swigregister(itkFlipImageFilterID2)
itkFlipImageFilterID2___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterID2___New_orig__
itkFlipImageFilterID2_cast = _itkFlipImageFilterPython.itkFlipImageFilterID2_cast


def itkFlipImageFilterID3_New():
    return itkFlipImageFilterID3.New()

class itkFlipImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkFlipImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID3_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID3_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID3_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID3_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID3_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID3_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID3_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterID3
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterID3

        Create a new object of the class itkFlipImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterID3 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterID3_swigregister(itkFlipImageFilterID3)
itkFlipImageFilterID3___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterID3___New_orig__
itkFlipImageFilterID3_cast = _itkFlipImageFilterPython.itkFlipImageFilterID3_cast


def itkFlipImageFilterID4_New():
    return itkFlipImageFilterID4.New()

class itkFlipImageFilterID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkFlipImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterID4___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID4_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID4_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID4_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID4_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID4_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID4_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID4_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterID4_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterID4
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterID4_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterID4

        Create a new object of the class itkFlipImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterID4 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterID4_swigregister(itkFlipImageFilterID4)
itkFlipImageFilterID4___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterID4___New_orig__
itkFlipImageFilterID4_cast = _itkFlipImageFilterPython.itkFlipImageFilterID4_cast


def itkFlipImageFilterIF2_New():
    return itkFlipImageFilterIF2.New()

class itkFlipImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkFlipImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF2_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF2_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF2_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF2_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF2_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF2_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF2_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIF2
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIF2

        Create a new object of the class itkFlipImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterIF2 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterIF2_swigregister(itkFlipImageFilterIF2)
itkFlipImageFilterIF2___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterIF2___New_orig__
itkFlipImageFilterIF2_cast = _itkFlipImageFilterPython.itkFlipImageFilterIF2_cast


def itkFlipImageFilterIF3_New():
    return itkFlipImageFilterIF3.New()

class itkFlipImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkFlipImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF3_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF3_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF3_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF3_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF3_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF3_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF3_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIF3
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIF3

        Create a new object of the class itkFlipImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterIF3 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterIF3_swigregister(itkFlipImageFilterIF3)
itkFlipImageFilterIF3___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterIF3___New_orig__
itkFlipImageFilterIF3_cast = _itkFlipImageFilterPython.itkFlipImageFilterIF3_cast


def itkFlipImageFilterIF4_New():
    return itkFlipImageFilterIF4.New()

class itkFlipImageFilterIF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkFlipImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIF4___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF4_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF4_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF4_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF4_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF4_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF4_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF4_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIF4_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIF4
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIF4_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIF4

        Create a new object of the class itkFlipImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterIF4 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterIF4_swigregister(itkFlipImageFilterIF4)
itkFlipImageFilterIF4___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterIF4___New_orig__
itkFlipImageFilterIF4_cast = _itkFlipImageFilterPython.itkFlipImageFilterIF4_cast


def itkFlipImageFilterISS2_New():
    return itkFlipImageFilterISS2.New()

class itkFlipImageFilterISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkFlipImageFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS2_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS2_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS2_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS2_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS2_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS2_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS2_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterISS2
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterISS2

        Create a new object of the class itkFlipImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterISS2 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterISS2_swigregister(itkFlipImageFilterISS2)
itkFlipImageFilterISS2___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterISS2___New_orig__
itkFlipImageFilterISS2_cast = _itkFlipImageFilterPython.itkFlipImageFilterISS2_cast


def itkFlipImageFilterISS3_New():
    return itkFlipImageFilterISS3.New()

class itkFlipImageFilterISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkFlipImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS3_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS3_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS3_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS3_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS3_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS3_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS3_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterISS3
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterISS3

        Create a new object of the class itkFlipImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterISS3 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterISS3_swigregister(itkFlipImageFilterISS3)
itkFlipImageFilterISS3___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterISS3___New_orig__
itkFlipImageFilterISS3_cast = _itkFlipImageFilterPython.itkFlipImageFilterISS3_cast


def itkFlipImageFilterISS4_New():
    return itkFlipImageFilterISS4.New()

class itkFlipImageFilterISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkFlipImageFilterISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS4_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS4_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS4_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS4_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS4_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS4_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS4_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterISS4_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterISS4
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterISS4_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterISS4

        Create a new object of the class itkFlipImageFilterISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterISS4 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterISS4_swigregister(itkFlipImageFilterISS4)
itkFlipImageFilterISS4___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterISS4___New_orig__
itkFlipImageFilterISS4_cast = _itkFlipImageFilterPython.itkFlipImageFilterISS4_cast


def itkFlipImageFilterIUC2_New():
    return itkFlipImageFilterIUC2.New()

class itkFlipImageFilterIUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkFlipImageFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIUC2
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIUC2

        Create a new object of the class itkFlipImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterIUC2 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterIUC2_swigregister(itkFlipImageFilterIUC2)
itkFlipImageFilterIUC2___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterIUC2___New_orig__
itkFlipImageFilterIUC2_cast = _itkFlipImageFilterPython.itkFlipImageFilterIUC2_cast


def itkFlipImageFilterIUC3_New():
    return itkFlipImageFilterIUC3.New()

class itkFlipImageFilterIUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkFlipImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIUC3
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIUC3

        Create a new object of the class itkFlipImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterIUC3 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterIUC3_swigregister(itkFlipImageFilterIUC3)
itkFlipImageFilterIUC3___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterIUC3___New_orig__
itkFlipImageFilterIUC3_cast = _itkFlipImageFilterPython.itkFlipImageFilterIUC3_cast


def itkFlipImageFilterIUC4_New():
    return itkFlipImageFilterIUC4.New()

class itkFlipImageFilterIUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkFlipImageFilterIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC4_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC4_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC4_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC4_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC4_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC4_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC4_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC4_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIUC4
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUC4_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIUC4

        Create a new object of the class itkFlipImageFilterIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterIUC4 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterIUC4_swigregister(itkFlipImageFilterIUC4)
itkFlipImageFilterIUC4___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterIUC4___New_orig__
itkFlipImageFilterIUC4_cast = _itkFlipImageFilterPython.itkFlipImageFilterIUC4_cast


def itkFlipImageFilterIUS2_New():
    return itkFlipImageFilterIUS2.New()

class itkFlipImageFilterIUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkFlipImageFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIUS2
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIUS2

        Create a new object of the class itkFlipImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterIUS2 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterIUS2_swigregister(itkFlipImageFilterIUS2)
itkFlipImageFilterIUS2___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterIUS2___New_orig__
itkFlipImageFilterIUS2_cast = _itkFlipImageFilterPython.itkFlipImageFilterIUS2_cast


def itkFlipImageFilterIUS3_New():
    return itkFlipImageFilterIUS3.New()

class itkFlipImageFilterIUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkFlipImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIUS3
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIUS3

        Create a new object of the class itkFlipImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterIUS3 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterIUS3_swigregister(itkFlipImageFilterIUS3)
itkFlipImageFilterIUS3___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterIUS3___New_orig__
itkFlipImageFilterIUS3_cast = _itkFlipImageFilterPython.itkFlipImageFilterIUS3_cast


def itkFlipImageFilterIUS4_New():
    return itkFlipImageFilterIUS4.New()

class itkFlipImageFilterIUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkFlipImageFilterIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS4_Clone)
    SetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS4_SetFlipAxes)
    GetFlipAxes = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS4_GetFlipAxes)
    FlipAboutOriginOn = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS4_FlipAboutOriginOn)
    FlipAboutOriginOff = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS4_FlipAboutOriginOff)
    GetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS4_GetFlipAboutOrigin)
    SetFlipAboutOrigin = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS4_SetFlipAboutOrigin)
    GenerateOutputInformation = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS4_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS4_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIUS4
    cast = _swig_new_static_method(_itkFlipImageFilterPython.itkFlipImageFilterIUS4_cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIUS4

        Create a new object of the class itkFlipImageFilterIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFlipImageFilterIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFlipImageFilterIUS4 in _itkFlipImageFilterPython:
_itkFlipImageFilterPython.itkFlipImageFilterIUS4_swigregister(itkFlipImageFilterIUS4)
itkFlipImageFilterIUS4___New_orig__ = _itkFlipImageFilterPython.itkFlipImageFilterIUS4___New_orig__
itkFlipImageFilterIUS4_cast = _itkFlipImageFilterPython.itkFlipImageFilterIUS4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def flip_image_filter(*args: itkt.ImageLike,  flip_axes: Sequence[bool]=..., flip_about_origin: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FlipImageFilter"""
    import itk

    kwarg_typehints = { 'flip_axes':flip_axes,'flip_about_origin':flip_about_origin }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.FlipImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def flip_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageGrid.FlipImageFilter
    flip_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    flip_image_filter.__doc__ = filter_object.__doc__




