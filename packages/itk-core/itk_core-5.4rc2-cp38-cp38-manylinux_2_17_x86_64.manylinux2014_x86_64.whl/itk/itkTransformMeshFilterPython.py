# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKMeshPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTransformMeshFilterPython
else:
    import _itkTransformMeshFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkTransformMeshFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkTransformMeshFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkTransformBasePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkMeshToMeshFilterPython
import itk.itkMeshBasePython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMapContainerPython
import itk.itkPointSetPython
import itk.itkMeshSourcePython

def itkTransformMeshFilterMD2MD2TD22_New():
    return itkTransformMeshFilterMD2MD2TD22.New()

class itkTransformMeshFilterMD2MD2TD22(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMD2MD2):
    r"""Proxy of C++ itkTransformMeshFilterMD2MD2TD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMD2MD2TD22
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMD2MD2TD22

        Create a new object of the class itkTransformMeshFilterMD2MD2TD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMD2MD2TD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMD2MD2TD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMD2MD2TD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMD2MD2TD22 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_swigregister(itkTransformMeshFilterMD2MD2TD22)
itkTransformMeshFilterMD2MD2TD22___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22___New_orig__
itkTransformMeshFilterMD2MD2TD22_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TD22_cast


def itkTransformMeshFilterMD2MD2TF22_New():
    return itkTransformMeshFilterMD2MD2TF22.New()

class itkTransformMeshFilterMD2MD2TF22(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMD2MD2):
    r"""Proxy of C++ itkTransformMeshFilterMD2MD2TF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMD2MD2TF22
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMD2MD2TF22

        Create a new object of the class itkTransformMeshFilterMD2MD2TF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMD2MD2TF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMD2MD2TF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMD2MD2TF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMD2MD2TF22 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_swigregister(itkTransformMeshFilterMD2MD2TF22)
itkTransformMeshFilterMD2MD2TF22___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22___New_orig__
itkTransformMeshFilterMD2MD2TF22_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMD2MD2TF22_cast


def itkTransformMeshFilterMD3MD3TD33_New():
    return itkTransformMeshFilterMD3MD3TD33.New()

class itkTransformMeshFilterMD3MD3TD33(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMD3MD3):
    r"""Proxy of C++ itkTransformMeshFilterMD3MD3TD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMD3MD3TD33
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMD3MD3TD33

        Create a new object of the class itkTransformMeshFilterMD3MD3TD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMD3MD3TD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMD3MD3TD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMD3MD3TD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMD3MD3TD33 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_swigregister(itkTransformMeshFilterMD3MD3TD33)
itkTransformMeshFilterMD3MD3TD33___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33___New_orig__
itkTransformMeshFilterMD3MD3TD33_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TD33_cast


def itkTransformMeshFilterMD3MD3TF33_New():
    return itkTransformMeshFilterMD3MD3TF33.New()

class itkTransformMeshFilterMD3MD3TF33(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMD3MD3):
    r"""Proxy of C++ itkTransformMeshFilterMD3MD3TF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMD3MD3TF33
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMD3MD3TF33

        Create a new object of the class itkTransformMeshFilterMD3MD3TF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMD3MD3TF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMD3MD3TF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMD3MD3TF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMD3MD3TF33 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_swigregister(itkTransformMeshFilterMD3MD3TF33)
itkTransformMeshFilterMD3MD3TF33___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33___New_orig__
itkTransformMeshFilterMD3MD3TF33_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMD3MD3TF33_cast


def itkTransformMeshFilterMD4MD4TD44_New():
    return itkTransformMeshFilterMD4MD4TD44.New()

class itkTransformMeshFilterMD4MD4TD44(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMD4MD4):
    r"""Proxy of C++ itkTransformMeshFilterMD4MD4TD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TD44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TD44_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TD44_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TD44_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TD44_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMD4MD4TD44
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TD44_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMD4MD4TD44

        Create a new object of the class itkTransformMeshFilterMD4MD4TD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMD4MD4TD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMD4MD4TD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMD4MD4TD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMD4MD4TD44 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TD44_swigregister(itkTransformMeshFilterMD4MD4TD44)
itkTransformMeshFilterMD4MD4TD44___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TD44___New_orig__
itkTransformMeshFilterMD4MD4TD44_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TD44_cast


def itkTransformMeshFilterMD4MD4TF44_New():
    return itkTransformMeshFilterMD4MD4TF44.New()

class itkTransformMeshFilterMD4MD4TF44(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMD4MD4):
    r"""Proxy of C++ itkTransformMeshFilterMD4MD4TF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TF44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TF44_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TF44_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TF44_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TF44_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMD4MD4TF44
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TF44_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMD4MD4TF44

        Create a new object of the class itkTransformMeshFilterMD4MD4TF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMD4MD4TF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMD4MD4TF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMD4MD4TF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMD4MD4TF44 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TF44_swigregister(itkTransformMeshFilterMD4MD4TF44)
itkTransformMeshFilterMD4MD4TF44___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TF44___New_orig__
itkTransformMeshFilterMD4MD4TF44_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMD4MD4TF44_cast


def itkTransformMeshFilterMF2MF2TD22_New():
    return itkTransformMeshFilterMF2MF2TD22.New()

class itkTransformMeshFilterMF2MF2TD22(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMF2MF2):
    r"""Proxy of C++ itkTransformMeshFilterMF2MF2TD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMF2MF2TD22
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMF2MF2TD22

        Create a new object of the class itkTransformMeshFilterMF2MF2TD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMF2MF2TD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMF2MF2TD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMF2MF2TD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMF2MF2TD22 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_swigregister(itkTransformMeshFilterMF2MF2TD22)
itkTransformMeshFilterMF2MF2TD22___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22___New_orig__
itkTransformMeshFilterMF2MF2TD22_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TD22_cast


def itkTransformMeshFilterMF2MF2TF22_New():
    return itkTransformMeshFilterMF2MF2TF22.New()

class itkTransformMeshFilterMF2MF2TF22(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMF2MF2):
    r"""Proxy of C++ itkTransformMeshFilterMF2MF2TF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMF2MF2TF22
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMF2MF2TF22

        Create a new object of the class itkTransformMeshFilterMF2MF2TF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMF2MF2TF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMF2MF2TF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMF2MF2TF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMF2MF2TF22 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_swigregister(itkTransformMeshFilterMF2MF2TF22)
itkTransformMeshFilterMF2MF2TF22___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22___New_orig__
itkTransformMeshFilterMF2MF2TF22_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMF2MF2TF22_cast


def itkTransformMeshFilterMF3MF3TD33_New():
    return itkTransformMeshFilterMF3MF3TD33.New()

class itkTransformMeshFilterMF3MF3TD33(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMF3MF3):
    r"""Proxy of C++ itkTransformMeshFilterMF3MF3TD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMF3MF3TD33
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMF3MF3TD33

        Create a new object of the class itkTransformMeshFilterMF3MF3TD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMF3MF3TD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMF3MF3TD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMF3MF3TD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMF3MF3TD33 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_swigregister(itkTransformMeshFilterMF3MF3TD33)
itkTransformMeshFilterMF3MF3TD33___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33___New_orig__
itkTransformMeshFilterMF3MF3TD33_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TD33_cast


def itkTransformMeshFilterMF3MF3TF33_New():
    return itkTransformMeshFilterMF3MF3TF33.New()

class itkTransformMeshFilterMF3MF3TF33(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMF3MF3):
    r"""Proxy of C++ itkTransformMeshFilterMF3MF3TF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMF3MF3TF33
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMF3MF3TF33

        Create a new object of the class itkTransformMeshFilterMF3MF3TF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMF3MF3TF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMF3MF3TF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMF3MF3TF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMF3MF3TF33 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_swigregister(itkTransformMeshFilterMF3MF3TF33)
itkTransformMeshFilterMF3MF3TF33___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33___New_orig__
itkTransformMeshFilterMF3MF3TF33_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMF3MF3TF33_cast


def itkTransformMeshFilterMF4MF4TD44_New():
    return itkTransformMeshFilterMF4MF4TD44.New()

class itkTransformMeshFilterMF4MF4TD44(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMF4MF4):
    r"""Proxy of C++ itkTransformMeshFilterMF4MF4TD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TD44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TD44_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TD44_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TD44_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TD44_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMF4MF4TD44
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TD44_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMF4MF4TD44

        Create a new object of the class itkTransformMeshFilterMF4MF4TD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMF4MF4TD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMF4MF4TD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMF4MF4TD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMF4MF4TD44 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TD44_swigregister(itkTransformMeshFilterMF4MF4TD44)
itkTransformMeshFilterMF4MF4TD44___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TD44___New_orig__
itkTransformMeshFilterMF4MF4TD44_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TD44_cast


def itkTransformMeshFilterMF4MF4TF44_New():
    return itkTransformMeshFilterMF4MF4TF44.New()

class itkTransformMeshFilterMF4MF4TF44(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMF4MF4):
    r"""Proxy of C++ itkTransformMeshFilterMF4MF4TF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TF44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TF44_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TF44_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TF44_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TF44_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMF4MF4TF44
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TF44_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMF4MF4TF44

        Create a new object of the class itkTransformMeshFilterMF4MF4TF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMF4MF4TF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMF4MF4TF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMF4MF4TF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMF4MF4TF44 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TF44_swigregister(itkTransformMeshFilterMF4MF4TF44)
itkTransformMeshFilterMF4MF4TF44___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TF44___New_orig__
itkTransformMeshFilterMF4MF4TF44_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMF4MF4TF44_cast


def itkTransformMeshFilterMSS2MSS2TD22_New():
    return itkTransformMeshFilterMSS2MSS2TD22.New()

class itkTransformMeshFilterMSS2MSS2TD22(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS2MSS2):
    r"""Proxy of C++ itkTransformMeshFilterMSS2MSS2TD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TD22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TD22_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TD22_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TD22_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TD22_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMSS2MSS2TD22
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TD22_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMSS2MSS2TD22

        Create a new object of the class itkTransformMeshFilterMSS2MSS2TD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMSS2MSS2TD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMSS2MSS2TD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMSS2MSS2TD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMSS2MSS2TD22 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TD22_swigregister(itkTransformMeshFilterMSS2MSS2TD22)
itkTransformMeshFilterMSS2MSS2TD22___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TD22___New_orig__
itkTransformMeshFilterMSS2MSS2TD22_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TD22_cast


def itkTransformMeshFilterMSS2MSS2TF22_New():
    return itkTransformMeshFilterMSS2MSS2TF22.New()

class itkTransformMeshFilterMSS2MSS2TF22(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS2MSS2):
    r"""Proxy of C++ itkTransformMeshFilterMSS2MSS2TF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TF22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TF22_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TF22_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TF22_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TF22_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMSS2MSS2TF22
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TF22_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMSS2MSS2TF22

        Create a new object of the class itkTransformMeshFilterMSS2MSS2TF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMSS2MSS2TF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMSS2MSS2TF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMSS2MSS2TF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMSS2MSS2TF22 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TF22_swigregister(itkTransformMeshFilterMSS2MSS2TF22)
itkTransformMeshFilterMSS2MSS2TF22___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TF22___New_orig__
itkTransformMeshFilterMSS2MSS2TF22_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS2MSS2TF22_cast


def itkTransformMeshFilterMSS3MSS3TD33_New():
    return itkTransformMeshFilterMSS3MSS3TD33.New()

class itkTransformMeshFilterMSS3MSS3TD33(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS3MSS3):
    r"""Proxy of C++ itkTransformMeshFilterMSS3MSS3TD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TD33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TD33_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TD33_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TD33_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TD33_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMSS3MSS3TD33
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TD33_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMSS3MSS3TD33

        Create a new object of the class itkTransformMeshFilterMSS3MSS3TD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMSS3MSS3TD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMSS3MSS3TD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMSS3MSS3TD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMSS3MSS3TD33 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TD33_swigregister(itkTransformMeshFilterMSS3MSS3TD33)
itkTransformMeshFilterMSS3MSS3TD33___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TD33___New_orig__
itkTransformMeshFilterMSS3MSS3TD33_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TD33_cast


def itkTransformMeshFilterMSS3MSS3TF33_New():
    return itkTransformMeshFilterMSS3MSS3TF33.New()

class itkTransformMeshFilterMSS3MSS3TF33(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS3MSS3):
    r"""Proxy of C++ itkTransformMeshFilterMSS3MSS3TF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TF33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TF33_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TF33_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TF33_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TF33_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMSS3MSS3TF33
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TF33_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMSS3MSS3TF33

        Create a new object of the class itkTransformMeshFilterMSS3MSS3TF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMSS3MSS3TF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMSS3MSS3TF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMSS3MSS3TF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMSS3MSS3TF33 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TF33_swigregister(itkTransformMeshFilterMSS3MSS3TF33)
itkTransformMeshFilterMSS3MSS3TF33___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TF33___New_orig__
itkTransformMeshFilterMSS3MSS3TF33_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS3MSS3TF33_cast


def itkTransformMeshFilterMSS4MSS4TD44_New():
    return itkTransformMeshFilterMSS4MSS4TD44.New()

class itkTransformMeshFilterMSS4MSS4TD44(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS4MSS4):
    r"""Proxy of C++ itkTransformMeshFilterMSS4MSS4TD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TD44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TD44_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TD44_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TD44_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TD44_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMSS4MSS4TD44
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TD44_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMSS4MSS4TD44

        Create a new object of the class itkTransformMeshFilterMSS4MSS4TD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMSS4MSS4TD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMSS4MSS4TD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMSS4MSS4TD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMSS4MSS4TD44 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TD44_swigregister(itkTransformMeshFilterMSS4MSS4TD44)
itkTransformMeshFilterMSS4MSS4TD44___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TD44___New_orig__
itkTransformMeshFilterMSS4MSS4TD44_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TD44_cast


def itkTransformMeshFilterMSS4MSS4TF44_New():
    return itkTransformMeshFilterMSS4MSS4TF44.New()

class itkTransformMeshFilterMSS4MSS4TF44(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMSS4MSS4):
    r"""Proxy of C++ itkTransformMeshFilterMSS4MSS4TF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TF44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TF44_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TF44_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TF44_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TF44_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMSS4MSS4TF44
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TF44_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMSS4MSS4TF44

        Create a new object of the class itkTransformMeshFilterMSS4MSS4TF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMSS4MSS4TF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMSS4MSS4TF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMSS4MSS4TF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMSS4MSS4TF44 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TF44_swigregister(itkTransformMeshFilterMSS4MSS4TF44)
itkTransformMeshFilterMSS4MSS4TF44___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TF44___New_orig__
itkTransformMeshFilterMSS4MSS4TF44_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMSS4MSS4TF44_cast


def itkTransformMeshFilterMUC2MUC2TD22_New():
    return itkTransformMeshFilterMUC2MUC2TD22.New()

class itkTransformMeshFilterMUC2MUC2TD22(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC2MUC2):
    r"""Proxy of C++ itkTransformMeshFilterMUC2MUC2TD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TD22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TD22_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TD22_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TD22_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TD22_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUC2MUC2TD22
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TD22_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUC2MUC2TD22

        Create a new object of the class itkTransformMeshFilterMUC2MUC2TD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUC2MUC2TD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUC2MUC2TD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUC2MUC2TD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUC2MUC2TD22 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TD22_swigregister(itkTransformMeshFilterMUC2MUC2TD22)
itkTransformMeshFilterMUC2MUC2TD22___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TD22___New_orig__
itkTransformMeshFilterMUC2MUC2TD22_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TD22_cast


def itkTransformMeshFilterMUC2MUC2TF22_New():
    return itkTransformMeshFilterMUC2MUC2TF22.New()

class itkTransformMeshFilterMUC2MUC2TF22(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC2MUC2):
    r"""Proxy of C++ itkTransformMeshFilterMUC2MUC2TF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TF22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TF22_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TF22_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TF22_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TF22_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUC2MUC2TF22
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TF22_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUC2MUC2TF22

        Create a new object of the class itkTransformMeshFilterMUC2MUC2TF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUC2MUC2TF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUC2MUC2TF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUC2MUC2TF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUC2MUC2TF22 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TF22_swigregister(itkTransformMeshFilterMUC2MUC2TF22)
itkTransformMeshFilterMUC2MUC2TF22___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TF22___New_orig__
itkTransformMeshFilterMUC2MUC2TF22_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC2MUC2TF22_cast


def itkTransformMeshFilterMUC3MUC3TD33_New():
    return itkTransformMeshFilterMUC3MUC3TD33.New()

class itkTransformMeshFilterMUC3MUC3TD33(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC3MUC3):
    r"""Proxy of C++ itkTransformMeshFilterMUC3MUC3TD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TD33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TD33_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TD33_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TD33_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TD33_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUC3MUC3TD33
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TD33_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUC3MUC3TD33

        Create a new object of the class itkTransformMeshFilterMUC3MUC3TD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUC3MUC3TD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUC3MUC3TD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUC3MUC3TD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUC3MUC3TD33 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TD33_swigregister(itkTransformMeshFilterMUC3MUC3TD33)
itkTransformMeshFilterMUC3MUC3TD33___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TD33___New_orig__
itkTransformMeshFilterMUC3MUC3TD33_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TD33_cast


def itkTransformMeshFilterMUC3MUC3TF33_New():
    return itkTransformMeshFilterMUC3MUC3TF33.New()

class itkTransformMeshFilterMUC3MUC3TF33(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC3MUC3):
    r"""Proxy of C++ itkTransformMeshFilterMUC3MUC3TF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TF33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TF33_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TF33_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TF33_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TF33_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUC3MUC3TF33
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TF33_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUC3MUC3TF33

        Create a new object of the class itkTransformMeshFilterMUC3MUC3TF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUC3MUC3TF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUC3MUC3TF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUC3MUC3TF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUC3MUC3TF33 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TF33_swigregister(itkTransformMeshFilterMUC3MUC3TF33)
itkTransformMeshFilterMUC3MUC3TF33___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TF33___New_orig__
itkTransformMeshFilterMUC3MUC3TF33_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC3MUC3TF33_cast


def itkTransformMeshFilterMUC4MUC4TD44_New():
    return itkTransformMeshFilterMUC4MUC4TD44.New()

class itkTransformMeshFilterMUC4MUC4TD44(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC4MUC4):
    r"""Proxy of C++ itkTransformMeshFilterMUC4MUC4TD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TD44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TD44_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TD44_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TD44_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TD44_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUC4MUC4TD44
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TD44_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUC4MUC4TD44

        Create a new object of the class itkTransformMeshFilterMUC4MUC4TD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUC4MUC4TD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUC4MUC4TD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUC4MUC4TD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUC4MUC4TD44 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TD44_swigregister(itkTransformMeshFilterMUC4MUC4TD44)
itkTransformMeshFilterMUC4MUC4TD44___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TD44___New_orig__
itkTransformMeshFilterMUC4MUC4TD44_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TD44_cast


def itkTransformMeshFilterMUC4MUC4TF44_New():
    return itkTransformMeshFilterMUC4MUC4TF44.New()

class itkTransformMeshFilterMUC4MUC4TF44(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUC4MUC4):
    r"""Proxy of C++ itkTransformMeshFilterMUC4MUC4TF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TF44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TF44_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TF44_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TF44_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TF44_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUC4MUC4TF44
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TF44_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUC4MUC4TF44

        Create a new object of the class itkTransformMeshFilterMUC4MUC4TF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUC4MUC4TF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUC4MUC4TF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUC4MUC4TF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUC4MUC4TF44 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TF44_swigregister(itkTransformMeshFilterMUC4MUC4TF44)
itkTransformMeshFilterMUC4MUC4TF44___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TF44___New_orig__
itkTransformMeshFilterMUC4MUC4TF44_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUC4MUC4TF44_cast


def itkTransformMeshFilterMUS2MUS2TD22_New():
    return itkTransformMeshFilterMUS2MUS2TD22.New()

class itkTransformMeshFilterMUS2MUS2TD22(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS2MUS2):
    r"""Proxy of C++ itkTransformMeshFilterMUS2MUS2TD22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TD22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TD22_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TD22_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TD22_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TD22_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUS2MUS2TD22
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TD22_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUS2MUS2TD22

        Create a new object of the class itkTransformMeshFilterMUS2MUS2TD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUS2MUS2TD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUS2MUS2TD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUS2MUS2TD22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUS2MUS2TD22 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TD22_swigregister(itkTransformMeshFilterMUS2MUS2TD22)
itkTransformMeshFilterMUS2MUS2TD22___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TD22___New_orig__
itkTransformMeshFilterMUS2MUS2TD22_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TD22_cast


def itkTransformMeshFilterMUS2MUS2TF22_New():
    return itkTransformMeshFilterMUS2MUS2TF22.New()

class itkTransformMeshFilterMUS2MUS2TF22(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS2MUS2):
    r"""Proxy of C++ itkTransformMeshFilterMUS2MUS2TF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TF22___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TF22_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TF22_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TF22_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TF22_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUS2MUS2TF22
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TF22_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUS2MUS2TF22

        Create a new object of the class itkTransformMeshFilterMUS2MUS2TF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUS2MUS2TF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUS2MUS2TF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUS2MUS2TF22.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUS2MUS2TF22 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TF22_swigregister(itkTransformMeshFilterMUS2MUS2TF22)
itkTransformMeshFilterMUS2MUS2TF22___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TF22___New_orig__
itkTransformMeshFilterMUS2MUS2TF22_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS2MUS2TF22_cast


def itkTransformMeshFilterMUS3MUS3TD33_New():
    return itkTransformMeshFilterMUS3MUS3TD33.New()

class itkTransformMeshFilterMUS3MUS3TD33(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS3MUS3):
    r"""Proxy of C++ itkTransformMeshFilterMUS3MUS3TD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TD33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TD33_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TD33_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TD33_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TD33_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUS3MUS3TD33
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TD33_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUS3MUS3TD33

        Create a new object of the class itkTransformMeshFilterMUS3MUS3TD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUS3MUS3TD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUS3MUS3TD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUS3MUS3TD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUS3MUS3TD33 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TD33_swigregister(itkTransformMeshFilterMUS3MUS3TD33)
itkTransformMeshFilterMUS3MUS3TD33___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TD33___New_orig__
itkTransformMeshFilterMUS3MUS3TD33_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TD33_cast


def itkTransformMeshFilterMUS3MUS3TF33_New():
    return itkTransformMeshFilterMUS3MUS3TF33.New()

class itkTransformMeshFilterMUS3MUS3TF33(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS3MUS3):
    r"""Proxy of C++ itkTransformMeshFilterMUS3MUS3TF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TF33___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TF33_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TF33_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TF33_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TF33_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUS3MUS3TF33
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TF33_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUS3MUS3TF33

        Create a new object of the class itkTransformMeshFilterMUS3MUS3TF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUS3MUS3TF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUS3MUS3TF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUS3MUS3TF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUS3MUS3TF33 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TF33_swigregister(itkTransformMeshFilterMUS3MUS3TF33)
itkTransformMeshFilterMUS3MUS3TF33___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TF33___New_orig__
itkTransformMeshFilterMUS3MUS3TF33_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS3MUS3TF33_cast


def itkTransformMeshFilterMUS4MUS4TD44_New():
    return itkTransformMeshFilterMUS4MUS4TD44.New()

class itkTransformMeshFilterMUS4MUS4TD44(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS4MUS4):
    r"""Proxy of C++ itkTransformMeshFilterMUS4MUS4TD44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TD44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TD44_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TD44_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TD44_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TD44_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUS4MUS4TD44
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TD44_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUS4MUS4TD44

        Create a new object of the class itkTransformMeshFilterMUS4MUS4TD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUS4MUS4TD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUS4MUS4TD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUS4MUS4TD44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUS4MUS4TD44 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TD44_swigregister(itkTransformMeshFilterMUS4MUS4TD44)
itkTransformMeshFilterMUS4MUS4TD44___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TD44___New_orig__
itkTransformMeshFilterMUS4MUS4TD44_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TD44_cast


def itkTransformMeshFilterMUS4MUS4TF44_New():
    return itkTransformMeshFilterMUS4MUS4TF44.New()

class itkTransformMeshFilterMUS4MUS4TF44(itk.itkMeshToMeshFilterPython.itkMeshToMeshFilterMUS4MUS4):
    r"""Proxy of C++ itkTransformMeshFilterMUS4MUS4TF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TF44___New_orig__)
    Clone = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TF44_Clone)
    SetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TF44_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TF44_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TF44_GetTransform)
    __swig_destroy__ = _itkTransformMeshFilterPython.delete_itkTransformMeshFilterMUS4MUS4TF44
    cast = _swig_new_static_method(_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TF44_cast)

    def New(*args, **kargs):
        """New() -> itkTransformMeshFilterMUS4MUS4TF44

        Create a new object of the class itkTransformMeshFilterMUS4MUS4TF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTransformMeshFilterMUS4MUS4TF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTransformMeshFilterMUS4MUS4TF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTransformMeshFilterMUS4MUS4TF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTransformMeshFilterMUS4MUS4TF44 in _itkTransformMeshFilterPython:
_itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TF44_swigregister(itkTransformMeshFilterMUS4MUS4TF44)
itkTransformMeshFilterMUS4MUS4TF44___New_orig__ = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TF44___New_orig__
itkTransformMeshFilterMUS4MUS4TF44_cast = _itkTransformMeshFilterPython.itkTransformMeshFilterMUS4MUS4TF44_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def transform_mesh_filter(*args: itkt.Mesh,  transform: itkt.Transform=..., output: itkt.Mesh=...,**kwargs)-> itkt.MeshSourceReturn:
    """Functional interface for TransformMeshFilter"""
    import itk

    kwarg_typehints = { 'transform':transform,'output':output }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.TransformMeshFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def transform_mesh_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKMesh.TransformMeshFilter
    transform_mesh_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    transform_mesh_filter.__doc__ = filter_object.__doc__




