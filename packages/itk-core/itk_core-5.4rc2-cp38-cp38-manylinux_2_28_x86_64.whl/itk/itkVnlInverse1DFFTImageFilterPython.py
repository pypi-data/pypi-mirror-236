# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVnlInverse1DFFTImageFilterPython
else:
    import _itkVnlInverse1DFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVnlInverse1DFFTImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVnlInverse1DFFTImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkInverse1DFFTImageFilterPython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkVnlInverse1DFFTImageFilterICD2_New():
    return itkVnlInverse1DFFTImageFilterICD2.New()

class itkVnlInverse1DFFTImageFilterICD2(itk.itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD2):
    r"""Proxy of C++ itkVnlInverse1DFFTImageFilterICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD2___New_orig__)
    Clone = _swig_new_instance_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD2_Clone)
    __swig_destroy__ = _itkVnlInverse1DFFTImageFilterPython.delete_itkVnlInverse1DFFTImageFilterICD2
    cast = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD2_cast)

    def New(*args, **kargs):
        """New() -> itkVnlInverse1DFFTImageFilterICD2

        Create a new object of the class itkVnlInverse1DFFTImageFilterICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVnlInverse1DFFTImageFilterICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVnlInverse1DFFTImageFilterICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVnlInverse1DFFTImageFilterICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVnlInverse1DFFTImageFilterICD2 in _itkVnlInverse1DFFTImageFilterPython:
_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD2_swigregister(itkVnlInverse1DFFTImageFilterICD2)
itkVnlInverse1DFFTImageFilterICD2___New_orig__ = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD2___New_orig__
itkVnlInverse1DFFTImageFilterICD2_cast = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD2_cast


def itkVnlInverse1DFFTImageFilterICD3_New():
    return itkVnlInverse1DFFTImageFilterICD3.New()

class itkVnlInverse1DFFTImageFilterICD3(itk.itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD3):
    r"""Proxy of C++ itkVnlInverse1DFFTImageFilterICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD3___New_orig__)
    Clone = _swig_new_instance_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD3_Clone)
    __swig_destroy__ = _itkVnlInverse1DFFTImageFilterPython.delete_itkVnlInverse1DFFTImageFilterICD3
    cast = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD3_cast)

    def New(*args, **kargs):
        """New() -> itkVnlInverse1DFFTImageFilterICD3

        Create a new object of the class itkVnlInverse1DFFTImageFilterICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVnlInverse1DFFTImageFilterICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVnlInverse1DFFTImageFilterICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVnlInverse1DFFTImageFilterICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVnlInverse1DFFTImageFilterICD3 in _itkVnlInverse1DFFTImageFilterPython:
_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD3_swigregister(itkVnlInverse1DFFTImageFilterICD3)
itkVnlInverse1DFFTImageFilterICD3___New_orig__ = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD3___New_orig__
itkVnlInverse1DFFTImageFilterICD3_cast = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD3_cast


def itkVnlInverse1DFFTImageFilterICD4_New():
    return itkVnlInverse1DFFTImageFilterICD4.New()

class itkVnlInverse1DFFTImageFilterICD4(itk.itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICD4):
    r"""Proxy of C++ itkVnlInverse1DFFTImageFilterICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD4___New_orig__)
    Clone = _swig_new_instance_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD4_Clone)
    __swig_destroy__ = _itkVnlInverse1DFFTImageFilterPython.delete_itkVnlInverse1DFFTImageFilterICD4
    cast = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD4_cast)

    def New(*args, **kargs):
        """New() -> itkVnlInverse1DFFTImageFilterICD4

        Create a new object of the class itkVnlInverse1DFFTImageFilterICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVnlInverse1DFFTImageFilterICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVnlInverse1DFFTImageFilterICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVnlInverse1DFFTImageFilterICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVnlInverse1DFFTImageFilterICD4 in _itkVnlInverse1DFFTImageFilterPython:
_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD4_swigregister(itkVnlInverse1DFFTImageFilterICD4)
itkVnlInverse1DFFTImageFilterICD4___New_orig__ = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD4___New_orig__
itkVnlInverse1DFFTImageFilterICD4_cast = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICD4_cast


def itkVnlInverse1DFFTImageFilterICF2_New():
    return itkVnlInverse1DFFTImageFilterICF2.New()

class itkVnlInverse1DFFTImageFilterICF2(itk.itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF2):
    r"""Proxy of C++ itkVnlInverse1DFFTImageFilterICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF2_Clone)
    __swig_destroy__ = _itkVnlInverse1DFFTImageFilterPython.delete_itkVnlInverse1DFFTImageFilterICF2
    cast = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkVnlInverse1DFFTImageFilterICF2

        Create a new object of the class itkVnlInverse1DFFTImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVnlInverse1DFFTImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVnlInverse1DFFTImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVnlInverse1DFFTImageFilterICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVnlInverse1DFFTImageFilterICF2 in _itkVnlInverse1DFFTImageFilterPython:
_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF2_swigregister(itkVnlInverse1DFFTImageFilterICF2)
itkVnlInverse1DFFTImageFilterICF2___New_orig__ = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF2___New_orig__
itkVnlInverse1DFFTImageFilterICF2_cast = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF2_cast


def itkVnlInverse1DFFTImageFilterICF3_New():
    return itkVnlInverse1DFFTImageFilterICF3.New()

class itkVnlInverse1DFFTImageFilterICF3(itk.itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF3):
    r"""Proxy of C++ itkVnlInverse1DFFTImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF3_Clone)
    __swig_destroy__ = _itkVnlInverse1DFFTImageFilterPython.delete_itkVnlInverse1DFFTImageFilterICF3
    cast = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkVnlInverse1DFFTImageFilterICF3

        Create a new object of the class itkVnlInverse1DFFTImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVnlInverse1DFFTImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVnlInverse1DFFTImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVnlInverse1DFFTImageFilterICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVnlInverse1DFFTImageFilterICF3 in _itkVnlInverse1DFFTImageFilterPython:
_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF3_swigregister(itkVnlInverse1DFFTImageFilterICF3)
itkVnlInverse1DFFTImageFilterICF3___New_orig__ = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF3___New_orig__
itkVnlInverse1DFFTImageFilterICF3_cast = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF3_cast


def itkVnlInverse1DFFTImageFilterICF4_New():
    return itkVnlInverse1DFFTImageFilterICF4.New()

class itkVnlInverse1DFFTImageFilterICF4(itk.itkInverse1DFFTImageFilterPython.itkInverse1DFFTImageFilterICF4):
    r"""Proxy of C++ itkVnlInverse1DFFTImageFilterICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF4___New_orig__)
    Clone = _swig_new_instance_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF4_Clone)
    __swig_destroy__ = _itkVnlInverse1DFFTImageFilterPython.delete_itkVnlInverse1DFFTImageFilterICF4
    cast = _swig_new_static_method(_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF4_cast)

    def New(*args, **kargs):
        """New() -> itkVnlInverse1DFFTImageFilterICF4

        Create a new object of the class itkVnlInverse1DFFTImageFilterICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVnlInverse1DFFTImageFilterICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVnlInverse1DFFTImageFilterICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVnlInverse1DFFTImageFilterICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVnlInverse1DFFTImageFilterICF4 in _itkVnlInverse1DFFTImageFilterPython:
_itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF4_swigregister(itkVnlInverse1DFFTImageFilterICF4)
itkVnlInverse1DFFTImageFilterICF4___New_orig__ = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF4___New_orig__
itkVnlInverse1DFFTImageFilterICF4_cast = _itkVnlInverse1DFFTImageFilterPython.itkVnlInverse1DFFTImageFilterICF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def vnl_inverse1_dfft_image_filter(*args: itkt.ImageLike,  direction: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for VnlInverse1DFFTImageFilter"""
    import itk

    kwarg_typehints = { 'direction':direction }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.VnlInverse1DFFTImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def vnl_inverse1_dfft_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKFFT.VnlInverse1DFFTImageFilter
    vnl_inverse1_dfft_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    vnl_inverse1_dfft_image_filter.__doc__ = filter_object.__doc__




