# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkComplexToComplex1DFFTImageFilterPython
else:
    import _itkComplexToComplex1DFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkComplexToComplex1DFFTImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkComplexToComplex1DFFTImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageToImageFilterBPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkImagePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkComplexToComplex1DFFTImageFilterICD2_New():
    return itkComplexToComplex1DFFTImageFilterICD2.New()

class itkComplexToComplex1DFFTImageFilterICD2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD2ICD2):
    r"""Proxy of C++ itkComplexToComplex1DFFTImageFilterICD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2___New_orig__)
    Clone = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2_Clone)
    TransformDirectionType_DIRECT = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2_TransformDirectionType_DIRECT
    
    TransformDirectionType_INVERSE = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2_TransformDirectionType_INVERSE
    
    SetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2_SetTransformDirection)
    GetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2_GetTransformDirection)
    GetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2_GetDirection)
    SetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkComplexToComplex1DFFTImageFilterPython.delete_itkComplexToComplex1DFFTImageFilterICD2
    cast = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2_cast)

    def New(*args, **kargs):
        """New() -> itkComplexToComplex1DFFTImageFilterICD2

        Create a new object of the class itkComplexToComplex1DFFTImageFilterICD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplex1DFFTImageFilterICD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplex1DFFTImageFilterICD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplex1DFFTImageFilterICD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplex1DFFTImageFilterICD2 in _itkComplexToComplex1DFFTImageFilterPython:
_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2_swigregister(itkComplexToComplex1DFFTImageFilterICD2)
itkComplexToComplex1DFFTImageFilterICD2___New_orig__ = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2___New_orig__
itkComplexToComplex1DFFTImageFilterICD2_cast = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD2_cast


def itkComplexToComplex1DFFTImageFilterICD3_New():
    return itkComplexToComplex1DFFTImageFilterICD3.New()

class itkComplexToComplex1DFFTImageFilterICD3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD3ICD3):
    r"""Proxy of C++ itkComplexToComplex1DFFTImageFilterICD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3___New_orig__)
    Clone = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3_Clone)
    TransformDirectionType_DIRECT = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3_TransformDirectionType_DIRECT
    
    TransformDirectionType_INVERSE = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3_TransformDirectionType_INVERSE
    
    SetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3_SetTransformDirection)
    GetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3_GetTransformDirection)
    GetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3_GetDirection)
    SetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkComplexToComplex1DFFTImageFilterPython.delete_itkComplexToComplex1DFFTImageFilterICD3
    cast = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3_cast)

    def New(*args, **kargs):
        """New() -> itkComplexToComplex1DFFTImageFilterICD3

        Create a new object of the class itkComplexToComplex1DFFTImageFilterICD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplex1DFFTImageFilterICD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplex1DFFTImageFilterICD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplex1DFFTImageFilterICD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplex1DFFTImageFilterICD3 in _itkComplexToComplex1DFFTImageFilterPython:
_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3_swigregister(itkComplexToComplex1DFFTImageFilterICD3)
itkComplexToComplex1DFFTImageFilterICD3___New_orig__ = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3___New_orig__
itkComplexToComplex1DFFTImageFilterICD3_cast = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD3_cast


def itkComplexToComplex1DFFTImageFilterICD4_New():
    return itkComplexToComplex1DFFTImageFilterICD4.New()

class itkComplexToComplex1DFFTImageFilterICD4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICD4ICD4):
    r"""Proxy of C++ itkComplexToComplex1DFFTImageFilterICD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4___New_orig__)
    Clone = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4_Clone)
    TransformDirectionType_DIRECT = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4_TransformDirectionType_DIRECT
    
    TransformDirectionType_INVERSE = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4_TransformDirectionType_INVERSE
    
    SetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4_SetTransformDirection)
    GetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4_GetTransformDirection)
    GetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4_GetDirection)
    SetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkComplexToComplex1DFFTImageFilterPython.delete_itkComplexToComplex1DFFTImageFilterICD4
    cast = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4_cast)

    def New(*args, **kargs):
        """New() -> itkComplexToComplex1DFFTImageFilterICD4

        Create a new object of the class itkComplexToComplex1DFFTImageFilterICD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplex1DFFTImageFilterICD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplex1DFFTImageFilterICD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplex1DFFTImageFilterICD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplex1DFFTImageFilterICD4 in _itkComplexToComplex1DFFTImageFilterPython:
_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4_swigregister(itkComplexToComplex1DFFTImageFilterICD4)
itkComplexToComplex1DFFTImageFilterICD4___New_orig__ = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4___New_orig__
itkComplexToComplex1DFFTImageFilterICD4_cast = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICD4_cast


def itkComplexToComplex1DFFTImageFilterICF2_New():
    return itkComplexToComplex1DFFTImageFilterICF2.New()

class itkComplexToComplex1DFFTImageFilterICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2ICF2):
    r"""Proxy of C++ itkComplexToComplex1DFFTImageFilterICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2_Clone)
    TransformDirectionType_DIRECT = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2_TransformDirectionType_DIRECT
    
    TransformDirectionType_INVERSE = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2_TransformDirectionType_INVERSE
    
    SetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2_SetTransformDirection)
    GetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2_GetTransformDirection)
    GetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2_GetDirection)
    SetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkComplexToComplex1DFFTImageFilterPython.delete_itkComplexToComplex1DFFTImageFilterICF2
    cast = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkComplexToComplex1DFFTImageFilterICF2

        Create a new object of the class itkComplexToComplex1DFFTImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplex1DFFTImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplex1DFFTImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplex1DFFTImageFilterICF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplex1DFFTImageFilterICF2 in _itkComplexToComplex1DFFTImageFilterPython:
_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2_swigregister(itkComplexToComplex1DFFTImageFilterICF2)
itkComplexToComplex1DFFTImageFilterICF2___New_orig__ = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2___New_orig__
itkComplexToComplex1DFFTImageFilterICF2_cast = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF2_cast


def itkComplexToComplex1DFFTImageFilterICF3_New():
    return itkComplexToComplex1DFFTImageFilterICF3.New()

class itkComplexToComplex1DFFTImageFilterICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    r"""Proxy of C++ itkComplexToComplex1DFFTImageFilterICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3_Clone)
    TransformDirectionType_DIRECT = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3_TransformDirectionType_DIRECT
    
    TransformDirectionType_INVERSE = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3_TransformDirectionType_INVERSE
    
    SetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3_SetTransformDirection)
    GetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3_GetTransformDirection)
    GetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3_GetDirection)
    SetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkComplexToComplex1DFFTImageFilterPython.delete_itkComplexToComplex1DFFTImageFilterICF3
    cast = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkComplexToComplex1DFFTImageFilterICF3

        Create a new object of the class itkComplexToComplex1DFFTImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplex1DFFTImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplex1DFFTImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplex1DFFTImageFilterICF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplex1DFFTImageFilterICF3 in _itkComplexToComplex1DFFTImageFilterPython:
_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3_swigregister(itkComplexToComplex1DFFTImageFilterICF3)
itkComplexToComplex1DFFTImageFilterICF3___New_orig__ = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3___New_orig__
itkComplexToComplex1DFFTImageFilterICF3_cast = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF3_cast


def itkComplexToComplex1DFFTImageFilterICF4_New():
    return itkComplexToComplex1DFFTImageFilterICF4.New()

class itkComplexToComplex1DFFTImageFilterICF4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF4ICF4):
    r"""Proxy of C++ itkComplexToComplex1DFFTImageFilterICF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4___New_orig__)
    Clone = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4_Clone)
    TransformDirectionType_DIRECT = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4_TransformDirectionType_DIRECT
    
    TransformDirectionType_INVERSE = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4_TransformDirectionType_INVERSE
    
    SetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4_SetTransformDirection)
    GetTransformDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4_GetTransformDirection)
    GetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4_GetDirection)
    SetDirection = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4_SetDirection)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkComplexToComplex1DFFTImageFilterPython.delete_itkComplexToComplex1DFFTImageFilterICF4
    cast = _swig_new_static_method(_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4_cast)

    def New(*args, **kargs):
        """New() -> itkComplexToComplex1DFFTImageFilterICF4

        Create a new object of the class itkComplexToComplex1DFFTImageFilterICF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkComplexToComplex1DFFTImageFilterICF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkComplexToComplex1DFFTImageFilterICF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkComplexToComplex1DFFTImageFilterICF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkComplexToComplex1DFFTImageFilterICF4 in _itkComplexToComplex1DFFTImageFilterPython:
_itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4_swigregister(itkComplexToComplex1DFFTImageFilterICF4)
itkComplexToComplex1DFFTImageFilterICF4___New_orig__ = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4___New_orig__
itkComplexToComplex1DFFTImageFilterICF4_cast = _itkComplexToComplex1DFFTImageFilterPython.itkComplexToComplex1DFFTImageFilterICF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def complex_to_complex1_dfft_image_filter(*args: itkt.ImageLike,  transform_direction=..., direction: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ComplexToComplex1DFFTImageFilter"""
    import itk

    kwarg_typehints = { 'transform_direction':transform_direction,'direction':direction }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ComplexToComplex1DFFTImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def complex_to_complex1_dfft_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKFFT.ComplexToComplex1DFFTImageFilter
    complex_to_complex1_dfft_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    complex_to_complex1_dfft_image_filter.__doc__ = filter_object.__doc__




