# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMetaDataObjectPython
else:
    import _itkMetaDataObjectPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMetaDataObjectPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMetaDataObjectPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython

def itkMetaDataObjectAD_New():
    return itkMetaDataObjectAD.New()

class itkMetaDataObjectAD(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectAD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectAD___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectAD_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectAD_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectAD
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectAD_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectAD

        Create a new object of the class itkMetaDataObjectAD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectAD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectAD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectAD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectAD in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectAD_swigregister(itkMetaDataObjectAD)
itkMetaDataObjectAD___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectAD___New_orig__
itkMetaDataObjectAD_cast = _itkMetaDataObjectPython.itkMetaDataObjectAD_cast


def itkMetaDataObjectAF_New():
    return itkMetaDataObjectAF.New()

class itkMetaDataObjectAF(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectAF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectAF___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectAF_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectAF_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectAF
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectAF_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectAF

        Create a new object of the class itkMetaDataObjectAF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectAF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectAF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectAF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectAF in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectAF_swigregister(itkMetaDataObjectAF)
itkMetaDataObjectAF___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectAF___New_orig__
itkMetaDataObjectAF_cast = _itkMetaDataObjectPython.itkMetaDataObjectAF_cast


def itkMetaDataObjectB_New():
    return itkMetaDataObjectB.New()

class itkMetaDataObjectB(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectB___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectB_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectB_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectB
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectB_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectB

        Create a new object of the class itkMetaDataObjectB and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectB.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectB.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectB.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectB in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectB_swigregister(itkMetaDataObjectB)
itkMetaDataObjectB___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectB___New_orig__
itkMetaDataObjectB_cast = _itkMetaDataObjectPython.itkMetaDataObjectB_cast


def itkMetaDataObjectD_New():
    return itkMetaDataObjectD.New()

class itkMetaDataObjectD(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectD___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectD_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectD_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectD
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectD_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectD

        Create a new object of the class itkMetaDataObjectD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectD in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectD_swigregister(itkMetaDataObjectD)
itkMetaDataObjectD___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectD___New_orig__
itkMetaDataObjectD_cast = _itkMetaDataObjectPython.itkMetaDataObjectD_cast


def itkMetaDataObjectF_New():
    return itkMetaDataObjectF.New()

class itkMetaDataObjectF(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectF___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectF_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectF_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectF
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectF_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectF

        Create a new object of the class itkMetaDataObjectF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectF in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectF_swigregister(itkMetaDataObjectF)
itkMetaDataObjectF___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectF___New_orig__
itkMetaDataObjectF_cast = _itkMetaDataObjectPython.itkMetaDataObjectF_cast


def itkMetaDataObjectS_New():
    return itkMetaDataObjectS.New()

class itkMetaDataObjectS(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectS___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectS_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectS_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectS
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectS_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectS

        Create a new object of the class itkMetaDataObjectS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectS in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectS_swigregister(itkMetaDataObjectS)
itkMetaDataObjectS___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectS___New_orig__
itkMetaDataObjectS_cast = _itkMetaDataObjectPython.itkMetaDataObjectS_cast


def itkMetaDataObjectSI_New():
    return itkMetaDataObjectSI.New()

class itkMetaDataObjectSI(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectSI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectSI___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectSI_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectSI_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectSI
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectSI_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectSI

        Create a new object of the class itkMetaDataObjectSI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectSI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectSI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectSI.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectSI in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectSI_swigregister(itkMetaDataObjectSI)
itkMetaDataObjectSI___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectSI___New_orig__
itkMetaDataObjectSI_cast = _itkMetaDataObjectPython.itkMetaDataObjectSI_cast


def itkMetaDataObjectSS_New():
    return itkMetaDataObjectSS.New()

class itkMetaDataObjectSS(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectSS___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectSS_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectSS_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectSS
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectSS_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectSS

        Create a new object of the class itkMetaDataObjectSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectSS in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectSS_swigregister(itkMetaDataObjectSS)
itkMetaDataObjectSS___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectSS___New_orig__
itkMetaDataObjectSS_cast = _itkMetaDataObjectPython.itkMetaDataObjectSS_cast


def itkMetaDataObjectUI_New():
    return itkMetaDataObjectUI.New()

class itkMetaDataObjectUI(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectUI___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectUI_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectUI_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectUI
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectUI_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectUI

        Create a new object of the class itkMetaDataObjectUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectUI.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectUI.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectUI.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectUI in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectUI_swigregister(itkMetaDataObjectUI)
itkMetaDataObjectUI___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectUI___New_orig__
itkMetaDataObjectUI_cast = _itkMetaDataObjectPython.itkMetaDataObjectUI_cast


def itkMetaDataObjectUL_New():
    return itkMetaDataObjectUL.New()

class itkMetaDataObjectUL(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectUL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectUL___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectUL_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectUL_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectUL
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectUL_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectUL

        Create a new object of the class itkMetaDataObjectUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectUL.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectUL.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectUL.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectUL in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectUL_swigregister(itkMetaDataObjectUL)
itkMetaDataObjectUL___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectUL___New_orig__
itkMetaDataObjectUL_cast = _itkMetaDataObjectPython.itkMetaDataObjectUL_cast


def itkMetaDataObjectUS_New():
    return itkMetaDataObjectUS.New()

class itkMetaDataObjectUS(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectUS___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectUS_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectUS_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectUS
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectUS_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectUS

        Create a new object of the class itkMetaDataObjectUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectUS in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectUS_swigregister(itkMetaDataObjectUS)
itkMetaDataObjectUS___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectUS___New_orig__
itkMetaDataObjectUS_cast = _itkMetaDataObjectPython.itkMetaDataObjectUS_cast


def itkMetaDataObjectmatrixD33_New():
    return itkMetaDataObjectmatrixD33.New()

class itkMetaDataObjectmatrixD33(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectmatrixD33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectmatrixD33___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectmatrixD33_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectmatrixD33_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectmatrixD33
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectmatrixD33_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectmatrixD33

        Create a new object of the class itkMetaDataObjectmatrixD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectmatrixD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectmatrixD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectmatrixD33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectmatrixD33 in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectmatrixD33_swigregister(itkMetaDataObjectmatrixD33)
itkMetaDataObjectmatrixD33___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectmatrixD33___New_orig__
itkMetaDataObjectmatrixD33_cast = _itkMetaDataObjectPython.itkMetaDataObjectmatrixD33_cast


def itkMetaDataObjectmatrixF44_New():
    return itkMetaDataObjectmatrixF44.New()

class itkMetaDataObjectmatrixF44(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectmatrixF44 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectmatrixF44___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectmatrixF44_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectmatrixF44_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectmatrixF44
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectmatrixF44_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectmatrixF44

        Create a new object of the class itkMetaDataObjectmatrixF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectmatrixF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectmatrixF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectmatrixF44.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectmatrixF44 in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectmatrixF44_swigregister(itkMetaDataObjectmatrixF44)
itkMetaDataObjectmatrixF44___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectmatrixF44___New_orig__
itkMetaDataObjectmatrixF44_cast = _itkMetaDataObjectPython.itkMetaDataObjectmatrixF44_cast


def itkMetaDataObjectvectorD_New():
    return itkMetaDataObjectvectorD.New()

class itkMetaDataObjectvectorD(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectvectorD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorD___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorD_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorD_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectvectorD
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorD_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectvectorD

        Create a new object of the class itkMetaDataObjectvectorD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectvectorD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectvectorD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectvectorD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectvectorD in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectvectorD_swigregister(itkMetaDataObjectvectorD)
itkMetaDataObjectvectorD___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectvectorD___New_orig__
itkMetaDataObjectvectorD_cast = _itkMetaDataObjectPython.itkMetaDataObjectvectorD_cast


def itkMetaDataObjectvectorF_New():
    return itkMetaDataObjectvectorF.New()

class itkMetaDataObjectvectorF(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectvectorF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorF___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorF_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorF_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectvectorF
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorF_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectvectorF

        Create a new object of the class itkMetaDataObjectvectorF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectvectorF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectvectorF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectvectorF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectvectorF in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectvectorF_swigregister(itkMetaDataObjectvectorF)
itkMetaDataObjectvectorF___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectvectorF___New_orig__
itkMetaDataObjectvectorF_cast = _itkMetaDataObjectPython.itkMetaDataObjectvectorF_cast


def itkMetaDataObjectvectorvectorD_New():
    return itkMetaDataObjectvectorvectorD.New()

class itkMetaDataObjectvectorvectorD(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectvectorvectorD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorvectorD___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorvectorD_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorvectorD_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectvectorvectorD
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorvectorD_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectvectorvectorD

        Create a new object of the class itkMetaDataObjectvectorvectorD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectvectorvectorD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectvectorvectorD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectvectorvectorD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectvectorvectorD in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectvectorvectorD_swigregister(itkMetaDataObjectvectorvectorD)
itkMetaDataObjectvectorvectorD___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectvectorvectorD___New_orig__
itkMetaDataObjectvectorvectorD_cast = _itkMetaDataObjectPython.itkMetaDataObjectvectorvectorD_cast


def itkMetaDataObjectvectorvectorF_New():
    return itkMetaDataObjectvectorvectorF.New()

class itkMetaDataObjectvectorvectorF(itk.ITKCommonBasePython.itkMetaDataObjectBase):
    r"""Proxy of C++ itkMetaDataObjectvectorvectorF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorvectorF___New_orig__)
    GetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorvectorF_GetMetaDataObjectValue)
    SetMetaDataObjectValue = _swig_new_instance_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorvectorF_SetMetaDataObjectValue)
    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectvectorvectorF
    cast = _swig_new_static_method(_itkMetaDataObjectPython.itkMetaDataObjectvectorvectorF_cast)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectvectorvectorF

        Create a new object of the class itkMetaDataObjectvectorvectorF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMetaDataObjectvectorvectorF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMetaDataObjectvectorvectorF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMetaDataObjectvectorvectorF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMetaDataObjectvectorvectorF in _itkMetaDataObjectPython:
_itkMetaDataObjectPython.itkMetaDataObjectvectorvectorF_swigregister(itkMetaDataObjectvectorvectorF)
itkMetaDataObjectvectorvectorF___New_orig__ = _itkMetaDataObjectPython.itkMetaDataObjectvectorvectorF___New_orig__
itkMetaDataObjectvectorvectorF_cast = _itkMetaDataObjectPython.itkMetaDataObjectvectorvectorF_cast



