# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBilateralImageFilterPython
else:
    import _itkBilateralImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBilateralImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBilateralImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkBilateralImageFilterID2ID2_New():
    return itkBilateralImageFilterID2ID2.New()

class itkBilateralImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkBilateralImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterID2ID2
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterID2ID2

        Create a new object of the class itkBilateralImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterID2ID2 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_swigregister(itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2___New_orig__
itkBilateralImageFilterID2ID2_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_cast


def itkBilateralImageFilterID3ID3_New():
    return itkBilateralImageFilterID3ID3.New()

class itkBilateralImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkBilateralImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterID3ID3
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterID3ID3

        Create a new object of the class itkBilateralImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterID3ID3 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_swigregister(itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3___New_orig__
itkBilateralImageFilterID3ID3_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_cast


def itkBilateralImageFilterID4ID4_New():
    return itkBilateralImageFilterID4ID4.New()

class itkBilateralImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkBilateralImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterID4ID4
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterID4ID4

        Create a new object of the class itkBilateralImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterID4ID4 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_swigregister(itkBilateralImageFilterID4ID4)
itkBilateralImageFilterID4ID4___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4___New_orig__
itkBilateralImageFilterID4ID4_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterID4ID4_cast


def itkBilateralImageFilterIF2IF2_New():
    return itkBilateralImageFilterIF2IF2.New()

class itkBilateralImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkBilateralImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIF2IF2
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIF2IF2

        Create a new object of the class itkBilateralImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIF2IF2 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_swigregister(itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2___New_orig__
itkBilateralImageFilterIF2IF2_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_cast


def itkBilateralImageFilterIF3IF3_New():
    return itkBilateralImageFilterIF3IF3.New()

class itkBilateralImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkBilateralImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIF3IF3
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIF3IF3

        Create a new object of the class itkBilateralImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIF3IF3 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_swigregister(itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3___New_orig__
itkBilateralImageFilterIF3IF3_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_cast


def itkBilateralImageFilterIF4IF4_New():
    return itkBilateralImageFilterIF4IF4.New()

class itkBilateralImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkBilateralImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIF4IF4
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIF4IF4

        Create a new object of the class itkBilateralImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIF4IF4 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_swigregister(itkBilateralImageFilterIF4IF4)
itkBilateralImageFilterIF4IF4___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4___New_orig__
itkBilateralImageFilterIF4IF4_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterIF4IF4_cast


def itkBilateralImageFilterISS2ISS2_New():
    return itkBilateralImageFilterISS2ISS2.New()

class itkBilateralImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkBilateralImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterISS2ISS2

        Create a new object of the class itkBilateralImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterISS2ISS2 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_swigregister(itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2___New_orig__
itkBilateralImageFilterISS2ISS2_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_cast


def itkBilateralImageFilterISS3ISS3_New():
    return itkBilateralImageFilterISS3ISS3.New()

class itkBilateralImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkBilateralImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterISS3ISS3

        Create a new object of the class itkBilateralImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterISS3ISS3 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_swigregister(itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3___New_orig__
itkBilateralImageFilterISS3ISS3_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_cast


def itkBilateralImageFilterISS4ISS4_New():
    return itkBilateralImageFilterISS4ISS4.New()

class itkBilateralImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkBilateralImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterISS4ISS4

        Create a new object of the class itkBilateralImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterISS4ISS4 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_swigregister(itkBilateralImageFilterISS4ISS4)
itkBilateralImageFilterISS4ISS4___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4___New_orig__
itkBilateralImageFilterISS4ISS4_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterISS4ISS4_cast


def itkBilateralImageFilterIUC2IUC2_New():
    return itkBilateralImageFilterIUC2IUC2.New()

class itkBilateralImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkBilateralImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUC2IUC2

        Create a new object of the class itkBilateralImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUC2IUC2 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_swigregister(itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2___New_orig__
itkBilateralImageFilterIUC2IUC2_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_cast


def itkBilateralImageFilterIUC3IUC3_New():
    return itkBilateralImageFilterIUC3IUC3.New()

class itkBilateralImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkBilateralImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUC3IUC3

        Create a new object of the class itkBilateralImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUC3IUC3 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_swigregister(itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3___New_orig__
itkBilateralImageFilterIUC3IUC3_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_cast


def itkBilateralImageFilterIUC4IUC4_New():
    return itkBilateralImageFilterIUC4IUC4.New()

class itkBilateralImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkBilateralImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUC4IUC4

        Create a new object of the class itkBilateralImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUC4IUC4 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_swigregister(itkBilateralImageFilterIUC4IUC4)
itkBilateralImageFilterIUC4IUC4___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4___New_orig__
itkBilateralImageFilterIUC4IUC4_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC4IUC4_cast


def itkBilateralImageFilterIUS2IUS2_New():
    return itkBilateralImageFilterIUS2IUS2.New()

class itkBilateralImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkBilateralImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUS2IUS2

        Create a new object of the class itkBilateralImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUS2IUS2 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_swigregister(itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2___New_orig__
itkBilateralImageFilterIUS2IUS2_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_cast


def itkBilateralImageFilterIUS3IUS3_New():
    return itkBilateralImageFilterIUS3IUS3.New()

class itkBilateralImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkBilateralImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUS3IUS3

        Create a new object of the class itkBilateralImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUS3IUS3 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_swigregister(itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3___New_orig__
itkBilateralImageFilterIUS3IUS3_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_cast


def itkBilateralImageFilterIUS4IUS4_New():
    return itkBilateralImageFilterIUS4IUS4.New()

class itkBilateralImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkBilateralImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_Clone)
    GetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetDomainSigma)
    SetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetDomainMu)
    GetDomainMu = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetDomainMu)
    SetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetRangeSigma)
    GetRangeSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetRangeSigma)
    GetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetFilterDimensionality)
    SetDomainSigma = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetDomainSigma)
    AutomaticKernelSizeOn = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_AutomaticKernelSizeOn)
    AutomaticKernelSizeOff = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_AutomaticKernelSizeOff)
    GetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetAutomaticKernelSize)
    SetAutomaticKernelSize = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetAutomaticKernelSize)
    SetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetRadius)
    SetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_SetNumberOfRangeGaussianSamples)
    GetNumberOfRangeGaussianSamples = _swig_new_instance_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_GetNumberOfRangeGaussianSamples)
    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUS4IUS4

        Create a new object of the class itkBilateralImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBilateralImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBilateralImageFilterIUS4IUS4 in _itkBilateralImageFilterPython:
_itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_swigregister(itkBilateralImageFilterIUS4IUS4)
itkBilateralImageFilterIUS4IUS4___New_orig__ = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4___New_orig__
itkBilateralImageFilterIUS4IUS4_cast = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS4IUS4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def bilateral_image_filter(*args: itkt.ImageLike,  domain_sigma: Union[float, Sequence[float]]=..., domain_mu: float=..., range_sigma: float=..., filter_dimensionality: int=..., automatic_kernel_size: bool=..., radius: Union[int, Sequence[int]]=..., number_of_range_gaussian_samples: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for BilateralImageFilter"""
    import itk

    kwarg_typehints = { 'domain_sigma':domain_sigma,'domain_mu':domain_mu,'range_sigma':range_sigma,'filter_dimensionality':filter_dimensionality,'automatic_kernel_size':automatic_kernel_size,'radius':radius,'number_of_range_gaussian_samples':number_of_range_gaussian_samples }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.BilateralImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def bilateral_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageFeature.BilateralImageFilter
    bilateral_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    bilateral_image_filter.__doc__ = filter_object.__doc__




