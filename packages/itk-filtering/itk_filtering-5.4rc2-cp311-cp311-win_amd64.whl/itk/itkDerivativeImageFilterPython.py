# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDerivativeImageFilterPython
else:
    import _itkDerivativeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDerivativeImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDerivativeImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkDerivativeImageFilterID2ID2_New():
    return itkDerivativeImageFilterID2ID2.New()

class itkDerivativeImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkDerivativeImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_Clone)
    SignedOutputPixelType = _itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_SignedOutputPixelType
    
    SetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_GetOrder)
    SetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_SetDirection)
    GetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_GetDirection)
    SetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_UseImageSpacingOff)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_SetUseImageSpacingOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkDerivativeImageFilterPython.delete_itkDerivativeImageFilterID2ID2
    cast = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDerivativeImageFilterID2ID2

        Create a new object of the class itkDerivativeImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDerivativeImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDerivativeImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDerivativeImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDerivativeImageFilterID2ID2 in _itkDerivativeImageFilterPython:
_itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_swigregister(itkDerivativeImageFilterID2ID2)
itkDerivativeImageFilterID2ID2___New_orig__ = _itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2___New_orig__
itkDerivativeImageFilterID2ID2_cast = _itkDerivativeImageFilterPython.itkDerivativeImageFilterID2ID2_cast


def itkDerivativeImageFilterID3ID3_New():
    return itkDerivativeImageFilterID3ID3.New()

class itkDerivativeImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkDerivativeImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_Clone)
    SignedOutputPixelType = _itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_SignedOutputPixelType
    
    SetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_GetOrder)
    SetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_SetDirection)
    GetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_GetDirection)
    SetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_UseImageSpacingOff)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_SetUseImageSpacingOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkDerivativeImageFilterPython.delete_itkDerivativeImageFilterID3ID3
    cast = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDerivativeImageFilterID3ID3

        Create a new object of the class itkDerivativeImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDerivativeImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDerivativeImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDerivativeImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDerivativeImageFilterID3ID3 in _itkDerivativeImageFilterPython:
_itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_swigregister(itkDerivativeImageFilterID3ID3)
itkDerivativeImageFilterID3ID3___New_orig__ = _itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3___New_orig__
itkDerivativeImageFilterID3ID3_cast = _itkDerivativeImageFilterPython.itkDerivativeImageFilterID3ID3_cast


def itkDerivativeImageFilterID4ID4_New():
    return itkDerivativeImageFilterID4ID4.New()

class itkDerivativeImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkDerivativeImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_Clone)
    SignedOutputPixelType = _itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_SignedOutputPixelType
    
    SetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_SetOrder)
    GetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_GetOrder)
    SetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_SetDirection)
    GetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_GetDirection)
    SetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_UseImageSpacingOff)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_SetUseImageSpacingOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkDerivativeImageFilterPython.delete_itkDerivativeImageFilterID4ID4
    cast = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkDerivativeImageFilterID4ID4

        Create a new object of the class itkDerivativeImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDerivativeImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDerivativeImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDerivativeImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDerivativeImageFilterID4ID4 in _itkDerivativeImageFilterPython:
_itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_swigregister(itkDerivativeImageFilterID4ID4)
itkDerivativeImageFilterID4ID4___New_orig__ = _itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4___New_orig__
itkDerivativeImageFilterID4ID4_cast = _itkDerivativeImageFilterPython.itkDerivativeImageFilterID4ID4_cast


def itkDerivativeImageFilterIF2IF2_New():
    return itkDerivativeImageFilterIF2IF2.New()

class itkDerivativeImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkDerivativeImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_Clone)
    SignedOutputPixelType = _itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_SignedOutputPixelType
    
    SetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_GetOrder)
    SetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_SetDirection)
    GetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_GetDirection)
    SetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_UseImageSpacingOff)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_SetUseImageSpacingOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkDerivativeImageFilterPython.delete_itkDerivativeImageFilterIF2IF2
    cast = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDerivativeImageFilterIF2IF2

        Create a new object of the class itkDerivativeImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDerivativeImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDerivativeImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDerivativeImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDerivativeImageFilterIF2IF2 in _itkDerivativeImageFilterPython:
_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_swigregister(itkDerivativeImageFilterIF2IF2)
itkDerivativeImageFilterIF2IF2___New_orig__ = _itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2___New_orig__
itkDerivativeImageFilterIF2IF2_cast = _itkDerivativeImageFilterPython.itkDerivativeImageFilterIF2IF2_cast


def itkDerivativeImageFilterIF3IF3_New():
    return itkDerivativeImageFilterIF3IF3.New()

class itkDerivativeImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkDerivativeImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_Clone)
    SignedOutputPixelType = _itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_SignedOutputPixelType
    
    SetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_GetOrder)
    SetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_SetDirection)
    GetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_GetDirection)
    SetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_UseImageSpacingOff)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_SetUseImageSpacingOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkDerivativeImageFilterPython.delete_itkDerivativeImageFilterIF3IF3
    cast = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDerivativeImageFilterIF3IF3

        Create a new object of the class itkDerivativeImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDerivativeImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDerivativeImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDerivativeImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDerivativeImageFilterIF3IF3 in _itkDerivativeImageFilterPython:
_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_swigregister(itkDerivativeImageFilterIF3IF3)
itkDerivativeImageFilterIF3IF3___New_orig__ = _itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3___New_orig__
itkDerivativeImageFilterIF3IF3_cast = _itkDerivativeImageFilterPython.itkDerivativeImageFilterIF3IF3_cast


def itkDerivativeImageFilterIF4IF4_New():
    return itkDerivativeImageFilterIF4IF4.New()

class itkDerivativeImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkDerivativeImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_Clone)
    SignedOutputPixelType = _itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_SignedOutputPixelType
    
    SetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_SetOrder)
    GetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_GetOrder)
    SetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_SetDirection)
    GetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_GetDirection)
    SetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_UseImageSpacingOff)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_SetUseImageSpacingOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkDerivativeImageFilterPython.delete_itkDerivativeImageFilterIF4IF4
    cast = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkDerivativeImageFilterIF4IF4

        Create a new object of the class itkDerivativeImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDerivativeImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDerivativeImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDerivativeImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDerivativeImageFilterIF4IF4 in _itkDerivativeImageFilterPython:
_itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_swigregister(itkDerivativeImageFilterIF4IF4)
itkDerivativeImageFilterIF4IF4___New_orig__ = _itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4___New_orig__
itkDerivativeImageFilterIF4IF4_cast = _itkDerivativeImageFilterPython.itkDerivativeImageFilterIF4IF4_cast


def itkDerivativeImageFilterISS2ISS2_New():
    return itkDerivativeImageFilterISS2ISS2.New()

class itkDerivativeImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkDerivativeImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_Clone)
    SignedOutputPixelType = _itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_SignedOutputPixelType
    
    SetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_GetOrder)
    SetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_SetDirection)
    GetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_GetDirection)
    SetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_UseImageSpacingOff)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_SetUseImageSpacingOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkDerivativeImageFilterPython.delete_itkDerivativeImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkDerivativeImageFilterISS2ISS2

        Create a new object of the class itkDerivativeImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDerivativeImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDerivativeImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDerivativeImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDerivativeImageFilterISS2ISS2 in _itkDerivativeImageFilterPython:
_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_swigregister(itkDerivativeImageFilterISS2ISS2)
itkDerivativeImageFilterISS2ISS2___New_orig__ = _itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2___New_orig__
itkDerivativeImageFilterISS2ISS2_cast = _itkDerivativeImageFilterPython.itkDerivativeImageFilterISS2ISS2_cast


def itkDerivativeImageFilterISS3ISS3_New():
    return itkDerivativeImageFilterISS3ISS3.New()

class itkDerivativeImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkDerivativeImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_Clone)
    SignedOutputPixelType = _itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_SignedOutputPixelType
    
    SetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_GetOrder)
    SetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_SetDirection)
    GetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_GetDirection)
    SetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_UseImageSpacingOff)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_SetUseImageSpacingOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkDerivativeImageFilterPython.delete_itkDerivativeImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkDerivativeImageFilterISS3ISS3

        Create a new object of the class itkDerivativeImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDerivativeImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDerivativeImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDerivativeImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDerivativeImageFilterISS3ISS3 in _itkDerivativeImageFilterPython:
_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_swigregister(itkDerivativeImageFilterISS3ISS3)
itkDerivativeImageFilterISS3ISS3___New_orig__ = _itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3___New_orig__
itkDerivativeImageFilterISS3ISS3_cast = _itkDerivativeImageFilterPython.itkDerivativeImageFilterISS3ISS3_cast


def itkDerivativeImageFilterISS4ISS4_New():
    return itkDerivativeImageFilterISS4ISS4.New()

class itkDerivativeImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkDerivativeImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_Clone)
    SignedOutputPixelType = _itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_SignedOutputPixelType
    
    SetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_SetOrder)
    GetOrder = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_GetOrder)
    SetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_SetDirection)
    GetDirection = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_GetDirection)
    SetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_UseImageSpacingOff)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_SetUseImageSpacingOff)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkDerivativeImageFilterPython.delete_itkDerivativeImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkDerivativeImageFilterISS4ISS4

        Create a new object of the class itkDerivativeImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDerivativeImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDerivativeImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDerivativeImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDerivativeImageFilterISS4ISS4 in _itkDerivativeImageFilterPython:
_itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_swigregister(itkDerivativeImageFilterISS4ISS4)
itkDerivativeImageFilterISS4ISS4___New_orig__ = _itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4___New_orig__
itkDerivativeImageFilterISS4ISS4_cast = _itkDerivativeImageFilterPython.itkDerivativeImageFilterISS4ISS4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def derivative_image_filter(*args: itkt.ImageLike,  order: int=..., direction: int=..., use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for DerivativeImageFilter"""
    import itk

    kwarg_typehints = { 'order':order,'direction':direction,'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.DerivativeImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def derivative_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageFeature.DerivativeImageFilter
    derivative_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    derivative_image_filter.__doc__ = filter_object.__doc__




