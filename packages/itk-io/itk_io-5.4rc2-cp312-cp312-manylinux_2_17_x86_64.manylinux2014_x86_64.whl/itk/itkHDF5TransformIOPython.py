# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKIOTransformHDF5Python



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHDF5TransformIOPython
else:
    import _itkHDF5TransformIOPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHDF5TransformIOPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHDF5TransformIOPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkTransformIOBaseTemplatePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
class itkHDF5CommonPathNames(object):
    r"""Proxy of C++ itkHDF5CommonPathNames class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkHDF5TransformIOPython.delete_itkHDF5CommonPathNames

    def __init__(self, *args):
        r"""
        __init__(self) -> itkHDF5CommonPathNames
        __init__(self, arg0) -> itkHDF5CommonPathNames

        Parameters
        ----------
        arg0: itkHDF5CommonPathNames const &

        """
        _itkHDF5TransformIOPython.itkHDF5CommonPathNames_swiginit(self, _itkHDF5TransformIOPython.new_itkHDF5CommonPathNames(*args))

# Register itkHDF5CommonPathNames in _itkHDF5TransformIOPython:
_itkHDF5TransformIOPython.itkHDF5CommonPathNames_swigregister(itkHDF5CommonPathNames)


def itkHDF5TransformIOFactory_New():
    return itkHDF5TransformIOFactory.New()

class itkHDF5TransformIOFactory(itk.ITKCommonBasePython.itkObjectFactoryBase):
    r"""Proxy of C++ itkHDF5TransformIOFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHDF5TransformIOPython.itkHDF5TransformIOFactory___New_orig__)
    RegisterOneFactory = _swig_new_static_method(_itkHDF5TransformIOPython.itkHDF5TransformIOFactory_RegisterOneFactory)
    __swig_destroy__ = _itkHDF5TransformIOPython.delete_itkHDF5TransformIOFactory
    cast = _swig_new_static_method(_itkHDF5TransformIOPython.itkHDF5TransformIOFactory_cast)

    def New(*args, **kargs):
        """New() -> itkHDF5TransformIOFactory

        Create a new object of the class itkHDF5TransformIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHDF5TransformIOFactory.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHDF5TransformIOFactory.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHDF5TransformIOFactory.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHDF5TransformIOFactory in _itkHDF5TransformIOPython:
_itkHDF5TransformIOPython.itkHDF5TransformIOFactory_swigregister(itkHDF5TransformIOFactory)
itkHDF5TransformIOFactory___New_orig__ = _itkHDF5TransformIOPython.itkHDF5TransformIOFactory___New_orig__
itkHDF5TransformIOFactory_RegisterOneFactory = _itkHDF5TransformIOPython.itkHDF5TransformIOFactory_RegisterOneFactory
itkHDF5TransformIOFactory_cast = _itkHDF5TransformIOPython.itkHDF5TransformIOFactory_cast


def itkHDF5TransformIOTemplateD_New():
    return itkHDF5TransformIOTemplateD.New()

class itkHDF5TransformIOTemplateD(itk.itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateD):
    r"""Proxy of C++ itkHDF5TransformIOTemplateD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHDF5TransformIOPython.itkHDF5TransformIOTemplateD___New_orig__)
    Clone = _swig_new_instance_method(_itkHDF5TransformIOPython.itkHDF5TransformIOTemplateD_Clone)
    __swig_destroy__ = _itkHDF5TransformIOPython.delete_itkHDF5TransformIOTemplateD
    cast = _swig_new_static_method(_itkHDF5TransformIOPython.itkHDF5TransformIOTemplateD_cast)

    def New(*args, **kargs):
        """New() -> itkHDF5TransformIOTemplateD

        Create a new object of the class itkHDF5TransformIOTemplateD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHDF5TransformIOTemplateD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHDF5TransformIOTemplateD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHDF5TransformIOTemplateD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHDF5TransformIOTemplateD in _itkHDF5TransformIOPython:
_itkHDF5TransformIOPython.itkHDF5TransformIOTemplateD_swigregister(itkHDF5TransformIOTemplateD)
itkHDF5TransformIOTemplateD___New_orig__ = _itkHDF5TransformIOPython.itkHDF5TransformIOTemplateD___New_orig__
itkHDF5TransformIOTemplateD_cast = _itkHDF5TransformIOPython.itkHDF5TransformIOTemplateD_cast


def itkHDF5TransformIOTemplateF_New():
    return itkHDF5TransformIOTemplateF.New()

class itkHDF5TransformIOTemplateF(itk.itkTransformIOBaseTemplatePython.itkTransformIOBaseTemplateF):
    r"""Proxy of C++ itkHDF5TransformIOTemplateF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHDF5TransformIOPython.itkHDF5TransformIOTemplateF___New_orig__)
    Clone = _swig_new_instance_method(_itkHDF5TransformIOPython.itkHDF5TransformIOTemplateF_Clone)
    __swig_destroy__ = _itkHDF5TransformIOPython.delete_itkHDF5TransformIOTemplateF
    cast = _swig_new_static_method(_itkHDF5TransformIOPython.itkHDF5TransformIOTemplateF_cast)

    def New(*args, **kargs):
        """New() -> itkHDF5TransformIOTemplateF

        Create a new object of the class itkHDF5TransformIOTemplateF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHDF5TransformIOTemplateF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHDF5TransformIOTemplateF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHDF5TransformIOTemplateF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHDF5TransformIOTemplateF in _itkHDF5TransformIOPython:
_itkHDF5TransformIOPython.itkHDF5TransformIOTemplateF_swigregister(itkHDF5TransformIOTemplateF)
itkHDF5TransformIOTemplateF___New_orig__ = _itkHDF5TransformIOPython.itkHDF5TransformIOTemplateF___New_orig__
itkHDF5TransformIOTemplateF_cast = _itkHDF5TransformIOPython.itkHDF5TransformIOTemplateF_cast



