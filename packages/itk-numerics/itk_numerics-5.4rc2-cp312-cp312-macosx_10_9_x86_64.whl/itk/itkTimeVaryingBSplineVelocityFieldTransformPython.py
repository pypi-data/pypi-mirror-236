# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKDisplacementFieldPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTimeVaryingBSplineVelocityFieldTransformPython
else:
    import _itkTimeVaryingBSplineVelocityFieldTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkTimeVaryingBSplineVelocityFieldTransformPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkTimeVaryingBSplineVelocityFieldTransformPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkVelocityFieldTransformPython
import itk.itkTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.ITKCommonBasePython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkVariableLengthVectorPython
import itk.itkDisplacementFieldTransformPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython

def itkTimeVaryingBSplineVelocityFieldTransformD2_New():
    return itkTimeVaryingBSplineVelocityFieldTransformD2.New()

class itkTimeVaryingBSplineVelocityFieldTransformD2(itk.itkVelocityFieldTransformPython.itkVelocityFieldTransformD2):
    r"""Proxy of C++ itkTimeVaryingBSplineVelocityFieldTransformD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_Clone)
    GetTimeVaryingVelocityFieldControlPointLattice = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_GetTimeVaryingVelocityFieldControlPointLattice)
    SetTimeVaryingVelocityFieldControlPointLattice = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_SetTimeVaryingVelocityFieldControlPointLattice)
    UpdateTransformParameters = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_UpdateTransformParameters)
    SetVelocityFieldOrigin = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_SetVelocityFieldOrigin)
    GetVelocityFieldOrigin = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_GetVelocityFieldOrigin)
    SetVelocityFieldSpacing = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_SetVelocityFieldSpacing)
    GetVelocityFieldSpacing = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_GetVelocityFieldSpacing)
    SetVelocityFieldSize = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_SetVelocityFieldSize)
    GetVelocityFieldSize = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_GetVelocityFieldSize)
    SetVelocityFieldDirection = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_SetVelocityFieldDirection)
    GetVelocityFieldDirection = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_GetVelocityFieldDirection)
    SetSplineOrder = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_GetSplineOrder)
    __swig_destroy__ = _itkTimeVaryingBSplineVelocityFieldTransformPython.delete_itkTimeVaryingBSplineVelocityFieldTransformD2
    cast = _swig_new_static_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_cast)

    def New(*args, **kargs):
        """New() -> itkTimeVaryingBSplineVelocityFieldTransformD2

        Create a new object of the class itkTimeVaryingBSplineVelocityFieldTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeVaryingBSplineVelocityFieldTransformD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeVaryingBSplineVelocityFieldTransformD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeVaryingBSplineVelocityFieldTransformD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeVaryingBSplineVelocityFieldTransformD2 in _itkTimeVaryingBSplineVelocityFieldTransformPython:
_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_swigregister(itkTimeVaryingBSplineVelocityFieldTransformD2)
itkTimeVaryingBSplineVelocityFieldTransformD2___New_orig__ = _itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2___New_orig__
itkTimeVaryingBSplineVelocityFieldTransformD2_cast = _itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD2_cast


def itkTimeVaryingBSplineVelocityFieldTransformD3_New():
    return itkTimeVaryingBSplineVelocityFieldTransformD3.New()

class itkTimeVaryingBSplineVelocityFieldTransformD3(itk.itkVelocityFieldTransformPython.itkVelocityFieldTransformD3):
    r"""Proxy of C++ itkTimeVaryingBSplineVelocityFieldTransformD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_Clone)
    GetTimeVaryingVelocityFieldControlPointLattice = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_GetTimeVaryingVelocityFieldControlPointLattice)
    SetTimeVaryingVelocityFieldControlPointLattice = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_SetTimeVaryingVelocityFieldControlPointLattice)
    UpdateTransformParameters = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_UpdateTransformParameters)
    SetVelocityFieldOrigin = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_SetVelocityFieldOrigin)
    GetVelocityFieldOrigin = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_GetVelocityFieldOrigin)
    SetVelocityFieldSpacing = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_SetVelocityFieldSpacing)
    GetVelocityFieldSpacing = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_GetVelocityFieldSpacing)
    SetVelocityFieldSize = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_SetVelocityFieldSize)
    GetVelocityFieldSize = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_GetVelocityFieldSize)
    SetVelocityFieldDirection = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_SetVelocityFieldDirection)
    GetVelocityFieldDirection = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_GetVelocityFieldDirection)
    SetSplineOrder = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_GetSplineOrder)
    __swig_destroy__ = _itkTimeVaryingBSplineVelocityFieldTransformPython.delete_itkTimeVaryingBSplineVelocityFieldTransformD3
    cast = _swig_new_static_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_cast)

    def New(*args, **kargs):
        """New() -> itkTimeVaryingBSplineVelocityFieldTransformD3

        Create a new object of the class itkTimeVaryingBSplineVelocityFieldTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeVaryingBSplineVelocityFieldTransformD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeVaryingBSplineVelocityFieldTransformD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeVaryingBSplineVelocityFieldTransformD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeVaryingBSplineVelocityFieldTransformD3 in _itkTimeVaryingBSplineVelocityFieldTransformPython:
_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_swigregister(itkTimeVaryingBSplineVelocityFieldTransformD3)
itkTimeVaryingBSplineVelocityFieldTransformD3___New_orig__ = _itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3___New_orig__
itkTimeVaryingBSplineVelocityFieldTransformD3_cast = _itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD3_cast


def itkTimeVaryingBSplineVelocityFieldTransformD4_New():
    return itkTimeVaryingBSplineVelocityFieldTransformD4.New()

class itkTimeVaryingBSplineVelocityFieldTransformD4(itk.itkVelocityFieldTransformPython.itkVelocityFieldTransformD4):
    r"""Proxy of C++ itkTimeVaryingBSplineVelocityFieldTransformD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4___New_orig__)
    Clone = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_Clone)
    GetTimeVaryingVelocityFieldControlPointLattice = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_GetTimeVaryingVelocityFieldControlPointLattice)
    SetTimeVaryingVelocityFieldControlPointLattice = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_SetTimeVaryingVelocityFieldControlPointLattice)
    UpdateTransformParameters = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_UpdateTransformParameters)
    SetVelocityFieldOrigin = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_SetVelocityFieldOrigin)
    GetVelocityFieldOrigin = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_GetVelocityFieldOrigin)
    SetVelocityFieldSpacing = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_SetVelocityFieldSpacing)
    GetVelocityFieldSpacing = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_GetVelocityFieldSpacing)
    SetVelocityFieldSize = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_SetVelocityFieldSize)
    GetVelocityFieldSize = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_GetVelocityFieldSize)
    SetVelocityFieldDirection = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_SetVelocityFieldDirection)
    GetVelocityFieldDirection = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_GetVelocityFieldDirection)
    SetSplineOrder = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_GetSplineOrder)
    __swig_destroy__ = _itkTimeVaryingBSplineVelocityFieldTransformPython.delete_itkTimeVaryingBSplineVelocityFieldTransformD4
    cast = _swig_new_static_method(_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_cast)

    def New(*args, **kargs):
        """New() -> itkTimeVaryingBSplineVelocityFieldTransformD4

        Create a new object of the class itkTimeVaryingBSplineVelocityFieldTransformD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTimeVaryingBSplineVelocityFieldTransformD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTimeVaryingBSplineVelocityFieldTransformD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTimeVaryingBSplineVelocityFieldTransformD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTimeVaryingBSplineVelocityFieldTransformD4 in _itkTimeVaryingBSplineVelocityFieldTransformPython:
_itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_swigregister(itkTimeVaryingBSplineVelocityFieldTransformD4)
itkTimeVaryingBSplineVelocityFieldTransformD4___New_orig__ = _itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4___New_orig__
itkTimeVaryingBSplineVelocityFieldTransformD4_cast = _itkTimeVaryingBSplineVelocityFieldTransformPython.itkTimeVaryingBSplineVelocityFieldTransformD4_cast



