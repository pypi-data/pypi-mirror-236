# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKImageStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAccumulateImageFilterPython
else:
    import _itkAccumulateImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAccumulateImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAccumulateImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython

def itkAccumulateImageFilterID2ID2_New():
    return itkAccumulateImageFilterID2ID2.New()

class itkAccumulateImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkAccumulateImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterID2ID2
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterID2ID2

        Create a new object of the class itkAccumulateImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterID2ID2 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_swigregister(itkAccumulateImageFilterID2ID2)
itkAccumulateImageFilterID2ID2___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2___New_orig__
itkAccumulateImageFilterID2ID2_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_cast


def itkAccumulateImageFilterID3ID3_New():
    return itkAccumulateImageFilterID3ID3.New()

class itkAccumulateImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkAccumulateImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterID3ID3
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterID3ID3

        Create a new object of the class itkAccumulateImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterID3ID3 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_swigregister(itkAccumulateImageFilterID3ID3)
itkAccumulateImageFilterID3ID3___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3___New_orig__
itkAccumulateImageFilterID3ID3_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_cast


def itkAccumulateImageFilterID4ID4_New():
    return itkAccumulateImageFilterID4ID4.New()

class itkAccumulateImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkAccumulateImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterID4ID4
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterID4ID4

        Create a new object of the class itkAccumulateImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterID4ID4 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4_swigregister(itkAccumulateImageFilterID4ID4)
itkAccumulateImageFilterID4ID4___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4___New_orig__
itkAccumulateImageFilterID4ID4_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID4ID4_cast


def itkAccumulateImageFilterIF2IF2_New():
    return itkAccumulateImageFilterIF2IF2.New()

class itkAccumulateImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkAccumulateImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIF2IF2
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIF2IF2

        Create a new object of the class itkAccumulateImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterIF2IF2 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_swigregister(itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2___New_orig__
itkAccumulateImageFilterIF2IF2_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_cast


def itkAccumulateImageFilterIF3IF3_New():
    return itkAccumulateImageFilterIF3IF3.New()

class itkAccumulateImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkAccumulateImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIF3IF3
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIF3IF3

        Create a new object of the class itkAccumulateImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterIF3IF3 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_swigregister(itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3___New_orig__
itkAccumulateImageFilterIF3IF3_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_cast


def itkAccumulateImageFilterIF4IF4_New():
    return itkAccumulateImageFilterIF4IF4.New()

class itkAccumulateImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkAccumulateImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIF4IF4
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIF4IF4

        Create a new object of the class itkAccumulateImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterIF4IF4 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4_swigregister(itkAccumulateImageFilterIF4IF4)
itkAccumulateImageFilterIF4IF4___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4___New_orig__
itkAccumulateImageFilterIF4IF4_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF4IF4_cast


def itkAccumulateImageFilterISS2ISS2_New():
    return itkAccumulateImageFilterISS2ISS2.New()

class itkAccumulateImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkAccumulateImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterISS2ISS2

        Create a new object of the class itkAccumulateImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterISS2ISS2 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_swigregister(itkAccumulateImageFilterISS2ISS2)
itkAccumulateImageFilterISS2ISS2___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2___New_orig__
itkAccumulateImageFilterISS2ISS2_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS2ISS2_cast


def itkAccumulateImageFilterISS3ISS3_New():
    return itkAccumulateImageFilterISS3ISS3.New()

class itkAccumulateImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkAccumulateImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterISS3ISS3

        Create a new object of the class itkAccumulateImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterISS3ISS3 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_swigregister(itkAccumulateImageFilterISS3ISS3)
itkAccumulateImageFilterISS3ISS3___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3___New_orig__
itkAccumulateImageFilterISS3ISS3_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS3ISS3_cast


def itkAccumulateImageFilterISS4ISS4_New():
    return itkAccumulateImageFilterISS4ISS4.New()

class itkAccumulateImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkAccumulateImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterISS4ISS4

        Create a new object of the class itkAccumulateImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterISS4ISS4 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4_swigregister(itkAccumulateImageFilterISS4ISS4)
itkAccumulateImageFilterISS4ISS4___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4___New_orig__
itkAccumulateImageFilterISS4ISS4_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterISS4ISS4_cast


def itkAccumulateImageFilterIUC2IUC2_New():
    return itkAccumulateImageFilterIUC2IUC2.New()

class itkAccumulateImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkAccumulateImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUC2IUC2

        Create a new object of the class itkAccumulateImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterIUC2IUC2 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_swigregister(itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2___New_orig__
itkAccumulateImageFilterIUC2IUC2_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_cast


def itkAccumulateImageFilterIUC3IUC3_New():
    return itkAccumulateImageFilterIUC3IUC3.New()

class itkAccumulateImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkAccumulateImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUC3IUC3

        Create a new object of the class itkAccumulateImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterIUC3IUC3 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_swigregister(itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3___New_orig__
itkAccumulateImageFilterIUC3IUC3_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_cast


def itkAccumulateImageFilterIUC4IUC4_New():
    return itkAccumulateImageFilterIUC4IUC4.New()

class itkAccumulateImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkAccumulateImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUC4IUC4

        Create a new object of the class itkAccumulateImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterIUC4IUC4 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4_swigregister(itkAccumulateImageFilterIUC4IUC4)
itkAccumulateImageFilterIUC4IUC4___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4___New_orig__
itkAccumulateImageFilterIUC4IUC4_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC4IUC4_cast


def itkAccumulateImageFilterIUS2IUS2_New():
    return itkAccumulateImageFilterIUS2IUS2.New()

class itkAccumulateImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkAccumulateImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUS2IUS2

        Create a new object of the class itkAccumulateImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterIUS2IUS2 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_swigregister(itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2___New_orig__
itkAccumulateImageFilterIUS2IUS2_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_cast


def itkAccumulateImageFilterIUS3IUS3_New():
    return itkAccumulateImageFilterIUS3IUS3.New()

class itkAccumulateImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkAccumulateImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUS3IUS3

        Create a new object of the class itkAccumulateImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterIUS3IUS3 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_swigregister(itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3___New_orig__
itkAccumulateImageFilterIUS3IUS3_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_cast


def itkAccumulateImageFilterIUS4IUS4_New():
    return itkAccumulateImageFilterIUS4IUS4.New()

class itkAccumulateImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkAccumulateImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4_Clone)
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4_ImageDimensionCheck
    
    GetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4_GetAccumulateDimension)
    SetAccumulateDimension = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4_SetAccumulateDimension)
    SetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4_SetAverage)
    GetAverage = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4_GetAverage)
    AverageOn = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4_AverageOn)
    AverageOff = _swig_new_instance_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4_AverageOff)
    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUS4IUS4

        Create a new object of the class itkAccumulateImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAccumulateImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAccumulateImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAccumulateImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAccumulateImageFilterIUS4IUS4 in _itkAccumulateImageFilterPython:
_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4_swigregister(itkAccumulateImageFilterIUS4IUS4)
itkAccumulateImageFilterIUS4IUS4___New_orig__ = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4___New_orig__
itkAccumulateImageFilterIUS4IUS4_cast = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS4IUS4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def accumulate_image_filter(*args: itkt.ImageLike,  accumulate_dimension: int=..., average: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for AccumulateImageFilter"""
    import itk

    kwarg_typehints = { 'accumulate_dimension':accumulate_dimension,'average':average }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.AccumulateImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def accumulate_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKImageStatistics.AccumulateImageFilter
    accumulate_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    accumulate_image_filter.__doc__ = filter_object.__doc__




