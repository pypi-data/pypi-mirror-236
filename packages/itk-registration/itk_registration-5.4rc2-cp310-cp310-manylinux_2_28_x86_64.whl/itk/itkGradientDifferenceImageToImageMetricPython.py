# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGradientDifferenceImageToImageMetricPython
else:
    import _itkGradientDifferenceImageToImageMetricPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkGradientDifferenceImageToImageMetricPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkGradientDifferenceImageToImageMetricPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.itkImageToImageMetricPython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.ITKCostFunctionsPython
import itk.itkCostFunctionPython
import itk.vnl_least_squares_functionPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkFunctionBasePython
import itk.itkContinuousIndexPython
import itk.itkSpatialObjectBasePython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkMapContainerPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkSpatialObjectPropertyPython

def itkGradientDifferenceImageToImageMetricID2ID2_New():
    return itkGradientDifferenceImageToImageMetricID2ID2.New()

class itkGradientDifferenceImageToImageMetricID2ID2(itk.itkImageToImageMetricPython.itkImageToImageMetricID2ID2):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID2ID2_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID2ID2_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID2ID2_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricID2ID2
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricID2ID2

        Create a new object of the class itkGradientDifferenceImageToImageMetricID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricID2ID2 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID2ID2_swigregister(itkGradientDifferenceImageToImageMetricID2ID2)
itkGradientDifferenceImageToImageMetricID2ID2___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID2ID2___New_orig__
itkGradientDifferenceImageToImageMetricID2ID2_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID2ID2_cast


def itkGradientDifferenceImageToImageMetricID3ID3_New():
    return itkGradientDifferenceImageToImageMetricID3ID3.New()

class itkGradientDifferenceImageToImageMetricID3ID3(itk.itkImageToImageMetricPython.itkImageToImageMetricID3ID3):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID3ID3_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID3ID3_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID3ID3_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricID3ID3
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricID3ID3

        Create a new object of the class itkGradientDifferenceImageToImageMetricID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricID3ID3 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID3ID3_swigregister(itkGradientDifferenceImageToImageMetricID3ID3)
itkGradientDifferenceImageToImageMetricID3ID3___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID3ID3___New_orig__
itkGradientDifferenceImageToImageMetricID3ID3_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID3ID3_cast


def itkGradientDifferenceImageToImageMetricID4ID4_New():
    return itkGradientDifferenceImageToImageMetricID4ID4.New()

class itkGradientDifferenceImageToImageMetricID4ID4(itk.itkImageToImageMetricPython.itkImageToImageMetricID4ID4):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID4ID4_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID4ID4_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID4ID4_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricID4ID4
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricID4ID4

        Create a new object of the class itkGradientDifferenceImageToImageMetricID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricID4ID4 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID4ID4_swigregister(itkGradientDifferenceImageToImageMetricID4ID4)
itkGradientDifferenceImageToImageMetricID4ID4___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID4ID4___New_orig__
itkGradientDifferenceImageToImageMetricID4ID4_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricID4ID4_cast


def itkGradientDifferenceImageToImageMetricIF2IF2_New():
    return itkGradientDifferenceImageToImageMetricIF2IF2.New()

class itkGradientDifferenceImageToImageMetricIF2IF2(itk.itkImageToImageMetricPython.itkImageToImageMetricIF2IF2):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF2IF2_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF2IF2_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF2IF2_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricIF2IF2
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricIF2IF2

        Create a new object of the class itkGradientDifferenceImageToImageMetricIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricIF2IF2 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF2IF2_swigregister(itkGradientDifferenceImageToImageMetricIF2IF2)
itkGradientDifferenceImageToImageMetricIF2IF2___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF2IF2___New_orig__
itkGradientDifferenceImageToImageMetricIF2IF2_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF2IF2_cast


def itkGradientDifferenceImageToImageMetricIF3IF3_New():
    return itkGradientDifferenceImageToImageMetricIF3IF3.New()

class itkGradientDifferenceImageToImageMetricIF3IF3(itk.itkImageToImageMetricPython.itkImageToImageMetricIF3IF3):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF3IF3_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF3IF3_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF3IF3_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricIF3IF3
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricIF3IF3

        Create a new object of the class itkGradientDifferenceImageToImageMetricIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricIF3IF3 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF3IF3_swigregister(itkGradientDifferenceImageToImageMetricIF3IF3)
itkGradientDifferenceImageToImageMetricIF3IF3___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF3IF3___New_orig__
itkGradientDifferenceImageToImageMetricIF3IF3_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF3IF3_cast


def itkGradientDifferenceImageToImageMetricIF4IF4_New():
    return itkGradientDifferenceImageToImageMetricIF4IF4.New()

class itkGradientDifferenceImageToImageMetricIF4IF4(itk.itkImageToImageMetricPython.itkImageToImageMetricIF4IF4):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF4IF4_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF4IF4_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF4IF4_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricIF4IF4
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricIF4IF4

        Create a new object of the class itkGradientDifferenceImageToImageMetricIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricIF4IF4 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF4IF4_swigregister(itkGradientDifferenceImageToImageMetricIF4IF4)
itkGradientDifferenceImageToImageMetricIF4IF4___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF4IF4___New_orig__
itkGradientDifferenceImageToImageMetricIF4IF4_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIF4IF4_cast


def itkGradientDifferenceImageToImageMetricISS2ISS2_New():
    return itkGradientDifferenceImageToImageMetricISS2ISS2.New()

class itkGradientDifferenceImageToImageMetricISS2ISS2(itk.itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS2ISS2_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS2ISS2_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS2ISS2_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricISS2ISS2
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricISS2ISS2

        Create a new object of the class itkGradientDifferenceImageToImageMetricISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricISS2ISS2 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS2ISS2_swigregister(itkGradientDifferenceImageToImageMetricISS2ISS2)
itkGradientDifferenceImageToImageMetricISS2ISS2___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS2ISS2___New_orig__
itkGradientDifferenceImageToImageMetricISS2ISS2_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS2ISS2_cast


def itkGradientDifferenceImageToImageMetricISS3ISS3_New():
    return itkGradientDifferenceImageToImageMetricISS3ISS3.New()

class itkGradientDifferenceImageToImageMetricISS3ISS3(itk.itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS3ISS3_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS3ISS3_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS3ISS3_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricISS3ISS3
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricISS3ISS3

        Create a new object of the class itkGradientDifferenceImageToImageMetricISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricISS3ISS3 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS3ISS3_swigregister(itkGradientDifferenceImageToImageMetricISS3ISS3)
itkGradientDifferenceImageToImageMetricISS3ISS3___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS3ISS3___New_orig__
itkGradientDifferenceImageToImageMetricISS3ISS3_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS3ISS3_cast


def itkGradientDifferenceImageToImageMetricISS4ISS4_New():
    return itkGradientDifferenceImageToImageMetricISS4ISS4.New()

class itkGradientDifferenceImageToImageMetricISS4ISS4(itk.itkImageToImageMetricPython.itkImageToImageMetricISS4ISS4):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS4ISS4_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS4ISS4_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS4ISS4_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricISS4ISS4
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricISS4ISS4

        Create a new object of the class itkGradientDifferenceImageToImageMetricISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricISS4ISS4 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS4ISS4_swigregister(itkGradientDifferenceImageToImageMetricISS4ISS4)
itkGradientDifferenceImageToImageMetricISS4ISS4___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS4ISS4___New_orig__
itkGradientDifferenceImageToImageMetricISS4ISS4_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricISS4ISS4_cast


def itkGradientDifferenceImageToImageMetricIUC2IUC2_New():
    return itkGradientDifferenceImageToImageMetricIUC2IUC2.New()

class itkGradientDifferenceImageToImageMetricIUC2IUC2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC2IUC2_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC2IUC2_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC2IUC2_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricIUC2IUC2
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricIUC2IUC2

        Create a new object of the class itkGradientDifferenceImageToImageMetricIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricIUC2IUC2 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC2IUC2_swigregister(itkGradientDifferenceImageToImageMetricIUC2IUC2)
itkGradientDifferenceImageToImageMetricIUC2IUC2___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC2IUC2___New_orig__
itkGradientDifferenceImageToImageMetricIUC2IUC2_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC2IUC2_cast


def itkGradientDifferenceImageToImageMetricIUC3IUC3_New():
    return itkGradientDifferenceImageToImageMetricIUC3IUC3.New()

class itkGradientDifferenceImageToImageMetricIUC3IUC3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC3IUC3_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC3IUC3_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC3IUC3_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricIUC3IUC3
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricIUC3IUC3

        Create a new object of the class itkGradientDifferenceImageToImageMetricIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricIUC3IUC3 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC3IUC3_swigregister(itkGradientDifferenceImageToImageMetricIUC3IUC3)
itkGradientDifferenceImageToImageMetricIUC3IUC3___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC3IUC3___New_orig__
itkGradientDifferenceImageToImageMetricIUC3IUC3_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC3IUC3_cast


def itkGradientDifferenceImageToImageMetricIUC4IUC4_New():
    return itkGradientDifferenceImageToImageMetricIUC4IUC4.New()

class itkGradientDifferenceImageToImageMetricIUC4IUC4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC4IUC4):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC4IUC4_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC4IUC4_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC4IUC4_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricIUC4IUC4
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricIUC4IUC4

        Create a new object of the class itkGradientDifferenceImageToImageMetricIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricIUC4IUC4 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC4IUC4_swigregister(itkGradientDifferenceImageToImageMetricIUC4IUC4)
itkGradientDifferenceImageToImageMetricIUC4IUC4___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC4IUC4___New_orig__
itkGradientDifferenceImageToImageMetricIUC4IUC4_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUC4IUC4_cast


def itkGradientDifferenceImageToImageMetricIUS2IUS2_New():
    return itkGradientDifferenceImageToImageMetricIUS2IUS2.New()

class itkGradientDifferenceImageToImageMetricIUS2IUS2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS2IUS2):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS2IUS2_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS2IUS2_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS2IUS2_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricIUS2IUS2
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricIUS2IUS2

        Create a new object of the class itkGradientDifferenceImageToImageMetricIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricIUS2IUS2 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS2IUS2_swigregister(itkGradientDifferenceImageToImageMetricIUS2IUS2)
itkGradientDifferenceImageToImageMetricIUS2IUS2___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS2IUS2___New_orig__
itkGradientDifferenceImageToImageMetricIUS2IUS2_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS2IUS2_cast


def itkGradientDifferenceImageToImageMetricIUS3IUS3_New():
    return itkGradientDifferenceImageToImageMetricIUS3IUS3.New()

class itkGradientDifferenceImageToImageMetricIUS3IUS3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS3IUS3):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS3IUS3_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS3IUS3_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS3IUS3_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricIUS3IUS3
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricIUS3IUS3

        Create a new object of the class itkGradientDifferenceImageToImageMetricIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricIUS3IUS3 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS3IUS3_swigregister(itkGradientDifferenceImageToImageMetricIUS3IUS3)
itkGradientDifferenceImageToImageMetricIUS3IUS3___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS3IUS3___New_orig__
itkGradientDifferenceImageToImageMetricIUS3IUS3_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS3IUS3_cast


def itkGradientDifferenceImageToImageMetricIUS4IUS4_New():
    return itkGradientDifferenceImageToImageMetricIUS4IUS4.New()

class itkGradientDifferenceImageToImageMetricIUS4IUS4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS4IUS4):
    r"""Proxy of C++ itkGradientDifferenceImageToImageMetricIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS4IUS4_Clone)
    SetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS4IUS4_SetDerivativeDelta)
    GetDerivativeDelta = _swig_new_instance_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS4IUS4_GetDerivativeDelta)
    __swig_destroy__ = _itkGradientDifferenceImageToImageMetricPython.delete_itkGradientDifferenceImageToImageMetricIUS4IUS4
    cast = _swig_new_static_method(_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkGradientDifferenceImageToImageMetricIUS4IUS4

        Create a new object of the class itkGradientDifferenceImageToImageMetricIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDifferenceImageToImageMetricIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientDifferenceImageToImageMetricIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientDifferenceImageToImageMetricIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientDifferenceImageToImageMetricIUS4IUS4 in _itkGradientDifferenceImageToImageMetricPython:
_itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS4IUS4_swigregister(itkGradientDifferenceImageToImageMetricIUS4IUS4)
itkGradientDifferenceImageToImageMetricIUS4IUS4___New_orig__ = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS4IUS4___New_orig__
itkGradientDifferenceImageToImageMetricIUS4IUS4_cast = _itkGradientDifferenceImageToImageMetricPython.itkGradientDifferenceImageToImageMetricIUS4IUS4_cast



