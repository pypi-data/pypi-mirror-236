# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationMethodsv4Python



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBSplineSyNImageRegistrationMethodPython
else:
    import _itkBSplineSyNImageRegistrationMethodPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBSplineSyNImageRegistrationMethodPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBSplineSyNImageRegistrationMethodPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkDisplacementFieldTransformPython
import itk.itkArray2DPython
import itk.itkTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFixedArrayPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPointSetPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkSpatialObjectBasePython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkSpatialObjectPropertyPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
import itk.itkObjectToObjectOptimizerBasePython
import itk.itkOptimizerParameterScalesEstimatorPython
import itk.itkImageRegistrationMethodv4Python
import itk.itkMeshBasePython
import itk.itkTimeVaryingBSplineVelocityFieldTransformPython
import itk.itkVelocityFieldTransformPython
import itk.itkGaussianSmoothingOnUpdateTimeVaryingVelocityFieldTransformPython
import itk.itkTimeVaryingVelocityFieldTransformPython
import itk.itkTransformParametersAdaptorBasePython

def itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass.New()

class itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_Clone)
    SetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetMovingImage)
    SetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetOptimizer)
    SetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetOptimizerWeights)
    GetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetOptimizerWeights)
    SetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetMetric)
    SetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetMetricSamplingStrategy)
    GetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetMetricSamplingStrategy)
    MetricSamplingReinitializeSeed = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_MetricSamplingReinitializeSeed)
    SetMetricSamplingPercentage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetMetricSamplingPercentage)
    SetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetMetricSamplingPercentagePerLevel)
    GetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetMetricSamplingPercentagePerLevel)
    SetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetFixedInitialTransformInput)
    SetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetFixedInitialTransform)
    GetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetFixedInitialTransformInput)
    GetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetFixedInitialTransform)
    SetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetMovingInitialTransformInput)
    SetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetMovingInitialTransform)
    GetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetMovingInitialTransformInput)
    GetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetMovingInitialTransform)
    SetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetInitialTransformInput)
    SetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetInitialTransform)
    GetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetInitialTransformInput)
    GetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetInitialTransform)
    SetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetTransformParametersAdaptorsPerLevel)
    GetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetTransformParametersAdaptorsPerLevel)
    SetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetNumberOfLevels)
    SetShrinkFactorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetShrinkFactorsPerLevel)
    GetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetShrinkFactorsPerDimension)
    SetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetShrinkFactorsPerDimension)
    SetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetSmoothingSigmasPerLevel)
    GetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetSmoothingSigmasPerLevel)
    SetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    GetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff)
    GetOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetOutput)
    GetTransformOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetTransformOutput)
    GetModifiableTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetTransform)
    GetCurrentLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetCurrentLevel)
    GetCurrentIteration = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetCurrentIteration)
    GetCurrentMetricValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetCurrentMetricValue)
    GetCurrentConvergenceValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetCurrentConvergenceValue)
    GetIsConverged = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetIsConverged)
    SetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_InPlaceOff)
    InitializeCenterOfLinearOutputTransformOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOn)
    InitializeCenterOfLinearOutputTransformOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOff)
    SetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_SetInitializeCenterOfLinearOutputTransform)
    GetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_GetInitializeCenterOfLinearOutputTransform)
    InitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_InitializeCenterOfLinearOutputTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass)
itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass_cast


def itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass.New()

class itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_Clone)
    SetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetMovingImage)
    SetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetOptimizer)
    SetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetOptimizerWeights)
    GetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetOptimizerWeights)
    SetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetMetric)
    SetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetMetricSamplingStrategy)
    GetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetMetricSamplingStrategy)
    MetricSamplingReinitializeSeed = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_MetricSamplingReinitializeSeed)
    SetMetricSamplingPercentage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetMetricSamplingPercentage)
    SetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetMetricSamplingPercentagePerLevel)
    GetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetMetricSamplingPercentagePerLevel)
    SetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetFixedInitialTransformInput)
    SetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetFixedInitialTransform)
    GetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetFixedInitialTransformInput)
    GetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetFixedInitialTransform)
    SetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetMovingInitialTransformInput)
    SetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetMovingInitialTransform)
    GetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetMovingInitialTransformInput)
    GetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetMovingInitialTransform)
    SetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetInitialTransformInput)
    SetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetInitialTransform)
    GetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetInitialTransformInput)
    GetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetInitialTransform)
    SetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetTransformParametersAdaptorsPerLevel)
    GetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetTransformParametersAdaptorsPerLevel)
    SetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetNumberOfLevels)
    SetShrinkFactorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetShrinkFactorsPerLevel)
    GetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetShrinkFactorsPerDimension)
    SetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetShrinkFactorsPerDimension)
    SetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetSmoothingSigmasPerLevel)
    GetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetSmoothingSigmasPerLevel)
    SetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    GetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff)
    GetOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetOutput)
    GetTransformOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetTransformOutput)
    GetModifiableTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetTransform)
    GetCurrentLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetCurrentLevel)
    GetCurrentIteration = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetCurrentIteration)
    GetCurrentMetricValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetCurrentMetricValue)
    GetCurrentConvergenceValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetCurrentConvergenceValue)
    GetIsConverged = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetIsConverged)
    SetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_InPlaceOff)
    InitializeCenterOfLinearOutputTransformOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOn)
    InitializeCenterOfLinearOutputTransformOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOff)
    SetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_SetInitializeCenterOfLinearOutputTransform)
    GetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_GetInitializeCenterOfLinearOutputTransform)
    InitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_InitializeCenterOfLinearOutputTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass)
itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass_cast


def itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass.New()

class itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_Clone)
    SetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetMovingImage)
    SetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetOptimizer)
    SetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetOptimizerWeights)
    GetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetOptimizerWeights)
    SetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetMetric)
    SetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetMetricSamplingStrategy)
    GetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetMetricSamplingStrategy)
    MetricSamplingReinitializeSeed = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_MetricSamplingReinitializeSeed)
    SetMetricSamplingPercentage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetMetricSamplingPercentage)
    SetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetMetricSamplingPercentagePerLevel)
    GetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetMetricSamplingPercentagePerLevel)
    SetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetFixedInitialTransformInput)
    SetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetFixedInitialTransform)
    GetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetFixedInitialTransformInput)
    GetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetFixedInitialTransform)
    SetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetMovingInitialTransformInput)
    SetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetMovingInitialTransform)
    GetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetMovingInitialTransformInput)
    GetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetMovingInitialTransform)
    SetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetInitialTransformInput)
    SetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetInitialTransform)
    GetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetInitialTransformInput)
    GetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetInitialTransform)
    SetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetTransformParametersAdaptorsPerLevel)
    GetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetTransformParametersAdaptorsPerLevel)
    SetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetNumberOfLevels)
    SetShrinkFactorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetShrinkFactorsPerLevel)
    GetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetShrinkFactorsPerDimension)
    SetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetShrinkFactorsPerDimension)
    SetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetSmoothingSigmasPerLevel)
    GetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetSmoothingSigmasPerLevel)
    SetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    GetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff)
    GetOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetOutput)
    GetTransformOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetTransformOutput)
    GetModifiableTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetTransform)
    GetCurrentLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetCurrentLevel)
    GetCurrentIteration = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetCurrentIteration)
    GetCurrentMetricValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetCurrentMetricValue)
    GetCurrentConvergenceValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetCurrentConvergenceValue)
    GetIsConverged = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetIsConverged)
    SetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_InPlaceOff)
    InitializeCenterOfLinearOutputTransformOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOn)
    InitializeCenterOfLinearOutputTransformOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOff)
    SetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_SetInitializeCenterOfLinearOutputTransform)
    GetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_GetInitializeCenterOfLinearOutputTransform)
    InitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_InitializeCenterOfLinearOutputTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass)
itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass_cast


def itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass.New()

class itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_Clone)
    SetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetMovingImage)
    SetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetOptimizer)
    SetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetOptimizerWeights)
    GetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetOptimizerWeights)
    SetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetMetric)
    SetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetMetricSamplingStrategy)
    GetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetMetricSamplingStrategy)
    MetricSamplingReinitializeSeed = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_MetricSamplingReinitializeSeed)
    SetMetricSamplingPercentage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetMetricSamplingPercentage)
    SetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetMetricSamplingPercentagePerLevel)
    GetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetMetricSamplingPercentagePerLevel)
    SetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetFixedInitialTransformInput)
    SetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetFixedInitialTransform)
    GetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetFixedInitialTransformInput)
    GetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetFixedInitialTransform)
    SetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetMovingInitialTransformInput)
    SetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetMovingInitialTransform)
    GetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetMovingInitialTransformInput)
    GetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetMovingInitialTransform)
    SetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetInitialTransformInput)
    SetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetInitialTransform)
    GetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetInitialTransformInput)
    GetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetInitialTransform)
    SetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetTransformParametersAdaptorsPerLevel)
    GetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetTransformParametersAdaptorsPerLevel)
    SetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetNumberOfLevels)
    SetShrinkFactorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetShrinkFactorsPerLevel)
    GetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetShrinkFactorsPerDimension)
    SetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetShrinkFactorsPerDimension)
    SetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetSmoothingSigmasPerLevel)
    GetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetSmoothingSigmasPerLevel)
    SetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    GetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff)
    GetOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetOutput)
    GetTransformOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetTransformOutput)
    GetModifiableTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetTransform)
    GetCurrentLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetCurrentLevel)
    GetCurrentIteration = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetCurrentIteration)
    GetCurrentMetricValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetCurrentMetricValue)
    GetCurrentConvergenceValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetCurrentConvergenceValue)
    GetIsConverged = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetIsConverged)
    SetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_InPlaceOff)
    InitializeCenterOfLinearOutputTransformOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOn)
    InitializeCenterOfLinearOutputTransformOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOff)
    SetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_SetInitializeCenterOfLinearOutputTransform)
    GetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_GetInitializeCenterOfLinearOutputTransform)
    InitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_InitializeCenterOfLinearOutputTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass)
itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass_cast


def itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass.New()

class itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_Clone)
    SetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetMovingImage)
    SetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetOptimizer)
    SetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetOptimizerWeights)
    GetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetOptimizerWeights)
    SetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetMetric)
    SetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetMetricSamplingStrategy)
    GetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetMetricSamplingStrategy)
    MetricSamplingReinitializeSeed = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_MetricSamplingReinitializeSeed)
    SetMetricSamplingPercentage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetMetricSamplingPercentage)
    SetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetMetricSamplingPercentagePerLevel)
    GetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetMetricSamplingPercentagePerLevel)
    SetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetFixedInitialTransformInput)
    SetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetFixedInitialTransform)
    GetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetFixedInitialTransformInput)
    GetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetFixedInitialTransform)
    SetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetMovingInitialTransformInput)
    SetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetMovingInitialTransform)
    GetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetMovingInitialTransformInput)
    GetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetMovingInitialTransform)
    SetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetInitialTransformInput)
    SetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetInitialTransform)
    GetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetInitialTransformInput)
    GetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetInitialTransform)
    SetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetTransformParametersAdaptorsPerLevel)
    GetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetTransformParametersAdaptorsPerLevel)
    SetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetNumberOfLevels)
    SetShrinkFactorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetShrinkFactorsPerLevel)
    GetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetShrinkFactorsPerDimension)
    SetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetShrinkFactorsPerDimension)
    SetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetSmoothingSigmasPerLevel)
    GetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetSmoothingSigmasPerLevel)
    SetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    GetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff)
    GetOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetOutput)
    GetTransformOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetTransformOutput)
    GetModifiableTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetTransform)
    GetCurrentLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetCurrentLevel)
    GetCurrentIteration = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetCurrentIteration)
    GetCurrentMetricValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetCurrentMetricValue)
    GetCurrentConvergenceValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetCurrentConvergenceValue)
    GetIsConverged = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetIsConverged)
    SetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_InPlaceOff)
    InitializeCenterOfLinearOutputTransformOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOn)
    InitializeCenterOfLinearOutputTransformOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOff)
    SetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_SetInitializeCenterOfLinearOutputTransform)
    GetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_GetInitializeCenterOfLinearOutputTransform)
    InitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_InitializeCenterOfLinearOutputTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass)
itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass_cast


def itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass.New()

class itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_Clone)
    SetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetMovingImage)
    SetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetOptimizer)
    SetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetOptimizerWeights)
    GetOptimizerWeights = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetOptimizerWeights)
    SetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetMetric)
    SetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetMetricSamplingStrategy)
    GetMetricSamplingStrategy = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetMetricSamplingStrategy)
    MetricSamplingReinitializeSeed = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_MetricSamplingReinitializeSeed)
    SetMetricSamplingPercentage = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetMetricSamplingPercentage)
    SetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetMetricSamplingPercentagePerLevel)
    GetMetricSamplingPercentagePerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetMetricSamplingPercentagePerLevel)
    SetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetFixedInitialTransformInput)
    SetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetFixedInitialTransform)
    GetFixedInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetFixedInitialTransformInput)
    GetFixedInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetFixedInitialTransform)
    SetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetMovingInitialTransformInput)
    SetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetMovingInitialTransform)
    GetMovingInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetMovingInitialTransformInput)
    GetMovingInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetMovingInitialTransform)
    SetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetInitialTransformInput)
    SetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetInitialTransform)
    GetInitialTransformInput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetInitialTransformInput)
    GetInitialTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetInitialTransform)
    SetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetTransformParametersAdaptorsPerLevel)
    GetTransformParametersAdaptorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetTransformParametersAdaptorsPerLevel)
    SetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetNumberOfLevels)
    SetShrinkFactorsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetShrinkFactorsPerLevel)
    GetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetShrinkFactorsPerDimension)
    SetShrinkFactorsPerDimension = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetShrinkFactorsPerDimension)
    SetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetSmoothingSigmasPerLevel)
    GetSmoothingSigmasPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetSmoothingSigmasPerLevel)
    SetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    GetSmoothingSigmasAreSpecifiedInPhysicalUnits = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetSmoothingSigmasAreSpecifiedInPhysicalUnits)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOn)
    SmoothingSigmasAreSpecifiedInPhysicalUnitsOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SmoothingSigmasAreSpecifiedInPhysicalUnitsOff)
    GetOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetOutput)
    GetTransformOutput = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetTransformOutput)
    GetModifiableTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetTransform)
    GetCurrentLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetCurrentLevel)
    GetCurrentIteration = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetCurrentIteration)
    GetCurrentMetricValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetCurrentMetricValue)
    GetCurrentConvergenceValue = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetCurrentConvergenceValue)
    GetIsConverged = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetIsConverged)
    SetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetInPlace)
    GetInPlace = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetInPlace)
    InPlaceOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_InPlaceOn)
    InPlaceOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_InPlaceOff)
    InitializeCenterOfLinearOutputTransformOn = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOn)
    InitializeCenterOfLinearOutputTransformOff = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_InitializeCenterOfLinearOutputTransformOff)
    SetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_SetInitializeCenterOfLinearOutputTransform)
    GetInitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_GetInitializeCenterOfLinearOutputTransform)
    InitializeCenterOfLinearOutputTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_InitializeCenterOfLinearOutputTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass)
itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass_cast


def itkBSplineSyNImageRegistrationMethodD2D2_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodD2D2_Superclass.New()

class itkBSplineSyNImageRegistrationMethodD2D2_Superclass(itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodD2D2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_Clone)
    SetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodD2D2_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodD2D2_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodD2D2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodD2D2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodD2D2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodD2D2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodD2D2_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodD2D2_Superclass)
itkBSplineSyNImageRegistrationMethodD2D2_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodD2D2_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Superclass_cast


def itkBSplineSyNImageRegistrationMethodD3D3_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodD3D3_Superclass.New()

class itkBSplineSyNImageRegistrationMethodD3D3_Superclass(itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodD3D3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_Clone)
    SetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodD3D3_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodD3D3_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodD3D3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodD3D3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodD3D3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodD3D3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodD3D3_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodD3D3_Superclass)
itkBSplineSyNImageRegistrationMethodD3D3_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodD3D3_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Superclass_cast


def itkBSplineSyNImageRegistrationMethodD4D4_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodD4D4_Superclass.New()

class itkBSplineSyNImageRegistrationMethodD4D4_Superclass(itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodD4D4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_Clone)
    SetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodD4D4_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodD4D4_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodD4D4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodD4D4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodD4D4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodD4D4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodD4D4_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodD4D4_Superclass)
itkBSplineSyNImageRegistrationMethodD4D4_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodD4D4_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Superclass_cast


def itkBSplineSyNImageRegistrationMethodF2F2_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodF2F2_Superclass.New()

class itkBSplineSyNImageRegistrationMethodF2F2_Superclass(itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodF2F2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_Clone)
    SetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodF2F2_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodF2F2_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodF2F2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodF2F2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodF2F2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodF2F2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodF2F2_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodF2F2_Superclass)
itkBSplineSyNImageRegistrationMethodF2F2_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodF2F2_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Superclass_cast


def itkBSplineSyNImageRegistrationMethodF3F3_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodF3F3_Superclass.New()

class itkBSplineSyNImageRegistrationMethodF3F3_Superclass(itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodF3F3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_Clone)
    SetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodF3F3_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodF3F3_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodF3F3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodF3F3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodF3F3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodF3F3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodF3F3_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodF3F3_Superclass)
itkBSplineSyNImageRegistrationMethodF3F3_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodF3F3_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Superclass_cast


def itkBSplineSyNImageRegistrationMethodF4F4_Superclass_New():
    return itkBSplineSyNImageRegistrationMethodF4F4_Superclass.New()

class itkBSplineSyNImageRegistrationMethodF4F4_Superclass(itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodF4F4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_Clone)
    SetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodF4F4_Superclass
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodF4F4_Superclass

        Create a new object of the class itkBSplineSyNImageRegistrationMethodF4F4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodF4F4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodF4F4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodF4F4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodF4F4_Superclass in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_swigregister(itkBSplineSyNImageRegistrationMethodF4F4_Superclass)
itkBSplineSyNImageRegistrationMethodF4F4_Superclass___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass___New_orig__
itkBSplineSyNImageRegistrationMethodF4F4_Superclass_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Superclass_cast


def itkBSplineSyNImageRegistrationMethodD2D2_New():
    return itkBSplineSyNImageRegistrationMethodD2D2.New()

class itkBSplineSyNImageRegistrationMethodD2D2(itkBSplineSyNImageRegistrationMethodD2D2_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodD2D2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_Clone)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodD2D2
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodD2D2

        Create a new object of the class itkBSplineSyNImageRegistrationMethodD2D2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodD2D2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodD2D2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodD2D2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodD2D2 in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_swigregister(itkBSplineSyNImageRegistrationMethodD2D2)
itkBSplineSyNImageRegistrationMethodD2D2___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2___New_orig__
itkBSplineSyNImageRegistrationMethodD2D2_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD2D2_cast


def itkBSplineSyNImageRegistrationMethodD3D3_New():
    return itkBSplineSyNImageRegistrationMethodD3D3.New()

class itkBSplineSyNImageRegistrationMethodD3D3(itkBSplineSyNImageRegistrationMethodD3D3_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodD3D3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_Clone)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodD3D3
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodD3D3

        Create a new object of the class itkBSplineSyNImageRegistrationMethodD3D3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodD3D3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodD3D3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodD3D3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodD3D3 in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_swigregister(itkBSplineSyNImageRegistrationMethodD3D3)
itkBSplineSyNImageRegistrationMethodD3D3___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3___New_orig__
itkBSplineSyNImageRegistrationMethodD3D3_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD3D3_cast


def itkBSplineSyNImageRegistrationMethodD4D4_New():
    return itkBSplineSyNImageRegistrationMethodD4D4.New()

class itkBSplineSyNImageRegistrationMethodD4D4(itkBSplineSyNImageRegistrationMethodD4D4_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodD4D4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_Clone)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodD4D4
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodD4D4

        Create a new object of the class itkBSplineSyNImageRegistrationMethodD4D4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodD4D4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodD4D4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodD4D4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodD4D4 in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_swigregister(itkBSplineSyNImageRegistrationMethodD4D4)
itkBSplineSyNImageRegistrationMethodD4D4___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4___New_orig__
itkBSplineSyNImageRegistrationMethodD4D4_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodD4D4_cast


def itkBSplineSyNImageRegistrationMethodF2F2_New():
    return itkBSplineSyNImageRegistrationMethodF2F2.New()

class itkBSplineSyNImageRegistrationMethodF2F2(itkBSplineSyNImageRegistrationMethodF2F2_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodF2F2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_Clone)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodF2F2
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodF2F2

        Create a new object of the class itkBSplineSyNImageRegistrationMethodF2F2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodF2F2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodF2F2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodF2F2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodF2F2 in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_swigregister(itkBSplineSyNImageRegistrationMethodF2F2)
itkBSplineSyNImageRegistrationMethodF2F2___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2___New_orig__
itkBSplineSyNImageRegistrationMethodF2F2_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF2F2_cast


def itkBSplineSyNImageRegistrationMethodF3F3_New():
    return itkBSplineSyNImageRegistrationMethodF3F3.New()

class itkBSplineSyNImageRegistrationMethodF3F3(itkBSplineSyNImageRegistrationMethodF3F3_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodF3F3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_Clone)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodF3F3
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodF3F3

        Create a new object of the class itkBSplineSyNImageRegistrationMethodF3F3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodF3F3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodF3F3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodF3F3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodF3F3 in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_swigregister(itkBSplineSyNImageRegistrationMethodF3F3)
itkBSplineSyNImageRegistrationMethodF3F3___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3___New_orig__
itkBSplineSyNImageRegistrationMethodF3F3_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF3F3_cast


def itkBSplineSyNImageRegistrationMethodF4F4_New():
    return itkBSplineSyNImageRegistrationMethodF4F4.New()

class itkBSplineSyNImageRegistrationMethodF4F4(itkBSplineSyNImageRegistrationMethodF4F4_Superclass):
    r"""Proxy of C++ itkBSplineSyNImageRegistrationMethodF4F4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_Clone)
    __swig_destroy__ = _itkBSplineSyNImageRegistrationMethodPython.delete_itkBSplineSyNImageRegistrationMethodF4F4
    cast = _swig_new_static_method(_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineSyNImageRegistrationMethodF4F4

        Create a new object of the class itkBSplineSyNImageRegistrationMethodF4F4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineSyNImageRegistrationMethodF4F4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineSyNImageRegistrationMethodF4F4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineSyNImageRegistrationMethodF4F4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineSyNImageRegistrationMethodF4F4 in _itkBSplineSyNImageRegistrationMethodPython:
_itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_swigregister(itkBSplineSyNImageRegistrationMethodF4F4)
itkBSplineSyNImageRegistrationMethodF4F4___New_orig__ = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4___New_orig__
itkBSplineSyNImageRegistrationMethodF4F4_cast = _itkBSplineSyNImageRegistrationMethodPython.itkBSplineSyNImageRegistrationMethodF4F4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def b_spline_sy_n_image_registration_method(*args,  learning_rate: float=..., number_of_iterations_per_level: Sequence[int]=..., convergence_threshold: float=..., convergence_window_size: int=..., downsample_images_for_metric_derivatives: bool=..., average_mid_point_gradients: bool=..., gaussian_smoothing_variance_for_the_update_field: float=..., gaussian_smoothing_variance_for_the_total_field: float=..., fixed_to_middle_transform=..., moving_to_middle_transform=..., fixed_image: Union[int, itkt.Image]=..., moving_image: Union[int, itkt.Image]=..., fixed_point_set: Union[int, itkt.PointSet]=..., moving_point_set: Union[int, itkt.PointSet]=..., optimizer=..., optimizer_weights=..., metric=..., metric_sampling_strategy=..., metric_sampling_percentage: float=..., metric_sampling_percentage_per_level: Sequence[float]=..., fixed_initial_transform_input=..., fixed_initial_transform: itkt.Transform=..., moving_initial_transform_input=..., moving_initial_transform: itkt.Transform=..., initial_transform_input=..., initial_transform: itkt.Transform=..., transform_parameters_adaptors_per_level=..., number_of_levels: int=..., shrink_factors_per_level: Sequence[int]=..., shrink_factors_per_dimension: int=..., smoothing_sigmas_per_level: Sequence[float]=..., smoothing_sigmas_are_specified_in_physical_units: bool=..., initialize_center_of_linear_output_transform: bool=...,**kwargs):
    """Functional interface for BSplineSyNImageRegistrationMethod"""
    import itk

    kwarg_typehints = { 'learning_rate':learning_rate,'number_of_iterations_per_level':number_of_iterations_per_level,'convergence_threshold':convergence_threshold,'convergence_window_size':convergence_window_size,'downsample_images_for_metric_derivatives':downsample_images_for_metric_derivatives,'average_mid_point_gradients':average_mid_point_gradients,'gaussian_smoothing_variance_for_the_update_field':gaussian_smoothing_variance_for_the_update_field,'gaussian_smoothing_variance_for_the_total_field':gaussian_smoothing_variance_for_the_total_field,'fixed_to_middle_transform':fixed_to_middle_transform,'moving_to_middle_transform':moving_to_middle_transform,'fixed_image':fixed_image,'moving_image':moving_image,'fixed_point_set':fixed_point_set,'moving_point_set':moving_point_set,'optimizer':optimizer,'optimizer_weights':optimizer_weights,'metric':metric,'metric_sampling_strategy':metric_sampling_strategy,'metric_sampling_percentage':metric_sampling_percentage,'metric_sampling_percentage_per_level':metric_sampling_percentage_per_level,'fixed_initial_transform_input':fixed_initial_transform_input,'fixed_initial_transform':fixed_initial_transform,'moving_initial_transform_input':moving_initial_transform_input,'moving_initial_transform':moving_initial_transform,'initial_transform_input':initial_transform_input,'initial_transform':initial_transform,'transform_parameters_adaptors_per_level':transform_parameters_adaptors_per_level,'number_of_levels':number_of_levels,'shrink_factors_per_level':shrink_factors_per_level,'shrink_factors_per_dimension':shrink_factors_per_dimension,'smoothing_sigmas_per_level':smoothing_sigmas_per_level,'smoothing_sigmas_are_specified_in_physical_units':smoothing_sigmas_are_specified_in_physical_units,'initialize_center_of_linear_output_transform':initialize_center_of_linear_output_transform }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.BSplineSyNImageRegistrationMethod.New(*args, **kwargs)

    return instance.__internal_call__()

def b_spline_sy_n_image_registration_method_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKRegistrationMethodsv4.BSplineSyNImageRegistrationMethod
    b_spline_sy_n_image_registration_method.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    b_spline_sy_n_image_registration_method.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_registration_methodv4(*args,  fixed_image: Union[itkt.Image, int]=..., moving_image: Union[itkt.Image, int]=..., fixed_point_set: Union[int, itkt.PointSet]=..., moving_point_set: Union[int, itkt.PointSet]=..., optimizer=..., optimizer_weights=..., metric=..., metric_sampling_strategy=..., metric_sampling_percentage: float=..., metric_sampling_percentage_per_level: Sequence[float]=..., fixed_initial_transform_input=..., fixed_initial_transform: itkt.Transform=..., moving_initial_transform_input=..., moving_initial_transform: itkt.Transform=..., initial_transform_input=..., initial_transform: itkt.Transform=..., transform_parameters_adaptors_per_level=..., number_of_levels: int=..., shrink_factors_per_level: Sequence[int]=..., shrink_factors_per_dimension: int=..., smoothing_sigmas_per_level: Sequence[float]=..., smoothing_sigmas_are_specified_in_physical_units: bool=..., initialize_center_of_linear_output_transform: bool=...,**kwargs):
    """Functional interface for ImageRegistrationMethodv4"""
    import itk

    kwarg_typehints = { 'fixed_image':fixed_image,'moving_image':moving_image,'fixed_point_set':fixed_point_set,'moving_point_set':moving_point_set,'optimizer':optimizer,'optimizer_weights':optimizer_weights,'metric':metric,'metric_sampling_strategy':metric_sampling_strategy,'metric_sampling_percentage':metric_sampling_percentage,'metric_sampling_percentage_per_level':metric_sampling_percentage_per_level,'fixed_initial_transform_input':fixed_initial_transform_input,'fixed_initial_transform':fixed_initial_transform,'moving_initial_transform_input':moving_initial_transform_input,'moving_initial_transform':moving_initial_transform,'initial_transform_input':initial_transform_input,'initial_transform':initial_transform,'transform_parameters_adaptors_per_level':transform_parameters_adaptors_per_level,'number_of_levels':number_of_levels,'shrink_factors_per_level':shrink_factors_per_level,'shrink_factors_per_dimension':shrink_factors_per_dimension,'smoothing_sigmas_per_level':smoothing_sigmas_per_level,'smoothing_sigmas_are_specified_in_physical_units':smoothing_sigmas_are_specified_in_physical_units,'initialize_center_of_linear_output_transform':initialize_center_of_linear_output_transform }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageRegistrationMethodv4.New(*args, **kwargs)

    return instance.__internal_call__()

def image_registration_methodv4_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKRegistrationMethodsv4.ImageRegistrationMethodv4
    image_registration_methodv4.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_registration_methodv4.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def sy_n_image_registration_method(*args,  learning_rate: float=..., number_of_iterations_per_level: Sequence[int]=..., convergence_threshold: float=..., convergence_window_size: int=..., downsample_images_for_metric_derivatives: bool=..., average_mid_point_gradients: bool=..., gaussian_smoothing_variance_for_the_update_field: float=..., gaussian_smoothing_variance_for_the_total_field: float=..., fixed_to_middle_transform=..., moving_to_middle_transform=..., fixed_image: Union[itkt.Image, int]=..., moving_image: Union[itkt.Image, int]=..., fixed_point_set: Union[int, itkt.PointSet]=..., moving_point_set: Union[int, itkt.PointSet]=..., optimizer=..., optimizer_weights=..., metric=..., metric_sampling_strategy=..., metric_sampling_percentage: float=..., metric_sampling_percentage_per_level: Sequence[float]=..., fixed_initial_transform_input=..., fixed_initial_transform: itkt.Transform=..., moving_initial_transform_input=..., moving_initial_transform: itkt.Transform=..., initial_transform_input=..., initial_transform: itkt.Transform=..., transform_parameters_adaptors_per_level=..., number_of_levels: int=..., shrink_factors_per_level: Sequence[int]=..., shrink_factors_per_dimension: int=..., smoothing_sigmas_per_level: Sequence[float]=..., smoothing_sigmas_are_specified_in_physical_units: bool=..., initialize_center_of_linear_output_transform: bool=...,**kwargs):
    """Functional interface for SyNImageRegistrationMethod"""
    import itk

    kwarg_typehints = { 'learning_rate':learning_rate,'number_of_iterations_per_level':number_of_iterations_per_level,'convergence_threshold':convergence_threshold,'convergence_window_size':convergence_window_size,'downsample_images_for_metric_derivatives':downsample_images_for_metric_derivatives,'average_mid_point_gradients':average_mid_point_gradients,'gaussian_smoothing_variance_for_the_update_field':gaussian_smoothing_variance_for_the_update_field,'gaussian_smoothing_variance_for_the_total_field':gaussian_smoothing_variance_for_the_total_field,'fixed_to_middle_transform':fixed_to_middle_transform,'moving_to_middle_transform':moving_to_middle_transform,'fixed_image':fixed_image,'moving_image':moving_image,'fixed_point_set':fixed_point_set,'moving_point_set':moving_point_set,'optimizer':optimizer,'optimizer_weights':optimizer_weights,'metric':metric,'metric_sampling_strategy':metric_sampling_strategy,'metric_sampling_percentage':metric_sampling_percentage,'metric_sampling_percentage_per_level':metric_sampling_percentage_per_level,'fixed_initial_transform_input':fixed_initial_transform_input,'fixed_initial_transform':fixed_initial_transform,'moving_initial_transform_input':moving_initial_transform_input,'moving_initial_transform':moving_initial_transform,'initial_transform_input':initial_transform_input,'initial_transform':initial_transform,'transform_parameters_adaptors_per_level':transform_parameters_adaptors_per_level,'number_of_levels':number_of_levels,'shrink_factors_per_level':shrink_factors_per_level,'shrink_factors_per_dimension':shrink_factors_per_dimension,'smoothing_sigmas_per_level':smoothing_sigmas_per_level,'smoothing_sigmas_are_specified_in_physical_units':smoothing_sigmas_are_specified_in_physical_units,'initialize_center_of_linear_output_transform':initialize_center_of_linear_output_transform }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SyNImageRegistrationMethod.New(*args, **kwargs)

    return instance.__internal_call__()

def sy_n_image_registration_method_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKRegistrationMethodsv4.SyNImageRegistrationMethod
    sy_n_image_registration_method.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    sy_n_image_registration_method.__doc__ = filter_object.__doc__




