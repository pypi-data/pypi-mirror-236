# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPointsLocatorPython
else:
    import _itkPointsLocatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPointsLocatorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPointsLocatorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkVectorContainerPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkArrayPython

def itkPointsLocatorVCULLPD2_New():
    return itkPointsLocatorVCULLPD2.New()

class itkPointsLocatorVCULLPD2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD2_Clone)
    SetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD2_SetPoints)
    GetModifiablePoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD2_GetModifiablePoints)
    GetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD2_GetPoints)
    Initialize = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD2_Initialize)
    FindClosestPoint = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD2_FindClosestPoint)
    FindClosestNPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD2_FindClosestNPoints)
    FindPointsWithinRadius = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD2_FindPointsWithinRadius)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPD2
    cast = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD2_cast)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPD2

        Create a new object of the class itkPointsLocatorVCULLPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPD2 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPD2_swigregister(itkPointsLocatorVCULLPD2)
itkPointsLocatorVCULLPD2___New_orig__ = _itkPointsLocatorPython.itkPointsLocatorVCULLPD2___New_orig__
itkPointsLocatorVCULLPD2_cast = _itkPointsLocatorPython.itkPointsLocatorVCULLPD2_cast


def itkPointsLocatorVCULLPD3_New():
    return itkPointsLocatorVCULLPD3.New()

class itkPointsLocatorVCULLPD3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD3_Clone)
    SetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD3_SetPoints)
    GetModifiablePoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD3_GetModifiablePoints)
    GetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD3_GetPoints)
    Initialize = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD3_Initialize)
    FindClosestPoint = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD3_FindClosestPoint)
    FindClosestNPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD3_FindClosestNPoints)
    FindPointsWithinRadius = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD3_FindPointsWithinRadius)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPD3
    cast = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD3_cast)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPD3

        Create a new object of the class itkPointsLocatorVCULLPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPD3 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPD3_swigregister(itkPointsLocatorVCULLPD3)
itkPointsLocatorVCULLPD3___New_orig__ = _itkPointsLocatorPython.itkPointsLocatorVCULLPD3___New_orig__
itkPointsLocatorVCULLPD3_cast = _itkPointsLocatorPython.itkPointsLocatorVCULLPD3_cast


def itkPointsLocatorVCULLPD4_New():
    return itkPointsLocatorVCULLPD4.New()

class itkPointsLocatorVCULLPD4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD4___New_orig__)
    Clone = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD4_Clone)
    SetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD4_SetPoints)
    GetModifiablePoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD4_GetModifiablePoints)
    GetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD4_GetPoints)
    Initialize = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD4_Initialize)
    FindClosestPoint = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD4_FindClosestPoint)
    FindClosestNPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD4_FindClosestNPoints)
    FindPointsWithinRadius = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD4_FindPointsWithinRadius)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPD4
    cast = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPD4_cast)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPD4

        Create a new object of the class itkPointsLocatorVCULLPD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPD4 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPD4_swigregister(itkPointsLocatorVCULLPD4)
itkPointsLocatorVCULLPD4___New_orig__ = _itkPointsLocatorPython.itkPointsLocatorVCULLPD4___New_orig__
itkPointsLocatorVCULLPD4_cast = _itkPointsLocatorPython.itkPointsLocatorVCULLPD4_cast


def itkPointsLocatorVCULLPF2_New():
    return itkPointsLocatorVCULLPF2.New()

class itkPointsLocatorVCULLPF2(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF2_Clone)
    SetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF2_SetPoints)
    GetModifiablePoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF2_GetModifiablePoints)
    GetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF2_GetPoints)
    Initialize = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF2_Initialize)
    FindClosestPoint = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF2_FindClosestPoint)
    FindClosestNPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF2_FindClosestNPoints)
    FindPointsWithinRadius = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF2_FindPointsWithinRadius)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPF2
    cast = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF2_cast)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPF2

        Create a new object of the class itkPointsLocatorVCULLPF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPF2 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPF2_swigregister(itkPointsLocatorVCULLPF2)
itkPointsLocatorVCULLPF2___New_orig__ = _itkPointsLocatorPython.itkPointsLocatorVCULLPF2___New_orig__
itkPointsLocatorVCULLPF2_cast = _itkPointsLocatorPython.itkPointsLocatorVCULLPF2_cast


def itkPointsLocatorVCULLPF3_New():
    return itkPointsLocatorVCULLPF3.New()

class itkPointsLocatorVCULLPF3(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF3_Clone)
    SetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF3_SetPoints)
    GetModifiablePoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF3_GetModifiablePoints)
    GetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF3_GetPoints)
    Initialize = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF3_Initialize)
    FindClosestPoint = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF3_FindClosestPoint)
    FindClosestNPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF3_FindClosestNPoints)
    FindPointsWithinRadius = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF3_FindPointsWithinRadius)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPF3
    cast = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF3_cast)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPF3

        Create a new object of the class itkPointsLocatorVCULLPF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPF3 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPF3_swigregister(itkPointsLocatorVCULLPF3)
itkPointsLocatorVCULLPF3___New_orig__ = _itkPointsLocatorPython.itkPointsLocatorVCULLPF3___New_orig__
itkPointsLocatorVCULLPF3_cast = _itkPointsLocatorPython.itkPointsLocatorVCULLPF3_cast


def itkPointsLocatorVCULLPF4_New():
    return itkPointsLocatorVCULLPF4.New()

class itkPointsLocatorVCULLPF4(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkPointsLocatorVCULLPF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF4___New_orig__)
    Clone = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF4_Clone)
    SetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF4_SetPoints)
    GetModifiablePoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF4_GetModifiablePoints)
    GetPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF4_GetPoints)
    Initialize = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF4_Initialize)
    FindClosestPoint = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF4_FindClosestPoint)
    FindClosestNPoints = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF4_FindClosestNPoints)
    FindPointsWithinRadius = _swig_new_instance_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF4_FindPointsWithinRadius)
    __swig_destroy__ = _itkPointsLocatorPython.delete_itkPointsLocatorVCULLPF4
    cast = _swig_new_static_method(_itkPointsLocatorPython.itkPointsLocatorVCULLPF4_cast)

    def New(*args, **kargs):
        """New() -> itkPointsLocatorVCULLPF4

        Create a new object of the class itkPointsLocatorVCULLPF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointsLocatorVCULLPF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointsLocatorVCULLPF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointsLocatorVCULLPF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointsLocatorVCULLPF4 in _itkPointsLocatorPython:
_itkPointsLocatorPython.itkPointsLocatorVCULLPF4_swigregister(itkPointsLocatorVCULLPF4)
itkPointsLocatorVCULLPF4___New_orig__ = _itkPointsLocatorPython.itkPointsLocatorVCULLPF4___New_orig__
itkPointsLocatorVCULLPF4_cast = _itkPointsLocatorPython.itkPointsLocatorVCULLPF4_cast



