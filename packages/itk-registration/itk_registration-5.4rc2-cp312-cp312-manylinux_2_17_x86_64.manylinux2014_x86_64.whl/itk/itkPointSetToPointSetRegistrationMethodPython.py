# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPointSetToPointSetRegistrationMethodPython
else:
    import _itkPointSetToPointSetRegistrationMethodPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPointSetToPointSetRegistrationMethodPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPointSetToPointSetRegistrationMethodPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkPointSetPython
import itk.itkVectorContainerPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.ITKOptimizersBasePython
import itk.ITKCostFunctionsPython
import itk.vnl_least_squares_functionPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkCostFunctionPython
import itk.itkPointSetToPointSetMetricPython

def itkPointSetToPointSetRegistrationMethodREGD2D2_New():
    return itkPointSetToPointSetRegistrationMethodREGD2D2.New()

class itkPointSetToPointSetRegistrationMethodREGD2D2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPointSetToPointSetRegistrationMethodREGD2D2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_Clone)
    SetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_GetMetric)
    SetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_GetTransform)
    SetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_GetLastTransformParameters)
    Initialize = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_Initialize)
    GetOutput = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_GetOutput)
    __swig_destroy__ = _itkPointSetToPointSetRegistrationMethodPython.delete_itkPointSetToPointSetRegistrationMethodREGD2D2
    cast = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetToPointSetRegistrationMethodREGD2D2

        Create a new object of the class itkPointSetToPointSetRegistrationMethodREGD2D2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetToPointSetRegistrationMethodREGD2D2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetToPointSetRegistrationMethodREGD2D2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetToPointSetRegistrationMethodREGD2D2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetToPointSetRegistrationMethodREGD2D2 in _itkPointSetToPointSetRegistrationMethodPython:
_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_swigregister(itkPointSetToPointSetRegistrationMethodREGD2D2)
itkPointSetToPointSetRegistrationMethodREGD2D2___New_orig__ = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2___New_orig__
itkPointSetToPointSetRegistrationMethodREGD2D2_cast = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D2_cast


def itkPointSetToPointSetRegistrationMethodREGD2D3_New():
    return itkPointSetToPointSetRegistrationMethodREGD2D3.New()

class itkPointSetToPointSetRegistrationMethodREGD2D3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPointSetToPointSetRegistrationMethodREGD2D3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_Clone)
    SetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_GetMetric)
    SetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_GetTransform)
    SetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_GetLastTransformParameters)
    Initialize = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_Initialize)
    GetOutput = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_GetOutput)
    __swig_destroy__ = _itkPointSetToPointSetRegistrationMethodPython.delete_itkPointSetToPointSetRegistrationMethodREGD2D3
    cast = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetToPointSetRegistrationMethodREGD2D3

        Create a new object of the class itkPointSetToPointSetRegistrationMethodREGD2D3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetToPointSetRegistrationMethodREGD2D3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetToPointSetRegistrationMethodREGD2D3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetToPointSetRegistrationMethodREGD2D3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetToPointSetRegistrationMethodREGD2D3 in _itkPointSetToPointSetRegistrationMethodPython:
_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_swigregister(itkPointSetToPointSetRegistrationMethodREGD2D3)
itkPointSetToPointSetRegistrationMethodREGD2D3___New_orig__ = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3___New_orig__
itkPointSetToPointSetRegistrationMethodREGD2D3_cast = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD2D3_cast


def itkPointSetToPointSetRegistrationMethodREGD3D3_New():
    return itkPointSetToPointSetRegistrationMethodREGD3D3.New()

class itkPointSetToPointSetRegistrationMethodREGD3D3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPointSetToPointSetRegistrationMethodREGD3D3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_Clone)
    SetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_GetMetric)
    SetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_GetTransform)
    SetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_GetLastTransformParameters)
    Initialize = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_Initialize)
    GetOutput = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_GetOutput)
    __swig_destroy__ = _itkPointSetToPointSetRegistrationMethodPython.delete_itkPointSetToPointSetRegistrationMethodREGD3D3
    cast = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetToPointSetRegistrationMethodREGD3D3

        Create a new object of the class itkPointSetToPointSetRegistrationMethodREGD3D3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetToPointSetRegistrationMethodREGD3D3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetToPointSetRegistrationMethodREGD3D3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetToPointSetRegistrationMethodREGD3D3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetToPointSetRegistrationMethodREGD3D3 in _itkPointSetToPointSetRegistrationMethodPython:
_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_swigregister(itkPointSetToPointSetRegistrationMethodREGD3D3)
itkPointSetToPointSetRegistrationMethodREGD3D3___New_orig__ = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3___New_orig__
itkPointSetToPointSetRegistrationMethodREGD3D3_cast = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD3D3_cast


def itkPointSetToPointSetRegistrationMethodREGD4D4_New():
    return itkPointSetToPointSetRegistrationMethodREGD4D4.New()

class itkPointSetToPointSetRegistrationMethodREGD4D4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPointSetToPointSetRegistrationMethodREGD4D4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_Clone)
    SetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_GetMetric)
    SetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_GetTransform)
    SetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_GetLastTransformParameters)
    Initialize = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_Initialize)
    GetOutput = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_GetOutput)
    __swig_destroy__ = _itkPointSetToPointSetRegistrationMethodPython.delete_itkPointSetToPointSetRegistrationMethodREGD4D4
    cast = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetToPointSetRegistrationMethodREGD4D4

        Create a new object of the class itkPointSetToPointSetRegistrationMethodREGD4D4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetToPointSetRegistrationMethodREGD4D4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetToPointSetRegistrationMethodREGD4D4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetToPointSetRegistrationMethodREGD4D4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetToPointSetRegistrationMethodREGD4D4 in _itkPointSetToPointSetRegistrationMethodPython:
_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_swigregister(itkPointSetToPointSetRegistrationMethodREGD4D4)
itkPointSetToPointSetRegistrationMethodREGD4D4___New_orig__ = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4___New_orig__
itkPointSetToPointSetRegistrationMethodREGD4D4_cast = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGD4D4_cast


def itkPointSetToPointSetRegistrationMethodREGF2F2_New():
    return itkPointSetToPointSetRegistrationMethodREGF2F2.New()

class itkPointSetToPointSetRegistrationMethodREGF2F2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPointSetToPointSetRegistrationMethodREGF2F2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_Clone)
    SetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_GetMetric)
    SetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_GetTransform)
    SetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_GetLastTransformParameters)
    Initialize = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_Initialize)
    GetOutput = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_GetOutput)
    __swig_destroy__ = _itkPointSetToPointSetRegistrationMethodPython.delete_itkPointSetToPointSetRegistrationMethodREGF2F2
    cast = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetToPointSetRegistrationMethodREGF2F2

        Create a new object of the class itkPointSetToPointSetRegistrationMethodREGF2F2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetToPointSetRegistrationMethodREGF2F2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetToPointSetRegistrationMethodREGF2F2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetToPointSetRegistrationMethodREGF2F2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetToPointSetRegistrationMethodREGF2F2 in _itkPointSetToPointSetRegistrationMethodPython:
_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_swigregister(itkPointSetToPointSetRegistrationMethodREGF2F2)
itkPointSetToPointSetRegistrationMethodREGF2F2___New_orig__ = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2___New_orig__
itkPointSetToPointSetRegistrationMethodREGF2F2_cast = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F2_cast


def itkPointSetToPointSetRegistrationMethodREGF2F3_New():
    return itkPointSetToPointSetRegistrationMethodREGF2F3.New()

class itkPointSetToPointSetRegistrationMethodREGF2F3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPointSetToPointSetRegistrationMethodREGF2F3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_Clone)
    SetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_GetMetric)
    SetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_GetTransform)
    SetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_GetLastTransformParameters)
    Initialize = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_Initialize)
    GetOutput = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_GetOutput)
    __swig_destroy__ = _itkPointSetToPointSetRegistrationMethodPython.delete_itkPointSetToPointSetRegistrationMethodREGF2F3
    cast = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetToPointSetRegistrationMethodREGF2F3

        Create a new object of the class itkPointSetToPointSetRegistrationMethodREGF2F3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetToPointSetRegistrationMethodREGF2F3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetToPointSetRegistrationMethodREGF2F3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetToPointSetRegistrationMethodREGF2F3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetToPointSetRegistrationMethodREGF2F3 in _itkPointSetToPointSetRegistrationMethodPython:
_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_swigregister(itkPointSetToPointSetRegistrationMethodREGF2F3)
itkPointSetToPointSetRegistrationMethodREGF2F3___New_orig__ = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3___New_orig__
itkPointSetToPointSetRegistrationMethodREGF2F3_cast = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF2F3_cast


def itkPointSetToPointSetRegistrationMethodREGF3F3_New():
    return itkPointSetToPointSetRegistrationMethodREGF3F3.New()

class itkPointSetToPointSetRegistrationMethodREGF3F3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPointSetToPointSetRegistrationMethodREGF3F3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_Clone)
    SetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_GetMetric)
    SetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_GetTransform)
    SetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_GetLastTransformParameters)
    Initialize = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_Initialize)
    GetOutput = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_GetOutput)
    __swig_destroy__ = _itkPointSetToPointSetRegistrationMethodPython.delete_itkPointSetToPointSetRegistrationMethodREGF3F3
    cast = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetToPointSetRegistrationMethodREGF3F3

        Create a new object of the class itkPointSetToPointSetRegistrationMethodREGF3F3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetToPointSetRegistrationMethodREGF3F3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetToPointSetRegistrationMethodREGF3F3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetToPointSetRegistrationMethodREGF3F3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetToPointSetRegistrationMethodREGF3F3 in _itkPointSetToPointSetRegistrationMethodPython:
_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_swigregister(itkPointSetToPointSetRegistrationMethodREGF3F3)
itkPointSetToPointSetRegistrationMethodREGF3F3___New_orig__ = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3___New_orig__
itkPointSetToPointSetRegistrationMethodREGF3F3_cast = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF3F3_cast


def itkPointSetToPointSetRegistrationMethodREGF4F4_New():
    return itkPointSetToPointSetRegistrationMethodREGF4F4.New()

class itkPointSetToPointSetRegistrationMethodREGF4F4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkPointSetToPointSetRegistrationMethodREGF4F4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4___New_orig__)
    Clone = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_Clone)
    SetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_SetFixedPointSet)
    GetFixedPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_GetFixedPointSet)
    SetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_SetMovingPointSet)
    GetMovingPointSet = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_GetMovingPointSet)
    SetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_GetMetric)
    SetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_GetTransform)
    SetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_GetLastTransformParameters)
    Initialize = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_Initialize)
    GetOutput = _swig_new_instance_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_GetOutput)
    __swig_destroy__ = _itkPointSetToPointSetRegistrationMethodPython.delete_itkPointSetToPointSetRegistrationMethodREGF4F4
    cast = _swig_new_static_method(_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_cast)

    def New(*args, **kargs):
        """New() -> itkPointSetToPointSetRegistrationMethodREGF4F4

        Create a new object of the class itkPointSetToPointSetRegistrationMethodREGF4F4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPointSetToPointSetRegistrationMethodREGF4F4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPointSetToPointSetRegistrationMethodREGF4F4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPointSetToPointSetRegistrationMethodREGF4F4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPointSetToPointSetRegistrationMethodREGF4F4 in _itkPointSetToPointSetRegistrationMethodPython:
_itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_swigregister(itkPointSetToPointSetRegistrationMethodREGF4F4)
itkPointSetToPointSetRegistrationMethodREGF4F4___New_orig__ = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4___New_orig__
itkPointSetToPointSetRegistrationMethodREGF4F4_cast = _itkPointSetToPointSetRegistrationMethodPython.itkPointSetToPointSetRegistrationMethodREGF4F4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def point_set_to_point_set_registration_method(*args,  fixed_point_set: itkt.PointSet=..., moving_point_set: itkt.PointSet=..., optimizer=..., metric=..., transform: itkt.Transform=..., initial_transform_parameters=...,**kwargs):
    """Functional interface for PointSetToPointSetRegistrationMethod"""
    import itk

    kwarg_typehints = { 'fixed_point_set':fixed_point_set,'moving_point_set':moving_point_set,'optimizer':optimizer,'metric':metric,'transform':transform,'initial_transform_parameters':initial_transform_parameters }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.PointSetToPointSetRegistrationMethod.New(*args, **kwargs)

    return instance.__internal_call__()

def point_set_to_point_set_registration_method_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKRegistrationCommon.PointSetToPointSetRegistrationMethod
    point_set_to_point_set_registration_method.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    point_set_to_point_set_registration_method.__doc__ = filter_object.__doc__




