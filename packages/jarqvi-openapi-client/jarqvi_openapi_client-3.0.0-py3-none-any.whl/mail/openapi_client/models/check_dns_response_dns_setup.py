# coding: utf-8

"""
    Liara Mail API Documentaion

    A fully featured mail delivery platform for incoming & outgoing e-mail

    The version of the OpenAPI document: 1.0.0
    Contact: support@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from openapi_client.models.check_dns_response_dns_setup_dkim import CheckDNSResponseDnsSetupDkim
from openapi_client.models.check_dns_response_dns_setup_mx_record import CheckDNSResponseDnsSetupMxRecord
from openapi_client.models.check_dns_response_dns_setup_return_path import CheckDNSResponseDnsSetupReturnPath
from openapi_client.models.check_dns_response_dns_setup_spf import CheckDNSResponseDnsSetupSpf

class CheckDNSResponseDnsSetup(BaseModel):
    """
    CheckDNSResponseDnsSetup
    """
    dkim: Optional[CheckDNSResponseDnsSetupDkim] = None
    mx_record: Optional[CheckDNSResponseDnsSetupMxRecord] = None
    return_path: Optional[CheckDNSResponseDnsSetupReturnPath] = None
    spf: Optional[CheckDNSResponseDnsSetupSpf] = None
    __properties: ClassVar[List[str]] = ["dkim", "mx_record", "return_path", "spf"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CheckDNSResponseDnsSetup:
        """Create an instance of CheckDNSResponseDnsSetup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of dkim
        if self.dkim:
            _dict['dkim'] = self.dkim.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mx_record
        if self.mx_record:
            _dict['mx_record'] = self.mx_record.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_path
        if self.return_path:
            _dict['return_path'] = self.return_path.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spf
        if self.spf:
            _dict['spf'] = self.spf.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CheckDNSResponseDnsSetup:
        """Create an instance of CheckDNSResponseDnsSetup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CheckDNSResponseDnsSetup.model_validate(obj)

        _obj = CheckDNSResponseDnsSetup.model_validate({
            "dkim": CheckDNSResponseDnsSetupDkim.from_dict(obj.get("dkim")) if obj.get("dkim") is not None else None,
            "mx_record": CheckDNSResponseDnsSetupMxRecord.from_dict(obj.get("mx_record")) if obj.get("mx_record") is not None else None,
            "return_path": CheckDNSResponseDnsSetupReturnPath.from_dict(obj.get("return_path")) if obj.get("return_path") is not None else None,
            "spf": CheckDNSResponseDnsSetupSpf.from_dict(obj.get("spf")) if obj.get("spf") is not None else None
        })
        return _obj


