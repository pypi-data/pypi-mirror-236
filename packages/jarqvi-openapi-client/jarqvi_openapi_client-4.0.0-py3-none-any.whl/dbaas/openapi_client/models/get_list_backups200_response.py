# coding: utf-8

"""
    DBaaS

    Manage your databases using our API

    The version of the OpenAPI document: 1.0.0
    Contact: info@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel
from openapi_client.models.get_list_backups200_response_backups_inner import GetListBackups200ResponseBackupsInner

class GetListBackups200Response(BaseModel):
    """
    GetListBackups200Response
    """
    backups: Optional[List[GetListBackups200ResponseBackupsInner]] = None
    __properties: ClassVar[List[str]] = ["backups"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetListBackups200Response:
        """Create an instance of GetListBackups200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in backups (list)
        _items = []
        if self.backups:
            for _item in self.backups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['backups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetListBackups200Response:
        """Create an instance of GetListBackups200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetListBackups200Response.model_validate(obj)

        _obj = GetListBackups200Response.model_validate({
            "backups": [GetListBackups200ResponseBackupsInner.from_dict(_item) for _item in obj.get("backups")] if obj.get("backups") is not None else None
        })
        return _obj


