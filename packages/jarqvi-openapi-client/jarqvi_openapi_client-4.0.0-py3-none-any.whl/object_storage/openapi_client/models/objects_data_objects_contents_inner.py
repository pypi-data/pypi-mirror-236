# coding: utf-8

"""
    Object Storage API Documentaion

    A scalable, reliable, and cost effective Object Storage solution to support your application from liara-cloud

    The version of the OpenAPI document: 1.0.0
    Contact: support@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field

class ObjectsDataObjectsContentsInner(BaseModel):
    """
    ObjectsDataObjectsContentsInner
    """
    key: Optional[StrictStr] = Field(default=None, alias="Key")
    last_modified: Optional[StrictStr] = Field(default=None, alias="LastModified")
    e_tag: Optional[StrictStr] = Field(default=None, alias="ETag")
    checksum_algorithm: Optional[List[Union[str, Any]]] = Field(default=None, alias="ChecksumAlgorithm")
    size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Size")
    storage_class: Optional[StrictStr] = Field(default=None, alias="StorageClass")
    __properties: ClassVar[List[str]] = ["Key", "LastModified", "ETag", "ChecksumAlgorithm", "Size", "StorageClass"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ObjectsDataObjectsContentsInner:
        """Create an instance of ObjectsDataObjectsContentsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ObjectsDataObjectsContentsInner:
        """Create an instance of ObjectsDataObjectsContentsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ObjectsDataObjectsContentsInner.model_validate(obj)

        _obj = ObjectsDataObjectsContentsInner.model_validate({
            "Key": obj.get("Key"),
            "LastModified": obj.get("LastModified"),
            "ETag": obj.get("ETag"),
            "ChecksumAlgorithm": obj.get("ChecksumAlgorithm"),
            "Size": obj.get("Size"),
            "StorageClass": obj.get("StorageClass")
        })
        return _obj


