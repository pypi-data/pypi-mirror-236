# coding: utf-8

"""
    PaaS

    Manage your apps using our API  [wss://api.iran.liara.ir?token=<api-token>&cmd=/bin/bash&project_id=<project-id>]( wss://api.iran.liara.ir?token=<api-token>&cmd=/bin/bash&project_id=<project-id>)  Parameters: - `token`: Your api token in liara - `cmd`: By default /bin/bash - `project_id`: The id of your project in liara  This `WebSocket` endpoint allows `real-time` communication with the projects service hosted at `Liara` You can use `WebSocket protocols` to send and receive data, enabling efficient and low-latency interactions with the projects

    The version of the OpenAPI document: 1.0.0
    Contact: info@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.check_domain_domain_project import CheckDomainDomainProject

class CheckDomainDomain(BaseModel):
    """
    CheckDomainDomain
    """
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    user: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    project: Optional[CheckDomainDomainProject] = None
    status: Optional[StrictStr] = None
    certificates_status: Optional[StrictStr] = Field(default=None, alias="certificatesStatus")
    redirect_to: Optional[StrictStr] = Field(default=None, alias="redirectTo")
    redirect_status: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="redirectStatus")
    updated_at: Optional[StrictStr] = None
    punycode_name: Optional[StrictStr] = Field(default=None, alias="punycodeName")
    verification_code: Optional[StrictStr] = Field(default=None, alias="verificationCode")
    created_at: Optional[StrictStr] = None
    v: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="__v")
    c_name_record: Optional[StrictStr] = Field(default=None, alias="CNameRecord")
    issued_at: Optional[StrictStr] = Field(default=None, alias="issuedAt")
    __properties: ClassVar[List[str]] = ["_id", "user", "name", "type", "project", "status", "certificatesStatus", "redirectTo", "redirectStatus", "updated_at", "punycodeName", "verificationCode", "created_at", "__v", "CNameRecord", "issuedAt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CheckDomainDomain:
        """Create an instance of CheckDomainDomain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CheckDomainDomain:
        """Create an instance of CheckDomainDomain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CheckDomainDomain.model_validate(obj)

        _obj = CheckDomainDomain.model_validate({
            "_id": obj.get("_id"),
            "user": obj.get("user"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "project": CheckDomainDomainProject.from_dict(obj.get("project")) if obj.get("project") is not None else None,
            "status": obj.get("status"),
            "certificatesStatus": obj.get("certificatesStatus"),
            "redirectTo": obj.get("redirectTo"),
            "redirectStatus": obj.get("redirectStatus"),
            "updated_at": obj.get("updated_at"),
            "punycodeName": obj.get("punycodeName"),
            "verificationCode": obj.get("verificationCode"),
            "created_at": obj.get("created_at"),
            "__v": obj.get("__v"),
            "CNameRecord": obj.get("CNameRecord"),
            "issuedAt": obj.get("issuedAt")
        })
        return _obj


