# coding: utf-8

"""
    PaaS

    Manage your apps using our API  [wss://api.iran.liara.ir?token=<api-token>&cmd=/bin/bash&project_id=<project-id>]( wss://api.iran.liara.ir?token=<api-token>&cmd=/bin/bash&project_id=<project-id>)  Parameters: - `token`: Your api token in liara - `cmd`: By default /bin/bash - `project_id`: The id of your project in liara  This `WebSocket` endpoint allows `real-time` communication with the projects service hosted at `Liara` You can use `WebSocket protocols` to send and receive data, enabling efficient and low-latency interactions with the projects

    The version of the OpenAPI document: 1.0.0
    Contact: info@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from openapi_client.models.releases_releases_inner_git_info_author import ReleasesReleasesInnerGitInfoAuthor

class ReleasesReleasesInnerGitInfo(BaseModel):
    """
    ReleasesReleasesInnerGitInfo
    """
    branch: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    commit: Optional[StrictStr] = None
    committed_at: Optional[datetime] = Field(default=None, alias="committedAt")
    remote: Optional[StrictStr] = None
    author: Optional[ReleasesReleasesInnerGitInfoAuthor] = None
    tags: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["branch", "message", "commit", "committedAt", "remote", "author", "tags"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReleasesReleasesInnerGitInfo:
        """Create an instance of ReleasesReleasesInnerGitInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # set to None if branch (nullable) is None
        # and model_fields_set contains the field
        if self.branch is None and "branch" in self.model_fields_set:
            _dict['branch'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if commit (nullable) is None
        # and model_fields_set contains the field
        if self.commit is None and "commit" in self.model_fields_set:
            _dict['commit'] = None

        # set to None if committed_at (nullable) is None
        # and model_fields_set contains the field
        if self.committed_at is None and "committed_at" in self.model_fields_set:
            _dict['committedAt'] = None

        # set to None if remote (nullable) is None
        # and model_fields_set contains the field
        if self.remote is None and "remote" in self.model_fields_set:
            _dict['remote'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReleasesReleasesInnerGitInfo:
        """Create an instance of ReleasesReleasesInnerGitInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReleasesReleasesInnerGitInfo.model_validate(obj)

        _obj = ReleasesReleasesInnerGitInfo.model_validate({
            "branch": obj.get("branch"),
            "message": obj.get("message"),
            "commit": obj.get("commit"),
            "committedAt": obj.get("committedAt"),
            "remote": obj.get("remote"),
            "author": ReleasesReleasesInnerGitInfoAuthor.from_dict(obj.get("author")) if obj.get("author") is not None else None,
            "tags": obj.get("tags")
        })
        return _obj


