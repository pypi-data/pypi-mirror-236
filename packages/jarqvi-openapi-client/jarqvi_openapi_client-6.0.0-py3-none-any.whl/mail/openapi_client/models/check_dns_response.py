# coding: utf-8

"""
    Liara Mail API Documentaion

    A fully featured mail delivery platform for incoming & outgoing e-mail

    The version of the OpenAPI document: 1.0.0
    Contact: support@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.check_dns_response_dns_setup import CheckDNSResponseDnsSetup

class CheckDNSResponse(BaseModel):
    """
    CheckDNSResponse
    """
    dns_setup: Optional[CheckDNSResponseDnsSetup] = None
    user: Optional[StrictStr] = None
    domain: Optional[StrictStr] = None
    records_status: Optional[StrictStr] = Field(default=None, alias="recordsStatus")
    mode: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    check_dns_record: Optional[StrictBool] = Field(default=None, alias="checkDNSRecord")
    created_at: Optional[StrictStr] = Field(default=None, alias="createdAt")
    updated_at: Optional[StrictStr] = Field(default=None, alias="updatedAt")
    id: Optional[StrictStr] = None
    smtp_server: Optional[StrictStr] = None
    smtp_port: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["dns_setup", "user", "domain", "recordsStatus", "mode", "status", "checkDNSRecord", "createdAt", "updatedAt", "id", "smtp_server", "smtp_port"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CheckDNSResponse:
        """Create an instance of CheckDNSResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of dns_setup
        if self.dns_setup:
            _dict['dns_setup'] = self.dns_setup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CheckDNSResponse:
        """Create an instance of CheckDNSResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CheckDNSResponse.model_validate(obj)

        _obj = CheckDNSResponse.model_validate({
            "dns_setup": CheckDNSResponseDnsSetup.from_dict(obj.get("dns_setup")) if obj.get("dns_setup") is not None else None,
            "user": obj.get("user"),
            "domain": obj.get("domain"),
            "recordsStatus": obj.get("recordsStatus"),
            "mode": obj.get("mode"),
            "status": obj.get("status"),
            "checkDNSRecord": obj.get("checkDNSRecord"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "id": obj.get("id"),
            "smtp_server": obj.get("smtp_server"),
            "smtp_port": obj.get("smtp_port")
        })
        return _obj


