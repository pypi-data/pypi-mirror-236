# coding: utf-8

"""
    Liara Mail API Documentaion

    A fully featured mail delivery platform for incoming & outgoing e-mail

    The version of the OpenAPI document: 1.0.0
    Contact: support@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt

class MailServerResponseRateLimitTier(BaseModel):
    """
    MailServerResponseRateLimitTier
    """
    hourly: Optional[Union[StrictFloat, StrictInt]] = None
    daily: Optional[Union[StrictFloat, StrictInt]] = None
    monthly: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["hourly", "daily", "monthly"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MailServerResponseRateLimitTier:
        """Create an instance of MailServerResponseRateLimitTier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MailServerResponseRateLimitTier:
        """Create an instance of MailServerResponseRateLimitTier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MailServerResponseRateLimitTier.model_validate(obj)

        _obj = MailServerResponseRateLimitTier.model_validate({
            "hourly": obj.get("hourly"),
            "daily": obj.get("daily"),
            "monthly": obj.get("monthly")
        })
        return _obj


