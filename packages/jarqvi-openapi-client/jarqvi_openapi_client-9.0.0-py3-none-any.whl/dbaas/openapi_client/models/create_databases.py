# coding: utf-8

"""
    DBaaS

    Manage your databases using our API

    The version of the OpenAPI document: 1.0.0
    Contact: info@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from openapi_client.models.create_databases_options import CreateDatabasesOptions

class CreateDatabases(BaseModel):
    """
    CreateDatabases
    """
    hostname: Optional[StrictStr] = Field(default=None, description="The hostname of databases that you want to create")
    options: Optional[CreateDatabasesOptions] = None
    public_network: Optional[StrictBool] = Field(default=None, description="The publicNetwork of databases that you want to create", alias="publicNetwork")
    type: Optional[StrictStr] = Field(default=None, description="The type of databases that you want to create")
    plan_id: Optional[StrictStr] = Field(default=None, description="The planID of databases that you want to create", alias="planID")
    version: Optional[StrictStr] = Field(default=None, description="The version of databases that you want to create")
    __properties: ClassVar[List[str]] = ["hostname", "options", "publicNetwork", "type", "planID", "version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateDatabases:
        """Create an instance of CreateDatabases from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateDatabases:
        """Create an instance of CreateDatabases from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateDatabases.model_validate(obj)

        _obj = CreateDatabases.model_validate({
            "hostname": obj.get("hostname"),
            "options": CreateDatabasesOptions.from_dict(obj.get("options")) if obj.get("options") is not None else None,
            "publicNetwork": obj.get("publicNetwork"),
            "type": obj.get("type"),
            "planID": obj.get("planID"),
            "version": obj.get("version")
        })
        return _obj


