# coding: utf-8

"""
    DBaaS

    Manage your databases using our API

    The version of the OpenAPI document: 1.0.0
    Contact: info@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field

class DBsDetailsDatabasesInner(BaseModel):
    """
    DBsDetailsDatabasesInner
    """
    dbid: Optional[StrictStr] = Field(default=None, description="The ID of the database", alias="DBId")
    type: Optional[StrictStr] = Field(default=None, description="The type of the database")
    plan_id: Optional[StrictStr] = Field(default=None, description="The plan ID", alias="planID")
    status: Optional[StrictStr] = Field(default=None, description="The status of the database")
    scale: Optional[StrictInt] = Field(default=None, description="The scale of the database")
    hostname: Optional[StrictStr] = Field(default=None, description="The hostname of the database")
    public_network: Optional[StrictBool] = Field(default=None, description="Indicates if the database is on a public network", alias="publicNetwork")
    created_at: Optional[StrictStr] = Field(default=None, description="The creation timestamp of the database")
    internal_port: Optional[StrictInt] = Field(default=None, description="The internal port of the database", alias="internalPort")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the database")
    __properties: ClassVar[List[str]] = ["DBId", "type", "planID", "status", "scale", "hostname", "publicNetwork", "created_at", "internalPort", "id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DBsDetailsDatabasesInner:
        """Create an instance of DBsDetailsDatabasesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DBsDetailsDatabasesInner:
        """Create an instance of DBsDetailsDatabasesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DBsDetailsDatabasesInner.model_validate(obj)

        _obj = DBsDetailsDatabasesInner.model_validate({
            "DBId": obj.get("DBId"),
            "type": obj.get("type"),
            "planID": obj.get("planID"),
            "status": obj.get("status"),
            "scale": obj.get("scale"),
            "hostname": obj.get("hostname"),
            "publicNetwork": obj.get("publicNetwork"),
            "created_at": obj.get("created_at"),
            "internalPort": obj.get("internalPort"),
            "id": obj.get("id")
        })
        return _obj


