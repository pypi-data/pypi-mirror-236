# coding: utf-8

"""
    Liara Mail API Documentaion

    A fully featured mail delivery platform for incoming & outgoing e-mail

    The version of the OpenAPI document: 1.0.0
    Contact: support@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from openapi_client.models.model2 import Model2

class Model3(BaseModel):
    """
    Model3
    """
    html: Optional[StrictStr] = None
    text: Optional[StrictStr] = None
    subject: StrictStr
    to: StrictStr
    var_from: StrictStr = Field(alias="from")
    reply_to: Optional[StrictStr] = Field(default=None, alias="replyTo")
    attachments: Optional[Annotated[List[Model2], Field(max_length=10)]] = None
    __properties: ClassVar[List[str]] = ["html", "text", "subject", "to", "from", "replyTo", "attachments"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Model3:
        """Create an instance of Model3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item in self.attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attachments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Model3:
        """Create an instance of Model3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Model3.model_validate(obj)

        _obj = Model3.model_validate({
            "html": obj.get("html"),
            "text": obj.get("text"),
            "subject": obj.get("subject"),
            "to": obj.get("to"),
            "from": obj.get("from"),
            "replyTo": obj.get("replyTo"),
            "attachments": [Model2.from_dict(_item) for _item in obj.get("attachments")] if obj.get("attachments") is not None else None
        })
        return _obj


