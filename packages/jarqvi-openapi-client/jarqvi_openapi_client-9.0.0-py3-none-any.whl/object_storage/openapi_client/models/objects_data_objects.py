# coding: utf-8

"""
    Object Storage API Documentaion

    A scalable, reliable, and cost effective Object Storage solution to support your application from liara-cloud

    The version of the OpenAPI document: 1.0.0
    Contact: support@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.objects_data_objects_common_prefixes_inner import ObjectsDataObjectsCommonPrefixesInner
from openapi_client.models.objects_data_objects_contents_inner import ObjectsDataObjectsContentsInner

class ObjectsDataObjects(BaseModel):
    """
    ObjectsDataObjects
    """
    is_truncated: Optional[StrictBool] = Field(default=None, alias="IsTruncated")
    contents: Optional[List[ObjectsDataObjectsContentsInner]] = Field(default=None, alias="Contents")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    prefix: Optional[StrictStr] = Field(default=None, alias="Prefix")
    delimiter: Optional[StrictStr] = Field(default=None, alias="Delimiter")
    max_keys: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="MaxKeys")
    common_prefixes: Optional[List[ObjectsDataObjectsCommonPrefixesInner]] = Field(default=None, alias="CommonPrefixes")
    key_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="KeyCount")
    __properties: ClassVar[List[str]] = ["IsTruncated", "Contents", "Name", "Prefix", "Delimiter", "MaxKeys", "CommonPrefixes", "KeyCount"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ObjectsDataObjects:
        """Create an instance of ObjectsDataObjects from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item in self.contents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Contents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in common_prefixes (list)
        _items = []
        if self.common_prefixes:
            for _item in self.common_prefixes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CommonPrefixes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ObjectsDataObjects:
        """Create an instance of ObjectsDataObjects from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ObjectsDataObjects.model_validate(obj)

        _obj = ObjectsDataObjects.model_validate({
            "IsTruncated": obj.get("IsTruncated"),
            "Contents": [ObjectsDataObjectsContentsInner.from_dict(_item) for _item in obj.get("Contents")] if obj.get("Contents") is not None else None,
            "Name": obj.get("Name"),
            "Prefix": obj.get("Prefix"),
            "Delimiter": obj.get("Delimiter"),
            "MaxKeys": obj.get("MaxKeys"),
            "CommonPrefixes": [ObjectsDataObjectsCommonPrefixesInner.from_dict(_item) for _item in obj.get("CommonPrefixes")] if obj.get("CommonPrefixes") is not None else None,
            "KeyCount": obj.get("KeyCount")
        })
        return _obj


