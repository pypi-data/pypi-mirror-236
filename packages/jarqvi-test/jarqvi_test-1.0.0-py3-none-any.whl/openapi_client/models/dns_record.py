# coding: utf-8

"""
    DNS

    Manage dns zones and records

    The version of the OpenAPI document: 1.0.0
    Contact: info@liara.ir
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field

class DnsRecord(BaseModel):
    """
    DnsRecord
    """
    name: Optional[StrictStr] = Field(default=None, description="The name of dns record, \"@\" for zone name(root level), \"*\" for wild card and any valid value with RFC 1123")
    type: Optional[StrictStr] = Field(default=None, description="The type of dns record, valid values: [A, AAAA, TXT, CNAME, ALIAS, MX, SRV, SPF, PTR]")
    ttl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ttl of dns record, is not required, valid values: [120, 180, 300, 600, 900, 1800, 3600, 7200, 18000, 43200, 86400, 172800, 432000]")
    contents: Optional[List[Union[str, Any]]] = Field(default=None, description="Array of content of dns record, change base on type of dns record")
    __properties: ClassVar[List[str]] = ["name", "type", "ttl", "contents"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DnsRecord:
        """Create an instance of DnsRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DnsRecord:
        """Create an instance of DnsRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DnsRecord.model_validate(obj)

        _obj = DnsRecord.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "ttl": obj.get("ttl"),
            "contents": obj.get("contents")
        })
        return _obj


