{"version":3,"file":"lib_index_js.613217a0676eacec00e4.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAyE;AAChC;AACX;AACJ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO;AACrC;AACA;AACA;AACA,2DAA2D,KAAK;AAChE;AACA;AACA,uBAAuB,yDAAU;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,SAAI;AAC/D,iEAAiE,SAAI;AACrE,QAAQ,kFAAgC,uBAAuB,SAAI;AACnE,QAAQ,4FAA0C,uBAAuB,SAAI;AAC7E;AACA;AACA;AACA;AACA,aAAa,wCAAK;AAClB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ,iDAAU;AAClB,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iDAAU;AAClB,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yDAAU;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,IAAI,iDAAU;AACd,mBAAmB;AACnB,KAAK;AACL;AACA;AACA;AACA,uBAAuB,yDAAU;AACjC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,IAAI,iDAAU;AACd,mBAAmB;AACnB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oCAAoC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,YAAY,iDAAU;AACtB,2BAA2B;AAC3B,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oCAAoC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,YAAY,iDAAU;AACtB,2BAA2B;AAC3B,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ,iDAAU;AAClB,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAU;AAC1B,+BAA+B;AAC/B,iBAAiB;AACjB,aAAa,SAAS;AACtB;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;AC7UtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,MAAM;AACN;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC;;AAEtC;AACA;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA,6BAA6B","sources":["webpack://knic-jupyter/./lib/index.js","webpack://knic-jupyter/./node_modules/process/browser.js"],"sourcesContent":["import { INotebookTracker, NotebookActions } from '@jupyterlab/notebook';\nimport { UUID } from '@lumino/coreutils';\nimport { Dexie } from 'dexie';\nimport axios from 'axios';\n/**\n * Supported Jupyter Lab events in knic-jupyter\n */\nconst JUPYTER_LOADED_EVENT = 'JUPYTER_LOADED';\nconst NOTEBOOK_OPENED_EVENT = 'NOTEBOOK_OPENED';\nconst NOTEBOOK_LOADED_EVENT = 'NOTEBOOK_LOADED';\nconst CELL_SELECTED_EVENT = 'CELL_SELECTED';\nconst NOTEBOOK_MODIFIED_EVENT = 'NOTEBOOK_MODIFIED';\nconst CELL_EXECUTION_BEGIN_EVENT = 'CELL_EXECUTION_BEGIN';\nconst CELL_EXECUTED_END_EVENT = 'CELL_EXECUTION_END';\nconst CELL_MODIFIED_EVENT = 'CELL_MODIFIED';\n/**\n * timeoutID for our cell modified event\n */\nlet timeoutID;\n/**\n * Initialization data for knic-jupyter\n */\nconst USE_DEXIE = new Boolean(process.env.USE_DEXIE) || false;\nlet db;\nconst USER = new URLSearchParams(window.location.search).get('userid');\nconst SESSION = new URLSearchParams(window.location.search).get('sessionid');\nconst SERVER_ENDPOINT = `http://localhost:5642/knic/user/${USER}/event`;\nlet ENUMERATION = 0;\nlet NOTEBOOK_NAME = '';\nlet NOTEBOOK_SESSION = UUID.uuid4();\nlet ORIGINAL_CELL_DATA = [];\nlet notebookJustOpened = false;\nconst plugin = {\n    id: 'knic-jupyter:plugin',\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: (app, notebookTracker) => {\n        if (USE_DEXIE) {\n            db = setupDB();\n        }\n        // Log jupyter loaded event\n        onJupyterLoaded();\n        notebookTracker.widgetAdded.connect(onWidgetAdded, this);\n        notebookTracker.activeCellChanged.connect(logActiveCell, this);\n        NotebookActions.executed.connect(onCellExecutionEnded, this);\n        NotebookActions.executionScheduled.connect(onCellExecutionBegin, this);\n    }\n};\nlet timeout = undefined;\nfunction setupDB() {\n    db = new Dexie('database');\n    db.version(1).stores({\n        logs: '++id, eventName, data'\n    });\n    return db;\n}\nfunction toCellData(cellModel) {\n    return {\n        cellId: cellModel.id,\n        type: cellModel.type,\n        metadata: cellModel.metadata,\n        value: cellModel.value.text\n    };\n}\nfunction isCellModified(cellDataExecuted) {\n    if (ORIGINAL_CELL_DATA.some(e => e.value.trim() === cellDataExecuted.value.trim())) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nasync function onCellExecutionBegin(emitter, args) {\n    if ((args === null || args === void 0 ? void 0 : args.cell.model) && args.cell.model.type === 'code') {\n        const model = args.cell.model.toJSON();\n        const event = {\n            eventData: {\n                cell: toCellData(args.cell.model),\n                notebookName: NOTEBOOK_NAME,\n                location: window.location.toString(),\n                executionCount: model.execution_count\n            },\n            enumeration: ENUMERATION++,\n            notebookSession: NOTEBOOK_SESSION,\n            eventName: CELL_EXECUTION_BEGIN_EVENT,\n            user: USER,\n            session: SESSION,\n            timestamp: new Date().toISOString()\n        };\n        if (USE_DEXIE) {\n            await db.table('logs').add({\n                eventName: CELL_EXECUTION_BEGIN_EVENT,\n                data: JSON.stringify(event, null, 2)\n            });\n        }\n        axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n}\nasync function onCellExecutionEnded(emitter, args) {\n    if ((args === null || args === void 0 ? void 0 : args.cell.model) && args.cell.model.type === 'code') {\n        const model = args.cell.model.toJSON();\n        const errors = model.outputs\n            .map((element) => {\n            if (element.output_type === 'error') {\n                const error = element;\n                return {\n                    errorName: error.ename,\n                    errorText: error.evalue,\n                    stackTrace: error.traceback\n                };\n            }\n            return { errorName: '', errorText: '', stackTrace: [] };\n        })\n            .filter(value => {\n            return value.errorName !== '';\n        });\n        const outputs = model.outputs\n            .map((element) => {\n            if (element.output_type === 'stream') {\n                return element.text;\n            }\n            else {\n                return [];\n            }\n        })\n            .filter(value => {\n            return value.length > 0;\n        });\n        const event = {\n            eventData: {\n                cell: toCellData(args.cell.model),\n                notebookName: NOTEBOOK_NAME,\n                location: window.location.toString(),\n                output: outputs,\n                executionCount: model.execution_count,\n                errors: errors\n            },\n            enumeration: ENUMERATION++,\n            notebookSession: NOTEBOOK_SESSION,\n            eventName: CELL_EXECUTED_END_EVENT,\n            session: SESSION,\n            user: USER,\n            timestamp: new Date().toISOString()\n        };\n        axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n}\nasync function onWidgetAdded(emitter, args) {\n    notebookJustOpened = true;\n    args.content.modelContentChanged.connect(onModelContentChanged);\n    ENUMERATION = 0;\n    NOTEBOOK_SESSION = UUID.uuid4();\n    NOTEBOOK_NAME = args.context.path;\n    const event = {\n        eventData: {\n            notebookName: NOTEBOOK_NAME,\n            location: window.location.toString()\n        },\n        user: USER,\n        session: SESSION,\n        enumeration: ENUMERATION++,\n        notebookSession: NOTEBOOK_SESSION,\n        timestamp: new Date().toISOString(),\n        eventName: NOTEBOOK_OPENED_EVENT\n    };\n    if (USE_DEXIE) {\n        await db.table('logs').add({\n            eventName: NOTEBOOK_OPENED_EVENT,\n            data: JSON.stringify(event, null, 2)\n        });\n    }\n    axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n        headers: { 'Content-Type': 'application/json' }\n    });\n}\nasync function onJupyterLoaded() {\n    ENUMERATION = 0;\n    NOTEBOOK_SESSION = UUID.uuid4();\n    const event = {\n        eventData: {\n            location: window.location.toString()\n        },\n        user: USER,\n        session: SESSION,\n        enumeration: ENUMERATION++,\n        notebookSession: NOTEBOOK_SESSION,\n        timestamp: new Date().toISOString(),\n        eventName: JUPYTER_LOADED_EVENT\n    };\n    if (USE_DEXIE) {\n        await db.table('logs').add({\n            eventName: JUPYTER_LOADED_EVENT,\n            data: JSON.stringify(event, null, 2)\n        });\n    }\n    axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n        headers: { 'Content-Type': 'application/json' }\n    });\n}\nasync function onModelContentChanged(emitter) {\n    if (notebookJustOpened) {\n        notebookJustOpened = false;\n        setTimeout(async () => {\n            var _a;\n            const cells = [];\n            if ((_a = emitter.model) === null || _a === void 0 ? void 0 : _a.cells) {\n                for (let index = 0; index < emitter.model.cells.length; index++) {\n                    const cellModel = emitter.model.cells.get(index);\n                    cells.push(toCellData(cellModel));\n                    ORIGINAL_CELL_DATA.push(toCellData(cellModel));\n                }\n            }\n            const event = {\n                eventData: {\n                    notebookName: NOTEBOOK_NAME,\n                    location: window.location.toString(),\n                    cells: cells\n                },\n                enumeration: ENUMERATION++,\n                notebookSession: NOTEBOOK_SESSION,\n                eventName: NOTEBOOK_LOADED_EVENT,\n                user: USER,\n                session: SESSION,\n                timestamp: new Date().toISOString()\n            };\n            if (USE_DEXIE)\n                await db.table('logs').add({\n                    eventName: NOTEBOOK_LOADED_EVENT,\n                    data: JSON.stringify(event, null, 2)\n                });\n            axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }, 1000);\n    }\n    else {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n        timeout = setTimeout(async () => {\n            var _a;\n            const cells = [];\n            if ((_a = emitter.model) === null || _a === void 0 ? void 0 : _a.cells) {\n                for (let index = 0; index < emitter.model.cells.length; index++) {\n                    const cellModel = emitter.model.cells.get(index);\n                    cells.push(toCellData(cellModel));\n                    ORIGINAL_CELL_DATA.push(toCellData(cellModel));\n                }\n            }\n            const event = {\n                eventData: {\n                    notebookName: NOTEBOOK_NAME,\n                    location: window.location.toString(),\n                    cells: cells\n                },\n                enumeration: ENUMERATION++,\n                notebookSession: NOTEBOOK_SESSION,\n                eventName: NOTEBOOK_MODIFIED_EVENT,\n                user: USER,\n                session: SESSION,\n                timestamp: new Date().toISOString()\n            };\n            if (USE_DEXIE) {\n                await db.table('logs').add({\n                    eventName: NOTEBOOK_MODIFIED_EVENT,\n                    data: JSON.stringify(event, null, 2)\n                });\n            }\n            axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }, 5000);\n    }\n}\nasync function logActiveCell(emitter, args) {\n    if (args === null || args === void 0 ? void 0 : args.model) {\n        const event = {\n            eventData: {\n                cell: toCellData(args === null || args === void 0 ? void 0 : args.model),\n                notebookName: NOTEBOOK_NAME,\n                location: window.location.toString()\n            },\n            enumeration: ENUMERATION++,\n            notebookSession: NOTEBOOK_SESSION,\n            eventName: CELL_SELECTED_EVENT,\n            user: USER,\n            session: SESSION,\n            timestamp: new Date().toISOString()\n        };\n        if (USE_DEXIE) {\n            await db.table('logs').add({\n                eventName: CELL_SELECTED_EVENT,\n                data: JSON.stringify(event, null, 2)\n            });\n        }\n        axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n    // connect onContentChanged listener to the cell model\n    args === null || args === void 0 ? void 0 : args.model.contentChanged.connect(logDisplayChange);\n}\nasync function logDisplayChange(args) {\n    if (args) {\n        const cellData = toCellData(args);\n        if (isCellModified(cellData)) {\n            clearTimeout(timeoutID);\n            timeoutID = setTimeout(() => {\n                const event = {\n                    eventData: {\n                        cell: cellData,\n                        notebookName: NOTEBOOK_NAME,\n                        location: window.location.toString(),\n                        changeEvents: [cellData],\n                    },\n                    enumeration: ENUMERATION++,\n                    notebookSession: NOTEBOOK_SESSION,\n                    eventName: CELL_MODIFIED_EVENT,\n                    user: USER,\n                    session: SESSION,\n                    timestamp: new Date().toISOString()\n                };\n                axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n                    headers: { 'Content-Type': 'application/json' }\n                });\n            }, 1000); // 1 second delay\n        }\n    }\n}\nexport default plugin;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"names":[],"sourceRoot":""}