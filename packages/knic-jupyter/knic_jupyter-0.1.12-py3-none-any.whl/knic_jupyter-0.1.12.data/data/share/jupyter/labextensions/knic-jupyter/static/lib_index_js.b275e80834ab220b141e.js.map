{"version":3,"file":"lib_index_js.b275e80834ab220b141e.js","mappings":";;;;;;;;;;;;;;;;;;;AAAyE;AAChC;AACf;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,KAAK;AAChE;AACA;AACA,uBAAuB,yDAAU;AACjC;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB;AAC/B;AACA;AACA;AACA,2DAA2D,SAAI;AAC/D,iEAAiE,SAAI;AACrE,QAAQ,kFAAgC,uBAAuB,SAAI;AACnE,QAAQ,4FAA0C,uBAAuB,SAAI;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iDAAU;AAClB,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iDAAU;AAClB,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yDAAU;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iDAAU;AACd,mBAAmB;AACnB,KAAK;AACL;AACA;AACA;AACA,uBAAuB,yDAAU;AACjC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iDAAU;AACd,mBAAmB;AACnB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oCAAoC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAU;AACtB,2BAA2B;AAC3B,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oCAAoC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iDAAU;AACtB,2BAA2B;AAC3B,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iDAAU;AAClB,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAU;AAC1B,+BAA+B;AAC/B,iBAAiB;AACjB,aAAa,SAAS;AACtB;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://knic-jupyter/./lib/index.js"],"sourcesContent":["import { INotebookTracker, NotebookActions } from '@jupyterlab/notebook';\nimport { UUID } from '@lumino/coreutils';\nimport axios from 'axios';\n/**\n * Supported Jupyter Lab events in knic-jupyter\n */\nconst JUPYTER_LOADED_EVENT = 'JUPYTER_LOADED';\nconst NOTEBOOK_OPENED_EVENT = 'NOTEBOOK_OPENED';\nconst NOTEBOOK_LOADED_EVENT = 'NOTEBOOK_LOADED';\nconst CELL_SELECTED_EVENT = 'CELL_SELECTED';\nconst NOTEBOOK_MODIFIED_EVENT = 'NOTEBOOK_MODIFIED';\nconst CELL_EXECUTION_BEGIN_EVENT = 'CELL_EXECUTION_BEGIN';\nconst CELL_EXECUTED_END_EVENT = 'CELL_EXECUTION_END';\nconst CELL_MODIFIED_EVENT = 'CELL_MODIFIED';\n/**\n * timeoutID for our cell modified event\n */\nlet timeoutID;\n/**\n * Initialization data for knic-jupyter\n */\nconst USER = new URLSearchParams(window.location.search).get('userid');\nconst SESSION = new URLSearchParams(window.location.search).get('sessionid');\nconst SERVER_ENDPOINT = `http://localhost:5642/knic/user/${USER}/event`;\nlet ENUMERATION = 0;\nlet NOTEBOOK_NAME = '';\nlet NOTEBOOK_SESSION = UUID.uuid4();\nlet ORIGINAL_CELL_DATA = [];\nlet notebookJustOpened = false;\nconst plugin = {\n    id: 'knic-jupyter:plugin',\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: (app, notebookTracker) => {\n        // Log jupyter loaded event\n        onJupyterLoaded();\n        notebookTracker.widgetAdded.connect(onWidgetAdded, this);\n        notebookTracker.activeCellChanged.connect(logActiveCell, this);\n        NotebookActions.executed.connect(onCellExecutionEnded, this);\n        NotebookActions.executionScheduled.connect(onCellExecutionBegin, this);\n    }\n};\nlet timeout = undefined;\nfunction toCellData(cellModel) {\n    return {\n        cellId: cellModel.id,\n        type: cellModel.type,\n        metadata: cellModel.metadata,\n        value: cellModel.value.text\n    };\n}\nfunction isCellModified(cellDataExecuted) {\n    if (ORIGINAL_CELL_DATA.some(e => e.value.trim() === cellDataExecuted.value.trim())) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nasync function onCellExecutionBegin(emitter, args) {\n    if ((args === null || args === void 0 ? void 0 : args.cell.model) && args.cell.model.type === 'code') {\n        const model = args.cell.model.toJSON();\n        const event = {\n            eventData: {\n                cell: toCellData(args.cell.model),\n                notebookName: NOTEBOOK_NAME,\n                location: window.location.toString(),\n                executionCount: model.execution_count\n            },\n            enumeration: ENUMERATION++,\n            notebookSession: NOTEBOOK_SESSION,\n            eventName: CELL_EXECUTION_BEGIN_EVENT,\n            user: USER,\n            session: SESSION,\n            timestamp: new Date().toISOString()\n        };\n        axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n}\nasync function onCellExecutionEnded(emitter, args) {\n    if ((args === null || args === void 0 ? void 0 : args.cell.model) && args.cell.model.type === 'code') {\n        const model = args.cell.model.toJSON();\n        const errors = model.outputs\n            .map((element) => {\n            if (element.output_type === 'error') {\n                const error = element;\n                return {\n                    errorName: error.ename,\n                    errorText: error.evalue,\n                    stackTrace: error.traceback\n                };\n            }\n            return { errorName: '', errorText: '', stackTrace: [] };\n        })\n            .filter(value => {\n            return value.errorName !== '';\n        });\n        const outputs = model.outputs\n            .map((element) => {\n            if (element.output_type === 'stream') {\n                return element.text;\n            }\n            else {\n                return [];\n            }\n        })\n            .filter(value => {\n            return value.length > 0;\n        });\n        const event = {\n            eventData: {\n                cell: toCellData(args.cell.model),\n                notebookName: NOTEBOOK_NAME,\n                location: window.location.toString(),\n                output: outputs,\n                executionCount: model.execution_count,\n                errors: errors\n            },\n            enumeration: ENUMERATION++,\n            notebookSession: NOTEBOOK_SESSION,\n            eventName: CELL_EXECUTED_END_EVENT,\n            session: SESSION,\n            user: USER,\n            timestamp: new Date().toISOString()\n        };\n        axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n}\nasync function onWidgetAdded(emitter, args) {\n    notebookJustOpened = true;\n    args.content.modelContentChanged.connect(onModelContentChanged);\n    ENUMERATION = 0;\n    NOTEBOOK_SESSION = UUID.uuid4();\n    NOTEBOOK_NAME = args.context.path;\n    const event = {\n        eventData: {\n            notebookName: NOTEBOOK_NAME,\n            location: window.location.toString()\n        },\n        user: USER,\n        session: SESSION,\n        enumeration: ENUMERATION++,\n        notebookSession: NOTEBOOK_SESSION,\n        timestamp: new Date().toISOString(),\n        eventName: NOTEBOOK_OPENED_EVENT\n    };\n    axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n        headers: { 'Content-Type': 'application/json' }\n    });\n}\nasync function onJupyterLoaded() {\n    ENUMERATION = 0;\n    NOTEBOOK_SESSION = UUID.uuid4();\n    const event = {\n        eventData: {\n            location: window.location.toString()\n        },\n        user: USER,\n        session: SESSION,\n        enumeration: ENUMERATION++,\n        notebookSession: NOTEBOOK_SESSION,\n        timestamp: new Date().toISOString(),\n        eventName: JUPYTER_LOADED_EVENT\n    };\n    axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n        headers: { 'Content-Type': 'application/json' }\n    });\n}\nasync function onModelContentChanged(emitter) {\n    if (notebookJustOpened) {\n        notebookJustOpened = false;\n        setTimeout(async () => {\n            var _a;\n            const cells = [];\n            if ((_a = emitter.model) === null || _a === void 0 ? void 0 : _a.cells) {\n                for (let index = 0; index < emitter.model.cells.length; index++) {\n                    const cellModel = emitter.model.cells.get(index);\n                    cells.push(toCellData(cellModel));\n                    ORIGINAL_CELL_DATA.push(toCellData(cellModel));\n                }\n            }\n            const event = {\n                eventData: {\n                    notebookName: NOTEBOOK_NAME,\n                    location: window.location.toString(),\n                    cells: cells\n                },\n                enumeration: ENUMERATION++,\n                notebookSession: NOTEBOOK_SESSION,\n                eventName: NOTEBOOK_LOADED_EVENT,\n                user: USER,\n                session: SESSION,\n                timestamp: new Date().toISOString()\n            };\n            axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }, 1000);\n    }\n    else {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n        timeout = setTimeout(async () => {\n            var _a;\n            const cells = [];\n            if ((_a = emitter.model) === null || _a === void 0 ? void 0 : _a.cells) {\n                for (let index = 0; index < emitter.model.cells.length; index++) {\n                    const cellModel = emitter.model.cells.get(index);\n                    cells.push(toCellData(cellModel));\n                    ORIGINAL_CELL_DATA.push(toCellData(cellModel));\n                }\n            }\n            const event = {\n                eventData: {\n                    notebookName: NOTEBOOK_NAME,\n                    location: window.location.toString(),\n                    cells: cells\n                },\n                enumeration: ENUMERATION++,\n                notebookSession: NOTEBOOK_SESSION,\n                eventName: NOTEBOOK_MODIFIED_EVENT,\n                user: USER,\n                session: SESSION,\n                timestamp: new Date().toISOString()\n            };\n            axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }, 5000);\n    }\n}\nasync function logActiveCell(emitter, args) {\n    if (args === null || args === void 0 ? void 0 : args.model) {\n        const event = {\n            eventData: {\n                cell: toCellData(args === null || args === void 0 ? void 0 : args.model),\n                notebookName: NOTEBOOK_NAME,\n                location: window.location.toString()\n            },\n            enumeration: ENUMERATION++,\n            notebookSession: NOTEBOOK_SESSION,\n            eventName: CELL_SELECTED_EVENT,\n            user: USER,\n            session: SESSION,\n            timestamp: new Date().toISOString()\n        };\n        axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n    // connect onContentChanged listener to the cell model\n    args === null || args === void 0 ? void 0 : args.model.contentChanged.connect(logDisplayChange);\n}\nasync function logDisplayChange(args) {\n    if (args) {\n        const cellData = toCellData(args);\n        if (isCellModified(cellData)) {\n            clearTimeout(timeoutID);\n            timeoutID = setTimeout(() => {\n                const event = {\n                    eventData: {\n                        cell: cellData,\n                        notebookName: NOTEBOOK_NAME,\n                        location: window.location.toString(),\n                        changeEvents: [cellData],\n                    },\n                    enumeration: ENUMERATION++,\n                    notebookSession: NOTEBOOK_SESSION,\n                    eventName: CELL_MODIFIED_EVENT,\n                    user: USER,\n                    session: SESSION,\n                    timestamp: new Date().toISOString()\n                };\n                axios.post(SERVER_ENDPOINT, encodeURI(JSON.stringify(event)), {\n                    headers: { 'Content-Type': 'application/json' }\n                });\n            }, 1000); // 1 second delay\n        }\n    }\n}\nexport default plugin;\n"],"names":[],"sourceRoot":""}