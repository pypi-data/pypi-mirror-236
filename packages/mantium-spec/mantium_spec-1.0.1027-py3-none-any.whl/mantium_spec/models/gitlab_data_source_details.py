# coding: utf-8

"""
    Mantium API

    Mantium API Documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1027
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from mantium_spec.configuration import Configuration


class GitlabDataSourceDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'group_id': 'int',
        'repository_path': 'str'
    }

    attribute_map = {
        'type': 'type',
        'group_id': 'group_id',
        'repository_path': 'repository_path'
    }

    def __init__(self, type='gitlab', group_id=None, repository_path=None, local_vars_configuration=None):  # noqa: E501
        """GitlabDataSourceDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._group_id = None
        self._repository_path = None
        self.discriminator = None

        if type is not None:
            self.type = type
        self.group_id = group_id
        self.repository_path = repository_path

    @property
    def type(self):
        """Gets the type of this GitlabDataSourceDetails.  # noqa: E501


        :return: The type of this GitlabDataSourceDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GitlabDataSourceDetails.


        :param type: The type of this GitlabDataSourceDetails.  # noqa: E501
        :type type: str
        """
        allowed_values = ["gitlab"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def group_id(self):
        """Gets the group_id of this GitlabDataSourceDetails.  # noqa: E501


        :return: The group_id of this GitlabDataSourceDetails.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GitlabDataSourceDetails.


        :param group_id: The group_id of this GitlabDataSourceDetails.  # noqa: E501
        :type group_id: int
        """
        if self.local_vars_configuration.client_side_validation and group_id is None:  # noqa: E501
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id

    @property
    def repository_path(self):
        """Gets the repository_path of this GitlabDataSourceDetails.  # noqa: E501

        Gitlab repository path. The path may include one or more group names, separated by `/`, and followed by a project name. Ex: group1_name/group2_name/project_name  # noqa: E501

        :return: The repository_path of this GitlabDataSourceDetails.  # noqa: E501
        :rtype: str
        """
        return self._repository_path

    @repository_path.setter
    def repository_path(self, repository_path):
        """Sets the repository_path of this GitlabDataSourceDetails.

        Gitlab repository path. The path may include one or more group names, separated by `/`, and followed by a project name. Ex: group1_name/group2_name/project_name  # noqa: E501

        :param repository_path: The repository_path of this GitlabDataSourceDetails.  # noqa: E501
        :type repository_path: str
        """
        if self.local_vars_configuration.client_side_validation and repository_path is None:  # noqa: E501
            raise ValueError("Invalid value for `repository_path`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                repository_path is not None and not re.search(r'^(?!\/).*(?<!\/)$', repository_path)):  # noqa: E501
            raise ValueError(r"Invalid value for `repository_path`, must be a follow pattern or equal to `/^(?!\/).*(?<!\/)$/`")  # noqa: E501

        self._repository_path = repository_path

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GitlabDataSourceDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GitlabDataSourceDetails):
            return True

        return self.to_dict() != other.to_dict()
