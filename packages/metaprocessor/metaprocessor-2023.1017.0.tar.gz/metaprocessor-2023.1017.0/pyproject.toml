[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "metaprocessor"
version = "2023.1017.0"
description = "MetaProcessor, all-in-one data pipeline for MbientLab MetaWear series sensors!"
readme = "readme.md"
license = { file = "license.md" }
authors = [{ name = "StepBroBD", email = "Hi@StepBroBD.com" }]
classifiers = [
  "Environment :: Console",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
  "boto3>=1.26.79",
  "click>=8.1.3",
  "click-aliases>=1.0.1",
  "click-option-group>=0.5.5",
  "numpy>=1.24.2",
  "pandas>=1.5.3",
  "pyarrow>=12.0.0",
  "rich>=13.3.5",
  "scipy>=1.10.1",
  "toml>=0.10.2",
  "tqdm>=4.64.1",
  "metawear>=1.0.8; platform_system=='Linux'",
]
requires-python = ">=3"

[project.urls]
Documentation = "https://metaprocessor.org"
Repository = "https://github.com/stepbrobd/metaprocessor"
Issues = "https://github.com/stepbrobd/metaprocessor/issues"

[project.scripts]
metaprocessor = "metaprocessor.cli:cli"
mp = "metaprocessor.cli:cli"

[tool.ruff]
select = [
  "E",   # pycodestyle error
  "F",   # Pyflakes
  "I",   # isort
  "W",   # pycodestyle warning
  "UP",  # pyupgrade
  "S",   # flake8-bandit
  "B",   # flake8-bugbear
  "ANN", # flake8-annotations
]
ignore = [
  "E501",   # Line too long
  "S101",   # Use of `assert` detected"
  "S113",   # Probable use of requests call without timeout
  "B008",   # Do not perform function call in argument defaults
  "ANN001", # Missing type annotation for function argument
  "ANN002", # Missing type annotation for `*args`
  "ANN003", # Missing type annotation for `**kwargs`
  "ANN101", # Missing type annotation for self in method
  "ANN102", # Missing type annotation for cls in classmethod
  "ANN401", # Dynamically typed expressions are disallowed
]

[tool.ruff.per-file-ignores]
"metaprocessor/__init__.py" = [
  "F401", # Imported but unused
]
"metaprocessor/helpers/boto3.py" = [
  "S324", # Probable use of insecure hash functions in `hashlib`: `md5`
]
"metaprocessor/helpers/completion.py" = [
  "S602", # `subprocess` call with `shell=True` seems safe, but may be changed in the future; consider rewriting without `shell`
  "S607", # Starting a process with a partial executable path
]
"metaprocessor/helpers/config.py" = [
  "S605", # Starting a process with a shell, possible injection detected
]

[tool.ruff.isort]
known-first-party = ["metaprocessor"]
