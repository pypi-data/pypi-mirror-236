# coding: utf-8

"""
    MoneyBox

    MoneyBox will help you better understand your finances, improve financial literacy, and achieve financial goals.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class Report(BaseModel):
    """
    Report
    """
    balance: Union[StrictFloat, StrictInt] = Field(...)
    total_incomes: Union[StrictFloat, StrictInt] = Field(...)
    total_expenses: Union[StrictFloat, StrictInt] = Field(...)
    income_expense_ratio: Union[StrictFloat, StrictInt] = Field(...)
    category_incomes: Dict[str, Any] = Field(...)
    category_expenses: Dict[str, Any] = Field(...)
    __properties = ["balance", "total_incomes", "total_expenses", "income_expense_ratio", "category_incomes", "category_expenses"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Report:
        """Create an instance of Report from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "balance",
                            "total_incomes",
                            "total_expenses",
                            "income_expense_ratio",
                            "category_incomes",
                            "category_expenses",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Report:
        """Create an instance of Report from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Report.parse_obj(obj)

        _obj = Report.parse_obj({
            "balance": obj.get("balance"),
            "total_incomes": obj.get("total_incomes"),
            "total_expenses": obj.get("total_expenses"),
            "income_expense_ratio": obj.get("income_expense_ratio"),
            "category_incomes": obj.get("category_incomes"),
            "category_expenses": obj.get("category_expenses")
        })
        return _obj


