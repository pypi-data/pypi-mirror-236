# coding: utf-8

"""
    MoneyBox

    MoneyBox will help you better understand your finances, improve financial literacy, and achieve financial goals.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, constr, validator

class Transfer(BaseModel):
    """
    Transfer
    """
    id: StrictInt = Field(...)
    created_at: datetime = Field(..., description="Date and time of creation")
    updated_at: datetime = Field(..., description="Date and time of last update")
    is_deleted: Optional[StrictBool] = None
    amount: constr(strict=True) = Field(..., description="The amount of money transferred.")
    comment: Optional[constr(strict=True, max_length=255)] = Field(None, description="Additional comment about the transfer (optional).")
    from_wallet: StrictInt = Field(..., description="The wallet from which the transfer is made.")
    to_wallet: StrictInt = Field(..., description="The wallet to which the transfer is made.")
    created_by: StrictInt = Field(..., description="The user who made the transfer.")
    group: StrictInt = Field(..., description="The group to which the transfer belongs.")
    __properties = ["id", "created_at", "updated_at", "is_deleted", "amount", "comment", "from_wallet", "to_wallet", "created_by", "group"]

    @validator('amount')
    def amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-?\d{0,8}(?:\.\d{0,2})?$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{0,8}(?:\.\d{0,2})?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Transfer:
        """Create an instance of Transfer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "created_at",
                            "updated_at",
                          },
                          exclude_none=True)
        # set to None if comment (nullable) is None
        # and __fields_set__ contains the field
        if self.comment is None and "comment" in self.__fields_set__:
            _dict['comment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Transfer:
        """Create an instance of Transfer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Transfer.parse_obj(obj)

        _obj = Transfer.parse_obj({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "is_deleted": obj.get("is_deleted"),
            "amount": obj.get("amount"),
            "comment": obj.get("comment"),
            "from_wallet": obj.get("from_wallet"),
            "to_wallet": obj.get("to_wallet"),
            "created_by": obj.get("created_by"),
            "group": obj.get("group")
        })
        return _obj


