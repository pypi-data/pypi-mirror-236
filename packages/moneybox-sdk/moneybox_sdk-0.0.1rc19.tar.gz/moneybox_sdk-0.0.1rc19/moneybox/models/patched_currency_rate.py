# coding: utf-8

"""
    MoneyBox

    MoneyBox will help you better understand your finances, improve financial literacy, and achieve financial goals.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, constr, validator

class PatchedCurrencyRate(BaseModel):
    """
    PatchedCurrencyRate
    """
    id: Optional[StrictInt] = None
    currency: Optional[StrictInt] = Field(None, description="Currency")
    rate: Optional[constr(strict=True)] = Field(None, description="The rate at which the source currencycan be exchanged for the target currency.")
    __properties = ["id", "currency", "rate"]

    @validator('rate')
    def rate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-?\d{0,7}(?:\.\d{0,5})?$", value):
            raise ValueError(r"must validate the regular expression /^-?\d{0,7}(?:\.\d{0,5})?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedCurrencyRate:
        """Create an instance of PatchedCurrencyRate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        # set to None if currency (nullable) is None
        # and __fields_set__ contains the field
        if self.currency is None and "currency" in self.__fields_set__:
            _dict['currency'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedCurrencyRate:
        """Create an instance of PatchedCurrencyRate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedCurrencyRate.parse_obj(obj)

        _obj = PatchedCurrencyRate.parse_obj({
            "id": obj.get("id"),
            "currency": obj.get("currency"),
            "rate": obj.get("rate")
        })
        return _obj


