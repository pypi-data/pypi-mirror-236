Metadata-Version: 2.1
Name: naludaq_rs
Version: 0.2.4
License-File: LICENSE
Summary: Rust backend for NaluDAQ
Author: Mitchell Matsumori-Kelly <mitchell@naluscientific.com>, Marcus Luck <marcus@naluscientific.com>
Author-email: Mitchell Matsumori-Kelly <mitchell@naluscientific.com>, Marcus Luck <marcus@naluscientific.com>
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM

# NaluDAQ_rs

Rust backend for NaluDaq.


## Setup

Make sure the [Rust toolchain](https://rustup.rs/) is installed.

Clone the repository to a suitable location:
```sh
$ git clone https://github.com/NaluScientific/naludaq_rs.git
```

Done!

## Building the backend for python

```sh
pip install maturin
maturin build
```

## Building the Backend

The backend is easy to build:

```sh
$ cd naludaq_rs
$ cargo build --release
```

Developers may ommit the `--release` flag for unoptimized builds.


### Building for RPI4
Building using docker:

```sh
docker build . -t cc/rpi4
```
to make the container, the build the app with:
```sh
docker run --rm -v ${pwd}:/app cc/rpi4
```

## Running the Backend
To run the backend, run the following command:

```sh
$ cargo run  --release -- [<ROOT>] [--addr <ADDR>] [-d | --debug]  [--api]
```

Where the arguments are as follows:
- `<ROOT>` is the root directory to run the server in. By default, it is the current working directory of the terminal it was run from.
- `--addr <ADDR>` is the address to bind the server to in the format `IP:PORT`. If unspecified, the server is bound to an open port on the loopback address.
- `-d | --debug` shows additional debug messages.
- `--api` will open the Swagger UI in the system browser.

## Documentation
The documentation can be built using the following command:
```sh
$ cargo doc --document-private-items --no-deps
```


## The API
NaluDAQ_rs is controlled through its [REST API](https://www.redhat.com/en/topics/api/what-is-a-rest-api) over
[HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview). This allows it to be controlled from any
machine connected to a network.

The backend can be controlled on the fly via Swagger. Use the `--api` flag when starting the backend to display the Swagger UI.

Alternatively, the (non-interactive) Swagger UI may be viewed without the backend by running the
following command:

```sh
$ cargo run --bin api -- [--output OUTPUT_FILE]
```

If the `--output` argument is provided, the OpenAPI JSON data describing
the API is written to the file and the program will immediately exit.


## Developers

### Profiling
Use the build profile called `release-with-debug for building release mode with debug symbols.

```sh
$ cargo build --profile release-with-debug
```

On Windows machines with Intel processors you can use [Intel VTune](https://www.intel.com/content/www/us/en/developer/tools/oneapi/vtune-profiler.html#gs.q7qmtk)
to profile the backend.

