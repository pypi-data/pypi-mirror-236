# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_base.ipynb.

# %% auto 0
__all__ = ['BaseMagic']

# %% ../nbs/01_base.ipynb 4
from IPython import InteractiveShell
from IPython.core.magic import magics_class, Magics
from ipywidgets import get_ipython

from abc import abstractproperty

# %% ../nbs/01_base.ipynb 5
from nlit import CELL, LINE

# %% ../nbs/01_base.ipynb 7
@magics_class
class BaseMagic(Magics):
    '''Base class for custom Jupyter Notebook Magics. Provides the ability to
    register the magic with the IPython shell.
    '''
    
    @abstractproperty
    def name(self) -> str: pass

    @classmethod
    def register(cls) -> 'BaseMagic':
        ipy = get_ipython()
        ins = cls(shell=ipy)
        ipy.register_magics(ins)
        return ins
    
    def load_ipython_extension(self, shell: InteractiveShell):
        '''Registers the magic when the extension loads.
        
        Parameters
        ----------
        shell : IPython InteractiveShell
            The IPython shell instance to which the magic should be registered.
            
        Returns
        -------
        None
        '''
        shell.register_magics(self)

    def unload_ipython_extension(self, shell: InteractiveShell):
        '''
        Unregisters the skip magic when the extension unloads.
        
        Parameters
        ----------
        shell : IPython InteractiveShell
            The IPython shell instance from which the magic should be unregistered.
            
        Returns
        -------
        None
        '''
        del shell.magics_manager.magics[CELL][self.name]
        del shell.magics_manager.magics[LINE][self.name]

    
    def __init__(self, shell: InteractiveShell = None, **kwargs):
        super().__init__(shell=shell, **kwargs)
