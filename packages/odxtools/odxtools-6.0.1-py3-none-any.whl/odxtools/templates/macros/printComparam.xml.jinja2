{#- -*- mode: sgml; tab-width: 1; indent-tabs-mode: nil -*-
 #
 # SPDX-License-Identifier: MIT
-#}

{%- import('macros/printElementID.xml.jinja2') as peid %}

{%- macro printComplexValue(cv) %}
<COMPLEX-VALUE>
  {%- for val in cv %}
  {%- if val is none %}
  <SIMPLE-VALUE />
  {%- elif hasattr(val, "extend")  %}
  {#- we check if the value has an extend() method, and if this
   #  is the case, we assume that it is a nested complex value.
   #}
  {{ printComplexValue(val) | indent(2) }}
  {%- else %}
  <SIMPLE-VALUE>{{val}}</SIMPLE-VALUE>
  {%- endif %}
  {%- endfor %}
</COMPLEX-VALUE>
{%- endmacro %}

{# print either a simple or a complex comparam
 #}
{%- macro printGenericComparam(cp) %}
{#
 # This is slightly hacky: To distinguish complex and simple
 # communication parameters, we check if the 'cp' object has a
 # 'comparams' attribute. If it does, it is a complex parameter.
 #}
{%- if hasattr(cp, 'comparams') %}
{{- printComplexComparam(cp) }}
{%- else %}
{{- printSimpleComparam(cp) }}
{%- endif %}
{%- endmacro %}

{%- macro printSimpleComparam(cp) %}
<COMPARAM ID="{{cp.odx_id.local_id}}"
          PARAM-CLASS="{{cp.param_class}}"
          CPTYPE="{{cp.cptype.value}}"
         {{make_xml_attrib("DISPLAY-LEVEL", cp.display_level)}}
          CPUSAGE="{{cp.cpusage.value}}">
 {{ peid.printElementID(cp)|indent(1) }}
 <PHYSICAL-DEFAULT-VALUE>{{cp.physical_default_value}}</PHYSICAL-DEFAULT-VALUE>
 <DATA-OBJECT-PROP-REF ID-REF="{{cp.dop_ref.ref_id}}" />
</COMPARAM>
{%- endmacro %}

{%- macro printComplexComparam(cp) %}
<COMPLEX-COMPARAM ID="{{cp.odx_id.local_id}}"
                  PARAM-CLASS="{{cp.param_class}}"
                  CPTYPE="{{cp.cptype.value}}"
                 {{make_xml_attrib("DISPLAY-LEVEL", cp.display_level)}}
                  CPUSAGE="{{cp.cpusage.value}}"
                 {{make_bool_xml_attrib("ALLOW-MULTIPLE-VALUES", cp.allow_multiple_values_raw)}}
                  {#- #}>
 {{ peid.printElementID(cp)|indent(1) }}
 {%- for sub_cp in cp.comparams %}
 {{- printGenericComparam(sub_cp) | indent(1, first=True) }}
 {%- endfor %}
 {%- if cp.complex_physical_default_value is not none %}
 <COMPLEX-PHYSICAL-DEFAULT-VALUE>
   {{ printComplexValue(cp.complex_physical_default_value) | indent(3) }}
 </COMPLEX-PHYSICAL-DEFAULT-VALUE>
 {%- endif %}
</COMPLEX-COMPARAM>
{%- endmacro %}
