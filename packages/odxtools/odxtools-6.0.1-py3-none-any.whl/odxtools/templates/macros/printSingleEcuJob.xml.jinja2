{#- -*- mode: sgml; tab-width: 1; indent-tabs-mode: nil -*-
 #
 # SPDX-License-Identifier: MIT
-#}

{%- import('macros/printElementID.xml.jinja2') as peid %}
{%- import('macros/printAudience.xml.jinja2') as paud %}
{%- import('macros/printSpecialData.xml.jinja2') as psd %}

{%- macro printSingleEcuJob(job) -%}
<SINGLE-ECU-JOB ID="{{job.odx_id.local_id}}"
                {{-make_xml_attrib("OID", job.oid)}}
                {{-make_xml_attrib("SEMANTIC", job.semantic)}}
                {{-make_xml_attrib("DIAGNOSTIC-CLASS", job.diagnostic_class and job.diagnostic_class.value)}}
                {{-make_bool_xml_attrib("IS-MANDATORY", job.is_mandatory_raw)}}
                {{-make_bool_xml_attrib("IS-EXECUTABLE", job.is_executable_raw)}}
                {{-make_bool_xml_attrib("IS-FINAL", job.is_final_raw)}}>
 {{ peid.printElementID(job)|indent(1) }}
 {{- psd.printSpecialDataGroups(job.sdgs)|indent(1, first=True) }}
{%- if job.functional_class_refs %}
 <FUNCT-CLASS-REFS>
{%- for ref in job.functional_class_refs %}
  <FUNCT-CLASS-REF ID-REF="{{ref.ref_id}}" />
{%- endfor %}
 </FUNCT-CLASS-REFS>
{%- endif %}
{%- if job.audience %}
 {{ paud.printAudience(job.audience)|indent(1) }}
{%- endif %}
 <PROG-CODES>
{%- for prog in job.prog_codes %}
  {{ printProgCode(prog)|indent(2) }}
{%- endfor %}
 </PROG-CODES>
{%- if job.input_params %}
 <INPUT-PARAMS>
{%- for param in job.input_params %}
  {{ printInputParam(param)|indent(2) }}
{%- endfor %}
 </INPUT-PARAMS>
{%- endif %}
{%- if job.output_params %}
 <OUTPUT-PARAMS>
{%- for param in job.output_params %}
  {{ printOutputParam(param)|indent(2) }}
{%- endfor %}
 </OUTPUT-PARAMS>
{%- endif %}
{%- if job.neg_output_params %}
 <NEG-OUTPUT-PARAMS>
{%- for param in job.neg_output_params %}
  {{ printNegOutputParam(param)|indent(2) }}
{%- endfor %}
 </NEG-OUTPUT-PARAMS>
{%- endif %}
</SINGLE-ECU-JOB>
{%- endmacro -%}


{%- macro printProgCode(prog) -%}
<PROG-CODE>
 <CODE-FILE>{{prog.code_file}}</CODE-FILE>
{%- if prog.encryption %}
 <ENCRYPTION>{{prog.encryption}}</ENCRYPTION>
{%- endif %}
 <SYNTAX>{{prog.syntax}}</SYNTAX>
 <REVISION>{{prog.revision}}</REVISION>
{%- if prog.entrypoint %}
 <ENTRYPOINT>{{prog.entrypoint}}</ENTRYPOINT>
{%- endif %}
{%- if prog.library_refs %}
 <LIBRARY-REFS>
 {%- for ref in prog.library_refs %}
   <LIBRARY-REF ID-REF="{{ref.ref_id}}" />
 {%- endfor %}
 </LIBRARY-REFS>
{%- endif %}
</PROG-CODE>
{%- endmacro -%}


{%- macro printInputParam(param) -%}
<INPUT-PARAM {{-make_xml_attrib("OID", param.oid)}}
             {{-make_xml_attrib("SEMANTIC", param.semantic)}}>
 {{ peid.printElementID(param)|indent(1) }}
{%- if param.physical_default_value %}
 <PHYSICAL-DEFAULT-VALUE>{{param.physical_default_value}}</PHYSICAL-DEFAULT-VALUE>
{%- endif %}
 <DOP-BASE-REF ID-REF="{{param.dop_base_ref.ref_id}}" />
</INPUT-PARAM>
{%- endmacro -%}

{%- macro printOutputParam(param) -%}
<OUTPUT-PARAM ID="{{param.odx_id.local_id}}"
              {{-make_xml_attrib("OID", param.oid)}}
              {{-make_xml_attrib("SEMANTIC", param.semantic)}}>
 {{ peid.printElementID(param)|indent(1) }}
 <DOP-BASE-REF ID-REF="{{param.dop_base_ref.ref_id}}" />
</OUTPUT-PARAM>
{%- endmacro -%}


{%- macro printNegOutputParam(param) -%}
<NEG-OUTPUT-PARAM>
 {{ peid.printElementID(param)|indent(1) }}
 <DOP-BASE-REF ID-REF="{{param.dop_base_ref.ref_id}}" />
</NEG-OUTPUT-PARAM>
{%- endmacro -%}
