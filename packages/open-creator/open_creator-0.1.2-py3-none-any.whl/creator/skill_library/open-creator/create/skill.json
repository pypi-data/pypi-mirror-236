{
    "skill_name": "create",
    "skill_description": "Create a skill from various sources.",
    "skill_metadata": {
        "created_at": "2023-10-03 22:39:34",
        "author": "gongjunmin",
        "updated_at": "2023-10-03 22:39:34",
        "usage_count": 0,
        "version": "1.0.0",
        "additional_kwargs": {}
    },
    "skill_tags": [
        "create",
        "skill",
        "source"
    ],
    "skill_usage_example": "skill = creator.create(request=\"filter how many prime numbers are in 201\")",
    "skill_program_language": "python",
    "skill_code": "from creator.core import creator\nfrom creator.core.skill import CodeSkill\nfrom typing import Optional, List\n\n\ndef create(\n    request: Optional[str] = None,\n    messages: Optional[List[dict]] = None,\n    messages_json_path: Optional[str] = None,\n    skill_path: Optional[str] = None,\n    skill_json_path: Optional[str] = None,\n    file_content: Optional[str] = None,\n    file_path: Optional[str] = None,\n    huggingface_repo_id: Optional[str] = None,\n    huggingface_skill_path: Optional[str] = None,\n) -> CodeSkill:\n    \"\"\"Create a skill from various sources.\n\n    Args:\n        request (Optional[str], optional): Request string. Defaults to None.\n        messages (Optional[List[dict]], optional): Messages in list of dict format. Defaults to None.\n        messages_json_path (Optional[str], optional): Path to messages JSON file. Defaults to None.\n        skill_path (Optional[str], optional): Path to skill directory. Defaults to None.\n        skill_json_path (Optional[str], optional): Path to skill JSON file. Defaults to None.\n        file_content (Optional[str], optional): File content. Defaults to None.\n        file_path (Optional[str], optional): Path to file. Defaults to None.\n        huggingface_repo_id (Optional[str], optional): Huggingface repo ID. Defaults to None.\n        huggingface_skill_path (Optional[str], optional): Huggingface skill path. Defaults to None.\n\n    Returns:\n        CodeSkill: Created skill\n    Example:\n        >>> skill = create(request=\"filter how many prime numbers are in 201\")\n        >>> skill = create(messages=[{\"role\": \"user\",\"content\": \"write a program to list all the python functions and their docstrings in a directory\"},{\"role\": \"assistant\",\"content\": \"Sure, I can help with that. Here's the plan:\\n\\n1. First, we need to get a list of all Python files in the specified directory. We can do this by using the `os` and `glob` modules in Python.\\n2. Then, for each Python file, we will parse the file to find all function definitions. We can do this by using the `ast` module in Python, which can parse Python source code into an abstract syntax tree (AST).\\n3. For each function definition, we will extract the function's name and its docstring. The `ast` module can also help us with this.\\n4. Finally, we will print out the function names and their docstrings.\\n\\nLet's start with step 1: getting a list of all Python files in the specified directory.\",\"function_call\": {\"name\": \"run_code\",\"arguments\": \"{\\n  \\\"language\\\": \\\"python\\\",\\n  \\\"code\\\": \\\"import os\\\\nimport glob\\\\n\\\\n# Get the current working directory\\\\ncwd = os.getcwd()\\\\n\\\\n# Get a list of all Python files in the directory\\\\npython_files = glob.glob(os.path.join(cwd, '*.py'))\\\\n\\\\npython_files\\\"\\n}\"}}])\n        >>> skill = create(messages_json_path=\"./messages_example.json\")\n        >>> skill = create(file_path=\"../creator/utils/ask_human.py\")\n        >>> skill = create(huggingface_repo_id=\"Sayoyo/skill-library\", huggingface_skill_path=\"extract_pdf_section\")\n        >>> skill = create(skill_json_path=os.path.expanduser(\"~\") + \"/.cache/open_creator/skill_library/create/skill.json\")\n    \"\"\"\n    if request is not None:\n        skill = creator.create(request=request)\n    elif messages is not None:\n        skill = creator.create(messages=messages)\n    elif messages_json_path is not None:\n        skill = creator.create(messages_json_path=messages_json_path)\n    elif skill_path is not None:\n        skill = creator.create(skill_path=skill_path)\n    elif skill_json_path is not None:\n        skill = creator.create(skill_json_path=skill_json_path)\n    elif file_content is not None:\n        skill = creator.create(file_content=file_content)\n    elif file_path is not None:\n        skill = creator.create(file_path=file_path)\n    elif huggingface_repo_id is not None and huggingface_skill_path is not None:\n        skill = creator.create(\n            huggingface_repo_id=huggingface_repo_id, huggingface_skill_path=huggingface_skill_path\n        )\n    else:\n        raise ValueError(\"At least one argument must be provided.\")\n\n    return skill\n",
    "skill_parameters": [
        {
            "param_name": "request",
            "param_type": "string",
            "param_description": "Request string.",
            "param_required": false,
            "param_default": null
        },
        {
            "param_name": "messages",
            "param_type": "array",
            "param_description": "Messages in list of dict format.",
            "param_required": false,
            "param_default": null
        },
        {
            "param_name": "messages_json_path",
            "param_type": "string",
            "param_description": "Path to messages JSON file.",
            "param_required": false,
            "param_default": null
        },
        {
            "param_name": "skill_path",
            "param_type": "string",
            "param_description": "Path to skill directory.",
            "param_required": false,
            "param_default": null
        },
        {
            "param_name": "skill_json_path",
            "param_type": "string",
            "param_description": "Path to skill JSON file.",
            "param_required": false,
            "param_default": null
        },
        {
            "param_name": "file_content",
            "param_type": "string",
            "param_description": "File content.",
            "param_required": false,
            "param_default": null
        },
        {
            "param_name": "file_path",
            "param_type": "string",
            "param_description": "Path to file.",
            "param_required": false,
            "param_default": null
        },
        {
            "param_name": "huggingface_repo_id",
            "param_type": "string",
            "param_description": "Huggingface repo ID.",
            "param_required": false,
            "param_default": null
        },
        {
            "param_name": "huggingface_skill_path",
            "param_type": "string",
            "param_description": "Huggingface skill path.",
            "param_required": false,
            "param_default": null
        }
    ],
    "skill_return": {
        "param_name": "CodeSkill",
        "param_type": "object",
        "param_description": "Created skill",
        "param_required": true,
        "param_default": null
    },
    "skill_dependencies": [
        {
            "dependency_name": "open-creator",
            "dependency_version": "latest",
            "dependency_type": "pacakge"
        }
    ],
    "conversation_history": [
        {
            "role": "user",
            "content": "# file name: create.py\nimport creator\nfrom creator.schema.skill import CodeSkill\nfrom typing import Optional, List\n\n\ndef create(\n    request: Optional[str] = None,\n    messages: Optional[List[dict]] = None,\n    messages_json_path: Optional[str] = None,\n    skill_path: Optional[str] = None,\n    skill_json_path: Optional[str] = None,\n    file_content: Optional[str] = None,\n    file_path: Optional[str] = None,\n    huggingface_repo_id: Optional[str] = None,\n    huggingface_skill_path: Optional[str] = None,\n) -> CodeSkill:\n    \"\"\"Create a skill from various sources.\n\n    Args:\n        request (Optional[str], optional): Request string. Defaults to None.\n        messages (Optional[List[dict]], optional): Messages in list of dict format. Defaults to None.\n        messages_json_path (Optional[str], optional): Path to messages JSON file. Defaults to None.\n        skill_path (Optional[str], optional): Path to skill directory. Defaults to None.\n        skill_json_path (Optional[str], optional): Path to skill JSON file. Defaults to None.\n        file_content (Optional[str], optional): File content. Defaults to None.\n        file_path (Optional[str], optional): Path to file. Defaults to None.\n        huggingface_repo_id (Optional[str], optional): Huggingface repo ID. Defaults to None.\n        huggingface_skill_path (Optional[str], optional): Huggingface skill path. Defaults to None.\n\n    Returns:\n        CodeSkill: Created skill\n    Example:\n        >>> skill = creator.create(request=\"filter how many prime numbers are in 201\")\n        >>> skill = creator.create(messages=[{\"role\": \"user\",\"content\": \"write a program to list all the python functions and their docstrings in a directory\"},{\"role\": \"assistant\",\"content\": \"Sure, I can help with that. Here's the plan:\\n\\n1. First, we need to get a list of all Python files in the specified directory. We can do this by using the `os` and `glob` modules in Python.\\n2. Then, for each Python file, we will parse the file to find all function definitions. We can do this by using the `ast` module in Python, which can parse Python source code into an abstract syntax tree (AST).\\n3. For each function definition, we will extract the function's name and its docstring. The `ast` module can also help us with this.\\n4. Finally, we will print out the function names and their docstrings.\\n\\nLet's start with step 1: getting a list of all Python files in the specified directory.\",\"function_call\": {\"name\": \"run_code\",\"arguments\": \"{\\n  \\\"language\\\": \\\"python\\\",\\n  \\\"code\\\": \\\"import os\\\\nimport glob\\\\n\\\\n# Get the current working directory\\\\ncwd = os.getcwd()\\\\n\\\\n# Get a list of all Python files in the directory\\\\npython_files = glob.glob(os.path.join(cwd, '*.py'))\\\\n\\\\npython_files\\\"\\n}\"}}])\n        >>> skill = creator.create(messages_json_path=\"./messages_example.json\")\n        >>> skill = creator.create(file_path=\"../creator/utils/ask_human.py\")\n        >>> skill = creator.create(huggingface_repo_id=\"Sayoyo/skill-library\", huggingface_skill_path=\"extract_pdf_section\")\n        >>> skill = creator.create(skill_json_path=os.path.expanduser(\"~\") + \"/.cache/open_creator/skill_library/create/skill.json\")\n    \"\"\"\n    if request is not None:\n        skill = creator.create(request=request)\n    elif messages is not None:\n        skill = creator.create(messages=messages)\n    elif messages_json_path is not None:\n        skill = creator.create(messages_json_path=messages_json_path)\n    elif skill_path is not None:\n        skill = creator.create(skill_path=skill_path)\n    elif skill_json_path is not None:\n        skill = creator.create(skill_json_path=skill_json_path)\n    elif file_content is not None:\n        skill = creator.create(file_content=file_content)\n    elif file_path is not None:\n        skill = creator.create(file_path=file_path)\n    elif huggingface_repo_id is not None and huggingface_skill_path is not None:\n        skill = creator.create(\n            huggingface_repo_id=huggingface_repo_id, huggingface_skill_path=huggingface_skill_path\n        )\n    else:\n        raise ValueError(\"At least one argument must be provided.\")\n\n    return skill\n"
        }
    ],
    "test_summary": null
}