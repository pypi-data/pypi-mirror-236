# automatically generated by the FlatBuffers compiler, do not modify

# namespace: openmeteo_sdk

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from openmeteo_sdk.ValueAndUnit import ValueAndUnit
from typing import Optional
np = import_numpy()

class AirQualityCurrent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirQualityCurrent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirQualityCurrent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AirQualityCurrent
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AirQualityCurrent
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AirQualityCurrent
    def Interval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AirQualityCurrent
    def Pm10(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def Pm25(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def Dust(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def AerosolOpticalDepth(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def CarbonMonoxide(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def NitrogenDioxide(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def Ammonia(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def Ozone(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def SulphurDioxide(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def UvIndex(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def UvIndexClearSky(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def AlderPollen(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def BirchPollen(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def GrassPollen(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def MugwortPollen(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def OlivePollen(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def RagweedPollen(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def EuropeanAqi(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def EuropeanAqiPm25(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def EuropeanAqiPm10(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def EuropeanAqiNo2(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def EuropeanAqiO3(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def EuropeanAqiSo2(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def UsAqi(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def UsAqiPm25(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def UsAqiPm10(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def UsAqiNo2(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def UsAqiO3(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def UsAqiSo2(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def UsAqiCo(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityCurrent
    def IsDay(self) -> Optional[ValueAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            x = o + self._tab.Pos
            obj = ValueAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AirQualityCurrentStart(builder: flatbuffers.Builder):
    builder.StartObject(33)

def Start(builder: flatbuffers.Builder):
    AirQualityCurrentStart(builder)

def AirQualityCurrentAddTime(builder: flatbuffers.Builder, time: int):
    builder.PrependInt64Slot(0, time, 0)

def AddTime(builder: flatbuffers.Builder, time: int):
    AirQualityCurrentAddTime(builder, time)

def AirQualityCurrentAddInterval(builder: flatbuffers.Builder, interval: int):
    builder.PrependInt32Slot(1, interval, 0)

def AddInterval(builder: flatbuffers.Builder, interval: int):
    AirQualityCurrentAddInterval(builder, interval)

def AirQualityCurrentAddPm10(builder: flatbuffers.Builder, pm10: Any):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pm10), 0)

def AddPm10(builder: flatbuffers.Builder, pm10: Any):
    AirQualityCurrentAddPm10(builder, pm10)

def AirQualityCurrentAddPm25(builder: flatbuffers.Builder, pm25: Any):
    builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(pm25), 0)

def AddPm25(builder: flatbuffers.Builder, pm25: Any):
    AirQualityCurrentAddPm25(builder, pm25)

def AirQualityCurrentAddDust(builder: flatbuffers.Builder, dust: Any):
    builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dust), 0)

def AddDust(builder: flatbuffers.Builder, dust: Any):
    AirQualityCurrentAddDust(builder, dust)

def AirQualityCurrentAddAerosolOpticalDepth(builder: flatbuffers.Builder, aerosolOpticalDepth: Any):
    builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(aerosolOpticalDepth), 0)

def AddAerosolOpticalDepth(builder: flatbuffers.Builder, aerosolOpticalDepth: Any):
    AirQualityCurrentAddAerosolOpticalDepth(builder, aerosolOpticalDepth)

def AirQualityCurrentAddCarbonMonoxide(builder: flatbuffers.Builder, carbonMonoxide: Any):
    builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(carbonMonoxide), 0)

def AddCarbonMonoxide(builder: flatbuffers.Builder, carbonMonoxide: Any):
    AirQualityCurrentAddCarbonMonoxide(builder, carbonMonoxide)

def AirQualityCurrentAddNitrogenDioxide(builder: flatbuffers.Builder, nitrogenDioxide: Any):
    builder.PrependStructSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(nitrogenDioxide), 0)

def AddNitrogenDioxide(builder: flatbuffers.Builder, nitrogenDioxide: Any):
    AirQualityCurrentAddNitrogenDioxide(builder, nitrogenDioxide)

def AirQualityCurrentAddAmmonia(builder: flatbuffers.Builder, ammonia: Any):
    builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(ammonia), 0)

def AddAmmonia(builder: flatbuffers.Builder, ammonia: Any):
    AirQualityCurrentAddAmmonia(builder, ammonia)

def AirQualityCurrentAddOzone(builder: flatbuffers.Builder, ozone: Any):
    builder.PrependStructSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ozone), 0)

def AddOzone(builder: flatbuffers.Builder, ozone: Any):
    AirQualityCurrentAddOzone(builder, ozone)

def AirQualityCurrentAddSulphurDioxide(builder: flatbuffers.Builder, sulphurDioxide: Any):
    builder.PrependStructSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(sulphurDioxide), 0)

def AddSulphurDioxide(builder: flatbuffers.Builder, sulphurDioxide: Any):
    AirQualityCurrentAddSulphurDioxide(builder, sulphurDioxide)

def AirQualityCurrentAddUvIndex(builder: flatbuffers.Builder, uvIndex: Any):
    builder.PrependStructSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(uvIndex), 0)

def AddUvIndex(builder: flatbuffers.Builder, uvIndex: Any):
    AirQualityCurrentAddUvIndex(builder, uvIndex)

def AirQualityCurrentAddUvIndexClearSky(builder: flatbuffers.Builder, uvIndexClearSky: Any):
    builder.PrependStructSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(uvIndexClearSky), 0)

def AddUvIndexClearSky(builder: flatbuffers.Builder, uvIndexClearSky: Any):
    AirQualityCurrentAddUvIndexClearSky(builder, uvIndexClearSky)

def AirQualityCurrentAddAlderPollen(builder: flatbuffers.Builder, alderPollen: Any):
    builder.PrependStructSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(alderPollen), 0)

def AddAlderPollen(builder: flatbuffers.Builder, alderPollen: Any):
    AirQualityCurrentAddAlderPollen(builder, alderPollen)

def AirQualityCurrentAddBirchPollen(builder: flatbuffers.Builder, birchPollen: Any):
    builder.PrependStructSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(birchPollen), 0)

def AddBirchPollen(builder: flatbuffers.Builder, birchPollen: Any):
    AirQualityCurrentAddBirchPollen(builder, birchPollen)

def AirQualityCurrentAddGrassPollen(builder: flatbuffers.Builder, grassPollen: Any):
    builder.PrependStructSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(grassPollen), 0)

def AddGrassPollen(builder: flatbuffers.Builder, grassPollen: Any):
    AirQualityCurrentAddGrassPollen(builder, grassPollen)

def AirQualityCurrentAddMugwortPollen(builder: flatbuffers.Builder, mugwortPollen: Any):
    builder.PrependStructSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(mugwortPollen), 0)

def AddMugwortPollen(builder: flatbuffers.Builder, mugwortPollen: Any):
    AirQualityCurrentAddMugwortPollen(builder, mugwortPollen)

def AirQualityCurrentAddOlivePollen(builder: flatbuffers.Builder, olivePollen: Any):
    builder.PrependStructSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(olivePollen), 0)

def AddOlivePollen(builder: flatbuffers.Builder, olivePollen: Any):
    AirQualityCurrentAddOlivePollen(builder, olivePollen)

def AirQualityCurrentAddRagweedPollen(builder: flatbuffers.Builder, ragweedPollen: Any):
    builder.PrependStructSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(ragweedPollen), 0)

def AddRagweedPollen(builder: flatbuffers.Builder, ragweedPollen: Any):
    AirQualityCurrentAddRagweedPollen(builder, ragweedPollen)

def AirQualityCurrentAddEuropeanAqi(builder: flatbuffers.Builder, europeanAqi: Any):
    builder.PrependStructSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqi), 0)

def AddEuropeanAqi(builder: flatbuffers.Builder, europeanAqi: Any):
    AirQualityCurrentAddEuropeanAqi(builder, europeanAqi)

def AirQualityCurrentAddEuropeanAqiPm25(builder: flatbuffers.Builder, europeanAqiPm25: Any):
    builder.PrependStructSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqiPm25), 0)

def AddEuropeanAqiPm25(builder: flatbuffers.Builder, europeanAqiPm25: Any):
    AirQualityCurrentAddEuropeanAqiPm25(builder, europeanAqiPm25)

def AirQualityCurrentAddEuropeanAqiPm10(builder: flatbuffers.Builder, europeanAqiPm10: Any):
    builder.PrependStructSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqiPm10), 0)

def AddEuropeanAqiPm10(builder: flatbuffers.Builder, europeanAqiPm10: Any):
    AirQualityCurrentAddEuropeanAqiPm10(builder, europeanAqiPm10)

def AirQualityCurrentAddEuropeanAqiNo2(builder: flatbuffers.Builder, europeanAqiNo2: Any):
    builder.PrependStructSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqiNo2), 0)

def AddEuropeanAqiNo2(builder: flatbuffers.Builder, europeanAqiNo2: Any):
    AirQualityCurrentAddEuropeanAqiNo2(builder, europeanAqiNo2)

def AirQualityCurrentAddEuropeanAqiO3(builder: flatbuffers.Builder, europeanAqiO3: Any):
    builder.PrependStructSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqiO3), 0)

def AddEuropeanAqiO3(builder: flatbuffers.Builder, europeanAqiO3: Any):
    AirQualityCurrentAddEuropeanAqiO3(builder, europeanAqiO3)

def AirQualityCurrentAddEuropeanAqiSo2(builder: flatbuffers.Builder, europeanAqiSo2: Any):
    builder.PrependStructSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqiSo2), 0)

def AddEuropeanAqiSo2(builder: flatbuffers.Builder, europeanAqiSo2: Any):
    AirQualityCurrentAddEuropeanAqiSo2(builder, europeanAqiSo2)

def AirQualityCurrentAddUsAqi(builder: flatbuffers.Builder, usAqi: Any):
    builder.PrependStructSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(usAqi), 0)

def AddUsAqi(builder: flatbuffers.Builder, usAqi: Any):
    AirQualityCurrentAddUsAqi(builder, usAqi)

def AirQualityCurrentAddUsAqiPm25(builder: flatbuffers.Builder, usAqiPm25: Any):
    builder.PrependStructSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiPm25), 0)

def AddUsAqiPm25(builder: flatbuffers.Builder, usAqiPm25: Any):
    AirQualityCurrentAddUsAqiPm25(builder, usAqiPm25)

def AirQualityCurrentAddUsAqiPm10(builder: flatbuffers.Builder, usAqiPm10: Any):
    builder.PrependStructSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiPm10), 0)

def AddUsAqiPm10(builder: flatbuffers.Builder, usAqiPm10: Any):
    AirQualityCurrentAddUsAqiPm10(builder, usAqiPm10)

def AirQualityCurrentAddUsAqiNo2(builder: flatbuffers.Builder, usAqiNo2: Any):
    builder.PrependStructSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiNo2), 0)

def AddUsAqiNo2(builder: flatbuffers.Builder, usAqiNo2: Any):
    AirQualityCurrentAddUsAqiNo2(builder, usAqiNo2)

def AirQualityCurrentAddUsAqiO3(builder: flatbuffers.Builder, usAqiO3: Any):
    builder.PrependStructSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiO3), 0)

def AddUsAqiO3(builder: flatbuffers.Builder, usAqiO3: Any):
    AirQualityCurrentAddUsAqiO3(builder, usAqiO3)

def AirQualityCurrentAddUsAqiSo2(builder: flatbuffers.Builder, usAqiSo2: Any):
    builder.PrependStructSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiSo2), 0)

def AddUsAqiSo2(builder: flatbuffers.Builder, usAqiSo2: Any):
    AirQualityCurrentAddUsAqiSo2(builder, usAqiSo2)

def AirQualityCurrentAddUsAqiCo(builder: flatbuffers.Builder, usAqiCo: Any):
    builder.PrependStructSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiCo), 0)

def AddUsAqiCo(builder: flatbuffers.Builder, usAqiCo: Any):
    AirQualityCurrentAddUsAqiCo(builder, usAqiCo)

def AirQualityCurrentAddIsDay(builder: flatbuffers.Builder, isDay: Any):
    builder.PrependStructSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(isDay), 0)

def AddIsDay(builder: flatbuffers.Builder, isDay: Any):
    AirQualityCurrentAddIsDay(builder, isDay)

def AirQualityCurrentEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return AirQualityCurrentEnd(builder)
