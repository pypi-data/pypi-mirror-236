# automatically generated by the FlatBuffers compiler, do not modify

# namespace: openmeteo_sdk

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from openmeteo_sdk.TimeRange import TimeRange
from openmeteo_sdk.ValuesAndUnit import ValuesAndUnit
from typing import Optional
np = import_numpy()

class ClimateDaily(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ClimateDaily()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsClimateDaily(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ClimateDaily
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ClimateDaily
    def Time(self) -> Optional[TimeRange]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            obj = TimeRange()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Temperature2mMin(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Temperature2mMax(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Temperature2mMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def PressureMslMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def CloudcoverMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def PrecipitationSum(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SnowfallWaterEquivalentSum(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def RelativeHumidity2mMin(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def RelativeHumidity2mMax(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def RelativeHumidity2mMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Windspeed10mMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Windspeed10mMax(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SoilMoisture0To10cmMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def ShortwaveRadiationSum(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Et0FaoEvapotranspirationSum(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def LeafWetnessProbabilityMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SoilMoisture0To100cmMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SoilMoisture0To7cmMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SoilMoisture7To28cmMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SoilMoisture28To100cmMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SoilTemperature0To100cmMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SoilTemperature0To7cmMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SoilTemperature7To28cmMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SoilTemperature28To100cmMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def VaporPressureDeficitMax(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Windgusts10mMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Windgusts10mMax(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SnowfallSum(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def RainSum(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Dewpoint2mMax(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Dewpoint2mMin(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Dewpoint2mMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def GrowingDegreeDaysBase0Limit50(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SoilMoistureIndex0To10cmMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def SoilMoistureIndex0To100cmMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def DaylightDuration(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Windspeed2mMax(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ClimateDaily
    def Windspeed2mMean(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ClimateDailyStart(builder: flatbuffers.Builder):
    builder.StartObject(39)

def Start(builder: flatbuffers.Builder):
    ClimateDailyStart(builder)

def ClimateDailyAddTime(builder: flatbuffers.Builder, time: Any):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder: flatbuffers.Builder, time: Any):
    ClimateDailyAddTime(builder, time)

def ClimateDailyAddTemperature2mMin(builder: flatbuffers.Builder, temperature2mMin: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(temperature2mMin), 0)

def AddTemperature2mMin(builder: flatbuffers.Builder, temperature2mMin: int):
    ClimateDailyAddTemperature2mMin(builder, temperature2mMin)

def ClimateDailyAddTemperature2mMax(builder: flatbuffers.Builder, temperature2mMax: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(temperature2mMax), 0)

def AddTemperature2mMax(builder: flatbuffers.Builder, temperature2mMax: int):
    ClimateDailyAddTemperature2mMax(builder, temperature2mMax)

def ClimateDailyAddTemperature2mMean(builder: flatbuffers.Builder, temperature2mMean: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(temperature2mMean), 0)

def AddTemperature2mMean(builder: flatbuffers.Builder, temperature2mMean: int):
    ClimateDailyAddTemperature2mMean(builder, temperature2mMean)

def ClimateDailyAddPressureMslMean(builder: flatbuffers.Builder, pressureMslMean: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(pressureMslMean), 0)

def AddPressureMslMean(builder: flatbuffers.Builder, pressureMslMean: int):
    ClimateDailyAddPressureMslMean(builder, pressureMslMean)

def ClimateDailyAddCloudcoverMean(builder: flatbuffers.Builder, cloudcoverMean: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(cloudcoverMean), 0)

def AddCloudcoverMean(builder: flatbuffers.Builder, cloudcoverMean: int):
    ClimateDailyAddCloudcoverMean(builder, cloudcoverMean)

def ClimateDailyAddPrecipitationSum(builder: flatbuffers.Builder, precipitationSum: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(precipitationSum), 0)

def AddPrecipitationSum(builder: flatbuffers.Builder, precipitationSum: int):
    ClimateDailyAddPrecipitationSum(builder, precipitationSum)

def ClimateDailyAddSnowfallWaterEquivalentSum(builder: flatbuffers.Builder, snowfallWaterEquivalentSum: int):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(snowfallWaterEquivalentSum), 0)

def AddSnowfallWaterEquivalentSum(builder: flatbuffers.Builder, snowfallWaterEquivalentSum: int):
    ClimateDailyAddSnowfallWaterEquivalentSum(builder, snowfallWaterEquivalentSum)

def ClimateDailyAddRelativeHumidity2mMin(builder: flatbuffers.Builder, relativeHumidity2mMin: int):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(relativeHumidity2mMin), 0)

def AddRelativeHumidity2mMin(builder: flatbuffers.Builder, relativeHumidity2mMin: int):
    ClimateDailyAddRelativeHumidity2mMin(builder, relativeHumidity2mMin)

def ClimateDailyAddRelativeHumidity2mMax(builder: flatbuffers.Builder, relativeHumidity2mMax: int):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(relativeHumidity2mMax), 0)

def AddRelativeHumidity2mMax(builder: flatbuffers.Builder, relativeHumidity2mMax: int):
    ClimateDailyAddRelativeHumidity2mMax(builder, relativeHumidity2mMax)

def ClimateDailyAddRelativeHumidity2mMean(builder: flatbuffers.Builder, relativeHumidity2mMean: int):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(relativeHumidity2mMean), 0)

def AddRelativeHumidity2mMean(builder: flatbuffers.Builder, relativeHumidity2mMean: int):
    ClimateDailyAddRelativeHumidity2mMean(builder, relativeHumidity2mMean)

def ClimateDailyAddWindspeed10mMean(builder: flatbuffers.Builder, windspeed10mMean: int):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(windspeed10mMean), 0)

def AddWindspeed10mMean(builder: flatbuffers.Builder, windspeed10mMean: int):
    ClimateDailyAddWindspeed10mMean(builder, windspeed10mMean)

def ClimateDailyAddWindspeed10mMax(builder: flatbuffers.Builder, windspeed10mMax: int):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(windspeed10mMax), 0)

def AddWindspeed10mMax(builder: flatbuffers.Builder, windspeed10mMax: int):
    ClimateDailyAddWindspeed10mMax(builder, windspeed10mMax)

def ClimateDailyAddSoilMoisture0To10cmMean(builder: flatbuffers.Builder, soilMoisture0To10cmMean: int):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(soilMoisture0To10cmMean), 0)

def AddSoilMoisture0To10cmMean(builder: flatbuffers.Builder, soilMoisture0To10cmMean: int):
    ClimateDailyAddSoilMoisture0To10cmMean(builder, soilMoisture0To10cmMean)

def ClimateDailyAddShortwaveRadiationSum(builder: flatbuffers.Builder, shortwaveRadiationSum: int):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(shortwaveRadiationSum), 0)

def AddShortwaveRadiationSum(builder: flatbuffers.Builder, shortwaveRadiationSum: int):
    ClimateDailyAddShortwaveRadiationSum(builder, shortwaveRadiationSum)

def ClimateDailyAddEt0FaoEvapotranspirationSum(builder: flatbuffers.Builder, et0FaoEvapotranspirationSum: int):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(et0FaoEvapotranspirationSum), 0)

def AddEt0FaoEvapotranspirationSum(builder: flatbuffers.Builder, et0FaoEvapotranspirationSum: int):
    ClimateDailyAddEt0FaoEvapotranspirationSum(builder, et0FaoEvapotranspirationSum)

def ClimateDailyAddLeafWetnessProbabilityMean(builder: flatbuffers.Builder, leafWetnessProbabilityMean: int):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(leafWetnessProbabilityMean), 0)

def AddLeafWetnessProbabilityMean(builder: flatbuffers.Builder, leafWetnessProbabilityMean: int):
    ClimateDailyAddLeafWetnessProbabilityMean(builder, leafWetnessProbabilityMean)

def ClimateDailyAddSoilMoisture0To100cmMean(builder: flatbuffers.Builder, soilMoisture0To100cmMean: int):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(soilMoisture0To100cmMean), 0)

def AddSoilMoisture0To100cmMean(builder: flatbuffers.Builder, soilMoisture0To100cmMean: int):
    ClimateDailyAddSoilMoisture0To100cmMean(builder, soilMoisture0To100cmMean)

def ClimateDailyAddSoilMoisture0To7cmMean(builder: flatbuffers.Builder, soilMoisture0To7cmMean: int):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(soilMoisture0To7cmMean), 0)

def AddSoilMoisture0To7cmMean(builder: flatbuffers.Builder, soilMoisture0To7cmMean: int):
    ClimateDailyAddSoilMoisture0To7cmMean(builder, soilMoisture0To7cmMean)

def ClimateDailyAddSoilMoisture7To28cmMean(builder: flatbuffers.Builder, soilMoisture7To28cmMean: int):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(soilMoisture7To28cmMean), 0)

def AddSoilMoisture7To28cmMean(builder: flatbuffers.Builder, soilMoisture7To28cmMean: int):
    ClimateDailyAddSoilMoisture7To28cmMean(builder, soilMoisture7To28cmMean)

def ClimateDailyAddSoilMoisture28To100cmMean(builder: flatbuffers.Builder, soilMoisture28To100cmMean: int):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(soilMoisture28To100cmMean), 0)

def AddSoilMoisture28To100cmMean(builder: flatbuffers.Builder, soilMoisture28To100cmMean: int):
    ClimateDailyAddSoilMoisture28To100cmMean(builder, soilMoisture28To100cmMean)

def ClimateDailyAddSoilTemperature0To100cmMean(builder: flatbuffers.Builder, soilTemperature0To100cmMean: int):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(soilTemperature0To100cmMean), 0)

def AddSoilTemperature0To100cmMean(builder: flatbuffers.Builder, soilTemperature0To100cmMean: int):
    ClimateDailyAddSoilTemperature0To100cmMean(builder, soilTemperature0To100cmMean)

def ClimateDailyAddSoilTemperature0To7cmMean(builder: flatbuffers.Builder, soilTemperature0To7cmMean: int):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(soilTemperature0To7cmMean), 0)

def AddSoilTemperature0To7cmMean(builder: flatbuffers.Builder, soilTemperature0To7cmMean: int):
    ClimateDailyAddSoilTemperature0To7cmMean(builder, soilTemperature0To7cmMean)

def ClimateDailyAddSoilTemperature7To28cmMean(builder: flatbuffers.Builder, soilTemperature7To28cmMean: int):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(soilTemperature7To28cmMean), 0)

def AddSoilTemperature7To28cmMean(builder: flatbuffers.Builder, soilTemperature7To28cmMean: int):
    ClimateDailyAddSoilTemperature7To28cmMean(builder, soilTemperature7To28cmMean)

def ClimateDailyAddSoilTemperature28To100cmMean(builder: flatbuffers.Builder, soilTemperature28To100cmMean: int):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(soilTemperature28To100cmMean), 0)

def AddSoilTemperature28To100cmMean(builder: flatbuffers.Builder, soilTemperature28To100cmMean: int):
    ClimateDailyAddSoilTemperature28To100cmMean(builder, soilTemperature28To100cmMean)

def ClimateDailyAddVaporPressureDeficitMax(builder: flatbuffers.Builder, vaporPressureDeficitMax: int):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(vaporPressureDeficitMax), 0)

def AddVaporPressureDeficitMax(builder: flatbuffers.Builder, vaporPressureDeficitMax: int):
    ClimateDailyAddVaporPressureDeficitMax(builder, vaporPressureDeficitMax)

def ClimateDailyAddWindgusts10mMean(builder: flatbuffers.Builder, windgusts10mMean: int):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(windgusts10mMean), 0)

def AddWindgusts10mMean(builder: flatbuffers.Builder, windgusts10mMean: int):
    ClimateDailyAddWindgusts10mMean(builder, windgusts10mMean)

def ClimateDailyAddWindgusts10mMax(builder: flatbuffers.Builder, windgusts10mMax: int):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(windgusts10mMax), 0)

def AddWindgusts10mMax(builder: flatbuffers.Builder, windgusts10mMax: int):
    ClimateDailyAddWindgusts10mMax(builder, windgusts10mMax)

def ClimateDailyAddSnowfallSum(builder: flatbuffers.Builder, snowfallSum: int):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(snowfallSum), 0)

def AddSnowfallSum(builder: flatbuffers.Builder, snowfallSum: int):
    ClimateDailyAddSnowfallSum(builder, snowfallSum)

def ClimateDailyAddRainSum(builder: flatbuffers.Builder, rainSum: int):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(rainSum), 0)

def AddRainSum(builder: flatbuffers.Builder, rainSum: int):
    ClimateDailyAddRainSum(builder, rainSum)

def ClimateDailyAddDewpoint2mMax(builder: flatbuffers.Builder, dewpoint2mMax: int):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(dewpoint2mMax), 0)

def AddDewpoint2mMax(builder: flatbuffers.Builder, dewpoint2mMax: int):
    ClimateDailyAddDewpoint2mMax(builder, dewpoint2mMax)

def ClimateDailyAddDewpoint2mMin(builder: flatbuffers.Builder, dewpoint2mMin: int):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(dewpoint2mMin), 0)

def AddDewpoint2mMin(builder: flatbuffers.Builder, dewpoint2mMin: int):
    ClimateDailyAddDewpoint2mMin(builder, dewpoint2mMin)

def ClimateDailyAddDewpoint2mMean(builder: flatbuffers.Builder, dewpoint2mMean: int):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(dewpoint2mMean), 0)

def AddDewpoint2mMean(builder: flatbuffers.Builder, dewpoint2mMean: int):
    ClimateDailyAddDewpoint2mMean(builder, dewpoint2mMean)

def ClimateDailyAddGrowingDegreeDaysBase0Limit50(builder: flatbuffers.Builder, growingDegreeDaysBase0Limit50: int):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(growingDegreeDaysBase0Limit50), 0)

def AddGrowingDegreeDaysBase0Limit50(builder: flatbuffers.Builder, growingDegreeDaysBase0Limit50: int):
    ClimateDailyAddGrowingDegreeDaysBase0Limit50(builder, growingDegreeDaysBase0Limit50)

def ClimateDailyAddSoilMoistureIndex0To10cmMean(builder: flatbuffers.Builder, soilMoistureIndex0To10cmMean: int):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(soilMoistureIndex0To10cmMean), 0)

def AddSoilMoistureIndex0To10cmMean(builder: flatbuffers.Builder, soilMoistureIndex0To10cmMean: int):
    ClimateDailyAddSoilMoistureIndex0To10cmMean(builder, soilMoistureIndex0To10cmMean)

def ClimateDailyAddSoilMoistureIndex0To100cmMean(builder: flatbuffers.Builder, soilMoistureIndex0To100cmMean: int):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(soilMoistureIndex0To100cmMean), 0)

def AddSoilMoistureIndex0To100cmMean(builder: flatbuffers.Builder, soilMoistureIndex0To100cmMean: int):
    ClimateDailyAddSoilMoistureIndex0To100cmMean(builder, soilMoistureIndex0To100cmMean)

def ClimateDailyAddDaylightDuration(builder: flatbuffers.Builder, daylightDuration: int):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(daylightDuration), 0)

def AddDaylightDuration(builder: flatbuffers.Builder, daylightDuration: int):
    ClimateDailyAddDaylightDuration(builder, daylightDuration)

def ClimateDailyAddWindspeed2mMax(builder: flatbuffers.Builder, windspeed2mMax: int):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(windspeed2mMax), 0)

def AddWindspeed2mMax(builder: flatbuffers.Builder, windspeed2mMax: int):
    ClimateDailyAddWindspeed2mMax(builder, windspeed2mMax)

def ClimateDailyAddWindspeed2mMean(builder: flatbuffers.Builder, windspeed2mMean: int):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(windspeed2mMean), 0)

def AddWindspeed2mMean(builder: flatbuffers.Builder, windspeed2mMean: int):
    ClimateDailyAddWindspeed2mMean(builder, windspeed2mMean)

def ClimateDailyEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return ClimateDailyEnd(builder)
