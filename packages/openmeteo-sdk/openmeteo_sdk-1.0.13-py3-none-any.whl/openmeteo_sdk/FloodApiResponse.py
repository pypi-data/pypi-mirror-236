# automatically generated by the FlatBuffers compiler, do not modify

# namespace: openmeteo_sdk

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from openmeteo_sdk.FloodDaily import FloodDaily
from openmeteo_sdk.TimeRange import TimeRange
from typing import Optional
np = import_numpy()

class FloodApiResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FloodApiResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFloodApiResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FloodApiResponse
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FloodApiResponse
    def Latitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FloodApiResponse
    def Longitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FloodApiResponse
    def Elevation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FloodApiResponse
    def Model(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FloodApiResponse
    def GenerationtimeMs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FloodApiResponse
    def UtcOffsetSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FloodApiResponse
    def Timezone(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FloodApiResponse
    def TimezoneAbbreviation(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FloodApiResponse
    def Time(self) -> Optional[TimeRange]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            obj = TimeRange()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FloodApiResponse
    def Daily(self) -> Optional[FloodDaily]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FloodDaily()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FloodApiResponseStart(builder: flatbuffers.Builder):
    builder.StartObject(10)

def Start(builder: flatbuffers.Builder):
    FloodApiResponseStart(builder)

def FloodApiResponseAddLatitude(builder: flatbuffers.Builder, latitude: float):
    builder.PrependFloat32Slot(0, latitude, 0.0)

def AddLatitude(builder: flatbuffers.Builder, latitude: float):
    FloodApiResponseAddLatitude(builder, latitude)

def FloodApiResponseAddLongitude(builder: flatbuffers.Builder, longitude: float):
    builder.PrependFloat32Slot(1, longitude, 0.0)

def AddLongitude(builder: flatbuffers.Builder, longitude: float):
    FloodApiResponseAddLongitude(builder, longitude)

def FloodApiResponseAddElevation(builder: flatbuffers.Builder, elevation: float):
    builder.PrependFloat32Slot(2, elevation, 0.0)

def AddElevation(builder: flatbuffers.Builder, elevation: float):
    FloodApiResponseAddElevation(builder, elevation)

def FloodApiResponseAddModel(builder: flatbuffers.Builder, model: int):
    builder.PrependInt8Slot(3, model, 0)

def AddModel(builder: flatbuffers.Builder, model: int):
    FloodApiResponseAddModel(builder, model)

def FloodApiResponseAddGenerationtimeMs(builder: flatbuffers.Builder, generationtimeMs: float):
    builder.PrependFloat32Slot(4, generationtimeMs, 0.0)

def AddGenerationtimeMs(builder: flatbuffers.Builder, generationtimeMs: float):
    FloodApiResponseAddGenerationtimeMs(builder, generationtimeMs)

def FloodApiResponseAddUtcOffsetSeconds(builder: flatbuffers.Builder, utcOffsetSeconds: int):
    builder.PrependInt32Slot(5, utcOffsetSeconds, 0)

def AddUtcOffsetSeconds(builder: flatbuffers.Builder, utcOffsetSeconds: int):
    FloodApiResponseAddUtcOffsetSeconds(builder, utcOffsetSeconds)

def FloodApiResponseAddTimezone(builder: flatbuffers.Builder, timezone: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(timezone), 0)

def AddTimezone(builder: flatbuffers.Builder, timezone: int):
    FloodApiResponseAddTimezone(builder, timezone)

def FloodApiResponseAddTimezoneAbbreviation(builder: flatbuffers.Builder, timezoneAbbreviation: int):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(timezoneAbbreviation), 0)

def AddTimezoneAbbreviation(builder: flatbuffers.Builder, timezoneAbbreviation: int):
    FloodApiResponseAddTimezoneAbbreviation(builder, timezoneAbbreviation)

def FloodApiResponseAddTime(builder: flatbuffers.Builder, time: Any):
    builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder: flatbuffers.Builder, time: Any):
    FloodApiResponseAddTime(builder, time)

def FloodApiResponseAddDaily(builder: flatbuffers.Builder, daily: int):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(daily), 0)

def AddDaily(builder: flatbuffers.Builder, daily: int):
    FloodApiResponseAddDaily(builder, daily)

def FloodApiResponseEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return FloodApiResponseEnd(builder)
