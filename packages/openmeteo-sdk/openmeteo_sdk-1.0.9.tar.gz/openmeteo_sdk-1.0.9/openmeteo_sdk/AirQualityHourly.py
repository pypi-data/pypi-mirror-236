# automatically generated by the FlatBuffers compiler, do not modify

# namespace: openmeteo_sdk

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from openmeteo_sdk.TimeRange import TimeRange
from openmeteo_sdk.ValuesAndUnit import ValuesAndUnit
from typing import Optional
np = import_numpy()

class AirQualityHourly(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirQualityHourly()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirQualityHourly(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AirQualityHourly
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AirQualityHourly
    def Time(self) -> Optional[TimeRange]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            obj = TimeRange()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def Pm10(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def Pm25(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def Dust(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def AerosolOpticalDepth(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def CarbonMonoxide(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def NitrogenDioxide(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def Ammonia(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def Ozone(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def SulphurDioxide(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def UvIndex(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def UvIndexClearSky(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def AlderPollen(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def BirchPollen(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def GrassPollen(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def MugwortPollen(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def OlivePollen(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def RagweedPollen(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def EuropeanAqi(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def EuropeanAqiPm25(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def EuropeanAqiPm10(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def EuropeanAqiNo2(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def EuropeanAqiO3(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def EuropeanAqiSo2(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def UsAqi(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def UsAqiPm25(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def UsAqiPm10(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def UsAqiNo2(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def UsAqiO3(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def UsAqiSo2(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def UsAqiCo(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # AirQualityHourly
    def IsDay(self) -> Optional[ValuesAndUnit]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = ValuesAndUnit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AirQualityHourlyStart(builder: flatbuffers.Builder):
    builder.StartObject(32)

def Start(builder: flatbuffers.Builder):
    AirQualityHourlyStart(builder)

def AirQualityHourlyAddTime(builder: flatbuffers.Builder, time: Any):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(time), 0)

def AddTime(builder: flatbuffers.Builder, time: Any):
    AirQualityHourlyAddTime(builder, time)

def AirQualityHourlyAddPm10(builder: flatbuffers.Builder, pm10: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pm10), 0)

def AddPm10(builder: flatbuffers.Builder, pm10: int):
    AirQualityHourlyAddPm10(builder, pm10)

def AirQualityHourlyAddPm25(builder: flatbuffers.Builder, pm25: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pm25), 0)

def AddPm25(builder: flatbuffers.Builder, pm25: int):
    AirQualityHourlyAddPm25(builder, pm25)

def AirQualityHourlyAddDust(builder: flatbuffers.Builder, dust: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dust), 0)

def AddDust(builder: flatbuffers.Builder, dust: int):
    AirQualityHourlyAddDust(builder, dust)

def AirQualityHourlyAddAerosolOpticalDepth(builder: flatbuffers.Builder, aerosolOpticalDepth: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(aerosolOpticalDepth), 0)

def AddAerosolOpticalDepth(builder: flatbuffers.Builder, aerosolOpticalDepth: int):
    AirQualityHourlyAddAerosolOpticalDepth(builder, aerosolOpticalDepth)

def AirQualityHourlyAddCarbonMonoxide(builder: flatbuffers.Builder, carbonMonoxide: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(carbonMonoxide), 0)

def AddCarbonMonoxide(builder: flatbuffers.Builder, carbonMonoxide: int):
    AirQualityHourlyAddCarbonMonoxide(builder, carbonMonoxide)

def AirQualityHourlyAddNitrogenDioxide(builder: flatbuffers.Builder, nitrogenDioxide: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(nitrogenDioxide), 0)

def AddNitrogenDioxide(builder: flatbuffers.Builder, nitrogenDioxide: int):
    AirQualityHourlyAddNitrogenDioxide(builder, nitrogenDioxide)

def AirQualityHourlyAddAmmonia(builder: flatbuffers.Builder, ammonia: int):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(ammonia), 0)

def AddAmmonia(builder: flatbuffers.Builder, ammonia: int):
    AirQualityHourlyAddAmmonia(builder, ammonia)

def AirQualityHourlyAddOzone(builder: flatbuffers.Builder, ozone: int):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(ozone), 0)

def AddOzone(builder: flatbuffers.Builder, ozone: int):
    AirQualityHourlyAddOzone(builder, ozone)

def AirQualityHourlyAddSulphurDioxide(builder: flatbuffers.Builder, sulphurDioxide: int):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(sulphurDioxide), 0)

def AddSulphurDioxide(builder: flatbuffers.Builder, sulphurDioxide: int):
    AirQualityHourlyAddSulphurDioxide(builder, sulphurDioxide)

def AirQualityHourlyAddUvIndex(builder: flatbuffers.Builder, uvIndex: int):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(uvIndex), 0)

def AddUvIndex(builder: flatbuffers.Builder, uvIndex: int):
    AirQualityHourlyAddUvIndex(builder, uvIndex)

def AirQualityHourlyAddUvIndexClearSky(builder: flatbuffers.Builder, uvIndexClearSky: int):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(uvIndexClearSky), 0)

def AddUvIndexClearSky(builder: flatbuffers.Builder, uvIndexClearSky: int):
    AirQualityHourlyAddUvIndexClearSky(builder, uvIndexClearSky)

def AirQualityHourlyAddAlderPollen(builder: flatbuffers.Builder, alderPollen: int):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(alderPollen), 0)

def AddAlderPollen(builder: flatbuffers.Builder, alderPollen: int):
    AirQualityHourlyAddAlderPollen(builder, alderPollen)

def AirQualityHourlyAddBirchPollen(builder: flatbuffers.Builder, birchPollen: int):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(birchPollen), 0)

def AddBirchPollen(builder: flatbuffers.Builder, birchPollen: int):
    AirQualityHourlyAddBirchPollen(builder, birchPollen)

def AirQualityHourlyAddGrassPollen(builder: flatbuffers.Builder, grassPollen: int):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(grassPollen), 0)

def AddGrassPollen(builder: flatbuffers.Builder, grassPollen: int):
    AirQualityHourlyAddGrassPollen(builder, grassPollen)

def AirQualityHourlyAddMugwortPollen(builder: flatbuffers.Builder, mugwortPollen: int):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(mugwortPollen), 0)

def AddMugwortPollen(builder: flatbuffers.Builder, mugwortPollen: int):
    AirQualityHourlyAddMugwortPollen(builder, mugwortPollen)

def AirQualityHourlyAddOlivePollen(builder: flatbuffers.Builder, olivePollen: int):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(olivePollen), 0)

def AddOlivePollen(builder: flatbuffers.Builder, olivePollen: int):
    AirQualityHourlyAddOlivePollen(builder, olivePollen)

def AirQualityHourlyAddRagweedPollen(builder: flatbuffers.Builder, ragweedPollen: int):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(ragweedPollen), 0)

def AddRagweedPollen(builder: flatbuffers.Builder, ragweedPollen: int):
    AirQualityHourlyAddRagweedPollen(builder, ragweedPollen)

def AirQualityHourlyAddEuropeanAqi(builder: flatbuffers.Builder, europeanAqi: int):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqi), 0)

def AddEuropeanAqi(builder: flatbuffers.Builder, europeanAqi: int):
    AirQualityHourlyAddEuropeanAqi(builder, europeanAqi)

def AirQualityHourlyAddEuropeanAqiPm25(builder: flatbuffers.Builder, europeanAqiPm25: int):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqiPm25), 0)

def AddEuropeanAqiPm25(builder: flatbuffers.Builder, europeanAqiPm25: int):
    AirQualityHourlyAddEuropeanAqiPm25(builder, europeanAqiPm25)

def AirQualityHourlyAddEuropeanAqiPm10(builder: flatbuffers.Builder, europeanAqiPm10: int):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqiPm10), 0)

def AddEuropeanAqiPm10(builder: flatbuffers.Builder, europeanAqiPm10: int):
    AirQualityHourlyAddEuropeanAqiPm10(builder, europeanAqiPm10)

def AirQualityHourlyAddEuropeanAqiNo2(builder: flatbuffers.Builder, europeanAqiNo2: int):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqiNo2), 0)

def AddEuropeanAqiNo2(builder: flatbuffers.Builder, europeanAqiNo2: int):
    AirQualityHourlyAddEuropeanAqiNo2(builder, europeanAqiNo2)

def AirQualityHourlyAddEuropeanAqiO3(builder: flatbuffers.Builder, europeanAqiO3: int):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqiO3), 0)

def AddEuropeanAqiO3(builder: flatbuffers.Builder, europeanAqiO3: int):
    AirQualityHourlyAddEuropeanAqiO3(builder, europeanAqiO3)

def AirQualityHourlyAddEuropeanAqiSo2(builder: flatbuffers.Builder, europeanAqiSo2: int):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(europeanAqiSo2), 0)

def AddEuropeanAqiSo2(builder: flatbuffers.Builder, europeanAqiSo2: int):
    AirQualityHourlyAddEuropeanAqiSo2(builder, europeanAqiSo2)

def AirQualityHourlyAddUsAqi(builder: flatbuffers.Builder, usAqi: int):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(usAqi), 0)

def AddUsAqi(builder: flatbuffers.Builder, usAqi: int):
    AirQualityHourlyAddUsAqi(builder, usAqi)

def AirQualityHourlyAddUsAqiPm25(builder: flatbuffers.Builder, usAqiPm25: int):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiPm25), 0)

def AddUsAqiPm25(builder: flatbuffers.Builder, usAqiPm25: int):
    AirQualityHourlyAddUsAqiPm25(builder, usAqiPm25)

def AirQualityHourlyAddUsAqiPm10(builder: flatbuffers.Builder, usAqiPm10: int):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiPm10), 0)

def AddUsAqiPm10(builder: flatbuffers.Builder, usAqiPm10: int):
    AirQualityHourlyAddUsAqiPm10(builder, usAqiPm10)

def AirQualityHourlyAddUsAqiNo2(builder: flatbuffers.Builder, usAqiNo2: int):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiNo2), 0)

def AddUsAqiNo2(builder: flatbuffers.Builder, usAqiNo2: int):
    AirQualityHourlyAddUsAqiNo2(builder, usAqiNo2)

def AirQualityHourlyAddUsAqiO3(builder: flatbuffers.Builder, usAqiO3: int):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiO3), 0)

def AddUsAqiO3(builder: flatbuffers.Builder, usAqiO3: int):
    AirQualityHourlyAddUsAqiO3(builder, usAqiO3)

def AirQualityHourlyAddUsAqiSo2(builder: flatbuffers.Builder, usAqiSo2: int):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiSo2), 0)

def AddUsAqiSo2(builder: flatbuffers.Builder, usAqiSo2: int):
    AirQualityHourlyAddUsAqiSo2(builder, usAqiSo2)

def AirQualityHourlyAddUsAqiCo(builder: flatbuffers.Builder, usAqiCo: int):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(usAqiCo), 0)

def AddUsAqiCo(builder: flatbuffers.Builder, usAqiCo: int):
    AirQualityHourlyAddUsAqiCo(builder, usAqiCo)

def AirQualityHourlyAddIsDay(builder: flatbuffers.Builder, isDay: int):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(isDay), 0)

def AddIsDay(builder: flatbuffers.Builder, isDay: int):
    AirQualityHourlyAddIsDay(builder, isDay)

def AirQualityHourlyEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return AirQualityHourlyEnd(builder)
