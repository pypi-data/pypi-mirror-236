{"version":3,"file":"changelist.52229b67dbe6c9ce1e04.js","mappings":"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","sources":["webpack://paper-admin/./paper_admin/static/paper_admin/src/js/components/sortable_table/ListTree.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/js/components/sortable_table/SortableTable.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/components/date-range-filter/index.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/components/select2-filter/index.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-actions/paper-actions.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-pagination/paper-pagination.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-search-form/paper-search-form.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/js/changelist.js"],"sourcesContent":["/**\n * @module ListTree\n */\n\n/**\n * @typedef {Object} module:ListTree.ListTreeNode\n * @property {Number}       pk\n * @property {Number}       parent\n * @property {HTMLElement}  element\n * @property {Number[]}     childs\n */\n\n/**\n * Представление списка DOM-элементов в виде дерева.\n * Каждый DOM-элемент должен иметь data-атрибуты \"id\" и \"parent\".\n * Каждый дочерний узел должен идти после родителя.\n */\nexport default class ListTree {\n    /**\n     * @param {NodeList|Element[]} elements\n     */\n    constructor(elements) {\n        this._buildTree(elements);\n    }\n\n    /**\n     * Создание структуры узла дерева.\n     * @param {HTMLElement} child\n     * @returns {module:ListTree.ListTreeNode}\n     * @private\n     */\n    _createNode(child) {\n        const dataset = child.dataset;\n        return {\n            pk: parseInt(dataset.id),\n            parent: parseInt(dataset.parent),\n            element: child,\n            childs: []\n        };\n    }\n\n    /**\n     * Добавление узла дерева в карту, для быстрого поиска по ID.\n     * @param {module:ListTree.ListTreeNode} node\n     * @private\n     */\n    _addNode(node) {\n        if (node && typeof node.pk === \"number\") {\n            this._nodes[node.pk] = node;\n            if (isNaN(node.parent)) {\n                this._roots.push(node);\n            }\n        }\n    }\n\n    /**\n     * Построение дерева из DOM-элементов.\n     * @param {NodeList|Element[]} elements\n     * @private\n     */\n    _buildTree(elements) {\n        const stack = [];\n\n        this._nodes = {};\n        this._roots = [];\n        elements.forEach(elem => {\n            const node = this._createNode(elem);\n            this._addNode(node);\n\n            while (stack.length) {\n                const stackNode = stack[0];\n                if (node.parent === stackNode.pk) {\n                    stackNode.childs.push(node.pk);\n                    stack.unshift(node);\n                    return;\n                }\n                stack.shift();\n            }\n\n            stack.unshift(node);\n        });\n    }\n\n    /**\n     * Получение узла по ID.\n     * @param {Number} pk\n     * @returns {module:ListTree.ListTreeNode}\n     */\n    getNode(pk) {\n        if (!(pk in this._nodes)) {\n            throw new Error(`node ${pk} not found`);\n        }\n\n        return this._nodes[pk];\n    }\n\n    /**\n     * Получение корневых элементов.\n     * @returns {Element[]}\n     */\n    getRoots() {\n        return this._roots.map(rootNode => {\n            return rootNode.element;\n        });\n    }\n\n    /**\n     * Получение всех потомков узла.\n     * @param {Number} pk\n     * @returns {Element[]}\n     */\n    getDescendants(pk) {\n        const node = this.getNode(pk);\n        return node.childs.reduce((result, childId) => {\n            const childNode = this.getNode(childId);\n            if (childNode) {\n                result.push(childNode.element);\n                result = result.concat(this.getDescendants(childId));\n            }\n            return result;\n        }, []);\n    }\n}\n","/**\n * Таблица с возможностью сортировки строк.\n * Каждая строка должна иметь атрибуты data-id и data-order-value.\n * В случае, если строки представляют дерево, то еще необходим атрибут data-parent.\n * @module SortableTable\n */\n\n/**\n * @typedef {Object} module:SortableTable.SortableTableOptions\n * @property {String}  url\n * @property {Boolean} [tree]\n * @property {String}  [handler]\n * @property {String}  [disabledClass]\n */\n\nimport Sortable from \"sortablejs\";\nimport ListTree from \"js/components/sortable_table/ListTree.js\";\n\nexport default class SortableTable {\n    /**\n     * @param {Element} table\n     * @param {module:SortableTable.SortableTableOptions} [options]\n     */\n    constructor(table, options) {\n        /** @type {module:SortableTable.SortableTableOptions} */\n        this.opts = Object.assign(\n            {\n                url: null,\n                tree: false,\n                handler: \".handler\",\n                disabledClass: \"disabled\"\n            },\n            options\n        );\n\n        /** @type {Element} */\n        this.table = table;\n\n        /** @type {Element} */\n        this.tbody = table.querySelector(\"tbody\");\n        if (!this.tbody) {\n            throw new Error(\"table body not found\");\n        }\n\n        /** @type {?ListTree} */\n        this.tree = null;\n\n        this._createSortable();\n    }\n\n    /**\n     * Инициализация плагина сортировки.\n     * @returns {Sortable}\n     * @private\n     */\n    _createSortable() {\n        return Sortable.create(this.tbody, {\n            animation: 0,\n            draggable: \"tr\",\n            handle: this.opts.handler,\n            filter: (event, row, instance) => {\n                if (row.classList.contains(this.opts.disabledClass)) {\n                    return true;\n                }\n\n                const handler = row.querySelector(this.opts.handler);\n                if (handler && handler.classList.contains(this.opts.disabledClass)) {\n                    return true;\n                }\n            },\n            ghostClass: \"sortable-ghost\",\n            onStart: this._onStart.bind(this),\n            onMove: this._onMove.bind(this),\n            onEnd: this._onEnd.bind(this)\n        });\n    }\n\n    /**\n     * Обработчик события начала перетаскивания.\n     * @param evt\n     * @private\n     */\n    _onStart(evt) {\n        const rows = this.tbody.querySelectorAll(\"tr\");\n\n        if (this.opts.tree) {\n            this.tree = new ListTree(rows);\n\n            // Блокируем все узлы, кроме соседних.\n            const currentParentId = parseInt(evt.item.dataset.parent);\n            if (!isNaN(currentParentId)) {\n                rows.forEach(row => {\n                    const parentId = parseInt(row.dataset.parent);\n                    if (!isNaN(parentId) && parentId !== currentParentId) {\n                        row.classList.add(this.opts.disabledClass);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * Обработчик события перетаскивания.\n     * @param evt\n     * @returns {boolean}\n     * @private\n     */\n    _onMove(evt) {\n        return !evt.related.classList.contains(this.opts.disabledClass);\n    }\n\n    /**\n     * Обработчик события завершения перетаскивания.\n     * @param evt\n     * @private\n     */\n    _onEnd(evt) {\n        // Снимаем блокировку со всех узлов.\n        const rows = this.tbody.querySelectorAll(\"tr\");\n        rows.forEach(row => {\n            row.classList.remove(this.opts.disabledClass);\n        });\n\n        const moved = this._getMovedRows(evt);\n        if (!moved.length || moved.length === 1) {\n            return;\n        }\n\n        this._normalizeTable(evt, moved);\n\n        const map = this._createOrderMap(evt, moved);\n\n        // блокировка областей сортировки на время выполнения запроса\n        const handlers = this.tbody.querySelectorAll(this.opts.handler);\n        handlers.forEach(handler => {\n            handler.classList.add(this.opts.disabledClass);\n        });\n\n        // отправка запроса на сервер\n        this._sendRequest(map).then(() => {\n            // снятие блокировки\n            handlers.forEach(handler => {\n                handler.classList.remove(this.opts.disabledClass);\n            });\n        });\n    }\n\n    /**\n     * Получение строк, чей порядок изменился после перетаскивания.\n     * @param evt\n     * @returns {HTMLElement[]}\n     * @private\n     */\n    _getMovedRows(evt) {\n        const sliceStart = Math.min(evt.oldIndex, evt.newIndex);\n        const sliceEnd = Math.max(evt.oldIndex, evt.newIndex);\n        const rows = this.tbody.querySelectorAll(\"tr\");\n        let slice = Array.prototype.slice.call(rows, sliceStart, sliceEnd + 1);\n        if (this.tree) {\n            // пропускаем узлы, не являющиеся соседними\n            const pk = parseInt(evt.item.dataset.id);\n            const node = this.tree.getNode(pk);\n            slice = slice.filter(row => {\n                return parseInt(row.dataset.parent) === node.parent;\n            });\n        }\n        return slice;\n    }\n\n    /**\n     * Создание карты новых значений сортировки элементов.\n     * @param evt\n     * @param {HTMLElement[]} rows\n     * @returns {Object}\n     * @private\n     */\n    _createOrderMap(evt, rows) {\n        const pkArray = [];\n        const orderArray = [];\n\n        // заполнение массивов ID и сортировки\n        rows.forEach(row => {\n            const handle = row.querySelector(this.opts.handler);\n            if (handle) {\n                pkArray.push(parseInt(row.dataset.id));\n                orderArray.push(parseInt(row.dataset.orderValue));\n            }\n        });\n\n        // циклический сдвиг значений сортировки\n        const movedDown = evt.oldIndex < evt.newIndex;\n        if (movedDown) {\n            orderArray.unshift(orderArray.pop());\n        } else {\n            orderArray.push(orderArray.shift());\n        }\n\n        return pkArray.reduce((result, pk, i) => {\n            result[pk] = orderArray[i];\n\n            // обновляем атрибут data-order-value\n            const row = this.tbody.querySelector(`tr[data-id=\"${pk}\"]`);\n            row.setAttribute(\"data-order-value\", orderArray[i]);\n\n            return result;\n        }, {});\n    }\n\n    /**\n     * Нормализация таблицы.\n     * Все дочерние строки перемещаются под своего родителя.\n     * Без этого метода может случиться ситуация, когда элемент\n     * был перемещен между своим соседом и его детьми.\n     * @param evt\n     * @param {Element[]} moved\n     * @private\n     */\n    _normalizeTable(evt, moved) {\n        if (!this.tree) {\n            return;\n        }\n\n        const pk = parseInt(evt.item.dataset.id);\n        const node = this.tree.getNode(pk);\n        const prev = evt.item.previousElementSibling;\n        const next = evt.item.nextElementSibling;\n        const parents = moved.slice();\n        if (prev && next) {\n            // если предыдущая строка - сосед, а следующая - ребенок соседа,\n            // то сосед должен быть в списке нормализации.\n            const isPrevSibling = parseInt(prev.dataset.parent) === node.parent;\n            const isNextChild = parseInt(next.dataset.parent) === parseInt(prev.dataset.id);\n            if (isPrevSibling && isNextChild && !parents.includes(prev)) {\n                parents.unshift(prev);\n            }\n        }\n\n        // перенос детей под родителя\n        parents.forEach(parent => {\n            const pk = parseInt(parent.dataset.id);\n            const childs = this.tree.getDescendants(pk);\n            Element.prototype.after.apply(parent, childs);\n        });\n    }\n\n    /**\n     * Отправка новых значений сортировки на сервер.\n     * @param {Object} data\n     * @returns {Promise<Response>}\n     * @private\n     */\n    _sendRequest(data) {\n        return fetch(this.opts.url, {\n            method: \"POST\",\n            credentials: \"same-origin\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }).then(response => {\n            if (!response.ok) {\n                const error = new Error(`${response.status} ${response.statusText}`);\n                error.response = response;\n                throw error;\n            }\n        });\n    }\n}\n","/* global flatpickr */\nimport XClass from \"data-xclass\";\nimport { dateFormats, flatpickr } from \"components/flatpickr/index.js\";\nimport { BaseComponent } from \"js/components/baseComponent.js\";\nimport getPossibleLocales from \"js/utilities/locale.js\";\n\nexport class DateRangeFilter extends BaseComponent {\n    get Defaults() {\n        return {\n            allowInput: true,\n            altInput: true,\n            locale: this._getLocale(),\n            dateFormat: this._getDateFormat(),\n            parseDate: function(value) {\n                return new Date(value);\n            }\n        };\n    }\n\n    constructor(element, options) {\n        super(options);\n\n        this.startElement = element.querySelector(\"[data-range-start]\");\n        flatpickr(this.startElement, this.options);\n\n        this.endElement = element.querySelector(\"[data-range-end]\");\n        flatpickr(this.endElement, this.options);\n\n        this.on(element, \"click\", event => {\n            const button = event.target.closest(\"[data-today]\");\n            if (button) {\n                const inputGroup = button.closest(\".input-group\");\n                const input = inputGroup && inputGroup.querySelector(\"input\");\n                if (input && input._flatpickr) {\n                    input._flatpickr.setDate(\"today\");\n                }\n            }\n        });\n    }\n\n    destroy() {\n        super.destroy();\n\n        if (this.startElement._flatpickr) {\n            this.startElement._flatpickr.destroy();\n        }\n\n        if (this.endElement._flatpickr) {\n            this.endElement._flatpickr.destroy();\n        }\n    }\n\n    _getLocale() {\n        for (const locale of getPossibleLocales()) {\n            if (flatpickr.l10ns[locale]) {\n                return locale;\n            }\n        }\n        return \"default\";\n    }\n\n    _getDateFormat() {\n        for (const locale of getPossibleLocales()) {\n            if (dateFormats[locale]) {\n                return dateFormats[locale];\n            }\n        }\n        return \"Y-m-d\";\n    }\n}\n\nXClass.register(\"paper-date-range-filter\", {\n    init: function (element) {\n        element._dateRangeFilter = new DateRangeFilter(element);\n    },\n    destroy: function (element) {\n        if (element._dateRangeFilter) {\n            element._dateRangeFilter.destroy();\n            delete element._dateRangeFilter;\n        }\n    }\n});\n","import XClass from \"data-xclass\";\nimport { Select2Component } from \"components/select2/index.js\";\n\nXClass.register(\"paper-select2-filter\", {\n    init: function (element) {\n        element._select2Instance = new Select2Component(element, {\n            width: \"100%\",\n            allowClear: true,\n            containerCssClass: \"select2-container--small\"\n        });\n    },\n    destroy: function (element) {\n        if (element._select2Instance) {\n            element._select2Instance.destroy();\n            delete element._select2Instance;\n        }\n    }\n});\n","/*global gettext, interpolate, ngettext*/\n\nimport \"./paper-actions.scss\";\n\nconst TOGGLE_ALL_ID = \"action-toggle\";\nconst CHECKBOX_CLASS = \"action-select\";\nconst CHECKBOX_LABEL_SELECTOR = \".action-checkbox .custom-control\";\nconst COUNTER_CLASS = \"paper-actions__counter\";\nconst QUESTION_CLASS = \"paper-actions__question\";\nconst ALL_CLASS = \"paper-actions__all\";\nconst CLEAR_CLASS = \"paper-actions__clear\";\nconst ACROSS_INPUT = \".paper-actions__select_across input.select-across\";\n\nfunction initActions(inputs) {\n    let lastChecked = null;\n    const table = document.getElementById(\"result_list\");\n    const allToggleInput = document.getElementById(TOGGLE_ALL_ID);\n\n    // клик на чекбокс \"выбрать все\"\n    allToggleInput.addEventListener(\"change\", () => {\n        const rows = inputs.map(input => input.closest(\"tr\"));\n        toggleRows(rows, allToggleInput.checked);\n        updateCounter(inputs);\n    });\n\n    // пользовательское событие выделения ряда таблицы\n    table.addEventListener(\"select\", event => {\n        const target = event.target;\n        if (target.tagName !== \"TR\" || target.closest(\"table\") !== table) {\n            return;\n        }\n\n        const state = Boolean(event.detail.state);\n        const checkbox = target.querySelector(`.${CHECKBOX_CLASS}`);\n        checkbox.checked = state;\n        target.classList.toggle(\"selected\", state);\n\n        // все ли чекбоксы выделены\n        allToggleInput.checked = inputs.find(input => !input.checked) == null;\n    });\n\n    table.addEventListener(\"click\", event => {\n        const target = event.target;\n\n        // клик вне строк таблицы\n        const row = target.closest(\"tr\");\n        if (!row) {\n            return;\n        }\n\n        const checkbox_clicked = target.closest(CHECKBOX_LABEL_SELECTOR);\n        const checkbox = row.querySelector(`.${CHECKBOX_CLASS}`);\n\n        if (event.shiftKey && lastChecked) {\n            // массовое выделение (через Shift)\n            const lastIndex = inputs.indexOf(lastChecked);\n            const targetIndex = inputs.indexOf(checkbox);\n            const startIndex = Math.min(lastIndex, targetIndex);\n            const endIndex = Math.max(lastIndex, targetIndex);\n            const input_slice = inputs.slice(startIndex, endIndex + 1);\n            const rows = input_slice.map(input => input.closest(\"tr\"));\n            toggleRows(rows, lastChecked.checked);\n        } else if (checkbox_clicked || (event.ctrlKey && !event.shiftKey)) {\n            // клик на чекбокс или на строку через Ctrl\n            lastChecked = checkbox;\n            toggleRows([row], !checkbox.checked);\n        }\n\n        updateCounter(inputs);\n    });\n\n    // отмена выделения текста при клике с удержанным Shift\n    table.addEventListener(\"mousedown\", event => {\n        const target = event.target;\n        if (event.shiftKey && (target.tagName === \"TD\" || target.tagName === \"TH\")) {\n            event.preventDefault();\n        }\n    });\n\n    // выбор всех записей таблицы\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        if (target.tagName === \"A\" && target.closest(`.${QUESTION_CLASS}`)) {\n            event.preventDefault();\n            selectAcross();\n        }\n    });\n\n    // очистка выбора\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        if (target.tagName === \"A\" && target.closest(`.${CLEAR_CLASS}`)) {\n            event.preventDefault();\n            allToggleInput.checked = false;\n            const rows = inputs.map(input => input.closest(\"tr\"));\n            toggleRows(rows, false);\n            clearAcross(inputs);\n            updateCounter(inputs);\n        }\n    });\n\n    protectEditForm();\n}\n\n/**\n * Требование подтверждения выполнения действия, если в форме были изменения.\n */\nfunction protectEditForm() {\n    let list_editable_changed = false;\n    const form = document.getElementById(\"changelist-form\");\n\n    form.addEventListener(\"change\", event => {\n        const target = event.target;\n        if (target.tagName === \"INPUT\") {\n            if (target.closest(`.${CHECKBOX_CLASS}`) || target.id === TOGGLE_ALL_ID) {\n                // nothing\n            } else {\n                list_editable_changed = true;\n            }\n        } else if (target.tagName === \"SELECT\") {\n            if (target.closest(\".action-action\")) {\n                // nothing\n            } else {\n                list_editable_changed = true;\n            }\n        } else {\n            list_editable_changed = true;\n        }\n    });\n\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        const action_button = target.closest('[name=\"index\"]');\n        if (action_button && list_editable_changed) {\n            const agree = confirm(\n                gettext(\n                    \"You have unsaved changes on individual editable fields. If you run an action, your unsaved changes will be lost.\"\n                )\n            );\n            if (!agree) {\n                event.preventDefault();\n            }\n        }\n    });\n\n    document.addEventListener(\"click\", event => {\n        const target = event.target;\n        const save_button = target.closest('[name=\"_save\"]');\n\n        const action_selects = document.querySelectorAll('.actions select[name=\"action\"]');\n        const action_changed = !Array.prototype.every.call(action_selects, select => {\n            return !select.value;\n        });\n\n        if (save_button && action_changed) {\n            let apply;\n            if (list_editable_changed) {\n                apply = confirm(\n                    gettext(\n                        \"You have selected an action, but you haven't saved your changes to individual fields yet. Please click OK to save. You'll need to re-run the action.\"\n                    )\n                );\n            } else {\n                apply = confirm(\n                    gettext(\n                        \"You have selected an action, and you haven't made any changes on individual fields. You're probably looking for the Go button rather than the Save button.\"\n                    )\n                );\n            }\n            if (!apply) {\n                event.preventDefault();\n            }\n        }\n    });\n}\n\n/**\n * Установка/сброс галочки в чекбоксах.\n * @param {HTMLTableRowElement[]} rows\n * @param {Boolean} checked\n */\nfunction toggleRows(rows, checked) {\n    rows.forEach(row => {\n        if (row && row.tagName === \"TR\") {\n            row.dispatchEvent(\n                new CustomEvent(\"select\", {\n                    bubbles: true,\n                    cancelable: true,\n                    detail: {\n                        state: checked\n                    }\n                })\n            );\n        }\n    });\n}\n\nfunction updateCounter(inputs) {\n    const selected = inputs.reduce((sum, input) => sum + (input.checked ? 1 : 0), 0);\n    const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n    counters.forEach(counter => {\n        counter.innerHTML = interpolate(\n            ngettext(\"%(sel)s of %(cnt)s selected\", \"%(sel)s of %(cnt)s selected\", selected),\n            {\n                sel: selected,\n                cnt: counter.dataset.actionsIcnt\n            },\n            true\n        );\n    });\n\n    if (selected === inputs.length) {\n        showQuestion();\n    } else {\n        clearAcross(inputs);\n    }\n}\n\n/**\n * Показ ссылки \"выбрать всё\"\n */\nfunction showQuestion() {\n    const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n    questions.forEach(question => {\n        question.hidden = false;\n    });\n}\n\n/**\n * Установка значения input-элементу для выполнения действия над всеми элементами\n * @param {Boolean} value\n */\nfunction setAcrossInput(value) {\n    const acrossInput = document.querySelectorAll(ACROSS_INPUT);\n    acrossInput.forEach(input => {\n        input.value = Number(value);\n    });\n}\n\nfunction selectAcross() {\n    setAcrossInput(true);\n\n    const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n    counters.forEach(counter => {\n        counter.hidden = true;\n    });\n\n    const allContainers = document.querySelectorAll(`.${ALL_CLASS}`);\n    allContainers.forEach(container => {\n        container.hidden = false;\n    });\n\n    const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n    questions.forEach(question => {\n        question.hidden = true;\n    });\n\n    const clear_buttons = document.querySelectorAll(`.${CLEAR_CLASS}`);\n    clear_buttons.forEach(clear_button => {\n        clear_button.hidden = false;\n    });\n}\n\nfunction clearAcross(inputs) {\n    setAcrossInput(false);\n\n    const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n    counters.forEach(counter => {\n        counter.hidden = false;\n    });\n\n    const allContainers = document.querySelectorAll(`.${ALL_CLASS}`);\n    allContainers.forEach(container => {\n        container.hidden = true;\n    });\n\n    const selected = inputs.reduce((sum, input) => sum + (input.checked ? 1 : 0), 0);\n    const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n    questions.forEach(question => {\n        question.hidden = selected !== inputs.length;\n    });\n\n    const clear_buttons = document.querySelectorAll(`.${CLEAR_CLASS}`);\n    clear_buttons.forEach(clear_button => {\n        clear_button.hidden = true;\n    });\n}\n\nconst checkboxes = document.querySelectorAll(`.${CHECKBOX_CLASS}`);\nif (checkboxes.length) {\n    initActions(Array.from(checkboxes));\n}\n","// Ctrl + Arrows navigation\nwindow.addEventListener(\"keydown\", event => {\n    if (event.defaultPrevented) {\n        return; // Do nothing if the event was already processed\n    }\n\n    if (event.ctrlKey) {\n        const pagination = document.querySelector(\".paper-pagination\");\n        if (!pagination) {\n            return;\n        }\n\n        switch (event.key) {\n            case \"Left\":\n            case \"ArrowLeft\":\n                pagination.querySelector('.page-link[aria-label=\"Previous\"]').click();\n                break;\n            case \"Right\":\n            case \"ArrowRight\":\n                pagination.querySelector('.page-link[aria-label=\"Next\"]').click();\n                break;\n            default:\n                // Quit when this doesn't handle the key event.\n                return;\n        }\n\n        // Cancel the default action to avoid it being handled twice\n        event.preventDefault();\n    }\n});\n","import \"./paper-search-form.scss\";\n\n// Выделение текста в поле поиска при фокусе\nconst form = document.querySelector(\".paper-search-form\");\nconst input = form && form.querySelector(\".form-control\");\ninput &&\n    input.addEventListener(\"focus\", () => {\n        input.select();\n    });\n","import XClass from \"data-xclass\";\nimport SortableTable from \"js/components/sortable_table/SortableTable.js\";\nimport { Select2Component } from \"components/select2/index.js\";\n\n// -----------------\n//  JS Components\n// -----------------\nimport \"components/date-range-filter/index.js\";\nimport \"components/select2-filter/index.js\";\n\n// -----------------\n//  BEM\n// -----------------\nimport \"bem/paper-actions/paper-actions.js\";\nimport \"bem/paper-filter/paper-filter.js\";\nimport \"bem/paper-pagination/paper-pagination.js\";\nimport \"bem/paper-search-form/paper-search-form.js\";\n\n// -----------------\n//  Styles\n// -----------------\nimport \"css/changelist.scss\";\n\n// Select2 для выпадающего списка действий над списком\nXClass.register(\"paper-actions\", {\n    init: function (element) {\n        element._paperActions = new Select2Component(element, {\n            allowClear: true,\n            containerCssClass: \"select2-container--small\",\n            minimumResultsForSearch: Infinity\n        });\n    },\n    destroy: function (element) {\n        if (element._paperActions) {\n            element._paperActions.destroy();\n            delete element._paperActions;\n        }\n    }\n});\n\n// Сортируемые таблицы\nconst table = document.getElementById(\"result_list\");\nif (table && table.classList.contains(\"paper-table--sortable\")) {\n    new SortableTable(table, {\n        url: table.dataset.orderUrl,\n        tree: table.classList.contains(\"paper-table--tree\"),\n        handler: \".paper-table__sort-handler\"\n    });\n}\n"],"names":["ListTree","constructor","elements","this","_buildTree","_createNode","child","dataset","pk","parseInt","id","parent","element","childs","_addNode","node","_nodes","isNaN","_roots","push","stack","forEach","elem","length","stackNode","unshift","shift","getNode","Error","getRoots","map","rootNode","getDescendants","reduce","result","childId","childNode","concat","SortableTable","table","options","opts","Object","assign","url","tree","handler","disabledClass","tbody","querySelector","_createSortable","Sortable","create","animation","draggable","handle","filter","event","row","instance","classList","contains","ghostClass","onStart","_onStart","bind","onMove","_onMove","onEnd","_onEnd","evt","rows","querySelectorAll","currentParentId","item","parentId","add","related","remove","moved","_getMovedRows","_normalizeTable","_createOrderMap","handlers","_sendRequest","then","sliceStart","Math","min","oldIndex","newIndex","sliceEnd","max","slice","Array","prototype","call","pkArray","orderArray","orderValue","pop","i","setAttribute","prev","previousElementSibling","next","nextElementSibling","parents","isPrevSibling","isNextChild","includes","Element","after","apply","data","fetch","method","credentials","headers","body","JSON","stringify","response","ok","error","status","statusText","DateRangeFilter","BaseComponent","Defaults","allowInput","altInput","locale","_getLocale","dateFormat","_getDateFormat","parseDate","value","Date","super","startElement","flatpickr","endElement","on","button","target","closest","inputGroup","input","_flatpickr","setDate","destroy","getPossibleLocales","l10ns","dateFormats","XClass","register","init","_dateRangeFilter","_select2Instance","Select2Component","width","allowClear","containerCssClass","TOGGLE_ALL_ID","CHECKBOX_CLASS","COUNTER_CLASS","QUESTION_CLASS","ALL_CLASS","CLEAR_CLASS","ACROSS_INPUT","toggleRows","checked","tagName","dispatchEvent","CustomEvent","bubbles","cancelable","detail","state","updateCounter","inputs","selected","sum","document","counter","innerHTML","interpolate","ngettext","sel","cnt","actionsIcnt","question","hidden","clearAcross","setAcrossInput","Number","container","clear_button","checkboxes","lastChecked","getElementById","allToggleInput","addEventListener","Boolean","toggle","find","checkbox_clicked","checkbox","shiftKey","lastIndex","indexOf","targetIndex","startIndex","endIndex","ctrlKey","preventDefault","list_editable_changed","confirm","gettext","save_button","action_selects","action_changed","every","select","protectEditForm","initActions","from","window","defaultPrevented","pagination","key","click","form","_paperActions","minimumResultsForSearch","Infinity","orderUrl"],"sourceRoot":""}