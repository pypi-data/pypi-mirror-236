/*
 THIS FILE IS AUTOGENERATED WITH PILOT-CONFIG v{{version}}. DO NOT EDIT
*/

use pilot_sys::var::{PilotBindings, VariableInfo, MemVar, Var, TypeName};
use pilot_sys::async_util::State;

use pilot_macro::{root_var};
use crate::pilot::variables::PlcVars;

{{#each memmodules}}
{{device.spec.decl.rust.decl}}{{/each}}

#[repr(C)]
pub struct plc_dev_t {
{{#each memmodules}}  pub m{{device.slot}}: {{device.spec.decl.rust.name}},
{{/each}}
}


pub trait PilotAccess {
    const FIELD_NUM: u16;
    const VARIABLES: &'static [VariableInfo];

    fn plc_varnumber_to_variable(&self, number: u16) -> Option<&dyn MemVar>;
}

impl<T: Default + TypeName> PilotAccess for Var<T>
where
    Var<T>: MemVar,
{
    const FIELD_NUM: u16 = 1;
    const VARIABLES: &'static [VariableInfo] = &[VariableInfo {
        name: "value",
        ty: T::TYPE_NAME,
        fields: &[],
        field_number_offset: 0,
    }];

    fn plc_varnumber_to_variable(&self, number: u16) -> Option<&dyn MemVar> {
        match number {
            0 => Some(self),
            _ => None,
        }
    }
}