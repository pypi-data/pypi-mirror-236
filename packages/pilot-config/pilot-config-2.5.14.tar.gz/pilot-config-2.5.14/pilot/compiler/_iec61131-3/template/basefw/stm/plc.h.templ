#ifndef RPC_PLC_H
#define RPC_PLC_H
{{#if PLC}}
#include "time.h"
#include "POUS.h"

//PLC located variables in config.h
{{#each PLC.mem}}extern unsigned char *located_{{region}};
{{/each}}
#define BITBAND_BASE 0x22000000 
#define __GET_BIT(array, byte, bit)\
	*((char*)(BITBAND_BASE + ((((int)array)-0x20000000+byte) * 32) + (bit*4)))

/* for set_plc_variable */
#define PLC_VAR_FORCE_BIT     0x8000
#define PLC_VAR_UNFORCE_BIT   0x4000

/*for get_plc_variable*/
#define PLC_VAR_SUBSCRIBE_BIT     0x8000
#define PLC_VAR_UNSUBSCRIBE_BIT   0x4000

{{#each PLC.programs}}extern {{type}} {{resource}}__{{name}};{{/each}}
{{#each PLC.programs}}#define {{name}} {{resource}}__{{name}}{{/each}}

//extern globals
{{#each PLC.variables}}{{externdeclaration}}{{/each}}

//extern located
{{#each PLC.locatedvariables}}{{externlocated}}{{/each}}

extern IEC_TIME __CURRENT_TIME;
extern int plc_state;
extern unsigned long long __tick;

static void plc_tick()
{
  if (plc_state == 1)
  {
  }	
}

void plc_init_modules();
void plc_read_inputs();
void plc_write_outputs();

int plc_configure_read_variables(uint16_t *variables, int count);
int plc_read_variables(uint8_t *buffer);
void plc_configure_write_variables(uint16_t *variables, int count);
void plc_write_variables(uint8_t *buffer, int count);
int plc_read_from_variable(uint16_t number, uint8_t subvalue, uint8_t *buffer, int index);
int plc_write_to_variable(uint16_t varnumber, uint8_t subvalue, uint8_t *buffer, int index);
int plc_find_next_updated_variable();
void plc_port_config(uint8_t slot, uint8_t port, uint16_t baud);
{{/if}}
#endif