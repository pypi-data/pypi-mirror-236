# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ActionApprovalEmailNotificationArgs',
    'ActionApprovalWebhookNotificationArgs',
    'ActionAzureMethodArgs',
    'ActionGithubMethodArgs',
    'ActionGitlabMethodArgs',
    'ActionKafkaMethodArgs',
    'ActionUserPropertiesArgs',
    'ActionUserPropertiesArrayPropsArgs',
    'ActionUserPropertiesArrayPropsBooleanItemsArgs',
    'ActionUserPropertiesArrayPropsDatasetArgs',
    'ActionUserPropertiesArrayPropsDatasetRuleArgs',
    'ActionUserPropertiesArrayPropsDatasetRuleValueArgs',
    'ActionUserPropertiesArrayPropsNumberItemsArgs',
    'ActionUserPropertiesArrayPropsObjectItemsArgs',
    'ActionUserPropertiesArrayPropsStringItemsArgs',
    'ActionUserPropertiesBooleanPropsArgs',
    'ActionUserPropertiesBooleanPropsDatasetArgs',
    'ActionUserPropertiesBooleanPropsDatasetRuleArgs',
    'ActionUserPropertiesBooleanPropsDatasetRuleValueArgs',
    'ActionUserPropertiesNumberPropsArgs',
    'ActionUserPropertiesNumberPropsDatasetArgs',
    'ActionUserPropertiesNumberPropsDatasetRuleArgs',
    'ActionUserPropertiesNumberPropsDatasetRuleValueArgs',
    'ActionUserPropertiesObjectPropsArgs',
    'ActionUserPropertiesObjectPropsDatasetArgs',
    'ActionUserPropertiesObjectPropsDatasetRuleArgs',
    'ActionUserPropertiesObjectPropsDatasetRuleValueArgs',
    'ActionUserPropertiesStringPropsArgs',
    'ActionUserPropertiesStringPropsDatasetArgs',
    'ActionUserPropertiesStringPropsDatasetRuleArgs',
    'ActionUserPropertiesStringPropsDatasetRuleValueArgs',
    'ActionWebhookMethodArgs',
    'BlueprintCalculationPropertiesArgs',
    'BlueprintKafkaChangelogDestinationArgs',
    'BlueprintMirrorPropertiesArgs',
    'BlueprintPropertiesArgs',
    'BlueprintPropertiesArrayPropsArgs',
    'BlueprintPropertiesArrayPropsBooleanItemsArgs',
    'BlueprintPropertiesArrayPropsNumberItemsArgs',
    'BlueprintPropertiesArrayPropsObjectItemsArgs',
    'BlueprintPropertiesArrayPropsStringItemsArgs',
    'BlueprintPropertiesBooleanPropsArgs',
    'BlueprintPropertiesNumberPropsArgs',
    'BlueprintPropertiesObjectPropsArgs',
    'BlueprintPropertiesStringPropsArgs',
    'BlueprintPropertiesStringPropsSpecAuthenticationArgs',
    'BlueprintRelationsArgs',
    'BlueprintTeamInheritanceArgs',
    'BlueprintWebhookChangelogDestinationArgs',
    'EntityPropertiesArgs',
    'EntityPropertiesArrayPropsArgs',
    'EntityRelationsArgs',
    'ScorecardRuleArgs',
    'ScorecardRuleQueryArgs',
    'ScorecardRuleQueryConditionArgs',
    'WebhookMappingArgs',
    'WebhookMappingEntityArgs',
    'WebhookSecurityArgs',
]

@pulumi.input_type
class ActionApprovalEmailNotificationArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        pass



@pulumi.input_type
class ActionApprovalWebhookNotificationArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        ActionApprovalWebhookNotificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ActionAzureMethodArgs:
    def __init__(__self__, *,
                 org: pulumi.Input[str],
                 webhook: pulumi.Input[str]):
        ActionAzureMethodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            org=org,
            webhook=webhook,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             org: pulumi.Input[str],
             webhook: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("org", org)
        _setter("webhook", webhook)

    @property
    @pulumi.getter
    def org(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: pulumi.Input[str]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def webhook(self) -> pulumi.Input[str]:
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(self, value: pulumi.Input[str]):
        pulumi.set(self, "webhook", value)


@pulumi.input_type
class ActionGithubMethodArgs:
    def __init__(__self__, *,
                 org: pulumi.Input[str],
                 repo: pulumi.Input[str],
                 workflow: pulumi.Input[str],
                 omit_payload: Optional[pulumi.Input[bool]] = None,
                 omit_user_inputs: Optional[pulumi.Input[bool]] = None,
                 report_workflow_status: Optional[pulumi.Input[bool]] = None):
        ActionGithubMethodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            org=org,
            repo=repo,
            workflow=workflow,
            omit_payload=omit_payload,
            omit_user_inputs=omit_user_inputs,
            report_workflow_status=report_workflow_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             org: pulumi.Input[str],
             repo: pulumi.Input[str],
             workflow: pulumi.Input[str],
             omit_payload: Optional[pulumi.Input[bool]] = None,
             omit_user_inputs: Optional[pulumi.Input[bool]] = None,
             report_workflow_status: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'omitPayload' in kwargs:
            omit_payload = kwargs['omitPayload']
        if 'omitUserInputs' in kwargs:
            omit_user_inputs = kwargs['omitUserInputs']
        if 'reportWorkflowStatus' in kwargs:
            report_workflow_status = kwargs['reportWorkflowStatus']

        _setter("org", org)
        _setter("repo", repo)
        _setter("workflow", workflow)
        if omit_payload is not None:
            _setter("omit_payload", omit_payload)
        if omit_user_inputs is not None:
            _setter("omit_user_inputs", omit_user_inputs)
        if report_workflow_status is not None:
            _setter("report_workflow_status", report_workflow_status)

    @property
    @pulumi.getter
    def org(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: pulumi.Input[str]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def workflow(self) -> pulumi.Input[str]:
        return pulumi.get(self, "workflow")

    @workflow.setter
    def workflow(self, value: pulumi.Input[str]):
        pulumi.set(self, "workflow", value)

    @property
    @pulumi.getter(name="omitPayload")
    def omit_payload(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "omit_payload")

    @omit_payload.setter
    def omit_payload(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "omit_payload", value)

    @property
    @pulumi.getter(name="omitUserInputs")
    def omit_user_inputs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "omit_user_inputs")

    @omit_user_inputs.setter
    def omit_user_inputs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "omit_user_inputs", value)

    @property
    @pulumi.getter(name="reportWorkflowStatus")
    def report_workflow_status(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "report_workflow_status")

    @report_workflow_status.setter
    def report_workflow_status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "report_workflow_status", value)


@pulumi.input_type
class ActionGitlabMethodArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[str],
                 project_name: pulumi.Input[str],
                 agent: Optional[pulumi.Input[bool]] = None,
                 default_ref: Optional[pulumi.Input[str]] = None,
                 omit_payload: Optional[pulumi.Input[bool]] = None,
                 omit_user_inputs: Optional[pulumi.Input[bool]] = None):
        ActionGitlabMethodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_name=group_name,
            project_name=project_name,
            agent=agent,
            default_ref=default_ref,
            omit_payload=omit_payload,
            omit_user_inputs=omit_user_inputs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_name: pulumi.Input[str],
             project_name: pulumi.Input[str],
             agent: Optional[pulumi.Input[bool]] = None,
             default_ref: Optional[pulumi.Input[str]] = None,
             omit_payload: Optional[pulumi.Input[bool]] = None,
             omit_user_inputs: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'groupName' in kwargs:
            group_name = kwargs['groupName']
        if 'projectName' in kwargs:
            project_name = kwargs['projectName']
        if 'defaultRef' in kwargs:
            default_ref = kwargs['defaultRef']
        if 'omitPayload' in kwargs:
            omit_payload = kwargs['omitPayload']
        if 'omitUserInputs' in kwargs:
            omit_user_inputs = kwargs['omitUserInputs']

        _setter("group_name", group_name)
        _setter("project_name", project_name)
        if agent is not None:
            _setter("agent", agent)
        if default_ref is not None:
            _setter("default_ref", default_ref)
        if omit_payload is not None:
            _setter("omit_payload", omit_payload)
        if omit_user_inputs is not None:
            _setter("omit_user_inputs", omit_user_inputs)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "agent", value)

    @property
    @pulumi.getter(name="defaultRef")
    def default_ref(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_ref")

    @default_ref.setter
    def default_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_ref", value)

    @property
    @pulumi.getter(name="omitPayload")
    def omit_payload(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "omit_payload")

    @omit_payload.setter
    def omit_payload(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "omit_payload", value)

    @property
    @pulumi.getter(name="omitUserInputs")
    def omit_user_inputs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "omit_user_inputs")

    @omit_user_inputs.setter
    def omit_user_inputs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "omit_user_inputs", value)


@pulumi.input_type
class ActionKafkaMethodArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        pass



@pulumi.input_type
class ActionUserPropertiesArgs:
    def __init__(__self__, *,
                 array_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesArrayPropsArgs']]]] = None,
                 boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesBooleanPropsArgs']]]] = None,
                 number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesNumberPropsArgs']]]] = None,
                 object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesObjectPropsArgs']]]] = None,
                 string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesStringPropsArgs']]]] = None):
        ActionUserPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            array_props=array_props,
            boolean_props=boolean_props,
            number_props=number_props,
            object_props=object_props,
            string_props=string_props,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             array_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesArrayPropsArgs']]]] = None,
             boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesBooleanPropsArgs']]]] = None,
             number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesNumberPropsArgs']]]] = None,
             object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesObjectPropsArgs']]]] = None,
             string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesStringPropsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'arrayProps' in kwargs:
            array_props = kwargs['arrayProps']
        if 'booleanProps' in kwargs:
            boolean_props = kwargs['booleanProps']
        if 'numberProps' in kwargs:
            number_props = kwargs['numberProps']
        if 'objectProps' in kwargs:
            object_props = kwargs['objectProps']
        if 'stringProps' in kwargs:
            string_props = kwargs['stringProps']

        if array_props is not None:
            _setter("array_props", array_props)
        if boolean_props is not None:
            _setter("boolean_props", boolean_props)
        if number_props is not None:
            _setter("number_props", number_props)
        if object_props is not None:
            _setter("object_props", object_props)
        if string_props is not None:
            _setter("string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesArrayPropsArgs']]]]:
        return pulumi.get(self, "array_props")

    @array_props.setter
    def array_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesArrayPropsArgs']]]]):
        pulumi.set(self, "array_props", value)

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesBooleanPropsArgs']]]]:
        return pulumi.get(self, "boolean_props")

    @boolean_props.setter
    def boolean_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesBooleanPropsArgs']]]]):
        pulumi.set(self, "boolean_props", value)

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesNumberPropsArgs']]]]:
        return pulumi.get(self, "number_props")

    @number_props.setter
    def number_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesNumberPropsArgs']]]]):
        pulumi.set(self, "number_props", value)

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesObjectPropsArgs']]]]:
        return pulumi.get(self, "object_props")

    @object_props.setter
    def object_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesObjectPropsArgs']]]]):
        pulumi.set(self, "object_props", value)

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesStringPropsArgs']]]]:
        return pulumi.get(self, "string_props")

    @string_props.setter
    def string_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionUserPropertiesStringPropsArgs']]]]):
        pulumi.set(self, "string_props", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsArgs:
    def __init__(__self__, *,
                 boolean_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsBooleanItemsArgs']] = None,
                 dataset: Optional[pulumi.Input['ActionUserPropertiesArrayPropsDatasetArgs']] = None,
                 default_jq_query: Optional[pulumi.Input[str]] = None,
                 depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_items: Optional[pulumi.Input[int]] = None,
                 min_items: Optional[pulumi.Input[int]] = None,
                 number_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsNumberItemsArgs']] = None,
                 object_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsObjectItemsArgs']] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 string_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsStringItemsArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        ActionUserPropertiesArrayPropsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            boolean_items=boolean_items,
            dataset=dataset,
            default_jq_query=default_jq_query,
            depends_ons=depends_ons,
            description=description,
            icon=icon,
            max_items=max_items,
            min_items=min_items,
            number_items=number_items,
            object_items=object_items,
            required=required,
            string_items=string_items,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             boolean_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsBooleanItemsArgs']] = None,
             dataset: Optional[pulumi.Input['ActionUserPropertiesArrayPropsDatasetArgs']] = None,
             default_jq_query: Optional[pulumi.Input[str]] = None,
             depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             icon: Optional[pulumi.Input[str]] = None,
             max_items: Optional[pulumi.Input[int]] = None,
             min_items: Optional[pulumi.Input[int]] = None,
             number_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsNumberItemsArgs']] = None,
             object_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsObjectItemsArgs']] = None,
             required: Optional[pulumi.Input[bool]] = None,
             string_items: Optional[pulumi.Input['ActionUserPropertiesArrayPropsStringItemsArgs']] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'booleanItems' in kwargs:
            boolean_items = kwargs['booleanItems']
        if 'defaultJqQuery' in kwargs:
            default_jq_query = kwargs['defaultJqQuery']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']
        if 'maxItems' in kwargs:
            max_items = kwargs['maxItems']
        if 'minItems' in kwargs:
            min_items = kwargs['minItems']
        if 'numberItems' in kwargs:
            number_items = kwargs['numberItems']
        if 'objectItems' in kwargs:
            object_items = kwargs['objectItems']
        if 'stringItems' in kwargs:
            string_items = kwargs['stringItems']

        if boolean_items is not None:
            _setter("boolean_items", boolean_items)
        if dataset is not None:
            _setter("dataset", dataset)
        if default_jq_query is not None:
            _setter("default_jq_query", default_jq_query)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if icon is not None:
            _setter("icon", icon)
        if max_items is not None:
            _setter("max_items", max_items)
        if min_items is not None:
            _setter("min_items", min_items)
        if number_items is not None:
            _setter("number_items", number_items)
        if object_items is not None:
            _setter("object_items", object_items)
        if required is not None:
            _setter("required", required)
        if string_items is not None:
            _setter("string_items", string_items)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[pulumi.Input['ActionUserPropertiesArrayPropsBooleanItemsArgs']]:
        return pulumi.get(self, "boolean_items")

    @boolean_items.setter
    def boolean_items(self, value: Optional[pulumi.Input['ActionUserPropertiesArrayPropsBooleanItemsArgs']]):
        pulumi.set(self, "boolean_items", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['ActionUserPropertiesArrayPropsDatasetArgs']]:
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['ActionUserPropertiesArrayPropsDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_jq_query")

    @default_jq_query.setter
    def default_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_jq_query", value)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "depends_ons")

    @depends_ons.setter
    def depends_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "depends_ons", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_items")

    @max_items.setter
    def max_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_items", value)

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_items")

    @min_items.setter
    def min_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_items", value)

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[pulumi.Input['ActionUserPropertiesArrayPropsNumberItemsArgs']]:
        return pulumi.get(self, "number_items")

    @number_items.setter
    def number_items(self, value: Optional[pulumi.Input['ActionUserPropertiesArrayPropsNumberItemsArgs']]):
        pulumi.set(self, "number_items", value)

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[pulumi.Input['ActionUserPropertiesArrayPropsObjectItemsArgs']]:
        return pulumi.get(self, "object_items")

    @object_items.setter
    def object_items(self, value: Optional[pulumi.Input['ActionUserPropertiesArrayPropsObjectItemsArgs']]):
        pulumi.set(self, "object_items", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[pulumi.Input['ActionUserPropertiesArrayPropsStringItemsArgs']]:
        return pulumi.get(self, "string_items")

    @string_items.setter
    def string_items(self, value: Optional[pulumi.Input['ActionUserPropertiesArrayPropsStringItemsArgs']]):
        pulumi.set(self, "string_items", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsBooleanItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        ActionUserPropertiesArrayPropsBooleanItemsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsDatasetArgs:
    def __init__(__self__, *,
                 combinator: pulumi.Input[str],
                 rules: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesArrayPropsDatasetRuleArgs']]]):
        ActionUserPropertiesArrayPropsDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: pulumi.Input[str],
             rules: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesArrayPropsDatasetRuleArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "combinator")

    @combinator.setter
    def combinator(self, value: pulumi.Input[str]):
        pulumi.set(self, "combinator", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesArrayPropsDatasetRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesArrayPropsDatasetRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsDatasetRuleArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input['ActionUserPropertiesArrayPropsDatasetRuleValueArgs'],
                 blueprint: Optional[pulumi.Input[str]] = None,
                 property: Optional[pulumi.Input[str]] = None):
        ActionUserPropertiesArrayPropsDatasetRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            value=value,
            blueprint=blueprint,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: pulumi.Input[str],
             value: pulumi.Input['ActionUserPropertiesArrayPropsDatasetRuleValueArgs'],
             blueprint: Optional[pulumi.Input[str]] = None,
             property: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("value", value)
        if blueprint is not None:
            _setter("blueprint", blueprint)
        if property is not None:
            _setter("property", property)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['ActionUserPropertiesArrayPropsDatasetRuleValueArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['ActionUserPropertiesArrayPropsDatasetRuleValueArgs']):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsDatasetRuleValueArgs:
    def __init__(__self__, *,
                 jq_query: pulumi.Input[str]):
        ActionUserPropertiesArrayPropsDatasetRuleValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jq_query=jq_query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jq_query: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jqQuery' in kwargs:
            jq_query = kwargs['jqQuery']

        _setter("jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "jq_query")

    @jq_query.setter
    def jq_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "jq_query", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsNumberItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 enum_jq_query: Optional[pulumi.Input[str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        ActionUserPropertiesArrayPropsNumberItemsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
            enum_jq_query=enum_jq_query,
            enums=enums,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             enum_jq_query: Optional[pulumi.Input[str]] = None,
             enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enumJqQuery' in kwargs:
            enum_jq_query = kwargs['enumJqQuery']

        if defaults is not None:
            _setter("defaults", defaults)
        if enum_jq_query is not None:
            _setter("enum_jq_query", enum_jq_query)
        if enums is not None:
            _setter("enums", enums)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enum_jq_query")

    @enum_jq_query.setter
    def enum_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enum_jq_query", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "enums", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsObjectItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None):
        ActionUserPropertiesArrayPropsObjectItemsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class ActionUserPropertiesArrayPropsStringItemsArgs:
    def __init__(__self__, *,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enum_jq_query: Optional[pulumi.Input[str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None):
        ActionUserPropertiesArrayPropsStringItemsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            blueprint=blueprint,
            defaults=defaults,
            enum_jq_query=enum_jq_query,
            enums=enums,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             blueprint: Optional[pulumi.Input[str]] = None,
             defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             enum_jq_query: Optional[pulumi.Input[str]] = None,
             enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             format: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enumJqQuery' in kwargs:
            enum_jq_query = kwargs['enumJqQuery']

        if blueprint is not None:
            _setter("blueprint", blueprint)
        if defaults is not None:
            _setter("defaults", defaults)
        if enum_jq_query is not None:
            _setter("enum_jq_query", enum_jq_query)
        if enums is not None:
            _setter("enums", enums)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enum_jq_query")

    @enum_jq_query.setter
    def enum_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enum_jq_query", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class ActionUserPropertiesBooleanPropsArgs:
    def __init__(__self__, *,
                 dataset: Optional[pulumi.Input['ActionUserPropertiesBooleanPropsDatasetArgs']] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 default_jq_query: Optional[pulumi.Input[str]] = None,
                 depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        ActionUserPropertiesBooleanPropsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset=dataset,
            default=default,
            default_jq_query=default_jq_query,
            depends_ons=depends_ons,
            description=description,
            icon=icon,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset: Optional[pulumi.Input['ActionUserPropertiesBooleanPropsDatasetArgs']] = None,
             default: Optional[pulumi.Input[bool]] = None,
             default_jq_query: Optional[pulumi.Input[str]] = None,
             depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             icon: Optional[pulumi.Input[str]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultJqQuery' in kwargs:
            default_jq_query = kwargs['defaultJqQuery']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']

        if dataset is not None:
            _setter("dataset", dataset)
        if default is not None:
            _setter("default", default)
        if default_jq_query is not None:
            _setter("default_jq_query", default_jq_query)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if icon is not None:
            _setter("icon", icon)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['ActionUserPropertiesBooleanPropsDatasetArgs']]:
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['ActionUserPropertiesBooleanPropsDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_jq_query")

    @default_jq_query.setter
    def default_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_jq_query", value)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "depends_ons")

    @depends_ons.setter
    def depends_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "depends_ons", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ActionUserPropertiesBooleanPropsDatasetArgs:
    def __init__(__self__, *,
                 combinator: pulumi.Input[str],
                 rules: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesBooleanPropsDatasetRuleArgs']]]):
        ActionUserPropertiesBooleanPropsDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: pulumi.Input[str],
             rules: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesBooleanPropsDatasetRuleArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "combinator")

    @combinator.setter
    def combinator(self, value: pulumi.Input[str]):
        pulumi.set(self, "combinator", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesBooleanPropsDatasetRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesBooleanPropsDatasetRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ActionUserPropertiesBooleanPropsDatasetRuleArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input['ActionUserPropertiesBooleanPropsDatasetRuleValueArgs'],
                 blueprint: Optional[pulumi.Input[str]] = None,
                 property: Optional[pulumi.Input[str]] = None):
        ActionUserPropertiesBooleanPropsDatasetRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            value=value,
            blueprint=blueprint,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: pulumi.Input[str],
             value: pulumi.Input['ActionUserPropertiesBooleanPropsDatasetRuleValueArgs'],
             blueprint: Optional[pulumi.Input[str]] = None,
             property: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("value", value)
        if blueprint is not None:
            _setter("blueprint", blueprint)
        if property is not None:
            _setter("property", property)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['ActionUserPropertiesBooleanPropsDatasetRuleValueArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['ActionUserPropertiesBooleanPropsDatasetRuleValueArgs']):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ActionUserPropertiesBooleanPropsDatasetRuleValueArgs:
    def __init__(__self__, *,
                 jq_query: pulumi.Input[str]):
        ActionUserPropertiesBooleanPropsDatasetRuleValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jq_query=jq_query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jq_query: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jqQuery' in kwargs:
            jq_query = kwargs['jqQuery']

        _setter("jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "jq_query")

    @jq_query.setter
    def jq_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "jq_query", value)


@pulumi.input_type
class ActionUserPropertiesNumberPropsArgs:
    def __init__(__self__, *,
                 dataset: Optional[pulumi.Input['ActionUserPropertiesNumberPropsDatasetArgs']] = None,
                 default: Optional[pulumi.Input[float]] = None,
                 default_jq_query: Optional[pulumi.Input[str]] = None,
                 depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum_jq_query: Optional[pulumi.Input[str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 maximum: Optional[pulumi.Input[float]] = None,
                 minimum: Optional[pulumi.Input[float]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        ActionUserPropertiesNumberPropsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset=dataset,
            default=default,
            default_jq_query=default_jq_query,
            depends_ons=depends_ons,
            description=description,
            enum_jq_query=enum_jq_query,
            enums=enums,
            icon=icon,
            maximum=maximum,
            minimum=minimum,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset: Optional[pulumi.Input['ActionUserPropertiesNumberPropsDatasetArgs']] = None,
             default: Optional[pulumi.Input[float]] = None,
             default_jq_query: Optional[pulumi.Input[str]] = None,
             depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             enum_jq_query: Optional[pulumi.Input[str]] = None,
             enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             icon: Optional[pulumi.Input[str]] = None,
             maximum: Optional[pulumi.Input[float]] = None,
             minimum: Optional[pulumi.Input[float]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultJqQuery' in kwargs:
            default_jq_query = kwargs['defaultJqQuery']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']
        if 'enumJqQuery' in kwargs:
            enum_jq_query = kwargs['enumJqQuery']

        if dataset is not None:
            _setter("dataset", dataset)
        if default is not None:
            _setter("default", default)
        if default_jq_query is not None:
            _setter("default_jq_query", default_jq_query)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if enum_jq_query is not None:
            _setter("enum_jq_query", enum_jq_query)
        if enums is not None:
            _setter("enums", enums)
        if icon is not None:
            _setter("icon", icon)
        if maximum is not None:
            _setter("maximum", maximum)
        if minimum is not None:
            _setter("minimum", minimum)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['ActionUserPropertiesNumberPropsDatasetArgs']]:
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['ActionUserPropertiesNumberPropsDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_jq_query")

    @default_jq_query.setter
    def default_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_jq_query", value)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "depends_ons")

    @depends_ons.setter
    def depends_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "depends_ons", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enum_jq_query")

    @enum_jq_query.setter
    def enum_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enum_jq_query", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ActionUserPropertiesNumberPropsDatasetArgs:
    def __init__(__self__, *,
                 combinator: pulumi.Input[str],
                 rules: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesNumberPropsDatasetRuleArgs']]]):
        ActionUserPropertiesNumberPropsDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: pulumi.Input[str],
             rules: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesNumberPropsDatasetRuleArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "combinator")

    @combinator.setter
    def combinator(self, value: pulumi.Input[str]):
        pulumi.set(self, "combinator", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesNumberPropsDatasetRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesNumberPropsDatasetRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ActionUserPropertiesNumberPropsDatasetRuleArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input['ActionUserPropertiesNumberPropsDatasetRuleValueArgs'],
                 blueprint: Optional[pulumi.Input[str]] = None,
                 property: Optional[pulumi.Input[str]] = None):
        ActionUserPropertiesNumberPropsDatasetRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            value=value,
            blueprint=blueprint,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: pulumi.Input[str],
             value: pulumi.Input['ActionUserPropertiesNumberPropsDatasetRuleValueArgs'],
             blueprint: Optional[pulumi.Input[str]] = None,
             property: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("value", value)
        if blueprint is not None:
            _setter("blueprint", blueprint)
        if property is not None:
            _setter("property", property)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['ActionUserPropertiesNumberPropsDatasetRuleValueArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['ActionUserPropertiesNumberPropsDatasetRuleValueArgs']):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ActionUserPropertiesNumberPropsDatasetRuleValueArgs:
    def __init__(__self__, *,
                 jq_query: pulumi.Input[str]):
        ActionUserPropertiesNumberPropsDatasetRuleValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jq_query=jq_query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jq_query: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jqQuery' in kwargs:
            jq_query = kwargs['jqQuery']

        _setter("jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "jq_query")

    @jq_query.setter
    def jq_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "jq_query", value)


@pulumi.input_type
class ActionUserPropertiesObjectPropsArgs:
    def __init__(__self__, *,
                 dataset: Optional[pulumi.Input['ActionUserPropertiesObjectPropsDatasetArgs']] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 default_jq_query: Optional[pulumi.Input[str]] = None,
                 depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        ActionUserPropertiesObjectPropsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset=dataset,
            default=default,
            default_jq_query=default_jq_query,
            depends_ons=depends_ons,
            description=description,
            encryption=encryption,
            icon=icon,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset: Optional[pulumi.Input['ActionUserPropertiesObjectPropsDatasetArgs']] = None,
             default: Optional[pulumi.Input[str]] = None,
             default_jq_query: Optional[pulumi.Input[str]] = None,
             depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             encryption: Optional[pulumi.Input[str]] = None,
             icon: Optional[pulumi.Input[str]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultJqQuery' in kwargs:
            default_jq_query = kwargs['defaultJqQuery']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']

        if dataset is not None:
            _setter("dataset", dataset)
        if default is not None:
            _setter("default", default)
        if default_jq_query is not None:
            _setter("default_jq_query", default_jq_query)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if encryption is not None:
            _setter("encryption", encryption)
        if icon is not None:
            _setter("icon", icon)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['ActionUserPropertiesObjectPropsDatasetArgs']]:
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['ActionUserPropertiesObjectPropsDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_jq_query")

    @default_jq_query.setter
    def default_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_jq_query", value)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "depends_ons")

    @depends_ons.setter
    def depends_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "depends_ons", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ActionUserPropertiesObjectPropsDatasetArgs:
    def __init__(__self__, *,
                 combinator: pulumi.Input[str],
                 rules: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesObjectPropsDatasetRuleArgs']]]):
        ActionUserPropertiesObjectPropsDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: pulumi.Input[str],
             rules: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesObjectPropsDatasetRuleArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "combinator")

    @combinator.setter
    def combinator(self, value: pulumi.Input[str]):
        pulumi.set(self, "combinator", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesObjectPropsDatasetRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesObjectPropsDatasetRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ActionUserPropertiesObjectPropsDatasetRuleArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input['ActionUserPropertiesObjectPropsDatasetRuleValueArgs'],
                 blueprint: Optional[pulumi.Input[str]] = None,
                 property: Optional[pulumi.Input[str]] = None):
        ActionUserPropertiesObjectPropsDatasetRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            value=value,
            blueprint=blueprint,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: pulumi.Input[str],
             value: pulumi.Input['ActionUserPropertiesObjectPropsDatasetRuleValueArgs'],
             blueprint: Optional[pulumi.Input[str]] = None,
             property: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("value", value)
        if blueprint is not None:
            _setter("blueprint", blueprint)
        if property is not None:
            _setter("property", property)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['ActionUserPropertiesObjectPropsDatasetRuleValueArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['ActionUserPropertiesObjectPropsDatasetRuleValueArgs']):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ActionUserPropertiesObjectPropsDatasetRuleValueArgs:
    def __init__(__self__, *,
                 jq_query: pulumi.Input[str]):
        ActionUserPropertiesObjectPropsDatasetRuleValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jq_query=jq_query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jq_query: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jqQuery' in kwargs:
            jq_query = kwargs['jqQuery']

        _setter("jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "jq_query")

    @jq_query.setter
    def jq_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "jq_query", value)


@pulumi.input_type
class ActionUserPropertiesStringPropsArgs:
    def __init__(__self__, *,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 dataset: Optional[pulumi.Input['ActionUserPropertiesStringPropsDatasetArgs']] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 default_jq_query: Optional[pulumi.Input[str]] = None,
                 depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 enum_jq_query: Optional[pulumi.Input[str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_length: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        ActionUserPropertiesStringPropsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            blueprint=blueprint,
            dataset=dataset,
            default=default,
            default_jq_query=default_jq_query,
            depends_ons=depends_ons,
            description=description,
            encryption=encryption,
            enum_jq_query=enum_jq_query,
            enums=enums,
            format=format,
            icon=icon,
            max_length=max_length,
            min_length=min_length,
            pattern=pattern,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             blueprint: Optional[pulumi.Input[str]] = None,
             dataset: Optional[pulumi.Input['ActionUserPropertiesStringPropsDatasetArgs']] = None,
             default: Optional[pulumi.Input[str]] = None,
             default_jq_query: Optional[pulumi.Input[str]] = None,
             depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             encryption: Optional[pulumi.Input[str]] = None,
             enum_jq_query: Optional[pulumi.Input[str]] = None,
             enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             format: Optional[pulumi.Input[str]] = None,
             icon: Optional[pulumi.Input[str]] = None,
             max_length: Optional[pulumi.Input[int]] = None,
             min_length: Optional[pulumi.Input[int]] = None,
             pattern: Optional[pulumi.Input[str]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultJqQuery' in kwargs:
            default_jq_query = kwargs['defaultJqQuery']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']
        if 'enumJqQuery' in kwargs:
            enum_jq_query = kwargs['enumJqQuery']
        if 'maxLength' in kwargs:
            max_length = kwargs['maxLength']
        if 'minLength' in kwargs:
            min_length = kwargs['minLength']

        if blueprint is not None:
            _setter("blueprint", blueprint)
        if dataset is not None:
            _setter("dataset", dataset)
        if default is not None:
            _setter("default", default)
        if default_jq_query is not None:
            _setter("default_jq_query", default_jq_query)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if encryption is not None:
            _setter("encryption", encryption)
        if enum_jq_query is not None:
            _setter("enum_jq_query", enum_jq_query)
        if enums is not None:
            _setter("enums", enums)
        if format is not None:
            _setter("format", format)
        if icon is not None:
            _setter("icon", icon)
        if max_length is not None:
            _setter("max_length", max_length)
        if min_length is not None:
            _setter("min_length", min_length)
        if pattern is not None:
            _setter("pattern", pattern)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['ActionUserPropertiesStringPropsDatasetArgs']]:
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['ActionUserPropertiesStringPropsDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_jq_query")

    @default_jq_query.setter
    def default_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_jq_query", value)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "depends_ons")

    @depends_ons.setter
    def depends_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "depends_ons", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enum_jq_query")

    @enum_jq_query.setter
    def enum_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enum_jq_query", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ActionUserPropertiesStringPropsDatasetArgs:
    def __init__(__self__, *,
                 combinator: pulumi.Input[str],
                 rules: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesStringPropsDatasetRuleArgs']]]):
        ActionUserPropertiesStringPropsDatasetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: pulumi.Input[str],
             rules: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesStringPropsDatasetRuleArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "combinator")

    @combinator.setter
    def combinator(self, value: pulumi.Input[str]):
        pulumi.set(self, "combinator", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesStringPropsDatasetRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ActionUserPropertiesStringPropsDatasetRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ActionUserPropertiesStringPropsDatasetRuleArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input['ActionUserPropertiesStringPropsDatasetRuleValueArgs'],
                 blueprint: Optional[pulumi.Input[str]] = None,
                 property: Optional[pulumi.Input[str]] = None):
        ActionUserPropertiesStringPropsDatasetRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            value=value,
            blueprint=blueprint,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: pulumi.Input[str],
             value: pulumi.Input['ActionUserPropertiesStringPropsDatasetRuleValueArgs'],
             blueprint: Optional[pulumi.Input[str]] = None,
             property: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("value", value)
        if blueprint is not None:
            _setter("blueprint", blueprint)
        if property is not None:
            _setter("property", property)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['ActionUserPropertiesStringPropsDatasetRuleValueArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['ActionUserPropertiesStringPropsDatasetRuleValueArgs']):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ActionUserPropertiesStringPropsDatasetRuleValueArgs:
    def __init__(__self__, *,
                 jq_query: pulumi.Input[str]):
        ActionUserPropertiesStringPropsDatasetRuleValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jq_query=jq_query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jq_query: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jqQuery' in kwargs:
            jq_query = kwargs['jqQuery']

        _setter("jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "jq_query")

    @jq_query.setter
    def jq_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "jq_query", value)


@pulumi.input_type
class ActionWebhookMethodArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 agent: Optional[pulumi.Input[bool]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 synchronized: Optional[pulumi.Input[bool]] = None):
        ActionWebhookMethodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            agent=agent,
            method=method,
            synchronized=synchronized,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: pulumi.Input[str],
             agent: Optional[pulumi.Input[bool]] = None,
             method: Optional[pulumi.Input[str]] = None,
             synchronized: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("url", url)
        if agent is not None:
            _setter("agent", agent)
        if method is not None:
            _setter("method", method)
        if synchronized is not None:
            _setter("synchronized", synchronized)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "agent", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def synchronized(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "synchronized")

    @synchronized.setter
    def synchronized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "synchronized", value)


@pulumi.input_type
class BlueprintCalculationPropertiesArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input[str],
                 type: pulumi.Input[str],
                 colorized: Optional[pulumi.Input[bool]] = None,
                 colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        BlueprintCalculationPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            calculation=calculation,
            type=type,
            colorized=colorized,
            colors=colors,
            description=description,
            format=format,
            icon=icon,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             calculation: pulumi.Input[str],
             type: pulumi.Input[str],
             colorized: Optional[pulumi.Input[bool]] = None,
             colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             format: Optional[pulumi.Input[str]] = None,
             icon: Optional[pulumi.Input[str]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("calculation", calculation)
        _setter("type", type)
        if colorized is not None:
            _setter("colorized", colorized)
        if colors is not None:
            _setter("colors", colors)
        if description is not None:
            _setter("description", description)
        if format is not None:
            _setter("format", format)
        if icon is not None:
            _setter("icon", icon)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input[str]):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def colorized(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "colorized")

    @colorized.setter
    def colorized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "colorized", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintKafkaChangelogDestinationArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        pass



@pulumi.input_type
class BlueprintMirrorPropertiesArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 title: Optional[pulumi.Input[str]] = None):
        BlueprintMirrorPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: pulumi.Input[str],
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("path", path)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesArgs:
    def __init__(__self__, *,
                 array_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgs']]]] = None,
                 boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgs']]]] = None,
                 number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgs']]]] = None,
                 object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgs']]]] = None,
                 string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgs']]]] = None):
        BlueprintPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            array_props=array_props,
            boolean_props=boolean_props,
            number_props=number_props,
            object_props=object_props,
            string_props=string_props,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             array_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgs']]]] = None,
             boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgs']]]] = None,
             number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgs']]]] = None,
             object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgs']]]] = None,
             string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'arrayProps' in kwargs:
            array_props = kwargs['arrayProps']
        if 'booleanProps' in kwargs:
            boolean_props = kwargs['booleanProps']
        if 'numberProps' in kwargs:
            number_props = kwargs['numberProps']
        if 'objectProps' in kwargs:
            object_props = kwargs['objectProps']
        if 'stringProps' in kwargs:
            string_props = kwargs['stringProps']

        if array_props is not None:
            _setter("array_props", array_props)
        if boolean_props is not None:
            _setter("boolean_props", boolean_props)
        if number_props is not None:
            _setter("number_props", number_props)
        if object_props is not None:
            _setter("object_props", object_props)
        if string_props is not None:
            _setter("string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgs']]]]:
        return pulumi.get(self, "array_props")

    @array_props.setter
    def array_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgs']]]]):
        pulumi.set(self, "array_props", value)

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgs']]]]:
        return pulumi.get(self, "boolean_props")

    @boolean_props.setter
    def boolean_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgs']]]]):
        pulumi.set(self, "boolean_props", value)

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgs']]]]:
        return pulumi.get(self, "number_props")

    @number_props.setter
    def number_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgs']]]]):
        pulumi.set(self, "number_props", value)

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgs']]]]:
        return pulumi.get(self, "object_props")

    @object_props.setter
    def object_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgs']]]]):
        pulumi.set(self, "object_props", value)

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgs']]]]:
        return pulumi.get(self, "string_props")

    @string_props.setter
    def string_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgs']]]]):
        pulumi.set(self, "string_props", value)


@pulumi.input_type
class BlueprintPropertiesArrayPropsArgs:
    def __init__(__self__, *,
                 boolean_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_items: Optional[pulumi.Input[int]] = None,
                 min_items: Optional[pulumi.Input[int]] = None,
                 number_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgs']] = None,
                 object_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgs']] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 string_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        BlueprintPropertiesArrayPropsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            boolean_items=boolean_items,
            description=description,
            icon=icon,
            max_items=max_items,
            min_items=min_items,
            number_items=number_items,
            object_items=object_items,
            required=required,
            string_items=string_items,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             boolean_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgs']] = None,
             description: Optional[pulumi.Input[str]] = None,
             icon: Optional[pulumi.Input[str]] = None,
             max_items: Optional[pulumi.Input[int]] = None,
             min_items: Optional[pulumi.Input[int]] = None,
             number_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgs']] = None,
             object_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgs']] = None,
             required: Optional[pulumi.Input[bool]] = None,
             string_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgs']] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'booleanItems' in kwargs:
            boolean_items = kwargs['booleanItems']
        if 'maxItems' in kwargs:
            max_items = kwargs['maxItems']
        if 'minItems' in kwargs:
            min_items = kwargs['minItems']
        if 'numberItems' in kwargs:
            number_items = kwargs['numberItems']
        if 'objectItems' in kwargs:
            object_items = kwargs['objectItems']
        if 'stringItems' in kwargs:
            string_items = kwargs['stringItems']

        if boolean_items is not None:
            _setter("boolean_items", boolean_items)
        if description is not None:
            _setter("description", description)
        if icon is not None:
            _setter("icon", icon)
        if max_items is not None:
            _setter("max_items", max_items)
        if min_items is not None:
            _setter("min_items", min_items)
        if number_items is not None:
            _setter("number_items", number_items)
        if object_items is not None:
            _setter("object_items", object_items)
        if required is not None:
            _setter("required", required)
        if string_items is not None:
            _setter("string_items", string_items)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgs']]:
        return pulumi.get(self, "boolean_items")

    @boolean_items.setter
    def boolean_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgs']]):
        pulumi.set(self, "boolean_items", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_items")

    @max_items.setter
    def max_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_items", value)

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_items")

    @min_items.setter
    def min_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_items", value)

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgs']]:
        return pulumi.get(self, "number_items")

    @number_items.setter
    def number_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgs']]):
        pulumi.set(self, "number_items", value)

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgs']]:
        return pulumi.get(self, "object_items")

    @object_items.setter
    def object_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgs']]):
        pulumi.set(self, "object_items", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgs']]:
        return pulumi.get(self, "string_items")

    @string_items.setter
    def string_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgs']]):
        pulumi.set(self, "string_items", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesArrayPropsBooleanItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        BlueprintPropertiesArrayPropsBooleanItemsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class BlueprintPropertiesArrayPropsNumberItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        BlueprintPropertiesArrayPropsNumberItemsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class BlueprintPropertiesArrayPropsObjectItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        BlueprintPropertiesArrayPropsObjectItemsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)


@pulumi.input_type
class BlueprintPropertiesArrayPropsStringItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None):
        BlueprintPropertiesArrayPropsStringItemsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             format: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class BlueprintPropertiesBooleanPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        BlueprintPropertiesBooleanPropsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            description=description,
            icon=icon,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional[pulumi.Input[bool]] = None,
             description: Optional[pulumi.Input[str]] = None,
             icon: Optional[pulumi.Input[str]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if default is not None:
            _setter("default", default)
        if description is not None:
            _setter("description", description)
        if icon is not None:
            _setter("icon", icon)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesNumberPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[float]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum_colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 maximum: Optional[pulumi.Input[float]] = None,
                 minimum: Optional[pulumi.Input[float]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        BlueprintPropertiesNumberPropsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            description=description,
            enum_colors=enum_colors,
            enums=enums,
            icon=icon,
            maximum=maximum,
            minimum=minimum,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional[pulumi.Input[float]] = None,
             description: Optional[pulumi.Input[str]] = None,
             enum_colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             icon: Optional[pulumi.Input[str]] = None,
             maximum: Optional[pulumi.Input[float]] = None,
             minimum: Optional[pulumi.Input[float]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enumColors' in kwargs:
            enum_colors = kwargs['enumColors']

        if default is not None:
            _setter("default", default)
        if description is not None:
            _setter("description", description)
        if enum_colors is not None:
            _setter("enum_colors", enum_colors)
        if enums is not None:
            _setter("enums", enums)
        if icon is not None:
            _setter("icon", icon)
        if maximum is not None:
            _setter("maximum", maximum)
        if minimum is not None:
            _setter("minimum", minimum)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "enum_colors")

    @enum_colors.setter
    def enum_colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "enum_colors", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesObjectPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        BlueprintPropertiesObjectPropsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            description=description,
            icon=icon,
            required=required,
            spec=spec,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             icon: Optional[pulumi.Input[str]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             spec: Optional[pulumi.Input[str]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if default is not None:
            _setter("default", default)
        if description is not None:
            _setter("description", description)
        if icon is not None:
            _setter("icon", icon)
        if required is not None:
            _setter("required", required)
        if spec is not None:
            _setter("spec", spec)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesStringPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum_colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_length: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 spec_authentication: Optional[pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        BlueprintPropertiesStringPropsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            description=description,
            enum_colors=enum_colors,
            enums=enums,
            format=format,
            icon=icon,
            max_length=max_length,
            min_length=min_length,
            pattern=pattern,
            required=required,
            spec=spec,
            spec_authentication=spec_authentication,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             enum_colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             format: Optional[pulumi.Input[str]] = None,
             icon: Optional[pulumi.Input[str]] = None,
             max_length: Optional[pulumi.Input[int]] = None,
             min_length: Optional[pulumi.Input[int]] = None,
             pattern: Optional[pulumi.Input[str]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             spec: Optional[pulumi.Input[str]] = None,
             spec_authentication: Optional[pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgs']] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enumColors' in kwargs:
            enum_colors = kwargs['enumColors']
        if 'maxLength' in kwargs:
            max_length = kwargs['maxLength']
        if 'minLength' in kwargs:
            min_length = kwargs['minLength']
        if 'specAuthentication' in kwargs:
            spec_authentication = kwargs['specAuthentication']

        if default is not None:
            _setter("default", default)
        if description is not None:
            _setter("description", description)
        if enum_colors is not None:
            _setter("enum_colors", enum_colors)
        if enums is not None:
            _setter("enums", enums)
        if format is not None:
            _setter("format", format)
        if icon is not None:
            _setter("icon", icon)
        if max_length is not None:
            _setter("max_length", max_length)
        if min_length is not None:
            _setter("min_length", min_length)
        if pattern is not None:
            _setter("pattern", pattern)
        if required is not None:
            _setter("required", required)
        if spec is not None:
            _setter("spec", spec)
        if spec_authentication is not None:
            _setter("spec_authentication", spec_authentication)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "enum_colors")

    @enum_colors.setter
    def enum_colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "enum_colors", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="specAuthentication")
    def spec_authentication(self) -> Optional[pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgs']]:
        return pulumi.get(self, "spec_authentication")

    @spec_authentication.setter
    def spec_authentication(self, value: Optional[pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgs']]):
        pulumi.set(self, "spec_authentication", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintPropertiesStringPropsSpecAuthenticationArgs:
    def __init__(__self__, *,
                 authorization_url: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 token_url: pulumi.Input[str]):
        BlueprintPropertiesStringPropsSpecAuthenticationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authorization_url=authorization_url,
            client_id=client_id,
            token_url=token_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authorization_url: pulumi.Input[str],
             client_id: pulumi.Input[str],
             token_url: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authorizationUrl' in kwargs:
            authorization_url = kwargs['authorizationUrl']
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'tokenUrl' in kwargs:
            token_url = kwargs['tokenUrl']

        _setter("authorization_url", authorization_url)
        _setter("client_id", client_id)
        _setter("token_url", token_url)

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authorization_url")

    @authorization_url.setter
    def authorization_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class BlueprintRelationsArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 many: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        BlueprintRelationsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            many=many,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: pulumi.Input[str],
             many: Optional[pulumi.Input[bool]] = None,
             required: Optional[pulumi.Input[bool]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("target", target)
        if many is not None:
            _setter("many", many)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def many(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "many")

    @many.setter
    def many(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "many", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class BlueprintTeamInheritanceArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str]):
        BlueprintTeamInheritanceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("path", path)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class BlueprintWebhookChangelogDestinationArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 agent: Optional[pulumi.Input[bool]] = None):
        BlueprintWebhookChangelogDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            agent=agent,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: pulumi.Input[str],
             agent: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("url", url)
        if agent is not None:
            _setter("agent", agent)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "agent", value)


@pulumi.input_type
class EntityPropertiesArgs:
    def __init__(__self__, *,
                 array_props: Optional[pulumi.Input['EntityPropertiesArrayPropsArgs']] = None,
                 boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        EntityPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            array_props=array_props,
            boolean_props=boolean_props,
            number_props=number_props,
            object_props=object_props,
            string_props=string_props,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             array_props: Optional[pulumi.Input['EntityPropertiesArrayPropsArgs']] = None,
             boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
             number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
             object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'arrayProps' in kwargs:
            array_props = kwargs['arrayProps']
        if 'booleanProps' in kwargs:
            boolean_props = kwargs['booleanProps']
        if 'numberProps' in kwargs:
            number_props = kwargs['numberProps']
        if 'objectProps' in kwargs:
            object_props = kwargs['objectProps']
        if 'stringProps' in kwargs:
            string_props = kwargs['stringProps']

        if array_props is not None:
            _setter("array_props", array_props)
        if boolean_props is not None:
            _setter("boolean_props", boolean_props)
        if number_props is not None:
            _setter("number_props", number_props)
        if object_props is not None:
            _setter("object_props", object_props)
        if string_props is not None:
            _setter("string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[pulumi.Input['EntityPropertiesArrayPropsArgs']]:
        return pulumi.get(self, "array_props")

    @array_props.setter
    def array_props(self, value: Optional[pulumi.Input['EntityPropertiesArrayPropsArgs']]):
        pulumi.set(self, "array_props", value)

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]:
        return pulumi.get(self, "boolean_props")

    @boolean_props.setter
    def boolean_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]):
        pulumi.set(self, "boolean_props", value)

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]:
        return pulumi.get(self, "number_props")

    @number_props.setter
    def number_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]):
        pulumi.set(self, "number_props", value)

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "object_props")

    @object_props.setter
    def object_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "object_props", value)

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "string_props")

    @string_props.setter
    def string_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "string_props", value)


@pulumi.input_type
class EntityPropertiesArrayPropsArgs:
    def __init__(__self__, *,
                 boolean_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[bool]]]]]] = None,
                 number_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[float]]]]]] = None,
                 object_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 string_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None):
        EntityPropertiesArrayPropsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            boolean_items=boolean_items,
            number_items=number_items,
            object_items=object_items,
            string_items=string_items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             boolean_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[bool]]]]]] = None,
             number_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[float]]]]]] = None,
             object_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
             string_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'booleanItems' in kwargs:
            boolean_items = kwargs['booleanItems']
        if 'numberItems' in kwargs:
            number_items = kwargs['numberItems']
        if 'objectItems' in kwargs:
            object_items = kwargs['objectItems']
        if 'stringItems' in kwargs:
            string_items = kwargs['stringItems']

        if boolean_items is not None:
            _setter("boolean_items", boolean_items)
        if number_items is not None:
            _setter("number_items", number_items)
        if object_items is not None:
            _setter("object_items", object_items)
        if string_items is not None:
            _setter("string_items", string_items)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[bool]]]]]]:
        return pulumi.get(self, "boolean_items")

    @boolean_items.setter
    def boolean_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[bool]]]]]]):
        pulumi.set(self, "boolean_items", value)

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[float]]]]]]:
        return pulumi.get(self, "number_items")

    @number_items.setter
    def number_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[float]]]]]]):
        pulumi.set(self, "number_items", value)

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        return pulumi.get(self, "object_items")

    @object_items.setter
    def object_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "object_items", value)

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        return pulumi.get(self, "string_items")

    @string_items.setter
    def string_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "string_items", value)


@pulumi.input_type
class EntityRelationsArgs:
    def __init__(__self__, *,
                 many_relations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 single_relations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        EntityRelationsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            many_relations=many_relations,
            single_relations=single_relations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             many_relations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
             single_relations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'manyRelations' in kwargs:
            many_relations = kwargs['manyRelations']
        if 'singleRelations' in kwargs:
            single_relations = kwargs['singleRelations']

        if many_relations is not None:
            _setter("many_relations", many_relations)
        if single_relations is not None:
            _setter("single_relations", single_relations)

    @property
    @pulumi.getter(name="manyRelations")
    def many_relations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        return pulumi.get(self, "many_relations")

    @many_relations.setter
    def many_relations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "many_relations", value)

    @property
    @pulumi.getter(name="singleRelations")
    def single_relations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "single_relations")

    @single_relations.setter
    def single_relations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "single_relations", value)


@pulumi.input_type
class ScorecardRuleArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 level: pulumi.Input[str],
                 query: pulumi.Input['ScorecardRuleQueryArgs'],
                 title: pulumi.Input[str]):
        ScorecardRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identifier=identifier,
            level=level,
            query=query,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identifier: pulumi.Input[str],
             level: pulumi.Input[str],
             query: pulumi.Input['ScorecardRuleQueryArgs'],
             title: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("identifier", identifier)
        _setter("level", level)
        _setter("query", query)
        _setter("title", title)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input['ScorecardRuleQueryArgs']:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input['ScorecardRuleQueryArgs']):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ScorecardRuleQueryArgs:
    def __init__(__self__, *,
                 combinator: pulumi.Input[str],
                 conditions: pulumi.Input[Sequence[pulumi.Input['ScorecardRuleQueryConditionArgs']]]):
        ScorecardRuleQueryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            conditions=conditions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: pulumi.Input[str],
             conditions: pulumi.Input[Sequence[pulumi.Input['ScorecardRuleQueryConditionArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("conditions", conditions)

    @property
    @pulumi.getter
    def combinator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "combinator")

    @combinator.setter
    def combinator(self, value: pulumi.Input[str]):
        pulumi.set(self, "combinator", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ScorecardRuleQueryConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ScorecardRuleQueryConditionArgs']]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ScorecardRuleQueryConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 property: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        ScorecardRuleQueryConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            property=property,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: pulumi.Input[str],
             property: pulumi.Input[str],
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("property", property)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class WebhookMappingArgs:
    def __init__(__self__, *,
                 blueprint: pulumi.Input[str],
                 entity: pulumi.Input['WebhookMappingEntityArgs'],
                 filter: Optional[pulumi.Input[str]] = None,
                 items_to_parse: Optional[pulumi.Input[str]] = None):
        WebhookMappingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            blueprint=blueprint,
            entity=entity,
            filter=filter,
            items_to_parse=items_to_parse,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             blueprint: pulumi.Input[str],
             entity: pulumi.Input['WebhookMappingEntityArgs'],
             filter: Optional[pulumi.Input[str]] = None,
             items_to_parse: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'itemsToParse' in kwargs:
            items_to_parse = kwargs['itemsToParse']

        _setter("blueprint", blueprint)
        _setter("entity", entity)
        if filter is not None:
            _setter("filter", filter)
        if items_to_parse is not None:
            _setter("items_to_parse", items_to_parse)

    @property
    @pulumi.getter
    def blueprint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def entity(self) -> pulumi.Input['WebhookMappingEntityArgs']:
        return pulumi.get(self, "entity")

    @entity.setter
    def entity(self, value: pulumi.Input['WebhookMappingEntityArgs']):
        pulumi.set(self, "entity", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="itemsToParse")
    def items_to_parse(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "items_to_parse")

    @items_to_parse.setter
    def items_to_parse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "items_to_parse", value)


@pulumi.input_type
class WebhookMappingEntityArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 icon: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 relations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 team: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        WebhookMappingEntityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identifier=identifier,
            icon=icon,
            properties=properties,
            relations=relations,
            team=team,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identifier: pulumi.Input[str],
             icon: Optional[pulumi.Input[str]] = None,
             properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             relations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
             team: Optional[pulumi.Input[str]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("identifier", identifier)
        if icon is not None:
            _setter("icon", icon)
        if properties is not None:
            _setter("properties", properties)
        if relations is not None:
            _setter("relations", relations)
        if team is not None:
            _setter("team", team)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def relations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "relations")

    @relations.setter
    def relations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "relations", value)

    @property
    @pulumi.getter
    def team(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WebhookSecurityArgs:
    def __init__(__self__, *,
                 request_identifier_path: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 signature_algorithm: Optional[pulumi.Input[str]] = None,
                 signature_header_name: Optional[pulumi.Input[str]] = None,
                 signature_prefix: Optional[pulumi.Input[str]] = None):
        WebhookSecurityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            request_identifier_path=request_identifier_path,
            secret=secret,
            signature_algorithm=signature_algorithm,
            signature_header_name=signature_header_name,
            signature_prefix=signature_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             request_identifier_path: Optional[pulumi.Input[str]] = None,
             secret: Optional[pulumi.Input[str]] = None,
             signature_algorithm: Optional[pulumi.Input[str]] = None,
             signature_header_name: Optional[pulumi.Input[str]] = None,
             signature_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'requestIdentifierPath' in kwargs:
            request_identifier_path = kwargs['requestIdentifierPath']
        if 'signatureAlgorithm' in kwargs:
            signature_algorithm = kwargs['signatureAlgorithm']
        if 'signatureHeaderName' in kwargs:
            signature_header_name = kwargs['signatureHeaderName']
        if 'signaturePrefix' in kwargs:
            signature_prefix = kwargs['signaturePrefix']

        if request_identifier_path is not None:
            _setter("request_identifier_path", request_identifier_path)
        if secret is not None:
            _setter("secret", secret)
        if signature_algorithm is not None:
            _setter("signature_algorithm", signature_algorithm)
        if signature_header_name is not None:
            _setter("signature_header_name", signature_header_name)
        if signature_prefix is not None:
            _setter("signature_prefix", signature_prefix)

    @property
    @pulumi.getter(name="requestIdentifierPath")
    def request_identifier_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_identifier_path")

    @request_identifier_path.setter
    def request_identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_identifier_path", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_algorithm", value)

    @property
    @pulumi.getter(name="signatureHeaderName")
    def signature_header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signature_header_name")

    @signature_header_name.setter
    def signature_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_header_name", value)

    @property
    @pulumi.getter(name="signaturePrefix")
    def signature_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signature_prefix")

    @signature_prefix.setter
    def signature_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_prefix", value)


