# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ActionApprovalEmailNotification',
    'ActionApprovalWebhookNotification',
    'ActionAzureMethod',
    'ActionGithubMethod',
    'ActionGitlabMethod',
    'ActionKafkaMethod',
    'ActionUserProperties',
    'ActionUserPropertiesArrayProps',
    'ActionUserPropertiesArrayPropsBooleanItems',
    'ActionUserPropertiesArrayPropsDataset',
    'ActionUserPropertiesArrayPropsDatasetRule',
    'ActionUserPropertiesArrayPropsDatasetRuleValue',
    'ActionUserPropertiesArrayPropsNumberItems',
    'ActionUserPropertiesArrayPropsObjectItems',
    'ActionUserPropertiesArrayPropsStringItems',
    'ActionUserPropertiesBooleanProps',
    'ActionUserPropertiesBooleanPropsDataset',
    'ActionUserPropertiesBooleanPropsDatasetRule',
    'ActionUserPropertiesBooleanPropsDatasetRuleValue',
    'ActionUserPropertiesNumberProps',
    'ActionUserPropertiesNumberPropsDataset',
    'ActionUserPropertiesNumberPropsDatasetRule',
    'ActionUserPropertiesNumberPropsDatasetRuleValue',
    'ActionUserPropertiesObjectProps',
    'ActionUserPropertiesObjectPropsDataset',
    'ActionUserPropertiesObjectPropsDatasetRule',
    'ActionUserPropertiesObjectPropsDatasetRuleValue',
    'ActionUserPropertiesStringProps',
    'ActionUserPropertiesStringPropsDataset',
    'ActionUserPropertiesStringPropsDatasetRule',
    'ActionUserPropertiesStringPropsDatasetRuleValue',
    'ActionWebhookMethod',
    'BlueprintCalculationProperties',
    'BlueprintKafkaChangelogDestination',
    'BlueprintMirrorProperties',
    'BlueprintProperties',
    'BlueprintPropertiesArrayProps',
    'BlueprintPropertiesArrayPropsBooleanItems',
    'BlueprintPropertiesArrayPropsNumberItems',
    'BlueprintPropertiesArrayPropsObjectItems',
    'BlueprintPropertiesArrayPropsStringItems',
    'BlueprintPropertiesBooleanProps',
    'BlueprintPropertiesNumberProps',
    'BlueprintPropertiesObjectProps',
    'BlueprintPropertiesStringProps',
    'BlueprintPropertiesStringPropsSpecAuthentication',
    'BlueprintRelations',
    'BlueprintTeamInheritance',
    'BlueprintWebhookChangelogDestination',
    'EntityProperties',
    'EntityPropertiesArrayProps',
    'EntityRelations',
    'ScorecardRule',
    'ScorecardRuleQuery',
    'ScorecardRuleQueryCondition',
    'WebhookMapping',
    'WebhookMappingEntity',
    'WebhookSecurity',
]

@pulumi.output_type
class ActionApprovalEmailNotification(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        pass



@pulumi.output_type
class ActionApprovalWebhookNotification(dict):
    def __init__(__self__, *,
                 url: str):
        ActionApprovalWebhookNotification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class ActionAzureMethod(dict):
    def __init__(__self__, *,
                 org: str,
                 webhook: str):
        ActionAzureMethod._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            org=org,
            webhook=webhook,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             org: str,
             webhook: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("org", org)
        _setter("webhook", webhook)

    @property
    @pulumi.getter
    def org(self) -> str:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def webhook(self) -> str:
        return pulumi.get(self, "webhook")


@pulumi.output_type
class ActionGithubMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "omitPayload":
            suggest = "omit_payload"
        elif key == "omitUserInputs":
            suggest = "omit_user_inputs"
        elif key == "reportWorkflowStatus":
            suggest = "report_workflow_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGithubMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGithubMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGithubMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 org: str,
                 repo: str,
                 workflow: str,
                 omit_payload: Optional[bool] = None,
                 omit_user_inputs: Optional[bool] = None,
                 report_workflow_status: Optional[bool] = None):
        ActionGithubMethod._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            org=org,
            repo=repo,
            workflow=workflow,
            omit_payload=omit_payload,
            omit_user_inputs=omit_user_inputs,
            report_workflow_status=report_workflow_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             org: str,
             repo: str,
             workflow: str,
             omit_payload: Optional[bool] = None,
             omit_user_inputs: Optional[bool] = None,
             report_workflow_status: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'omitPayload' in kwargs:
            omit_payload = kwargs['omitPayload']
        if 'omitUserInputs' in kwargs:
            omit_user_inputs = kwargs['omitUserInputs']
        if 'reportWorkflowStatus' in kwargs:
            report_workflow_status = kwargs['reportWorkflowStatus']

        _setter("org", org)
        _setter("repo", repo)
        _setter("workflow", workflow)
        if omit_payload is not None:
            _setter("omit_payload", omit_payload)
        if omit_user_inputs is not None:
            _setter("omit_user_inputs", omit_user_inputs)
        if report_workflow_status is not None:
            _setter("report_workflow_status", report_workflow_status)

    @property
    @pulumi.getter
    def org(self) -> str:
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def repo(self) -> str:
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def workflow(self) -> str:
        return pulumi.get(self, "workflow")

    @property
    @pulumi.getter(name="omitPayload")
    def omit_payload(self) -> Optional[bool]:
        return pulumi.get(self, "omit_payload")

    @property
    @pulumi.getter(name="omitUserInputs")
    def omit_user_inputs(self) -> Optional[bool]:
        return pulumi.get(self, "omit_user_inputs")

    @property
    @pulumi.getter(name="reportWorkflowStatus")
    def report_workflow_status(self) -> Optional[bool]:
        return pulumi.get(self, "report_workflow_status")


@pulumi.output_type
class ActionGitlabMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "projectName":
            suggest = "project_name"
        elif key == "defaultRef":
            suggest = "default_ref"
        elif key == "omitPayload":
            suggest = "omit_payload"
        elif key == "omitUserInputs":
            suggest = "omit_user_inputs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGitlabMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGitlabMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGitlabMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: str,
                 project_name: str,
                 agent: Optional[bool] = None,
                 default_ref: Optional[str] = None,
                 omit_payload: Optional[bool] = None,
                 omit_user_inputs: Optional[bool] = None):
        ActionGitlabMethod._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_name=group_name,
            project_name=project_name,
            agent=agent,
            default_ref=default_ref,
            omit_payload=omit_payload,
            omit_user_inputs=omit_user_inputs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_name: str,
             project_name: str,
             agent: Optional[bool] = None,
             default_ref: Optional[str] = None,
             omit_payload: Optional[bool] = None,
             omit_user_inputs: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'groupName' in kwargs:
            group_name = kwargs['groupName']
        if 'projectName' in kwargs:
            project_name = kwargs['projectName']
        if 'defaultRef' in kwargs:
            default_ref = kwargs['defaultRef']
        if 'omitPayload' in kwargs:
            omit_payload = kwargs['omitPayload']
        if 'omitUserInputs' in kwargs:
            omit_user_inputs = kwargs['omitUserInputs']

        _setter("group_name", group_name)
        _setter("project_name", project_name)
        if agent is not None:
            _setter("agent", agent)
        if default_ref is not None:
            _setter("default_ref", default_ref)
        if omit_payload is not None:
            _setter("omit_payload", omit_payload)
        if omit_user_inputs is not None:
            _setter("omit_user_inputs", omit_user_inputs)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def agent(self) -> Optional[bool]:
        return pulumi.get(self, "agent")

    @property
    @pulumi.getter(name="defaultRef")
    def default_ref(self) -> Optional[str]:
        return pulumi.get(self, "default_ref")

    @property
    @pulumi.getter(name="omitPayload")
    def omit_payload(self) -> Optional[bool]:
        return pulumi.get(self, "omit_payload")

    @property
    @pulumi.getter(name="omitUserInputs")
    def omit_user_inputs(self) -> Optional[bool]:
        return pulumi.get(self, "omit_user_inputs")


@pulumi.output_type
class ActionKafkaMethod(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        pass



@pulumi.output_type
class ActionUserProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arrayProps":
            suggest = "array_props"
        elif key == "booleanProps":
            suggest = "boolean_props"
        elif key == "numberProps":
            suggest = "number_props"
        elif key == "objectProps":
            suggest = "object_props"
        elif key == "stringProps":
            suggest = "string_props"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 array_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesArrayProps']] = None,
                 boolean_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesBooleanProps']] = None,
                 number_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesNumberProps']] = None,
                 object_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesObjectProps']] = None,
                 string_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesStringProps']] = None):
        ActionUserProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            array_props=array_props,
            boolean_props=boolean_props,
            number_props=number_props,
            object_props=object_props,
            string_props=string_props,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             array_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesArrayProps']] = None,
             boolean_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesBooleanProps']] = None,
             number_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesNumberProps']] = None,
             object_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesObjectProps']] = None,
             string_props: Optional[Mapping[str, 'outputs.ActionUserPropertiesStringProps']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'arrayProps' in kwargs:
            array_props = kwargs['arrayProps']
        if 'booleanProps' in kwargs:
            boolean_props = kwargs['booleanProps']
        if 'numberProps' in kwargs:
            number_props = kwargs['numberProps']
        if 'objectProps' in kwargs:
            object_props = kwargs['objectProps']
        if 'stringProps' in kwargs:
            string_props = kwargs['stringProps']

        if array_props is not None:
            _setter("array_props", array_props)
        if boolean_props is not None:
            _setter("boolean_props", boolean_props)
        if number_props is not None:
            _setter("number_props", number_props)
        if object_props is not None:
            _setter("object_props", object_props)
        if string_props is not None:
            _setter("string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[Mapping[str, 'outputs.ActionUserPropertiesArrayProps']]:
        return pulumi.get(self, "array_props")

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[Mapping[str, 'outputs.ActionUserPropertiesBooleanProps']]:
        return pulumi.get(self, "boolean_props")

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[Mapping[str, 'outputs.ActionUserPropertiesNumberProps']]:
        return pulumi.get(self, "number_props")

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[Mapping[str, 'outputs.ActionUserPropertiesObjectProps']]:
        return pulumi.get(self, "object_props")

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[Mapping[str, 'outputs.ActionUserPropertiesStringProps']]:
        return pulumi.get(self, "string_props")


@pulumi.output_type
class ActionUserPropertiesArrayProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanItems":
            suggest = "boolean_items"
        elif key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "maxItems":
            suggest = "max_items"
        elif key == "minItems":
            suggest = "min_items"
        elif key == "numberItems":
            suggest = "number_items"
        elif key == "objectItems":
            suggest = "object_items"
        elif key == "stringItems":
            suggest = "string_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesArrayProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesArrayProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesArrayProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_items: Optional['outputs.ActionUserPropertiesArrayPropsBooleanItems'] = None,
                 dataset: Optional['outputs.ActionUserPropertiesArrayPropsDataset'] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_items: Optional[int] = None,
                 min_items: Optional[int] = None,
                 number_items: Optional['outputs.ActionUserPropertiesArrayPropsNumberItems'] = None,
                 object_items: Optional['outputs.ActionUserPropertiesArrayPropsObjectItems'] = None,
                 required: Optional[bool] = None,
                 string_items: Optional['outputs.ActionUserPropertiesArrayPropsStringItems'] = None,
                 title: Optional[str] = None):
        ActionUserPropertiesArrayProps._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            boolean_items=boolean_items,
            dataset=dataset,
            default_jq_query=default_jq_query,
            depends_ons=depends_ons,
            description=description,
            icon=icon,
            max_items=max_items,
            min_items=min_items,
            number_items=number_items,
            object_items=object_items,
            required=required,
            string_items=string_items,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             boolean_items: Optional['outputs.ActionUserPropertiesArrayPropsBooleanItems'] = None,
             dataset: Optional['outputs.ActionUserPropertiesArrayPropsDataset'] = None,
             default_jq_query: Optional[str] = None,
             depends_ons: Optional[Sequence[str]] = None,
             description: Optional[str] = None,
             icon: Optional[str] = None,
             max_items: Optional[int] = None,
             min_items: Optional[int] = None,
             number_items: Optional['outputs.ActionUserPropertiesArrayPropsNumberItems'] = None,
             object_items: Optional['outputs.ActionUserPropertiesArrayPropsObjectItems'] = None,
             required: Optional[bool] = None,
             string_items: Optional['outputs.ActionUserPropertiesArrayPropsStringItems'] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'booleanItems' in kwargs:
            boolean_items = kwargs['booleanItems']
        if 'defaultJqQuery' in kwargs:
            default_jq_query = kwargs['defaultJqQuery']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']
        if 'maxItems' in kwargs:
            max_items = kwargs['maxItems']
        if 'minItems' in kwargs:
            min_items = kwargs['minItems']
        if 'numberItems' in kwargs:
            number_items = kwargs['numberItems']
        if 'objectItems' in kwargs:
            object_items = kwargs['objectItems']
        if 'stringItems' in kwargs:
            string_items = kwargs['stringItems']

        if boolean_items is not None:
            _setter("boolean_items", boolean_items)
        if dataset is not None:
            _setter("dataset", dataset)
        if default_jq_query is not None:
            _setter("default_jq_query", default_jq_query)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if icon is not None:
            _setter("icon", icon)
        if max_items is not None:
            _setter("max_items", max_items)
        if min_items is not None:
            _setter("min_items", min_items)
        if number_items is not None:
            _setter("number_items", number_items)
        if object_items is not None:
            _setter("object_items", object_items)
        if required is not None:
            _setter("required", required)
        if string_items is not None:
            _setter("string_items", string_items)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional['outputs.ActionUserPropertiesArrayPropsBooleanItems']:
        return pulumi.get(self, "boolean_items")

    @property
    @pulumi.getter
    def dataset(self) -> Optional['outputs.ActionUserPropertiesArrayPropsDataset']:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[int]:
        return pulumi.get(self, "max_items")

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[int]:
        return pulumi.get(self, "min_items")

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional['outputs.ActionUserPropertiesArrayPropsNumberItems']:
        return pulumi.get(self, "number_items")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional['outputs.ActionUserPropertiesArrayPropsObjectItems']:
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional['outputs.ActionUserPropertiesArrayPropsStringItems']:
        return pulumi.get(self, "string_items")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class ActionUserPropertiesArrayPropsBooleanItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[bool]] = None):
        ActionUserPropertiesArrayPropsBooleanItems._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[Sequence[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "defaults")


@pulumi.output_type
class ActionUserPropertiesArrayPropsDataset(dict):
    def __init__(__self__, *,
                 combinator: str,
                 rules: Sequence['outputs.ActionUserPropertiesArrayPropsDatasetRule']):
        ActionUserPropertiesArrayPropsDataset._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: str,
             rules: Sequence['outputs.ActionUserPropertiesArrayPropsDatasetRule'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ActionUserPropertiesArrayPropsDatasetRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class ActionUserPropertiesArrayPropsDatasetRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 value: 'outputs.ActionUserPropertiesArrayPropsDatasetRuleValue',
                 blueprint: Optional[str] = None,
                 property: Optional[str] = None):
        ActionUserPropertiesArrayPropsDatasetRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            value=value,
            blueprint=blueprint,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             value: 'outputs.ActionUserPropertiesArrayPropsDatasetRuleValue',
             blueprint: Optional[str] = None,
             property: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("value", value)
        if blueprint is not None:
            _setter("blueprint", blueprint)
        if property is not None:
            _setter("property", property)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ActionUserPropertiesArrayPropsDatasetRuleValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionUserPropertiesArrayPropsDatasetRuleValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqQuery":
            suggest = "jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesArrayPropsDatasetRuleValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesArrayPropsDatasetRuleValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesArrayPropsDatasetRuleValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jq_query: str):
        ActionUserPropertiesArrayPropsDatasetRuleValue._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jq_query=jq_query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jq_query: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jqQuery' in kwargs:
            jq_query = kwargs['jqQuery']

        _setter("jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> str:
        return pulumi.get(self, "jq_query")


@pulumi.output_type
class ActionUserPropertiesArrayPropsNumberItems(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumJqQuery":
            suggest = "enum_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesArrayPropsNumberItems. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesArrayPropsNumberItems.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesArrayPropsNumberItems.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defaults: Optional[Sequence[float]] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[float]] = None):
        ActionUserPropertiesArrayPropsNumberItems._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
            enum_jq_query=enum_jq_query,
            enums=enums,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[Sequence[float]] = None,
             enum_jq_query: Optional[str] = None,
             enums: Optional[Sequence[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enumJqQuery' in kwargs:
            enum_jq_query = kwargs['enumJqQuery']

        if defaults is not None:
            _setter("defaults", defaults)
        if enum_jq_query is not None:
            _setter("enum_jq_query", enum_jq_query)
        if enums is not None:
            _setter("enums", enums)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "enums")


@pulumi.output_type
class ActionUserPropertiesArrayPropsObjectItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[Mapping[str, str]]] = None):
        ActionUserPropertiesArrayPropsObjectItems._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[Sequence[Mapping[str, str]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[Mapping[str, str]]]:
        return pulumi.get(self, "defaults")


@pulumi.output_type
class ActionUserPropertiesArrayPropsStringItems(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumJqQuery":
            suggest = "enum_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesArrayPropsStringItems. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesArrayPropsStringItems.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesArrayPropsStringItems.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint: Optional[str] = None,
                 defaults: Optional[Sequence[str]] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[str]] = None,
                 format: Optional[str] = None):
        ActionUserPropertiesArrayPropsStringItems._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            blueprint=blueprint,
            defaults=defaults,
            enum_jq_query=enum_jq_query,
            enums=enums,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             blueprint: Optional[str] = None,
             defaults: Optional[Sequence[str]] = None,
             enum_jq_query: Optional[str] = None,
             enums: Optional[Sequence[str]] = None,
             format: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enumJqQuery' in kwargs:
            enum_jq_query = kwargs['enumJqQuery']

        if blueprint is not None:
            _setter("blueprint", blueprint)
        if defaults is not None:
            _setter("defaults", defaults)
        if enum_jq_query is not None:
            _setter("enum_jq_query", enum_jq_query)
        if enums is not None:
            _setter("enums", enums)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")


@pulumi.output_type
class ActionUserPropertiesBooleanProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesBooleanProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesBooleanProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesBooleanProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset: Optional['outputs.ActionUserPropertiesBooleanPropsDataset'] = None,
                 default: Optional[bool] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        ActionUserPropertiesBooleanProps._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset=dataset,
            default=default,
            default_jq_query=default_jq_query,
            depends_ons=depends_ons,
            description=description,
            icon=icon,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset: Optional['outputs.ActionUserPropertiesBooleanPropsDataset'] = None,
             default: Optional[bool] = None,
             default_jq_query: Optional[str] = None,
             depends_ons: Optional[Sequence[str]] = None,
             description: Optional[str] = None,
             icon: Optional[str] = None,
             required: Optional[bool] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultJqQuery' in kwargs:
            default_jq_query = kwargs['defaultJqQuery']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']

        if dataset is not None:
            _setter("dataset", dataset)
        if default is not None:
            _setter("default", default)
        if default_jq_query is not None:
            _setter("default_jq_query", default_jq_query)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if icon is not None:
            _setter("icon", icon)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def dataset(self) -> Optional['outputs.ActionUserPropertiesBooleanPropsDataset']:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class ActionUserPropertiesBooleanPropsDataset(dict):
    def __init__(__self__, *,
                 combinator: str,
                 rules: Sequence['outputs.ActionUserPropertiesBooleanPropsDatasetRule']):
        ActionUserPropertiesBooleanPropsDataset._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: str,
             rules: Sequence['outputs.ActionUserPropertiesBooleanPropsDatasetRule'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ActionUserPropertiesBooleanPropsDatasetRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class ActionUserPropertiesBooleanPropsDatasetRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 value: 'outputs.ActionUserPropertiesBooleanPropsDatasetRuleValue',
                 blueprint: Optional[str] = None,
                 property: Optional[str] = None):
        ActionUserPropertiesBooleanPropsDatasetRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            value=value,
            blueprint=blueprint,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             value: 'outputs.ActionUserPropertiesBooleanPropsDatasetRuleValue',
             blueprint: Optional[str] = None,
             property: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("value", value)
        if blueprint is not None:
            _setter("blueprint", blueprint)
        if property is not None:
            _setter("property", property)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ActionUserPropertiesBooleanPropsDatasetRuleValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionUserPropertiesBooleanPropsDatasetRuleValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqQuery":
            suggest = "jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesBooleanPropsDatasetRuleValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesBooleanPropsDatasetRuleValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesBooleanPropsDatasetRuleValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jq_query: str):
        ActionUserPropertiesBooleanPropsDatasetRuleValue._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jq_query=jq_query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jq_query: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jqQuery' in kwargs:
            jq_query = kwargs['jqQuery']

        _setter("jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> str:
        return pulumi.get(self, "jq_query")


@pulumi.output_type
class ActionUserPropertiesNumberProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "enumJqQuery":
            suggest = "enum_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesNumberProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesNumberProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesNumberProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset: Optional['outputs.ActionUserPropertiesNumberPropsDataset'] = None,
                 default: Optional[float] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[float]] = None,
                 icon: Optional[str] = None,
                 maximum: Optional[float] = None,
                 minimum: Optional[float] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        ActionUserPropertiesNumberProps._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset=dataset,
            default=default,
            default_jq_query=default_jq_query,
            depends_ons=depends_ons,
            description=description,
            enum_jq_query=enum_jq_query,
            enums=enums,
            icon=icon,
            maximum=maximum,
            minimum=minimum,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset: Optional['outputs.ActionUserPropertiesNumberPropsDataset'] = None,
             default: Optional[float] = None,
             default_jq_query: Optional[str] = None,
             depends_ons: Optional[Sequence[str]] = None,
             description: Optional[str] = None,
             enum_jq_query: Optional[str] = None,
             enums: Optional[Sequence[float]] = None,
             icon: Optional[str] = None,
             maximum: Optional[float] = None,
             minimum: Optional[float] = None,
             required: Optional[bool] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultJqQuery' in kwargs:
            default_jq_query = kwargs['defaultJqQuery']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']
        if 'enumJqQuery' in kwargs:
            enum_jq_query = kwargs['enumJqQuery']

        if dataset is not None:
            _setter("dataset", dataset)
        if default is not None:
            _setter("default", default)
        if default_jq_query is not None:
            _setter("default_jq_query", default_jq_query)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if enum_jq_query is not None:
            _setter("enum_jq_query", enum_jq_query)
        if enums is not None:
            _setter("enums", enums)
        if icon is not None:
            _setter("icon", icon)
        if maximum is not None:
            _setter("maximum", maximum)
        if minimum is not None:
            _setter("minimum", minimum)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def dataset(self) -> Optional['outputs.ActionUserPropertiesNumberPropsDataset']:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def default(self) -> Optional[float]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[float]:
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[float]:
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class ActionUserPropertiesNumberPropsDataset(dict):
    def __init__(__self__, *,
                 combinator: str,
                 rules: Sequence['outputs.ActionUserPropertiesNumberPropsDatasetRule']):
        ActionUserPropertiesNumberPropsDataset._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: str,
             rules: Sequence['outputs.ActionUserPropertiesNumberPropsDatasetRule'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ActionUserPropertiesNumberPropsDatasetRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class ActionUserPropertiesNumberPropsDatasetRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 value: 'outputs.ActionUserPropertiesNumberPropsDatasetRuleValue',
                 blueprint: Optional[str] = None,
                 property: Optional[str] = None):
        ActionUserPropertiesNumberPropsDatasetRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            value=value,
            blueprint=blueprint,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             value: 'outputs.ActionUserPropertiesNumberPropsDatasetRuleValue',
             blueprint: Optional[str] = None,
             property: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("value", value)
        if blueprint is not None:
            _setter("blueprint", blueprint)
        if property is not None:
            _setter("property", property)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ActionUserPropertiesNumberPropsDatasetRuleValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionUserPropertiesNumberPropsDatasetRuleValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqQuery":
            suggest = "jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesNumberPropsDatasetRuleValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesNumberPropsDatasetRuleValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesNumberPropsDatasetRuleValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jq_query: str):
        ActionUserPropertiesNumberPropsDatasetRuleValue._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jq_query=jq_query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jq_query: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jqQuery' in kwargs:
            jq_query = kwargs['jqQuery']

        _setter("jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> str:
        return pulumi.get(self, "jq_query")


@pulumi.output_type
class ActionUserPropertiesObjectProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesObjectProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesObjectProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesObjectProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataset: Optional['outputs.ActionUserPropertiesObjectPropsDataset'] = None,
                 default: Optional[str] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 encryption: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        ActionUserPropertiesObjectProps._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset=dataset,
            default=default,
            default_jq_query=default_jq_query,
            depends_ons=depends_ons,
            description=description,
            encryption=encryption,
            icon=icon,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset: Optional['outputs.ActionUserPropertiesObjectPropsDataset'] = None,
             default: Optional[str] = None,
             default_jq_query: Optional[str] = None,
             depends_ons: Optional[Sequence[str]] = None,
             description: Optional[str] = None,
             encryption: Optional[str] = None,
             icon: Optional[str] = None,
             required: Optional[bool] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultJqQuery' in kwargs:
            default_jq_query = kwargs['defaultJqQuery']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']

        if dataset is not None:
            _setter("dataset", dataset)
        if default is not None:
            _setter("default", default)
        if default_jq_query is not None:
            _setter("default_jq_query", default_jq_query)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if encryption is not None:
            _setter("encryption", encryption)
        if icon is not None:
            _setter("icon", icon)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def dataset(self) -> Optional['outputs.ActionUserPropertiesObjectPropsDataset']:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def encryption(self) -> Optional[str]:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class ActionUserPropertiesObjectPropsDataset(dict):
    def __init__(__self__, *,
                 combinator: str,
                 rules: Sequence['outputs.ActionUserPropertiesObjectPropsDatasetRule']):
        ActionUserPropertiesObjectPropsDataset._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: str,
             rules: Sequence['outputs.ActionUserPropertiesObjectPropsDatasetRule'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ActionUserPropertiesObjectPropsDatasetRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class ActionUserPropertiesObjectPropsDatasetRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 value: 'outputs.ActionUserPropertiesObjectPropsDatasetRuleValue',
                 blueprint: Optional[str] = None,
                 property: Optional[str] = None):
        ActionUserPropertiesObjectPropsDatasetRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            value=value,
            blueprint=blueprint,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             value: 'outputs.ActionUserPropertiesObjectPropsDatasetRuleValue',
             blueprint: Optional[str] = None,
             property: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("value", value)
        if blueprint is not None:
            _setter("blueprint", blueprint)
        if property is not None:
            _setter("property", property)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ActionUserPropertiesObjectPropsDatasetRuleValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionUserPropertiesObjectPropsDatasetRuleValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqQuery":
            suggest = "jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesObjectPropsDatasetRuleValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesObjectPropsDatasetRuleValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesObjectPropsDatasetRuleValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jq_query: str):
        ActionUserPropertiesObjectPropsDatasetRuleValue._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jq_query=jq_query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jq_query: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jqQuery' in kwargs:
            jq_query = kwargs['jqQuery']

        _setter("jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> str:
        return pulumi.get(self, "jq_query")


@pulumi.output_type
class ActionUserPropertiesStringProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "enumJqQuery":
            suggest = "enum_jq_query"
        elif key == "maxLength":
            suggest = "max_length"
        elif key == "minLength":
            suggest = "min_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesStringProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesStringProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesStringProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint: Optional[str] = None,
                 dataset: Optional['outputs.ActionUserPropertiesStringPropsDataset'] = None,
                 default: Optional[str] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 encryption: Optional[str] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_length: Optional[int] = None,
                 min_length: Optional[int] = None,
                 pattern: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        ActionUserPropertiesStringProps._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            blueprint=blueprint,
            dataset=dataset,
            default=default,
            default_jq_query=default_jq_query,
            depends_ons=depends_ons,
            description=description,
            encryption=encryption,
            enum_jq_query=enum_jq_query,
            enums=enums,
            format=format,
            icon=icon,
            max_length=max_length,
            min_length=min_length,
            pattern=pattern,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             blueprint: Optional[str] = None,
             dataset: Optional['outputs.ActionUserPropertiesStringPropsDataset'] = None,
             default: Optional[str] = None,
             default_jq_query: Optional[str] = None,
             depends_ons: Optional[Sequence[str]] = None,
             description: Optional[str] = None,
             encryption: Optional[str] = None,
             enum_jq_query: Optional[str] = None,
             enums: Optional[Sequence[str]] = None,
             format: Optional[str] = None,
             icon: Optional[str] = None,
             max_length: Optional[int] = None,
             min_length: Optional[int] = None,
             pattern: Optional[str] = None,
             required: Optional[bool] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'defaultJqQuery' in kwargs:
            default_jq_query = kwargs['defaultJqQuery']
        if 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']
        if 'enumJqQuery' in kwargs:
            enum_jq_query = kwargs['enumJqQuery']
        if 'maxLength' in kwargs:
            max_length = kwargs['maxLength']
        if 'minLength' in kwargs:
            min_length = kwargs['minLength']

        if blueprint is not None:
            _setter("blueprint", blueprint)
        if dataset is not None:
            _setter("dataset", dataset)
        if default is not None:
            _setter("default", default)
        if default_jq_query is not None:
            _setter("default_jq_query", default_jq_query)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if encryption is not None:
            _setter("encryption", encryption)
        if enum_jq_query is not None:
            _setter("enum_jq_query", enum_jq_query)
        if enums is not None:
            _setter("enums", enums)
        if format is not None:
            _setter("format", format)
        if icon is not None:
            _setter("icon", icon)
        if max_length is not None:
            _setter("max_length", max_length)
        if min_length is not None:
            _setter("min_length", min_length)
        if pattern is not None:
            _setter("pattern", pattern)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def dataset(self) -> Optional['outputs.ActionUserPropertiesStringPropsDataset']:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def encryption(self) -> Optional[str]:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[int]:
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class ActionUserPropertiesStringPropsDataset(dict):
    def __init__(__self__, *,
                 combinator: str,
                 rules: Sequence['outputs.ActionUserPropertiesStringPropsDatasetRule']):
        ActionUserPropertiesStringPropsDataset._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: str,
             rules: Sequence['outputs.ActionUserPropertiesStringPropsDatasetRule'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ActionUserPropertiesStringPropsDatasetRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class ActionUserPropertiesStringPropsDatasetRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 value: 'outputs.ActionUserPropertiesStringPropsDatasetRuleValue',
                 blueprint: Optional[str] = None,
                 property: Optional[str] = None):
        ActionUserPropertiesStringPropsDatasetRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            value=value,
            blueprint=blueprint,
            property=property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             value: 'outputs.ActionUserPropertiesStringPropsDatasetRuleValue',
             blueprint: Optional[str] = None,
             property: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("value", value)
        if blueprint is not None:
            _setter("blueprint", blueprint)
        if property is not None:
            _setter("property", property)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ActionUserPropertiesStringPropsDatasetRuleValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionUserPropertiesStringPropsDatasetRuleValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqQuery":
            suggest = "jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUserPropertiesStringPropsDatasetRuleValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUserPropertiesStringPropsDatasetRuleValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUserPropertiesStringPropsDatasetRuleValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jq_query: str):
        ActionUserPropertiesStringPropsDatasetRuleValue._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jq_query=jq_query,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jq_query: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'jqQuery' in kwargs:
            jq_query = kwargs['jqQuery']

        _setter("jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> str:
        return pulumi.get(self, "jq_query")


@pulumi.output_type
class ActionWebhookMethod(dict):
    def __init__(__self__, *,
                 url: str,
                 agent: Optional[bool] = None,
                 method: Optional[str] = None,
                 synchronized: Optional[bool] = None):
        ActionWebhookMethod._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            agent=agent,
            method=method,
            synchronized=synchronized,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             agent: Optional[bool] = None,
             method: Optional[str] = None,
             synchronized: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("url", url)
        if agent is not None:
            _setter("agent", agent)
        if method is not None:
            _setter("method", method)
        if synchronized is not None:
            _setter("synchronized", synchronized)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def agent(self) -> Optional[bool]:
        return pulumi.get(self, "agent")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def synchronized(self) -> Optional[bool]:
        return pulumi.get(self, "synchronized")


@pulumi.output_type
class BlueprintCalculationProperties(dict):
    def __init__(__self__, *,
                 calculation: str,
                 type: str,
                 colorized: Optional[bool] = None,
                 colors: Optional[Mapping[str, str]] = None,
                 description: Optional[str] = None,
                 format: Optional[str] = None,
                 icon: Optional[str] = None,
                 title: Optional[str] = None):
        BlueprintCalculationProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            calculation=calculation,
            type=type,
            colorized=colorized,
            colors=colors,
            description=description,
            format=format,
            icon=icon,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             calculation: str,
             type: str,
             colorized: Optional[bool] = None,
             colors: Optional[Mapping[str, str]] = None,
             description: Optional[str] = None,
             format: Optional[str] = None,
             icon: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("calculation", calculation)
        _setter("type", type)
        if colorized is not None:
            _setter("colorized", colorized)
        if colors is not None:
            _setter("colors", colors)
        if description is not None:
            _setter("description", description)
        if format is not None:
            _setter("format", format)
        if icon is not None:
            _setter("icon", icon)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def calculation(self) -> str:
        return pulumi.get(self, "calculation")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def colorized(self) -> Optional[bool]:
        return pulumi.get(self, "colorized")

    @property
    @pulumi.getter
    def colors(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintKafkaChangelogDestination(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        pass



@pulumi.output_type
class BlueprintMirrorProperties(dict):
    def __init__(__self__, *,
                 path: str,
                 title: Optional[str] = None):
        BlueprintMirrorProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: str,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("path", path)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arrayProps":
            suggest = "array_props"
        elif key == "booleanProps":
            suggest = "boolean_props"
        elif key == "numberProps":
            suggest = "number_props"
        elif key == "objectProps":
            suggest = "object_props"
        elif key == "stringProps":
            suggest = "string_props"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 array_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesArrayProps']] = None,
                 boolean_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesBooleanProps']] = None,
                 number_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesNumberProps']] = None,
                 object_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesObjectProps']] = None,
                 string_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesStringProps']] = None):
        BlueprintProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            array_props=array_props,
            boolean_props=boolean_props,
            number_props=number_props,
            object_props=object_props,
            string_props=string_props,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             array_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesArrayProps']] = None,
             boolean_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesBooleanProps']] = None,
             number_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesNumberProps']] = None,
             object_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesObjectProps']] = None,
             string_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesStringProps']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'arrayProps' in kwargs:
            array_props = kwargs['arrayProps']
        if 'booleanProps' in kwargs:
            boolean_props = kwargs['booleanProps']
        if 'numberProps' in kwargs:
            number_props = kwargs['numberProps']
        if 'objectProps' in kwargs:
            object_props = kwargs['objectProps']
        if 'stringProps' in kwargs:
            string_props = kwargs['stringProps']

        if array_props is not None:
            _setter("array_props", array_props)
        if boolean_props is not None:
            _setter("boolean_props", boolean_props)
        if number_props is not None:
            _setter("number_props", number_props)
        if object_props is not None:
            _setter("object_props", object_props)
        if string_props is not None:
            _setter("string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesArrayProps']]:
        return pulumi.get(self, "array_props")

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesBooleanProps']]:
        return pulumi.get(self, "boolean_props")

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesNumberProps']]:
        return pulumi.get(self, "number_props")

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesObjectProps']]:
        return pulumi.get(self, "object_props")

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesStringProps']]:
        return pulumi.get(self, "string_props")


@pulumi.output_type
class BlueprintPropertiesArrayProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanItems":
            suggest = "boolean_items"
        elif key == "maxItems":
            suggest = "max_items"
        elif key == "minItems":
            suggest = "min_items"
        elif key == "numberItems":
            suggest = "number_items"
        elif key == "objectItems":
            suggest = "object_items"
        elif key == "stringItems":
            suggest = "string_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesArrayProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesArrayProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesArrayProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_items: Optional['outputs.BlueprintPropertiesArrayPropsBooleanItems'] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_items: Optional[int] = None,
                 min_items: Optional[int] = None,
                 number_items: Optional['outputs.BlueprintPropertiesArrayPropsNumberItems'] = None,
                 object_items: Optional['outputs.BlueprintPropertiesArrayPropsObjectItems'] = None,
                 required: Optional[bool] = None,
                 string_items: Optional['outputs.BlueprintPropertiesArrayPropsStringItems'] = None,
                 title: Optional[str] = None):
        BlueprintPropertiesArrayProps._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            boolean_items=boolean_items,
            description=description,
            icon=icon,
            max_items=max_items,
            min_items=min_items,
            number_items=number_items,
            object_items=object_items,
            required=required,
            string_items=string_items,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             boolean_items: Optional['outputs.BlueprintPropertiesArrayPropsBooleanItems'] = None,
             description: Optional[str] = None,
             icon: Optional[str] = None,
             max_items: Optional[int] = None,
             min_items: Optional[int] = None,
             number_items: Optional['outputs.BlueprintPropertiesArrayPropsNumberItems'] = None,
             object_items: Optional['outputs.BlueprintPropertiesArrayPropsObjectItems'] = None,
             required: Optional[bool] = None,
             string_items: Optional['outputs.BlueprintPropertiesArrayPropsStringItems'] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'booleanItems' in kwargs:
            boolean_items = kwargs['booleanItems']
        if 'maxItems' in kwargs:
            max_items = kwargs['maxItems']
        if 'minItems' in kwargs:
            min_items = kwargs['minItems']
        if 'numberItems' in kwargs:
            number_items = kwargs['numberItems']
        if 'objectItems' in kwargs:
            object_items = kwargs['objectItems']
        if 'stringItems' in kwargs:
            string_items = kwargs['stringItems']

        if boolean_items is not None:
            _setter("boolean_items", boolean_items)
        if description is not None:
            _setter("description", description)
        if icon is not None:
            _setter("icon", icon)
        if max_items is not None:
            _setter("max_items", max_items)
        if min_items is not None:
            _setter("min_items", min_items)
        if number_items is not None:
            _setter("number_items", number_items)
        if object_items is not None:
            _setter("object_items", object_items)
        if required is not None:
            _setter("required", required)
        if string_items is not None:
            _setter("string_items", string_items)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsBooleanItems']:
        return pulumi.get(self, "boolean_items")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[int]:
        return pulumi.get(self, "max_items")

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[int]:
        return pulumi.get(self, "min_items")

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsNumberItems']:
        return pulumi.get(self, "number_items")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsObjectItems']:
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsStringItems']:
        return pulumi.get(self, "string_items")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesArrayPropsBooleanItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[bool]] = None):
        BlueprintPropertiesArrayPropsBooleanItems._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[Sequence[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[bool]]:
        return pulumi.get(self, "defaults")


@pulumi.output_type
class BlueprintPropertiesArrayPropsNumberItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[float]] = None):
        BlueprintPropertiesArrayPropsNumberItems._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[Sequence[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "defaults")


@pulumi.output_type
class BlueprintPropertiesArrayPropsObjectItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[str]] = None):
        BlueprintPropertiesArrayPropsObjectItems._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "defaults")


@pulumi.output_type
class BlueprintPropertiesArrayPropsStringItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[str]] = None,
                 format: Optional[str] = None):
        BlueprintPropertiesArrayPropsStringItems._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            defaults=defaults,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             defaults: Optional[Sequence[str]] = None,
             format: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if defaults is not None:
            _setter("defaults", defaults)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")


@pulumi.output_type
class BlueprintPropertiesBooleanProps(dict):
    def __init__(__self__, *,
                 default: Optional[bool] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        BlueprintPropertiesBooleanProps._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            description=description,
            icon=icon,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional[bool] = None,
             description: Optional[str] = None,
             icon: Optional[str] = None,
             required: Optional[bool] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if default is not None:
            _setter("default", default)
        if description is not None:
            _setter("description", description)
        if icon is not None:
            _setter("icon", icon)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesNumberProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumColors":
            suggest = "enum_colors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesNumberProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesNumberProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesNumberProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: Optional[float] = None,
                 description: Optional[str] = None,
                 enum_colors: Optional[Mapping[str, str]] = None,
                 enums: Optional[Sequence[float]] = None,
                 icon: Optional[str] = None,
                 maximum: Optional[float] = None,
                 minimum: Optional[float] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        BlueprintPropertiesNumberProps._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            description=description,
            enum_colors=enum_colors,
            enums=enums,
            icon=icon,
            maximum=maximum,
            minimum=minimum,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional[float] = None,
             description: Optional[str] = None,
             enum_colors: Optional[Mapping[str, str]] = None,
             enums: Optional[Sequence[float]] = None,
             icon: Optional[str] = None,
             maximum: Optional[float] = None,
             minimum: Optional[float] = None,
             required: Optional[bool] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enumColors' in kwargs:
            enum_colors = kwargs['enumColors']

        if default is not None:
            _setter("default", default)
        if description is not None:
            _setter("description", description)
        if enum_colors is not None:
            _setter("enum_colors", enum_colors)
        if enums is not None:
            _setter("enums", enums)
        if icon is not None:
            _setter("icon", icon)
        if maximum is not None:
            _setter("maximum", maximum)
        if minimum is not None:
            _setter("minimum", minimum)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[float]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "enum_colors")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[float]:
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[float]:
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesObjectProps(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 spec: Optional[str] = None,
                 title: Optional[str] = None):
        BlueprintPropertiesObjectProps._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            description=description,
            icon=icon,
            required=required,
            spec=spec,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional[str] = None,
             description: Optional[str] = None,
             icon: Optional[str] = None,
             required: Optional[bool] = None,
             spec: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if default is not None:
            _setter("default", default)
        if description is not None:
            _setter("description", description)
        if icon is not None:
            _setter("icon", icon)
        if required is not None:
            _setter("required", required)
        if spec is not None:
            _setter("spec", spec)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesStringProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumColors":
            suggest = "enum_colors"
        elif key == "maxLength":
            suggest = "max_length"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "specAuthentication":
            suggest = "spec_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesStringProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesStringProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesStringProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 enum_colors: Optional[Mapping[str, str]] = None,
                 enums: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_length: Optional[int] = None,
                 min_length: Optional[int] = None,
                 pattern: Optional[str] = None,
                 required: Optional[bool] = None,
                 spec: Optional[str] = None,
                 spec_authentication: Optional['outputs.BlueprintPropertiesStringPropsSpecAuthentication'] = None,
                 title: Optional[str] = None):
        BlueprintPropertiesStringProps._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default=default,
            description=description,
            enum_colors=enum_colors,
            enums=enums,
            format=format,
            icon=icon,
            max_length=max_length,
            min_length=min_length,
            pattern=pattern,
            required=required,
            spec=spec,
            spec_authentication=spec_authentication,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default: Optional[str] = None,
             description: Optional[str] = None,
             enum_colors: Optional[Mapping[str, str]] = None,
             enums: Optional[Sequence[str]] = None,
             format: Optional[str] = None,
             icon: Optional[str] = None,
             max_length: Optional[int] = None,
             min_length: Optional[int] = None,
             pattern: Optional[str] = None,
             required: Optional[bool] = None,
             spec: Optional[str] = None,
             spec_authentication: Optional['outputs.BlueprintPropertiesStringPropsSpecAuthentication'] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enumColors' in kwargs:
            enum_colors = kwargs['enumColors']
        if 'maxLength' in kwargs:
            max_length = kwargs['maxLength']
        if 'minLength' in kwargs:
            min_length = kwargs['minLength']
        if 'specAuthentication' in kwargs:
            spec_authentication = kwargs['specAuthentication']

        if default is not None:
            _setter("default", default)
        if description is not None:
            _setter("description", description)
        if enum_colors is not None:
            _setter("enum_colors", enum_colors)
        if enums is not None:
            _setter("enums", enums)
        if format is not None:
            _setter("format", format)
        if icon is not None:
            _setter("icon", icon)
        if max_length is not None:
            _setter("max_length", max_length)
        if min_length is not None:
            _setter("min_length", min_length)
        if pattern is not None:
            _setter("pattern", pattern)
        if required is not None:
            _setter("required", required)
        if spec is not None:
            _setter("spec", spec)
        if spec_authentication is not None:
            _setter("spec_authentication", spec_authentication)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "enum_colors")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[int]:
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="specAuthentication")
    def spec_authentication(self) -> Optional['outputs.BlueprintPropertiesStringPropsSpecAuthentication']:
        return pulumi.get(self, "spec_authentication")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesStringPropsSpecAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationUrl":
            suggest = "authorization_url"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "tokenUrl":
            suggest = "token_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesStringPropsSpecAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesStringPropsSpecAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesStringPropsSpecAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_url: str,
                 client_id: str,
                 token_url: str):
        BlueprintPropertiesStringPropsSpecAuthentication._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            authorization_url=authorization_url,
            client_id=client_id,
            token_url=token_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             authorization_url: str,
             client_id: str,
             token_url: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'authorizationUrl' in kwargs:
            authorization_url = kwargs['authorizationUrl']
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']
        if 'tokenUrl' in kwargs:
            token_url = kwargs['tokenUrl']

        _setter("authorization_url", authorization_url)
        _setter("client_id", client_id)
        _setter("token_url", token_url)

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> str:
        return pulumi.get(self, "authorization_url")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> str:
        return pulumi.get(self, "token_url")


@pulumi.output_type
class BlueprintRelations(dict):
    def __init__(__self__, *,
                 target: str,
                 many: Optional[bool] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        BlueprintRelations._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            many=many,
            required=required,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: str,
             many: Optional[bool] = None,
             required: Optional[bool] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("target", target)
        if many is not None:
            _setter("many", many)
        if required is not None:
            _setter("required", required)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def many(self) -> Optional[bool]:
        return pulumi.get(self, "many")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintTeamInheritance(dict):
    def __init__(__self__, *,
                 path: str):
        BlueprintTeamInheritance._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


@pulumi.output_type
class BlueprintWebhookChangelogDestination(dict):
    def __init__(__self__, *,
                 url: str,
                 agent: Optional[bool] = None):
        BlueprintWebhookChangelogDestination._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
            agent=agent,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: str,
             agent: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("url", url)
        if agent is not None:
            _setter("agent", agent)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def agent(self) -> Optional[bool]:
        return pulumi.get(self, "agent")


@pulumi.output_type
class EntityProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arrayProps":
            suggest = "array_props"
        elif key == "booleanProps":
            suggest = "boolean_props"
        elif key == "numberProps":
            suggest = "number_props"
        elif key == "objectProps":
            suggest = "object_props"
        elif key == "stringProps":
            suggest = "string_props"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 array_props: Optional['outputs.EntityPropertiesArrayProps'] = None,
                 boolean_props: Optional[Mapping[str, bool]] = None,
                 number_props: Optional[Mapping[str, float]] = None,
                 object_props: Optional[Mapping[str, str]] = None,
                 string_props: Optional[Mapping[str, str]] = None):
        EntityProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            array_props=array_props,
            boolean_props=boolean_props,
            number_props=number_props,
            object_props=object_props,
            string_props=string_props,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             array_props: Optional['outputs.EntityPropertiesArrayProps'] = None,
             boolean_props: Optional[Mapping[str, bool]] = None,
             number_props: Optional[Mapping[str, float]] = None,
             object_props: Optional[Mapping[str, str]] = None,
             string_props: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'arrayProps' in kwargs:
            array_props = kwargs['arrayProps']
        if 'booleanProps' in kwargs:
            boolean_props = kwargs['booleanProps']
        if 'numberProps' in kwargs:
            number_props = kwargs['numberProps']
        if 'objectProps' in kwargs:
            object_props = kwargs['objectProps']
        if 'stringProps' in kwargs:
            string_props = kwargs['stringProps']

        if array_props is not None:
            _setter("array_props", array_props)
        if boolean_props is not None:
            _setter("boolean_props", boolean_props)
        if number_props is not None:
            _setter("number_props", number_props)
        if object_props is not None:
            _setter("object_props", object_props)
        if string_props is not None:
            _setter("string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional['outputs.EntityPropertiesArrayProps']:
        return pulumi.get(self, "array_props")

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[Mapping[str, bool]]:
        return pulumi.get(self, "boolean_props")

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[Mapping[str, float]]:
        return pulumi.get(self, "number_props")

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "object_props")

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "string_props")


@pulumi.output_type
class EntityPropertiesArrayProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanItems":
            suggest = "boolean_items"
        elif key == "numberItems":
            suggest = "number_items"
        elif key == "objectItems":
            suggest = "object_items"
        elif key == "stringItems":
            suggest = "string_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityPropertiesArrayProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityPropertiesArrayProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityPropertiesArrayProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_items: Optional[Mapping[str, Sequence[bool]]] = None,
                 number_items: Optional[Mapping[str, Sequence[float]]] = None,
                 object_items: Optional[Mapping[str, Sequence[str]]] = None,
                 string_items: Optional[Mapping[str, Sequence[str]]] = None):
        EntityPropertiesArrayProps._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            boolean_items=boolean_items,
            number_items=number_items,
            object_items=object_items,
            string_items=string_items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             boolean_items: Optional[Mapping[str, Sequence[bool]]] = None,
             number_items: Optional[Mapping[str, Sequence[float]]] = None,
             object_items: Optional[Mapping[str, Sequence[str]]] = None,
             string_items: Optional[Mapping[str, Sequence[str]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'booleanItems' in kwargs:
            boolean_items = kwargs['booleanItems']
        if 'numberItems' in kwargs:
            number_items = kwargs['numberItems']
        if 'objectItems' in kwargs:
            object_items = kwargs['objectItems']
        if 'stringItems' in kwargs:
            string_items = kwargs['stringItems']

        if boolean_items is not None:
            _setter("boolean_items", boolean_items)
        if number_items is not None:
            _setter("number_items", number_items)
        if object_items is not None:
            _setter("object_items", object_items)
        if string_items is not None:
            _setter("string_items", string_items)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[Mapping[str, Sequence[bool]]]:
        return pulumi.get(self, "boolean_items")

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[Mapping[str, Sequence[float]]]:
        return pulumi.get(self, "number_items")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[Mapping[str, Sequence[str]]]:
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[Mapping[str, Sequence[str]]]:
        return pulumi.get(self, "string_items")


@pulumi.output_type
class EntityRelations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manyRelations":
            suggest = "many_relations"
        elif key == "singleRelations":
            suggest = "single_relations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityRelations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityRelations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityRelations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 many_relations: Optional[Mapping[str, Sequence[str]]] = None,
                 single_relations: Optional[Mapping[str, str]] = None):
        EntityRelations._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            many_relations=many_relations,
            single_relations=single_relations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             many_relations: Optional[Mapping[str, Sequence[str]]] = None,
             single_relations: Optional[Mapping[str, str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'manyRelations' in kwargs:
            many_relations = kwargs['manyRelations']
        if 'singleRelations' in kwargs:
            single_relations = kwargs['singleRelations']

        if many_relations is not None:
            _setter("many_relations", many_relations)
        if single_relations is not None:
            _setter("single_relations", single_relations)

    @property
    @pulumi.getter(name="manyRelations")
    def many_relations(self) -> Optional[Mapping[str, Sequence[str]]]:
        return pulumi.get(self, "many_relations")

    @property
    @pulumi.getter(name="singleRelations")
    def single_relations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "single_relations")


@pulumi.output_type
class ScorecardRule(dict):
    def __init__(__self__, *,
                 identifier: str,
                 level: str,
                 query: 'outputs.ScorecardRuleQuery',
                 title: str):
        ScorecardRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identifier=identifier,
            level=level,
            query=query,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identifier: str,
             level: str,
             query: 'outputs.ScorecardRuleQuery',
             title: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("identifier", identifier)
        _setter("level", level)
        _setter("query", query)
        _setter("title", title)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def query(self) -> 'outputs.ScorecardRuleQuery':
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")


@pulumi.output_type
class ScorecardRuleQuery(dict):
    def __init__(__self__, *,
                 combinator: str,
                 conditions: Sequence['outputs.ScorecardRuleQueryCondition']):
        ScorecardRuleQuery._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combinator=combinator,
            conditions=conditions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combinator: str,
             conditions: Sequence['outputs.ScorecardRuleQueryCondition'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("combinator", combinator)
        _setter("conditions", conditions)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ScorecardRuleQueryCondition']:
        return pulumi.get(self, "conditions")


@pulumi.output_type
class ScorecardRuleQueryCondition(dict):
    def __init__(__self__, *,
                 operator: str,
                 property: str,
                 value: Optional[str] = None):
        ScorecardRuleQueryCondition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operator=operator,
            property=property,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operator: str,
             property: str,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("operator", operator)
        _setter("property", property)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def property(self) -> str:
        return pulumi.get(self, "property")


@pulumi.output_type
class WebhookMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "itemsToParse":
            suggest = "items_to_parse"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebhookMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebhookMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebhookMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint: str,
                 entity: 'outputs.WebhookMappingEntity',
                 filter: Optional[str] = None,
                 items_to_parse: Optional[str] = None):
        WebhookMapping._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            blueprint=blueprint,
            entity=entity,
            filter=filter,
            items_to_parse=items_to_parse,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             blueprint: str,
             entity: 'outputs.WebhookMappingEntity',
             filter: Optional[str] = None,
             items_to_parse: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'itemsToParse' in kwargs:
            items_to_parse = kwargs['itemsToParse']

        _setter("blueprint", blueprint)
        _setter("entity", entity)
        if filter is not None:
            _setter("filter", filter)
        if items_to_parse is not None:
            _setter("items_to_parse", items_to_parse)

    @property
    @pulumi.getter
    def blueprint(self) -> str:
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def entity(self) -> 'outputs.WebhookMappingEntity':
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="itemsToParse")
    def items_to_parse(self) -> Optional[str]:
        return pulumi.get(self, "items_to_parse")


@pulumi.output_type
class WebhookMappingEntity(dict):
    def __init__(__self__, *,
                 identifier: str,
                 icon: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 relations: Optional[Mapping[str, str]] = None,
                 team: Optional[str] = None,
                 title: Optional[str] = None):
        WebhookMappingEntity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            identifier=identifier,
            icon=icon,
            properties=properties,
            relations=relations,
            team=team,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             identifier: str,
             icon: Optional[str] = None,
             properties: Optional[Mapping[str, str]] = None,
             relations: Optional[Mapping[str, str]] = None,
             team: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("identifier", identifier)
        if icon is not None:
            _setter("icon", icon)
        if properties is not None:
            _setter("properties", properties)
        if relations is not None:
            _setter("relations", relations)
        if team is not None:
            _setter("team", team)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def relations(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "relations")

    @property
    @pulumi.getter
    def team(self) -> Optional[str]:
        return pulumi.get(self, "team")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class WebhookSecurity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestIdentifierPath":
            suggest = "request_identifier_path"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"
        elif key == "signatureHeaderName":
            suggest = "signature_header_name"
        elif key == "signaturePrefix":
            suggest = "signature_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebhookSecurity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebhookSecurity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebhookSecurity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 request_identifier_path: Optional[str] = None,
                 secret: Optional[str] = None,
                 signature_algorithm: Optional[str] = None,
                 signature_header_name: Optional[str] = None,
                 signature_prefix: Optional[str] = None):
        WebhookSecurity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            request_identifier_path=request_identifier_path,
            secret=secret,
            signature_algorithm=signature_algorithm,
            signature_header_name=signature_header_name,
            signature_prefix=signature_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             request_identifier_path: Optional[str] = None,
             secret: Optional[str] = None,
             signature_algorithm: Optional[str] = None,
             signature_header_name: Optional[str] = None,
             signature_prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'requestIdentifierPath' in kwargs:
            request_identifier_path = kwargs['requestIdentifierPath']
        if 'signatureAlgorithm' in kwargs:
            signature_algorithm = kwargs['signatureAlgorithm']
        if 'signatureHeaderName' in kwargs:
            signature_header_name = kwargs['signatureHeaderName']
        if 'signaturePrefix' in kwargs:
            signature_prefix = kwargs['signaturePrefix']

        if request_identifier_path is not None:
            _setter("request_identifier_path", request_identifier_path)
        if secret is not None:
            _setter("secret", secret)
        if signature_algorithm is not None:
            _setter("signature_algorithm", signature_algorithm)
        if signature_header_name is not None:
            _setter("signature_header_name", signature_header_name)
        if signature_prefix is not None:
            _setter("signature_prefix", signature_prefix)

    @property
    @pulumi.getter(name="requestIdentifierPath")
    def request_identifier_path(self) -> Optional[str]:
        return pulumi.get(self, "request_identifier_path")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="signatureHeaderName")
    def signature_header_name(self) -> Optional[str]:
        return pulumi.get(self, "signature_header_name")

    @property
    @pulumi.getter(name="signaturePrefix")
    def signature_prefix(self) -> Optional[str]:
        return pulumi.get(self, "signature_prefix")


