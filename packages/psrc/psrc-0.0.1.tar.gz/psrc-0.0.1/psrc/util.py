# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_util.ipynb.

# %% auto 0
__all__ = ['path2str', 'aspath', 'fullpath', 'joinpaths', 'selfpath', 'fspath', 'ls', 'pathsort', 'dirfile', 'dropext']

# %% ../nbs/01_util.ipynb 5
import os
from pathlib import Path

# %% ../nbs/01_util.ipynb 7
from atyp import PathLike, BoolQ, StrQ
from nchr import DOT, NIL
from nlit import (PATH, __FSPATH__, )
from chck import isfile

# %% ../nbs/01_util.ipynb 9
#| export

# %% ../nbs/01_util.ipynb 12
def path2str(path: PathLike, failsafe: BoolQ = True) -> str:
    if issubclass(type(path), os.PathLike): return str(path.__fspath__())
    elif hasattr(path, __FSPATH__):         return str(path.__fspath__())
    elif hasattr(path, PATH):               return path2str(path.path)
    elif isinstance(path, str):             return path
    elif failsafe:                          return DOT
    else: raise ValueError(f'path2str: path {path} not recognized')

# %% ../nbs/01_util.ipynb 13
def aspath(path) -> Path:
    return Path(path2str(path))

# %% ../nbs/01_util.ipynb 14
def fullpath(path) -> Path:
    return aspath(path).expanduser().absolute()

def joinpaths(*paths) -> Path: 
    return fullpath(os.path.join(*(paths or (DOT,))))

# %% ../nbs/01_util.ipynb 15
def selfpath(self, path) -> os.PathLike: 
    return type(self)(fullpath(path))

# %% ../nbs/01_util.ipynb 16
def fspath(path: PathLike) -> str:
    path = os.fspath(path) if isinstance(path, Path) else path
    return path

# %% ../nbs/01_util.ipynb 18
def ls(path: Path) -> list:
    return list(fullpath(path).iterdir())

# %% ../nbs/01_util.ipynb 19
def pathsort(path: Path, dir1st: bool = True) -> list:
    return sorted(ls(path), key=lambda p: (dir1st ^ (not isfile(p)), p.name.lower()))

# %% ../nbs/01_util.ipynb 21
def dirfile(path: Path) -> tuple[Path, str]:
    path = fullpath(path)
    return path.parent, path.name

# %% ../nbs/01_util.ipynb 22
def dropext(file: PathLike, ext: StrQ = None) -> str:
    path, name = dirfile(file)
    name = name.partition(DOT)[0] if ext is None else name.replace(ext, NIL)
    return path / name
