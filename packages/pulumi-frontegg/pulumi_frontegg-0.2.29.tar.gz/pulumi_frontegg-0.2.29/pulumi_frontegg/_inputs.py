# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'WorkspaceAdminPortalArgs',
    'WorkspaceAdminPortalPaletteArgs',
    'WorkspaceAdminPortalPaletteErrorArgs',
    'WorkspaceAdminPortalPaletteInfoArgs',
    'WorkspaceAdminPortalPalettePrimaryArgs',
    'WorkspaceAdminPortalPaletteSecondaryArgs',
    'WorkspaceAdminPortalPaletteSuccessArgs',
    'WorkspaceAdminPortalPaletteWarningArgs',
    'WorkspaceAuthPolicyArgs',
    'WorkspaceBulkTenantsInvitesEmailArgs',
    'WorkspaceCaptchaPolicyArgs',
    'WorkspaceFacebookSocialLoginArgs',
    'WorkspaceGithubSocialLoginArgs',
    'WorkspaceGoogleSocialLoginArgs',
    'WorkspaceHostedLoginArgs',
    'WorkspaceLockoutPolicyArgs',
    'WorkspaceMagicCodeEmailArgs',
    'WorkspaceMagicLinkEmailArgs',
    'WorkspaceMfaAuthenticationAppArgs',
    'WorkspaceMfaPolicyArgs',
    'WorkspaceMicrosoftSocialLoginArgs',
    'WorkspaceNewDeviceConnectedEmailArgs',
    'WorkspaceOidcArgs',
    'WorkspacePasswordPolicyArgs',
    'WorkspacePwnedPasswordEmailArgs',
    'WorkspaceResetPasswordEmailArgs',
    'WorkspaceResetPhoneNumberEmailArgs',
    'WorkspaceSamlArgs',
    'WorkspaceUserActivationEmailArgs',
    'WorkspaceUserInvitationEmailArgs',
    'WorkspaceUserUsedInvitationEmailArgs',
]

@pulumi.input_type
class WorkspaceAdminPortalArgs:
    def __init__(__self__, *,
                 enable_account_settings: pulumi.Input[bool],
                 enable_api_tokens: pulumi.Input[bool],
                 enable_audit_logs: pulumi.Input[bool],
                 enable_personal_api_tokens: pulumi.Input[bool],
                 enable_privacy: pulumi.Input[bool],
                 enable_profile: pulumi.Input[bool],
                 enable_roles: pulumi.Input[bool],
                 enable_security: pulumi.Input[bool],
                 enable_sso: pulumi.Input[bool],
                 enable_subscriptions: pulumi.Input[bool],
                 enable_usage: pulumi.Input[bool],
                 enable_users: pulumi.Input[bool],
                 enable_webhooks: pulumi.Input[bool],
                 palette: Optional[pulumi.Input['WorkspaceAdminPortalPaletteArgs']] = None):
        WorkspaceAdminPortalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_account_settings=enable_account_settings,
            enable_api_tokens=enable_api_tokens,
            enable_audit_logs=enable_audit_logs,
            enable_personal_api_tokens=enable_personal_api_tokens,
            enable_privacy=enable_privacy,
            enable_profile=enable_profile,
            enable_roles=enable_roles,
            enable_security=enable_security,
            enable_sso=enable_sso,
            enable_subscriptions=enable_subscriptions,
            enable_usage=enable_usage,
            enable_users=enable_users,
            enable_webhooks=enable_webhooks,
            palette=palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_account_settings: pulumi.Input[bool],
             enable_api_tokens: pulumi.Input[bool],
             enable_audit_logs: pulumi.Input[bool],
             enable_personal_api_tokens: pulumi.Input[bool],
             enable_privacy: pulumi.Input[bool],
             enable_profile: pulumi.Input[bool],
             enable_roles: pulumi.Input[bool],
             enable_security: pulumi.Input[bool],
             enable_sso: pulumi.Input[bool],
             enable_subscriptions: pulumi.Input[bool],
             enable_usage: pulumi.Input[bool],
             enable_users: pulumi.Input[bool],
             enable_webhooks: pulumi.Input[bool],
             palette: Optional[pulumi.Input['WorkspaceAdminPortalPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'enableAccountSettings' in kwargs:
            enable_account_settings = kwargs['enableAccountSettings']
        if 'enableApiTokens' in kwargs:
            enable_api_tokens = kwargs['enableApiTokens']
        if 'enableAuditLogs' in kwargs:
            enable_audit_logs = kwargs['enableAuditLogs']
        if 'enablePersonalApiTokens' in kwargs:
            enable_personal_api_tokens = kwargs['enablePersonalApiTokens']
        if 'enablePrivacy' in kwargs:
            enable_privacy = kwargs['enablePrivacy']
        if 'enableProfile' in kwargs:
            enable_profile = kwargs['enableProfile']
        if 'enableRoles' in kwargs:
            enable_roles = kwargs['enableRoles']
        if 'enableSecurity' in kwargs:
            enable_security = kwargs['enableSecurity']
        if 'enableSso' in kwargs:
            enable_sso = kwargs['enableSso']
        if 'enableSubscriptions' in kwargs:
            enable_subscriptions = kwargs['enableSubscriptions']
        if 'enableUsage' in kwargs:
            enable_usage = kwargs['enableUsage']
        if 'enableUsers' in kwargs:
            enable_users = kwargs['enableUsers']
        if 'enableWebhooks' in kwargs:
            enable_webhooks = kwargs['enableWebhooks']

        _setter("enable_account_settings", enable_account_settings)
        _setter("enable_api_tokens", enable_api_tokens)
        _setter("enable_audit_logs", enable_audit_logs)
        _setter("enable_personal_api_tokens", enable_personal_api_tokens)
        _setter("enable_privacy", enable_privacy)
        _setter("enable_profile", enable_profile)
        _setter("enable_roles", enable_roles)
        _setter("enable_security", enable_security)
        _setter("enable_sso", enable_sso)
        _setter("enable_subscriptions", enable_subscriptions)
        _setter("enable_usage", enable_usage)
        _setter("enable_users", enable_users)
        _setter("enable_webhooks", enable_webhooks)
        if palette is not None:
            _setter("palette", palette)

    @property
    @pulumi.getter(name="enableAccountSettings")
    def enable_account_settings(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_account_settings")

    @enable_account_settings.setter
    def enable_account_settings(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_account_settings", value)

    @property
    @pulumi.getter(name="enableApiTokens")
    def enable_api_tokens(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_api_tokens")

    @enable_api_tokens.setter
    def enable_api_tokens(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_api_tokens", value)

    @property
    @pulumi.getter(name="enableAuditLogs")
    def enable_audit_logs(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_audit_logs")

    @enable_audit_logs.setter
    def enable_audit_logs(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_audit_logs", value)

    @property
    @pulumi.getter(name="enablePersonalApiTokens")
    def enable_personal_api_tokens(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_personal_api_tokens")

    @enable_personal_api_tokens.setter
    def enable_personal_api_tokens(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_personal_api_tokens", value)

    @property
    @pulumi.getter(name="enablePrivacy")
    def enable_privacy(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_privacy")

    @enable_privacy.setter
    def enable_privacy(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_privacy", value)

    @property
    @pulumi.getter(name="enableProfile")
    def enable_profile(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_profile")

    @enable_profile.setter
    def enable_profile(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_profile", value)

    @property
    @pulumi.getter(name="enableRoles")
    def enable_roles(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_roles")

    @enable_roles.setter
    def enable_roles(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_roles", value)

    @property
    @pulumi.getter(name="enableSecurity")
    def enable_security(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_security")

    @enable_security.setter
    def enable_security(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_security", value)

    @property
    @pulumi.getter(name="enableSso")
    def enable_sso(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_sso")

    @enable_sso.setter
    def enable_sso(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_sso", value)

    @property
    @pulumi.getter(name="enableSubscriptions")
    def enable_subscriptions(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_subscriptions")

    @enable_subscriptions.setter
    def enable_subscriptions(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_subscriptions", value)

    @property
    @pulumi.getter(name="enableUsage")
    def enable_usage(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_usage")

    @enable_usage.setter
    def enable_usage(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_usage", value)

    @property
    @pulumi.getter(name="enableUsers")
    def enable_users(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_users")

    @enable_users.setter
    def enable_users(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_users", value)

    @property
    @pulumi.getter(name="enableWebhooks")
    def enable_webhooks(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_webhooks")

    @enable_webhooks.setter
    def enable_webhooks(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_webhooks", value)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input['WorkspaceAdminPortalPaletteArgs']]:
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input['WorkspaceAdminPortalPaletteArgs']]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class WorkspaceAdminPortalPaletteArgs:
    def __init__(__self__, *,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteErrorArgs']]]] = None,
                 infos: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteInfoArgs']]]] = None,
                 primaries: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPalettePrimaryArgs']]]] = None,
                 secondaries: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSecondaryArgs']]]] = None,
                 successes: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSuccessArgs']]]] = None,
                 warnings: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteWarningArgs']]]] = None):
        WorkspaceAdminPortalPaletteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            errors=errors,
            infos=infos,
            primaries=primaries,
            secondaries=secondaries,
            successes=successes,
            warnings=warnings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             errors: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteErrorArgs']]]] = None,
             infos: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteInfoArgs']]]] = None,
             primaries: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPalettePrimaryArgs']]]] = None,
             secondaries: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSecondaryArgs']]]] = None,
             successes: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSuccessArgs']]]] = None,
             warnings: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteWarningArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if errors is not None:
            _setter("errors", errors)
        if infos is not None:
            _setter("infos", infos)
        if primaries is not None:
            _setter("primaries", primaries)
        if secondaries is not None:
            _setter("secondaries", secondaries)
        if successes is not None:
            _setter("successes", successes)
        if warnings is not None:
            _setter("warnings", warnings)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteErrorArgs']]]]:
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteErrorArgs']]]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter
    def infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteInfoArgs']]]]:
        return pulumi.get(self, "infos")

    @infos.setter
    def infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteInfoArgs']]]]):
        pulumi.set(self, "infos", value)

    @property
    @pulumi.getter
    def primaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPalettePrimaryArgs']]]]:
        return pulumi.get(self, "primaries")

    @primaries.setter
    def primaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPalettePrimaryArgs']]]]):
        pulumi.set(self, "primaries", value)

    @property
    @pulumi.getter
    def secondaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSecondaryArgs']]]]:
        return pulumi.get(self, "secondaries")

    @secondaries.setter
    def secondaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSecondaryArgs']]]]):
        pulumi.set(self, "secondaries", value)

    @property
    @pulumi.getter
    def successes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSuccessArgs']]]]:
        return pulumi.get(self, "successes")

    @successes.setter
    def successes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteSuccessArgs']]]]):
        pulumi.set(self, "successes", value)

    @property
    @pulumi.getter
    def warnings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteWarningArgs']]]]:
        return pulumi.get(self, "warnings")

    @warnings.setter
    def warnings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceAdminPortalPaletteWarningArgs']]]]):
        pulumi.set(self, "warnings", value)


@pulumi.input_type
class WorkspaceAdminPortalPaletteErrorArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        WorkspaceAdminPortalPaletteErrorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contrast_text=contrast_text,
            dark=dark,
            light=light,
            main=main,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contrast_text: pulumi.Input[str],
             dark: pulumi.Input[str],
             light: pulumi.Input[str],
             main: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contrastText' in kwargs:
            contrast_text = kwargs['contrastText']

        _setter("contrast_text", contrast_text)
        _setter("dark", dark)
        _setter("light", light)
        _setter("main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


@pulumi.input_type
class WorkspaceAdminPortalPaletteInfoArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        WorkspaceAdminPortalPaletteInfoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contrast_text=contrast_text,
            dark=dark,
            light=light,
            main=main,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contrast_text: pulumi.Input[str],
             dark: pulumi.Input[str],
             light: pulumi.Input[str],
             main: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contrastText' in kwargs:
            contrast_text = kwargs['contrastText']

        _setter("contrast_text", contrast_text)
        _setter("dark", dark)
        _setter("light", light)
        _setter("main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


@pulumi.input_type
class WorkspaceAdminPortalPalettePrimaryArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[str],
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 hover: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        WorkspaceAdminPortalPalettePrimaryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            active=active,
            contrast_text=contrast_text,
            dark=dark,
            hover=hover,
            light=light,
            main=main,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             active: pulumi.Input[str],
             contrast_text: pulumi.Input[str],
             dark: pulumi.Input[str],
             hover: pulumi.Input[str],
             light: pulumi.Input[str],
             main: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contrastText' in kwargs:
            contrast_text = kwargs['contrastText']

        _setter("active", active)
        _setter("contrast_text", contrast_text)
        _setter("dark", dark)
        _setter("hover", hover)
        _setter("light", light)
        _setter("main", main)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[str]:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[str]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def hover(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hover")

    @hover.setter
    def hover(self, value: pulumi.Input[str]):
        pulumi.set(self, "hover", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


@pulumi.input_type
class WorkspaceAdminPortalPaletteSecondaryArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[str],
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 hover: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        WorkspaceAdminPortalPaletteSecondaryArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            active=active,
            contrast_text=contrast_text,
            dark=dark,
            hover=hover,
            light=light,
            main=main,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             active: pulumi.Input[str],
             contrast_text: pulumi.Input[str],
             dark: pulumi.Input[str],
             hover: pulumi.Input[str],
             light: pulumi.Input[str],
             main: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contrastText' in kwargs:
            contrast_text = kwargs['contrastText']

        _setter("active", active)
        _setter("contrast_text", contrast_text)
        _setter("dark", dark)
        _setter("hover", hover)
        _setter("light", light)
        _setter("main", main)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[str]:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[str]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def hover(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hover")

    @hover.setter
    def hover(self, value: pulumi.Input[str]):
        pulumi.set(self, "hover", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


@pulumi.input_type
class WorkspaceAdminPortalPaletteSuccessArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        WorkspaceAdminPortalPaletteSuccessArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contrast_text=contrast_text,
            dark=dark,
            light=light,
            main=main,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contrast_text: pulumi.Input[str],
             dark: pulumi.Input[str],
             light: pulumi.Input[str],
             main: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contrastText' in kwargs:
            contrast_text = kwargs['contrastText']

        _setter("contrast_text", contrast_text)
        _setter("dark", dark)
        _setter("light", light)
        _setter("main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


@pulumi.input_type
class WorkspaceAdminPortalPaletteWarningArgs:
    def __init__(__self__, *,
                 contrast_text: pulumi.Input[str],
                 dark: pulumi.Input[str],
                 light: pulumi.Input[str],
                 main: pulumi.Input[str]):
        WorkspaceAdminPortalPaletteWarningArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contrast_text=contrast_text,
            dark=dark,
            light=light,
            main=main,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contrast_text: pulumi.Input[str],
             dark: pulumi.Input[str],
             light: pulumi.Input[str],
             main: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'contrastText' in kwargs:
            contrast_text = kwargs['contrastText']

        _setter("contrast_text", contrast_text)
        _setter("dark", dark)
        _setter("light", light)
        _setter("main", main)

    @property
    @pulumi.getter(name="contrastText")
    def contrast_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contrast_text")

    @contrast_text.setter
    def contrast_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "contrast_text", value)

    @property
    @pulumi.getter
    def dark(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dark")

    @dark.setter
    def dark(self, value: pulumi.Input[str]):
        pulumi.set(self, "dark", value)

    @property
    @pulumi.getter
    def light(self) -> pulumi.Input[str]:
        return pulumi.get(self, "light")

    @light.setter
    def light(self, value: pulumi.Input[str]):
        pulumi.set(self, "light", value)

    @property
    @pulumi.getter
    def main(self) -> pulumi.Input[str]:
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: pulumi.Input[str]):
        pulumi.set(self, "main", value)


@pulumi.input_type
class WorkspaceAuthPolicyArgs:
    def __init__(__self__, *,
                 allow_signups: pulumi.Input[bool],
                 allow_tenant_invitations: pulumi.Input[bool],
                 allow_unverified_users: pulumi.Input[bool],
                 auth_strategy: pulumi.Input[str],
                 enable_api_tokens: pulumi.Input[bool],
                 enable_roles: pulumi.Input[bool],
                 jwt_access_token_expiration: pulumi.Input[int],
                 jwt_refresh_token_expiration: pulumi.Input[int],
                 same_site_cookie_policy: pulumi.Input[str],
                 jwt_algorithm: Optional[pulumi.Input[str]] = None,
                 jwt_public_key: Optional[pulumi.Input[str]] = None,
                 machine_to_machine_auth_strategy: Optional[pulumi.Input[str]] = None):
        WorkspaceAuthPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_signups=allow_signups,
            allow_tenant_invitations=allow_tenant_invitations,
            allow_unverified_users=allow_unverified_users,
            auth_strategy=auth_strategy,
            enable_api_tokens=enable_api_tokens,
            enable_roles=enable_roles,
            jwt_access_token_expiration=jwt_access_token_expiration,
            jwt_refresh_token_expiration=jwt_refresh_token_expiration,
            same_site_cookie_policy=same_site_cookie_policy,
            jwt_algorithm=jwt_algorithm,
            jwt_public_key=jwt_public_key,
            machine_to_machine_auth_strategy=machine_to_machine_auth_strategy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_signups: pulumi.Input[bool],
             allow_tenant_invitations: pulumi.Input[bool],
             allow_unverified_users: pulumi.Input[bool],
             auth_strategy: pulumi.Input[str],
             enable_api_tokens: pulumi.Input[bool],
             enable_roles: pulumi.Input[bool],
             jwt_access_token_expiration: pulumi.Input[int],
             jwt_refresh_token_expiration: pulumi.Input[int],
             same_site_cookie_policy: pulumi.Input[str],
             jwt_algorithm: Optional[pulumi.Input[str]] = None,
             jwt_public_key: Optional[pulumi.Input[str]] = None,
             machine_to_machine_auth_strategy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowSignups' in kwargs:
            allow_signups = kwargs['allowSignups']
        if 'allowTenantInvitations' in kwargs:
            allow_tenant_invitations = kwargs['allowTenantInvitations']
        if 'allowUnverifiedUsers' in kwargs:
            allow_unverified_users = kwargs['allowUnverifiedUsers']
        if 'authStrategy' in kwargs:
            auth_strategy = kwargs['authStrategy']
        if 'enableApiTokens' in kwargs:
            enable_api_tokens = kwargs['enableApiTokens']
        if 'enableRoles' in kwargs:
            enable_roles = kwargs['enableRoles']
        if 'jwtAccessTokenExpiration' in kwargs:
            jwt_access_token_expiration = kwargs['jwtAccessTokenExpiration']
        if 'jwtRefreshTokenExpiration' in kwargs:
            jwt_refresh_token_expiration = kwargs['jwtRefreshTokenExpiration']
        if 'sameSiteCookiePolicy' in kwargs:
            same_site_cookie_policy = kwargs['sameSiteCookiePolicy']
        if 'jwtAlgorithm' in kwargs:
            jwt_algorithm = kwargs['jwtAlgorithm']
        if 'jwtPublicKey' in kwargs:
            jwt_public_key = kwargs['jwtPublicKey']
        if 'machineToMachineAuthStrategy' in kwargs:
            machine_to_machine_auth_strategy = kwargs['machineToMachineAuthStrategy']

        _setter("allow_signups", allow_signups)
        _setter("allow_tenant_invitations", allow_tenant_invitations)
        _setter("allow_unverified_users", allow_unverified_users)
        _setter("auth_strategy", auth_strategy)
        _setter("enable_api_tokens", enable_api_tokens)
        _setter("enable_roles", enable_roles)
        _setter("jwt_access_token_expiration", jwt_access_token_expiration)
        _setter("jwt_refresh_token_expiration", jwt_refresh_token_expiration)
        _setter("same_site_cookie_policy", same_site_cookie_policy)
        if jwt_algorithm is not None:
            _setter("jwt_algorithm", jwt_algorithm)
        if jwt_public_key is not None:
            _setter("jwt_public_key", jwt_public_key)
        if machine_to_machine_auth_strategy is not None:
            _setter("machine_to_machine_auth_strategy", machine_to_machine_auth_strategy)

    @property
    @pulumi.getter(name="allowSignups")
    def allow_signups(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_signups")

    @allow_signups.setter
    def allow_signups(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_signups", value)

    @property
    @pulumi.getter(name="allowTenantInvitations")
    def allow_tenant_invitations(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_tenant_invitations")

    @allow_tenant_invitations.setter
    def allow_tenant_invitations(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_tenant_invitations", value)

    @property
    @pulumi.getter(name="allowUnverifiedUsers")
    def allow_unverified_users(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_unverified_users")

    @allow_unverified_users.setter
    def allow_unverified_users(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_unverified_users", value)

    @property
    @pulumi.getter(name="authStrategy")
    def auth_strategy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_strategy")

    @auth_strategy.setter
    def auth_strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_strategy", value)

    @property
    @pulumi.getter(name="enableApiTokens")
    def enable_api_tokens(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_api_tokens")

    @enable_api_tokens.setter
    def enable_api_tokens(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_api_tokens", value)

    @property
    @pulumi.getter(name="enableRoles")
    def enable_roles(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_roles")

    @enable_roles.setter
    def enable_roles(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_roles", value)

    @property
    @pulumi.getter(name="jwtAccessTokenExpiration")
    def jwt_access_token_expiration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "jwt_access_token_expiration")

    @jwt_access_token_expiration.setter
    def jwt_access_token_expiration(self, value: pulumi.Input[int]):
        pulumi.set(self, "jwt_access_token_expiration", value)

    @property
    @pulumi.getter(name="jwtRefreshTokenExpiration")
    def jwt_refresh_token_expiration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "jwt_refresh_token_expiration")

    @jwt_refresh_token_expiration.setter
    def jwt_refresh_token_expiration(self, value: pulumi.Input[int]):
        pulumi.set(self, "jwt_refresh_token_expiration", value)

    @property
    @pulumi.getter(name="sameSiteCookiePolicy")
    def same_site_cookie_policy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "same_site_cookie_policy")

    @same_site_cookie_policy.setter
    def same_site_cookie_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "same_site_cookie_policy", value)

    @property
    @pulumi.getter(name="jwtAlgorithm")
    def jwt_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jwt_algorithm")

    @jwt_algorithm.setter
    def jwt_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt_algorithm", value)

    @property
    @pulumi.getter(name="jwtPublicKey")
    def jwt_public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jwt_public_key")

    @jwt_public_key.setter
    def jwt_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt_public_key", value)

    @property
    @pulumi.getter(name="machineToMachineAuthStrategy")
    def machine_to_machine_auth_strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "machine_to_machine_auth_strategy")

    @machine_to_machine_auth_strategy.setter
    def machine_to_machine_auth_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_to_machine_auth_strategy", value)


@pulumi.input_type
class WorkspaceBulkTenantsInvitesEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        WorkspaceBulkTenantsInvitesEmailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_address=from_address,
            from_name=from_name,
            html_template=html_template,
            subject=subject,
            redirect_url=redirect_url,
            success_redirect_url=success_redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_address: pulumi.Input[str],
             from_name: pulumi.Input[str],
             html_template: pulumi.Input[str],
             subject: pulumi.Input[str],
             redirect_url: Optional[pulumi.Input[str]] = None,
             success_redirect_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromAddress' in kwargs:
            from_address = kwargs['fromAddress']
        if 'fromName' in kwargs:
            from_name = kwargs['fromName']
        if 'htmlTemplate' in kwargs:
            html_template = kwargs['htmlTemplate']
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'successRedirectUrl' in kwargs:
            success_redirect_url = kwargs['successRedirectUrl']

        _setter("from_address", from_address)
        _setter("from_name", from_name)
        _setter("html_template", html_template)
        _setter("subject", subject)
        if redirect_url is not None:
            _setter("redirect_url", redirect_url)
        if success_redirect_url is not None:
            _setter("success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


@pulumi.input_type
class WorkspaceCaptchaPolicyArgs:
    def __init__(__self__, *,
                 min_score: pulumi.Input[float],
                 secret_key: pulumi.Input[str],
                 site_key: pulumi.Input[str],
                 ignored_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        WorkspaceCaptchaPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            min_score=min_score,
            secret_key=secret_key,
            site_key=site_key,
            ignored_emails=ignored_emails,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             min_score: pulumi.Input[float],
             secret_key: pulumi.Input[str],
             site_key: pulumi.Input[str],
             ignored_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'minScore' in kwargs:
            min_score = kwargs['minScore']
        if 'secretKey' in kwargs:
            secret_key = kwargs['secretKey']
        if 'siteKey' in kwargs:
            site_key = kwargs['siteKey']
        if 'ignoredEmails' in kwargs:
            ignored_emails = kwargs['ignoredEmails']

        _setter("min_score", min_score)
        _setter("secret_key", secret_key)
        _setter("site_key", site_key)
        if ignored_emails is not None:
            _setter("ignored_emails", ignored_emails)

    @property
    @pulumi.getter(name="minScore")
    def min_score(self) -> pulumi.Input[float]:
        return pulumi.get(self, "min_score")

    @min_score.setter
    def min_score(self, value: pulumi.Input[float]):
        pulumi.set(self, "min_score", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="siteKey")
    def site_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "site_key")

    @site_key.setter
    def site_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_key", value)

    @property
    @pulumi.getter(name="ignoredEmails")
    def ignored_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignored_emails")

    @ignored_emails.setter
    def ignored_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignored_emails", value)


@pulumi.input_type
class WorkspaceFacebookSocialLoginArgs:
    def __init__(__self__, *,
                 redirect_url: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 customised: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        WorkspaceFacebookSocialLoginArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            redirect_url=redirect_url,
            client_id=client_id,
            customised=customised,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             redirect_url: pulumi.Input[str],
             client_id: Optional[pulumi.Input[str]] = None,
             customised: Optional[pulumi.Input[bool]] = None,
             secret: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']

        _setter("redirect_url", redirect_url)
        if client_id is not None:
            _setter("client_id", client_id)
        if customised is not None:
            _setter("customised", customised)
        if secret is not None:
            _setter("secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def customised(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "customised")

    @customised.setter
    def customised(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "customised", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class WorkspaceGithubSocialLoginArgs:
    def __init__(__self__, *,
                 redirect_url: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 customised: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        WorkspaceGithubSocialLoginArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            redirect_url=redirect_url,
            client_id=client_id,
            customised=customised,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             redirect_url: pulumi.Input[str],
             client_id: Optional[pulumi.Input[str]] = None,
             customised: Optional[pulumi.Input[bool]] = None,
             secret: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']

        _setter("redirect_url", redirect_url)
        if client_id is not None:
            _setter("client_id", client_id)
        if customised is not None:
            _setter("customised", customised)
        if secret is not None:
            _setter("secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def customised(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "customised")

    @customised.setter
    def customised(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "customised", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class WorkspaceGoogleSocialLoginArgs:
    def __init__(__self__, *,
                 redirect_url: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 customised: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        WorkspaceGoogleSocialLoginArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            redirect_url=redirect_url,
            client_id=client_id,
            customised=customised,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             redirect_url: pulumi.Input[str],
             client_id: Optional[pulumi.Input[str]] = None,
             customised: Optional[pulumi.Input[bool]] = None,
             secret: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']

        _setter("redirect_url", redirect_url)
        if client_id is not None:
            _setter("client_id", client_id)
        if customised is not None:
            _setter("customised", customised)
        if secret is not None:
            _setter("secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def customised(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "customised")

    @customised.setter
    def customised(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "customised", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class WorkspaceHostedLoginArgs:
    def __init__(__self__, *,
                 allowed_redirect_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        WorkspaceHostedLoginArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_redirect_urls=allowed_redirect_urls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_redirect_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowedRedirectUrls' in kwargs:
            allowed_redirect_urls = kwargs['allowedRedirectUrls']

        if allowed_redirect_urls is not None:
            _setter("allowed_redirect_urls", allowed_redirect_urls)

    @property
    @pulumi.getter(name="allowedRedirectUrls")
    def allowed_redirect_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_redirect_urls")

    @allowed_redirect_urls.setter
    def allowed_redirect_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_redirect_urls", value)


@pulumi.input_type
class WorkspaceLockoutPolicyArgs:
    def __init__(__self__, *,
                 max_attempts: pulumi.Input[int]):
        WorkspaceLockoutPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_attempts=max_attempts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_attempts: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'maxAttempts' in kwargs:
            max_attempts = kwargs['maxAttempts']

        _setter("max_attempts", max_attempts)

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_attempts")

    @max_attempts.setter
    def max_attempts(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_attempts", value)


@pulumi.input_type
class WorkspaceMagicCodeEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        WorkspaceMagicCodeEmailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_address=from_address,
            from_name=from_name,
            html_template=html_template,
            subject=subject,
            redirect_url=redirect_url,
            success_redirect_url=success_redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_address: pulumi.Input[str],
             from_name: pulumi.Input[str],
             html_template: pulumi.Input[str],
             subject: pulumi.Input[str],
             redirect_url: Optional[pulumi.Input[str]] = None,
             success_redirect_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromAddress' in kwargs:
            from_address = kwargs['fromAddress']
        if 'fromName' in kwargs:
            from_name = kwargs['fromName']
        if 'htmlTemplate' in kwargs:
            html_template = kwargs['htmlTemplate']
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'successRedirectUrl' in kwargs:
            success_redirect_url = kwargs['successRedirectUrl']

        _setter("from_address", from_address)
        _setter("from_name", from_name)
        _setter("html_template", html_template)
        _setter("subject", subject)
        if redirect_url is not None:
            _setter("redirect_url", redirect_url)
        if success_redirect_url is not None:
            _setter("success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


@pulumi.input_type
class WorkspaceMagicLinkEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        WorkspaceMagicLinkEmailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_address=from_address,
            from_name=from_name,
            html_template=html_template,
            subject=subject,
            redirect_url=redirect_url,
            success_redirect_url=success_redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_address: pulumi.Input[str],
             from_name: pulumi.Input[str],
             html_template: pulumi.Input[str],
             subject: pulumi.Input[str],
             redirect_url: Optional[pulumi.Input[str]] = None,
             success_redirect_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromAddress' in kwargs:
            from_address = kwargs['fromAddress']
        if 'fromName' in kwargs:
            from_name = kwargs['fromName']
        if 'htmlTemplate' in kwargs:
            html_template = kwargs['htmlTemplate']
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'successRedirectUrl' in kwargs:
            success_redirect_url = kwargs['successRedirectUrl']

        _setter("from_address", from_address)
        _setter("from_name", from_name)
        _setter("html_template", html_template)
        _setter("subject", subject)
        if redirect_url is not None:
            _setter("redirect_url", redirect_url)
        if success_redirect_url is not None:
            _setter("success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


@pulumi.input_type
class WorkspaceMfaAuthenticationAppArgs:
    def __init__(__self__, *,
                 service_name: pulumi.Input[str]):
        WorkspaceMfaAuthenticationAppArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            service_name=service_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             service_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'serviceName' in kwargs:
            service_name = kwargs['serviceName']

        _setter("service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)


@pulumi.input_type
class WorkspaceMfaPolicyArgs:
    def __init__(__self__, *,
                 allow_remember_device: pulumi.Input[bool],
                 device_expiration: pulumi.Input[int],
                 enforce: pulumi.Input[str]):
        WorkspaceMfaPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_remember_device=allow_remember_device,
            device_expiration=device_expiration,
            enforce=enforce,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_remember_device: pulumi.Input[bool],
             device_expiration: pulumi.Input[int],
             enforce: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowRememberDevice' in kwargs:
            allow_remember_device = kwargs['allowRememberDevice']
        if 'deviceExpiration' in kwargs:
            device_expiration = kwargs['deviceExpiration']

        _setter("allow_remember_device", allow_remember_device)
        _setter("device_expiration", device_expiration)
        _setter("enforce", enforce)

    @property
    @pulumi.getter(name="allowRememberDevice")
    def allow_remember_device(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_remember_device")

    @allow_remember_device.setter
    def allow_remember_device(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_remember_device", value)

    @property
    @pulumi.getter(name="deviceExpiration")
    def device_expiration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "device_expiration")

    @device_expiration.setter
    def device_expiration(self, value: pulumi.Input[int]):
        pulumi.set(self, "device_expiration", value)

    @property
    @pulumi.getter
    def enforce(self) -> pulumi.Input[str]:
        return pulumi.get(self, "enforce")

    @enforce.setter
    def enforce(self, value: pulumi.Input[str]):
        pulumi.set(self, "enforce", value)


@pulumi.input_type
class WorkspaceMicrosoftSocialLoginArgs:
    def __init__(__self__, *,
                 redirect_url: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 customised: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        WorkspaceMicrosoftSocialLoginArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            redirect_url=redirect_url,
            client_id=client_id,
            customised=customised,
            secret=secret,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             redirect_url: pulumi.Input[str],
             client_id: Optional[pulumi.Input[str]] = None,
             customised: Optional[pulumi.Input[bool]] = None,
             secret: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'clientId' in kwargs:
            client_id = kwargs['clientId']

        _setter("redirect_url", redirect_url)
        if client_id is not None:
            _setter("client_id", client_id)
        if customised is not None:
            _setter("customised", customised)
        if secret is not None:
            _setter("secret", secret)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def customised(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "customised")

    @customised.setter
    def customised(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "customised", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class WorkspaceNewDeviceConnectedEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        WorkspaceNewDeviceConnectedEmailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_address=from_address,
            from_name=from_name,
            html_template=html_template,
            subject=subject,
            redirect_url=redirect_url,
            success_redirect_url=success_redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_address: pulumi.Input[str],
             from_name: pulumi.Input[str],
             html_template: pulumi.Input[str],
             subject: pulumi.Input[str],
             redirect_url: Optional[pulumi.Input[str]] = None,
             success_redirect_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromAddress' in kwargs:
            from_address = kwargs['fromAddress']
        if 'fromName' in kwargs:
            from_name = kwargs['fromName']
        if 'htmlTemplate' in kwargs:
            html_template = kwargs['htmlTemplate']
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'successRedirectUrl' in kwargs:
            success_redirect_url = kwargs['successRedirectUrl']

        _setter("from_address", from_address)
        _setter("from_name", from_name)
        _setter("html_template", html_template)
        _setter("subject", subject)
        if redirect_url is not None:
            _setter("redirect_url", redirect_url)
        if success_redirect_url is not None:
            _setter("success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


@pulumi.input_type
class WorkspaceOidcArgs:
    def __init__(__self__, *,
                 redirect_url: pulumi.Input[str]):
        WorkspaceOidcArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            redirect_url=redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             redirect_url: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']

        _setter("redirect_url", redirect_url)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_url", value)


@pulumi.input_type
class WorkspacePasswordPolicyArgs:
    def __init__(__self__, *,
                 allow_passphrases: pulumi.Input[bool],
                 history: pulumi.Input[int],
                 max_length: pulumi.Input[int],
                 min_length: pulumi.Input[int],
                 min_phrase_length: pulumi.Input[int],
                 min_tests: pulumi.Input[int]):
        WorkspacePasswordPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_passphrases=allow_passphrases,
            history=history,
            max_length=max_length,
            min_length=min_length,
            min_phrase_length=min_phrase_length,
            min_tests=min_tests,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_passphrases: pulumi.Input[bool],
             history: pulumi.Input[int],
             max_length: pulumi.Input[int],
             min_length: pulumi.Input[int],
             min_phrase_length: pulumi.Input[int],
             min_tests: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'allowPassphrases' in kwargs:
            allow_passphrases = kwargs['allowPassphrases']
        if 'maxLength' in kwargs:
            max_length = kwargs['maxLength']
        if 'minLength' in kwargs:
            min_length = kwargs['minLength']
        if 'minPhraseLength' in kwargs:
            min_phrase_length = kwargs['minPhraseLength']
        if 'minTests' in kwargs:
            min_tests = kwargs['minTests']

        _setter("allow_passphrases", allow_passphrases)
        _setter("history", history)
        _setter("max_length", max_length)
        _setter("min_length", min_length)
        _setter("min_phrase_length", min_phrase_length)
        _setter("min_tests", min_tests)

    @property
    @pulumi.getter(name="allowPassphrases")
    def allow_passphrases(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_passphrases")

    @allow_passphrases.setter
    def allow_passphrases(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_passphrases", value)

    @property
    @pulumi.getter
    def history(self) -> pulumi.Input[int]:
        return pulumi.get(self, "history")

    @history.setter
    def history(self, value: pulumi.Input[int]):
        pulumi.set(self, "history", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="minPhraseLength")
    def min_phrase_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_phrase_length")

    @min_phrase_length.setter
    def min_phrase_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_phrase_length", value)

    @property
    @pulumi.getter(name="minTests")
    def min_tests(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_tests")

    @min_tests.setter
    def min_tests(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_tests", value)


@pulumi.input_type
class WorkspacePwnedPasswordEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        WorkspacePwnedPasswordEmailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_address=from_address,
            from_name=from_name,
            html_template=html_template,
            subject=subject,
            redirect_url=redirect_url,
            success_redirect_url=success_redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_address: pulumi.Input[str],
             from_name: pulumi.Input[str],
             html_template: pulumi.Input[str],
             subject: pulumi.Input[str],
             redirect_url: Optional[pulumi.Input[str]] = None,
             success_redirect_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromAddress' in kwargs:
            from_address = kwargs['fromAddress']
        if 'fromName' in kwargs:
            from_name = kwargs['fromName']
        if 'htmlTemplate' in kwargs:
            html_template = kwargs['htmlTemplate']
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'successRedirectUrl' in kwargs:
            success_redirect_url = kwargs['successRedirectUrl']

        _setter("from_address", from_address)
        _setter("from_name", from_name)
        _setter("html_template", html_template)
        _setter("subject", subject)
        if redirect_url is not None:
            _setter("redirect_url", redirect_url)
        if success_redirect_url is not None:
            _setter("success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


@pulumi.input_type
class WorkspaceResetPasswordEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        WorkspaceResetPasswordEmailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_address=from_address,
            from_name=from_name,
            html_template=html_template,
            subject=subject,
            redirect_url=redirect_url,
            success_redirect_url=success_redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_address: pulumi.Input[str],
             from_name: pulumi.Input[str],
             html_template: pulumi.Input[str],
             subject: pulumi.Input[str],
             redirect_url: Optional[pulumi.Input[str]] = None,
             success_redirect_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromAddress' in kwargs:
            from_address = kwargs['fromAddress']
        if 'fromName' in kwargs:
            from_name = kwargs['fromName']
        if 'htmlTemplate' in kwargs:
            html_template = kwargs['htmlTemplate']
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'successRedirectUrl' in kwargs:
            success_redirect_url = kwargs['successRedirectUrl']

        _setter("from_address", from_address)
        _setter("from_name", from_name)
        _setter("html_template", html_template)
        _setter("subject", subject)
        if redirect_url is not None:
            _setter("redirect_url", redirect_url)
        if success_redirect_url is not None:
            _setter("success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


@pulumi.input_type
class WorkspaceResetPhoneNumberEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        WorkspaceResetPhoneNumberEmailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_address=from_address,
            from_name=from_name,
            html_template=html_template,
            subject=subject,
            redirect_url=redirect_url,
            success_redirect_url=success_redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_address: pulumi.Input[str],
             from_name: pulumi.Input[str],
             html_template: pulumi.Input[str],
             subject: pulumi.Input[str],
             redirect_url: Optional[pulumi.Input[str]] = None,
             success_redirect_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromAddress' in kwargs:
            from_address = kwargs['fromAddress']
        if 'fromName' in kwargs:
            from_name = kwargs['fromName']
        if 'htmlTemplate' in kwargs:
            html_template = kwargs['htmlTemplate']
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'successRedirectUrl' in kwargs:
            success_redirect_url = kwargs['successRedirectUrl']

        _setter("from_address", from_address)
        _setter("from_name", from_name)
        _setter("html_template", html_template)
        _setter("subject", subject)
        if redirect_url is not None:
            _setter("redirect_url", redirect_url)
        if success_redirect_url is not None:
            _setter("success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


@pulumi.input_type
class WorkspaceSamlArgs:
    def __init__(__self__, *,
                 acs_url: pulumi.Input[str],
                 sp_entity_id: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None):
        WorkspaceSamlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acs_url=acs_url,
            sp_entity_id=sp_entity_id,
            redirect_url=redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acs_url: pulumi.Input[str],
             sp_entity_id: pulumi.Input[str],
             redirect_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'acsUrl' in kwargs:
            acs_url = kwargs['acsUrl']
        if 'spEntityId' in kwargs:
            sp_entity_id = kwargs['spEntityId']
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']

        _setter("acs_url", acs_url)
        _setter("sp_entity_id", sp_entity_id)
        if redirect_url is not None:
            _setter("redirect_url", redirect_url)

    @property
    @pulumi.getter(name="acsUrl")
    def acs_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "acs_url")

    @acs_url.setter
    def acs_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "acs_url", value)

    @property
    @pulumi.getter(name="spEntityId")
    def sp_entity_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sp_entity_id")

    @sp_entity_id.setter
    def sp_entity_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sp_entity_id", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)


@pulumi.input_type
class WorkspaceUserActivationEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        WorkspaceUserActivationEmailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_address=from_address,
            from_name=from_name,
            html_template=html_template,
            subject=subject,
            redirect_url=redirect_url,
            success_redirect_url=success_redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_address: pulumi.Input[str],
             from_name: pulumi.Input[str],
             html_template: pulumi.Input[str],
             subject: pulumi.Input[str],
             redirect_url: Optional[pulumi.Input[str]] = None,
             success_redirect_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromAddress' in kwargs:
            from_address = kwargs['fromAddress']
        if 'fromName' in kwargs:
            from_name = kwargs['fromName']
        if 'htmlTemplate' in kwargs:
            html_template = kwargs['htmlTemplate']
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'successRedirectUrl' in kwargs:
            success_redirect_url = kwargs['successRedirectUrl']

        _setter("from_address", from_address)
        _setter("from_name", from_name)
        _setter("html_template", html_template)
        _setter("subject", subject)
        if redirect_url is not None:
            _setter("redirect_url", redirect_url)
        if success_redirect_url is not None:
            _setter("success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


@pulumi.input_type
class WorkspaceUserInvitationEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        WorkspaceUserInvitationEmailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_address=from_address,
            from_name=from_name,
            html_template=html_template,
            subject=subject,
            redirect_url=redirect_url,
            success_redirect_url=success_redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_address: pulumi.Input[str],
             from_name: pulumi.Input[str],
             html_template: pulumi.Input[str],
             subject: pulumi.Input[str],
             redirect_url: Optional[pulumi.Input[str]] = None,
             success_redirect_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromAddress' in kwargs:
            from_address = kwargs['fromAddress']
        if 'fromName' in kwargs:
            from_name = kwargs['fromName']
        if 'htmlTemplate' in kwargs:
            html_template = kwargs['htmlTemplate']
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'successRedirectUrl' in kwargs:
            success_redirect_url = kwargs['successRedirectUrl']

        _setter("from_address", from_address)
        _setter("from_name", from_name)
        _setter("html_template", html_template)
        _setter("subject", subject)
        if redirect_url is not None:
            _setter("redirect_url", redirect_url)
        if success_redirect_url is not None:
            _setter("success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


@pulumi.input_type
class WorkspaceUserUsedInvitationEmailArgs:
    def __init__(__self__, *,
                 from_address: pulumi.Input[str],
                 from_name: pulumi.Input[str],
                 html_template: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 success_redirect_url: Optional[pulumi.Input[str]] = None):
        WorkspaceUserUsedInvitationEmailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_address=from_address,
            from_name=from_name,
            html_template=html_template,
            subject=subject,
            redirect_url=redirect_url,
            success_redirect_url=success_redirect_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_address: pulumi.Input[str],
             from_name: pulumi.Input[str],
             html_template: pulumi.Input[str],
             subject: pulumi.Input[str],
             redirect_url: Optional[pulumi.Input[str]] = None,
             success_redirect_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'fromAddress' in kwargs:
            from_address = kwargs['fromAddress']
        if 'fromName' in kwargs:
            from_name = kwargs['fromName']
        if 'htmlTemplate' in kwargs:
            html_template = kwargs['htmlTemplate']
        if 'redirectUrl' in kwargs:
            redirect_url = kwargs['redirectUrl']
        if 'successRedirectUrl' in kwargs:
            success_redirect_url = kwargs['successRedirectUrl']

        _setter("from_address", from_address)
        _setter("from_name", from_name)
        _setter("html_template", html_template)
        _setter("subject", subject)
        if redirect_url is not None:
            _setter("redirect_url", redirect_url)
        if success_redirect_url is not None:
            _setter("success_redirect_url", success_redirect_url)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "from_name")

    @from_name.setter
    def from_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_name", value)

    @property
    @pulumi.getter(name="htmlTemplate")
    def html_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "html_template")

    @html_template.setter
    def html_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_template", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="successRedirectUrl")
    def success_redirect_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_redirect_url")

    @success_redirect_url.setter
    def success_redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_redirect_url", value)


