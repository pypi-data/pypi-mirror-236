# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BlockDeviceArgs', 'BlockDevice']

@pulumi.input_type
class BlockDeviceArgs:
    def __init__(__self__, *,
                 capacity_in_gb: pulumi.Input[int],
                 project_id: pulumi.Input[str],
                 constraints: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceConstraintArgs']]]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deployment_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_content_base64: Optional[pulumi.Input[str]] = None,
                 encrypted: Optional[pulumi.Input[bool]] = None,
                 expand_snapshots: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 persistent: Optional[pulumi.Input[bool]] = None,
                 purge: Optional[pulumi.Input[bool]] = None,
                 source_reference: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceTagArgs']]]] = None):
        """
        The set of arguments for constructing a BlockDevice resource.
        :param pulumi.Input[int] capacity_in_gb: Capacity of block device in GB.
        :param pulumi.Input[str] project_id: ID of project that current user belongs to.
        :param pulumi.Input[Sequence[pulumi.Input['BlockDeviceConstraintArgs']]] constraints: Storage, network, and extensibility constraints to be applied when provisioning through the project.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: Additional custom properties that may be used to extend the machine.
        :param pulumi.Input[str] deployment_id: ID of deployment associated with resource.
        :param pulumi.Input[str] description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param pulumi.Input[str] disk_content_base64: Content of a disk, base64 encoded.
        :param pulumi.Input[bool] encrypted: Indicates whether block device should be encrypted or not.
        :param pulumi.Input[bool] expand_snapshots: Indicates whether snapshots of block devices should be included in the state. Applies only to first class block devices.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[bool] persistent: Indicates whether block device survives a delete action.
        :param pulumi.Input[bool] purge: Indicates if the disk must be completely destroyed or should be kept in the system. Valid only for block devices with ‘persistent’ set to true. Used to destroy the resource.
        :param pulumi.Input[str] source_reference: URI to use for block device. Example: ami-0d4cfd66
        :param pulumi.Input[Sequence[pulumi.Input['BlockDeviceTagArgs']]] tags: Set of tag keys and values to apply to the resource instance.  
               Example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        """
        pulumi.set(__self__, "capacity_in_gb", capacity_in_gb)
        pulumi.set(__self__, "project_id", project_id)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_content_base64 is not None:
            pulumi.set(__self__, "disk_content_base64", disk_content_base64)
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if expand_snapshots is not None:
            pulumi.set(__self__, "expand_snapshots", expand_snapshots)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if persistent is not None:
            pulumi.set(__self__, "persistent", persistent)
        if purge is not None:
            pulumi.set(__self__, "purge", purge)
        if source_reference is not None:
            pulumi.set(__self__, "source_reference", source_reference)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="capacityInGb")
    def capacity_in_gb(self) -> pulumi.Input[int]:
        """
        Capacity of block device in GB.
        """
        return pulumi.get(self, "capacity_in_gb")

    @capacity_in_gb.setter
    def capacity_in_gb(self, value: pulumi.Input[int]):
        pulumi.set(self, "capacity_in_gb", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        ID of project that current user belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceConstraintArgs']]]]:
        """
        Storage, network, and extensibility constraints to be applied when provisioning through the project.
        """
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceConstraintArgs']]]]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional custom properties that may be used to extend the machine.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of deployment associated with resource.
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Describes machine within the scope of your organization and is not propagated to the cloud.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskContentBase64")
    def disk_content_base64(self) -> Optional[pulumi.Input[str]]:
        """
        Content of a disk, base64 encoded.
        """
        return pulumi.get(self, "disk_content_base64")

    @disk_content_base64.setter
    def disk_content_base64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_content_base64", value)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether block device should be encrypted or not.
        """
        return pulumi.get(self, "encrypted")

    @encrypted.setter
    def encrypted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypted", value)

    @property
    @pulumi.getter(name="expandSnapshots")
    def expand_snapshots(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether snapshots of block devices should be included in the state. Applies only to first class block devices.
        """
        return pulumi.get(self, "expand_snapshots")

    @expand_snapshots.setter
    def expand_snapshots(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expand_snapshots", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def persistent(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether block device survives a delete action.
        """
        return pulumi.get(self, "persistent")

    @persistent.setter
    def persistent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persistent", value)

    @property
    @pulumi.getter
    def purge(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the disk must be completely destroyed or should be kept in the system. Valid only for block devices with ‘persistent’ set to true. Used to destroy the resource.
        """
        return pulumi.get(self, "purge")

    @purge.setter
    def purge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "purge", value)

    @property
    @pulumi.getter(name="sourceReference")
    def source_reference(self) -> Optional[pulumi.Input[str]]:
        """
        URI to use for block device. Example: ami-0d4cfd66
        """
        return pulumi.get(self, "source_reference")

    @source_reference.setter
    def source_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_reference", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceTagArgs']]]]:
        """
        Set of tag keys and values to apply to the resource instance.  
        Example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _BlockDeviceState:
    def __init__(__self__, *,
                 capacity_in_gb: Optional[pulumi.Input[int]] = None,
                 constraints: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceConstraintArgs']]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deployment_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_content_base64: Optional[pulumi.Input[str]] = None,
                 encrypted: Optional[pulumi.Input[bool]] = None,
                 expand_snapshots: Optional[pulumi.Input[bool]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 external_region_id: Optional[pulumi.Input[str]] = None,
                 external_zone_id: Optional[pulumi.Input[str]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceLinkArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 persistent: Optional[pulumi.Input[bool]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 purge: Optional[pulumi.Input[bool]] = None,
                 snapshots: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceSnapshotArgs']]]] = None,
                 source_reference: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceTagArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BlockDevice resources.
        :param pulumi.Input[int] capacity_in_gb: Capacity of block device in GB.
        :param pulumi.Input[Sequence[pulumi.Input['BlockDeviceConstraintArgs']]] constraints: Storage, network, and extensibility constraints to be applied when provisioning through the project.
        :param pulumi.Input[str] created_at: Date when entity was created. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: Additional custom properties that may be used to extend the machine.
        :param pulumi.Input[str] deployment_id: ID of deployment associated with resource.
        :param pulumi.Input[str] description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param pulumi.Input[str] disk_content_base64: Content of a disk, base64 encoded.
        :param pulumi.Input[bool] encrypted: Indicates whether block device should be encrypted or not.
        :param pulumi.Input[bool] expand_snapshots: Indicates whether snapshots of block devices should be included in the state. Applies only to first class block devices.
        :param pulumi.Input[str] external_id: External entity ID on provider side.
        :param pulumi.Input[str] external_region_id: External regionId of resource.
        :param pulumi.Input[str] external_zone_id: External zoneId of resource.
        :param pulumi.Input[Sequence[pulumi.Input['BlockDeviceLinkArgs']]] links: HATEOAS of the entity
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] org_id: ID of organization that block device snapshot belongs to.
        :param pulumi.Input[str] owner: Email of block device snapshot owner.
        :param pulumi.Input[bool] persistent: Indicates whether block device survives a delete action.
        :param pulumi.Input[str] project_id: ID of project that current user belongs to.
        :param pulumi.Input[bool] purge: Indicates if the disk must be completely destroyed or should be kept in the system. Valid only for block devices with ‘persistent’ set to true. Used to destroy the resource.
        :param pulumi.Input[Sequence[pulumi.Input['BlockDeviceSnapshotArgs']]] snapshots: Represents a machine snapshot.
        :param pulumi.Input[str] source_reference: URI to use for block device. Example: ami-0d4cfd66
        :param pulumi.Input[str] status: Status of block device.
        :param pulumi.Input[Sequence[pulumi.Input['BlockDeviceTagArgs']]] tags: Set of tag keys and values to apply to the resource instance.  
               Example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        :param pulumi.Input[str] updated_at: Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        if capacity_in_gb is not None:
            pulumi.set(__self__, "capacity_in_gb", capacity_in_gb)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_content_base64 is not None:
            pulumi.set(__self__, "disk_content_base64", disk_content_base64)
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if expand_snapshots is not None:
            pulumi.set(__self__, "expand_snapshots", expand_snapshots)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if external_region_id is not None:
            pulumi.set(__self__, "external_region_id", external_region_id)
        if external_zone_id is not None:
            pulumi.set(__self__, "external_zone_id", external_zone_id)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if persistent is not None:
            pulumi.set(__self__, "persistent", persistent)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if purge is not None:
            pulumi.set(__self__, "purge", purge)
        if snapshots is not None:
            pulumi.set(__self__, "snapshots", snapshots)
        if source_reference is not None:
            pulumi.set(__self__, "source_reference", source_reference)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="capacityInGb")
    def capacity_in_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity of block device in GB.
        """
        return pulumi.get(self, "capacity_in_gb")

    @capacity_in_gb.setter
    def capacity_in_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity_in_gb", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceConstraintArgs']]]]:
        """
        Storage, network, and extensibility constraints to be applied when provisioning through the project.
        """
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceConstraintArgs']]]]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional custom properties that may be used to extend the machine.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of deployment associated with resource.
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Describes machine within the scope of your organization and is not propagated to the cloud.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskContentBase64")
    def disk_content_base64(self) -> Optional[pulumi.Input[str]]:
        """
        Content of a disk, base64 encoded.
        """
        return pulumi.get(self, "disk_content_base64")

    @disk_content_base64.setter
    def disk_content_base64(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_content_base64", value)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether block device should be encrypted or not.
        """
        return pulumi.get(self, "encrypted")

    @encrypted.setter
    def encrypted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypted", value)

    @property
    @pulumi.getter(name="expandSnapshots")
    def expand_snapshots(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether snapshots of block devices should be included in the state. Applies only to first class block devices.
        """
        return pulumi.get(self, "expand_snapshots")

    @expand_snapshots.setter
    def expand_snapshots(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expand_snapshots", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        External entity ID on provider side.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> Optional[pulumi.Input[str]]:
        """
        External regionId of resource.
        """
        return pulumi.get(self, "external_region_id")

    @external_region_id.setter
    def external_region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_region_id", value)

    @property
    @pulumi.getter(name="externalZoneId")
    def external_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        External zoneId of resource.
        """
        return pulumi.get(self, "external_zone_id")

    @external_zone_id.setter
    def external_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_zone_id", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceLinkArgs']]]]:
        """
        HATEOAS of the entity
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of organization that block device snapshot belongs to.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Email of block device snapshot owner.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def persistent(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether block device survives a delete action.
        """
        return pulumi.get(self, "persistent")

    @persistent.setter
    def persistent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persistent", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of project that current user belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def purge(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the disk must be completely destroyed or should be kept in the system. Valid only for block devices with ‘persistent’ set to true. Used to destroy the resource.
        """
        return pulumi.get(self, "purge")

    @purge.setter
    def purge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "purge", value)

    @property
    @pulumi.getter
    def snapshots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceSnapshotArgs']]]]:
        """
        Represents a machine snapshot.
        """
        return pulumi.get(self, "snapshots")

    @snapshots.setter
    def snapshots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceSnapshotArgs']]]]):
        pulumi.set(self, "snapshots", value)

    @property
    @pulumi.getter(name="sourceReference")
    def source_reference(self) -> Optional[pulumi.Input[str]]:
        """
        URI to use for block device. Example: ami-0d4cfd66
        """
        return pulumi.get(self, "source_reference")

    @source_reference.setter
    def source_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_reference", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of block device.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceTagArgs']]]]:
        """
        Set of tag keys and values to apply to the resource instance.  
        Example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BlockDeviceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class BlockDevice(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity_in_gb: Optional[pulumi.Input[int]] = None,
                 constraints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceConstraintArgs']]]]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deployment_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_content_base64: Optional[pulumi.Input[str]] = None,
                 encrypted: Optional[pulumi.Input[bool]] = None,
                 expand_snapshots: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 persistent: Optional[pulumi.Input[bool]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 purge: Optional[pulumi.Input[bool]] = None,
                 source_reference: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceTagArgs']]]]] = None,
                 __props__=None):
        """
        Creates a VMware vRealize Automation block device resource.

        ## Example Usage
        ### S

        The following example shows how to create a block device resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        disk1 = vra.blockdevice.BlockDevice("disk1",
            capacity_in_gb=10,
            project_id=var["project_id"],
            persistent=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] capacity_in_gb: Capacity of block device in GB.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceConstraintArgs']]]] constraints: Storage, network, and extensibility constraints to be applied when provisioning through the project.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: Additional custom properties that may be used to extend the machine.
        :param pulumi.Input[str] deployment_id: ID of deployment associated with resource.
        :param pulumi.Input[str] description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param pulumi.Input[str] disk_content_base64: Content of a disk, base64 encoded.
        :param pulumi.Input[bool] encrypted: Indicates whether block device should be encrypted or not.
        :param pulumi.Input[bool] expand_snapshots: Indicates whether snapshots of block devices should be included in the state. Applies only to first class block devices.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[bool] persistent: Indicates whether block device survives a delete action.
        :param pulumi.Input[str] project_id: ID of project that current user belongs to.
        :param pulumi.Input[bool] purge: Indicates if the disk must be completely destroyed or should be kept in the system. Valid only for block devices with ‘persistent’ set to true. Used to destroy the resource.
        :param pulumi.Input[str] source_reference: URI to use for block device. Example: ami-0d4cfd66
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceTagArgs']]]] tags: Set of tag keys and values to apply to the resource instance.  
               Example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BlockDeviceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a VMware vRealize Automation block device resource.

        ## Example Usage
        ### S

        The following example shows how to create a block device resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        disk1 = vra.blockdevice.BlockDevice("disk1",
            capacity_in_gb=10,
            project_id=var["project_id"],
            persistent=True)
        ```

        :param str resource_name: The name of the resource.
        :param BlockDeviceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BlockDeviceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity_in_gb: Optional[pulumi.Input[int]] = None,
                 constraints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceConstraintArgs']]]]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deployment_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_content_base64: Optional[pulumi.Input[str]] = None,
                 encrypted: Optional[pulumi.Input[bool]] = None,
                 expand_snapshots: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 persistent: Optional[pulumi.Input[bool]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 purge: Optional[pulumi.Input[bool]] = None,
                 source_reference: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BlockDeviceArgs.__new__(BlockDeviceArgs)

            if capacity_in_gb is None and not opts.urn:
                raise TypeError("Missing required property 'capacity_in_gb'")
            __props__.__dict__["capacity_in_gb"] = capacity_in_gb
            __props__.__dict__["constraints"] = constraints
            __props__.__dict__["custom_properties"] = custom_properties
            __props__.__dict__["deployment_id"] = deployment_id
            __props__.__dict__["description"] = description
            __props__.__dict__["disk_content_base64"] = disk_content_base64
            __props__.__dict__["encrypted"] = encrypted
            __props__.__dict__["expand_snapshots"] = expand_snapshots
            __props__.__dict__["name"] = name
            __props__.__dict__["persistent"] = persistent
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["purge"] = purge
            __props__.__dict__["source_reference"] = source_reference
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["external_id"] = None
            __props__.__dict__["external_region_id"] = None
            __props__.__dict__["external_zone_id"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["snapshots"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
        super(BlockDevice, __self__).__init__(
            'vra:blockdevice/blockDevice:BlockDevice',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capacity_in_gb: Optional[pulumi.Input[int]] = None,
            constraints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceConstraintArgs']]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            deployment_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disk_content_base64: Optional[pulumi.Input[str]] = None,
            encrypted: Optional[pulumi.Input[bool]] = None,
            expand_snapshots: Optional[pulumi.Input[bool]] = None,
            external_id: Optional[pulumi.Input[str]] = None,
            external_region_id: Optional[pulumi.Input[str]] = None,
            external_zone_id: Optional[pulumi.Input[str]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceLinkArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            persistent: Optional[pulumi.Input[bool]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            purge: Optional[pulumi.Input[bool]] = None,
            snapshots: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceSnapshotArgs']]]]] = None,
            source_reference: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceTagArgs']]]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'BlockDevice':
        """
        Get an existing BlockDevice resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] capacity_in_gb: Capacity of block device in GB.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceConstraintArgs']]]] constraints: Storage, network, and extensibility constraints to be applied when provisioning through the project.
        :param pulumi.Input[str] created_at: Date when entity was created. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: Additional custom properties that may be used to extend the machine.
        :param pulumi.Input[str] deployment_id: ID of deployment associated with resource.
        :param pulumi.Input[str] description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param pulumi.Input[str] disk_content_base64: Content of a disk, base64 encoded.
        :param pulumi.Input[bool] encrypted: Indicates whether block device should be encrypted or not.
        :param pulumi.Input[bool] expand_snapshots: Indicates whether snapshots of block devices should be included in the state. Applies only to first class block devices.
        :param pulumi.Input[str] external_id: External entity ID on provider side.
        :param pulumi.Input[str] external_region_id: External regionId of resource.
        :param pulumi.Input[str] external_zone_id: External zoneId of resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceLinkArgs']]]] links: HATEOAS of the entity
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] org_id: ID of organization that block device snapshot belongs to.
        :param pulumi.Input[str] owner: Email of block device snapshot owner.
        :param pulumi.Input[bool] persistent: Indicates whether block device survives a delete action.
        :param pulumi.Input[str] project_id: ID of project that current user belongs to.
        :param pulumi.Input[bool] purge: Indicates if the disk must be completely destroyed or should be kept in the system. Valid only for block devices with ‘persistent’ set to true. Used to destroy the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceSnapshotArgs']]]] snapshots: Represents a machine snapshot.
        :param pulumi.Input[str] source_reference: URI to use for block device. Example: ami-0d4cfd66
        :param pulumi.Input[str] status: Status of block device.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlockDeviceTagArgs']]]] tags: Set of tag keys and values to apply to the resource instance.  
               Example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        :param pulumi.Input[str] updated_at: Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BlockDeviceState.__new__(_BlockDeviceState)

        __props__.__dict__["capacity_in_gb"] = capacity_in_gb
        __props__.__dict__["constraints"] = constraints
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["custom_properties"] = custom_properties
        __props__.__dict__["deployment_id"] = deployment_id
        __props__.__dict__["description"] = description
        __props__.__dict__["disk_content_base64"] = disk_content_base64
        __props__.__dict__["encrypted"] = encrypted
        __props__.__dict__["expand_snapshots"] = expand_snapshots
        __props__.__dict__["external_id"] = external_id
        __props__.__dict__["external_region_id"] = external_region_id
        __props__.__dict__["external_zone_id"] = external_zone_id
        __props__.__dict__["links"] = links
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["owner"] = owner
        __props__.__dict__["persistent"] = persistent
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["purge"] = purge
        __props__.__dict__["snapshots"] = snapshots
        __props__.__dict__["source_reference"] = source_reference
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        return BlockDevice(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="capacityInGb")
    def capacity_in_gb(self) -> pulumi.Output[int]:
        """
        Capacity of block device in GB.
        """
        return pulumi.get(self, "capacity_in_gb")

    @property
    @pulumi.getter
    def constraints(self) -> pulumi.Output[Optional[Sequence['outputs.BlockDeviceConstraint']]]:
        """
        Storage, network, and extensibility constraints to be applied when provisioning through the project.
        """
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Date when entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Additional custom properties that may be used to extend the machine.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Output[str]:
        """
        ID of deployment associated with resource.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Describes machine within the scope of your organization and is not propagated to the cloud.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskContentBase64")
    def disk_content_base64(self) -> pulumi.Output[Optional[str]]:
        """
        Content of a disk, base64 encoded.
        """
        return pulumi.get(self, "disk_content_base64")

    @property
    @pulumi.getter
    def encrypted(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether block device should be encrypted or not.
        """
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter(name="expandSnapshots")
    def expand_snapshots(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether snapshots of block devices should be included in the state. Applies only to first class block devices.
        """
        return pulumi.get(self, "expand_snapshots")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Output[str]:
        """
        External entity ID on provider side.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> pulumi.Output[str]:
        """
        External regionId of resource.
        """
        return pulumi.get(self, "external_region_id")

    @property
    @pulumi.getter(name="externalZoneId")
    def external_zone_id(self) -> pulumi.Output[str]:
        """
        External zoneId of resource.
        """
        return pulumi.get(self, "external_zone_id")

    @property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.BlockDeviceLink']]:
        """
        HATEOAS of the entity
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        ID of organization that block device snapshot belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        Email of block device snapshot owner.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def persistent(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether block device survives a delete action.
        """
        return pulumi.get(self, "persistent")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        ID of project that current user belongs to.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def purge(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if the disk must be completely destroyed or should be kept in the system. Valid only for block devices with ‘persistent’ set to true. Used to destroy the resource.
        """
        return pulumi.get(self, "purge")

    @property
    @pulumi.getter
    def snapshots(self) -> pulumi.Output[Sequence['outputs.BlockDeviceSnapshot']]:
        """
        Represents a machine snapshot.
        """
        return pulumi.get(self, "snapshots")

    @property
    @pulumi.getter(name="sourceReference")
    def source_reference(self) -> pulumi.Output[Optional[str]]:
        """
        URI to use for block device. Example: ami-0d4cfd66
        """
        return pulumi.get(self, "source_reference")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of block device.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.BlockDeviceTag']]:
        """
        Set of tag keys and values to apply to the resource instance.  
        Example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

