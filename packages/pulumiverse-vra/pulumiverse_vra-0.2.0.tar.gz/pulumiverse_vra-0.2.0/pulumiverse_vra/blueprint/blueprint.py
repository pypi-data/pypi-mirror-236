# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BlueprintArgs', 'Blueprint']

@pulumi.input_type
class BlueprintArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 request_scope_org: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Blueprint resource.
        :param pulumi.Input[str] project_id: ID of project that entity belongs to.
        :param pulumi.Input[str] content: Blueprint YAML content.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[bool] request_scope_org: Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
        """
        pulumi.set(__self__, "project_id", project_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if request_scope_org is not None:
            pulumi.set(__self__, "request_scope_org", request_scope_org)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        ID of project that entity belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Blueprint YAML content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="requestScopeOrg")
    def request_scope_org(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
        """
        return pulumi.get(self, "request_scope_org")

    @request_scope_org.setter
    def request_scope_org(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "request_scope_org", value)


@pulumi.input_type
class _BlueprintState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 content_source_id: Optional[pulumi.Input[str]] = None,
                 content_source_path: Optional[pulumi.Input[str]] = None,
                 content_source_sync_at: Optional[pulumi.Input[str]] = None,
                 content_source_sync_messages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 content_source_sync_status: Optional[pulumi.Input[str]] = None,
                 content_source_type: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 request_scope_org: Optional[pulumi.Input[bool]] = None,
                 self_link: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 total_released_versions: Optional[pulumi.Input[int]] = None,
                 total_versions: Optional[pulumi.Input[int]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 valid: Optional[pulumi.Input[bool]] = None,
                 validation_messages: Optional[pulumi.Input[Sequence[pulumi.Input['BlueprintValidationMessageArgs']]]] = None):
        """
        Input properties used for looking up and filtering Blueprint resources.
        :param pulumi.Input[str] content: Blueprint YAML content.
        :param pulumi.Input[str] content_source_id: ID of content source.
        :param pulumi.Input[str] content_source_path: Content source path.
        :param pulumi.Input[str] content_source_sync_at: Date when content source was last synced. The date is in ISO 8601 and UTC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] content_source_sync_messages: Content source last sync messages.
        :param pulumi.Input[str] content_source_sync_status: Content source last sync status. Supported values: `SUCCESSFUL`, `FAILED`.
        :param pulumi.Input[str] content_source_type: Content source type.
        :param pulumi.Input[str] created_at: Date when entity was created. The date is in ISO 8601 and UTC.
        :param pulumi.Input[str] created_by: The user who created entity.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] org_id: ID of organization that entity belongs to.
        :param pulumi.Input[str] project_id: ID of project that entity belongs to.
        :param pulumi.Input[str] project_name: Name of project that entity belongs to.
        :param pulumi.Input[bool] request_scope_org: Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
        :param pulumi.Input[str] self_link: HATEOAS of entity.
        :param pulumi.Input[str] status: Status of cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
        :param pulumi.Input[int] total_released_versions: Total number of released versions.
        :param pulumi.Input[int] total_versions: Total number of versions.
        :param pulumi.Input[str] updated_at: Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] updated_by: The user who last updated the entity.
        :param pulumi.Input[bool] valid: Flag to indicate if the current content of the cloud template/blueprint is valid.
        :param pulumi.Input[Sequence[pulumi.Input['BlueprintValidationMessageArgs']]] validation_messages: List of validations messages.
               * message - Validation message.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_source_id is not None:
            pulumi.set(__self__, "content_source_id", content_source_id)
        if content_source_path is not None:
            pulumi.set(__self__, "content_source_path", content_source_path)
        if content_source_sync_at is not None:
            pulumi.set(__self__, "content_source_sync_at", content_source_sync_at)
        if content_source_sync_messages is not None:
            pulumi.set(__self__, "content_source_sync_messages", content_source_sync_messages)
        if content_source_sync_status is not None:
            pulumi.set(__self__, "content_source_sync_status", content_source_sync_status)
        if content_source_type is not None:
            pulumi.set(__self__, "content_source_type", content_source_type)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if request_scope_org is not None:
            pulumi.set(__self__, "request_scope_org", request_scope_org)
        if self_link is not None:
            pulumi.set(__self__, "self_link", self_link)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if total_released_versions is not None:
            pulumi.set(__self__, "total_released_versions", total_released_versions)
        if total_versions is not None:
            pulumi.set(__self__, "total_versions", total_versions)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if valid is not None:
            pulumi.set(__self__, "valid", valid)
        if validation_messages is not None:
            pulumi.set(__self__, "validation_messages", validation_messages)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Blueprint YAML content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentSourceId")
    def content_source_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of content source.
        """
        return pulumi.get(self, "content_source_id")

    @content_source_id.setter
    def content_source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_source_id", value)

    @property
    @pulumi.getter(name="contentSourcePath")
    def content_source_path(self) -> Optional[pulumi.Input[str]]:
        """
        Content source path.
        """
        return pulumi.get(self, "content_source_path")

    @content_source_path.setter
    def content_source_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_source_path", value)

    @property
    @pulumi.getter(name="contentSourceSyncAt")
    def content_source_sync_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when content source was last synced. The date is in ISO 8601 and UTC.
        """
        return pulumi.get(self, "content_source_sync_at")

    @content_source_sync_at.setter
    def content_source_sync_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_source_sync_at", value)

    @property
    @pulumi.getter(name="contentSourceSyncMessages")
    def content_source_sync_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Content source last sync messages.
        """
        return pulumi.get(self, "content_source_sync_messages")

    @content_source_sync_messages.setter
    def content_source_sync_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "content_source_sync_messages", value)

    @property
    @pulumi.getter(name="contentSourceSyncStatus")
    def content_source_sync_status(self) -> Optional[pulumi.Input[str]]:
        """
        Content source last sync status. Supported values: `SUCCESSFUL`, `FAILED`.
        """
        return pulumi.get(self, "content_source_sync_status")

    @content_source_sync_status.setter
    def content_source_sync_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_source_sync_status", value)

    @property
    @pulumi.getter(name="contentSourceType")
    def content_source_type(self) -> Optional[pulumi.Input[str]]:
        """
        Content source type.
        """
        return pulumi.get(self, "content_source_type")

    @content_source_type.setter
    def content_source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_source_type", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when entity was created. The date is in ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user who created entity.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of organization that entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of project that entity belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of project that entity belongs to.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="requestScopeOrg")
    def request_scope_org(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
        """
        return pulumi.get(self, "request_scope_org")

    @request_scope_org.setter
    def request_scope_org(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "request_scope_org", value)

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> Optional[pulumi.Input[str]]:
        """
        HATEOAS of entity.
        """
        return pulumi.get(self, "self_link")

    @self_link.setter
    def self_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "self_link", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="totalReleasedVersions")
    def total_released_versions(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of released versions.
        """
        return pulumi.get(self, "total_released_versions")

    @total_released_versions.setter
    def total_released_versions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_released_versions", value)

    @property
    @pulumi.getter(name="totalVersions")
    def total_versions(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of versions.
        """
        return pulumi.get(self, "total_versions")

    @total_versions.setter
    def total_versions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_versions", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user who last updated the entity.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter
    def valid(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to indicate if the current content of the cloud template/blueprint is valid.
        """
        return pulumi.get(self, "valid")

    @valid.setter
    def valid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "valid", value)

    @property
    @pulumi.getter(name="validationMessages")
    def validation_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BlueprintValidationMessageArgs']]]]:
        """
        List of validations messages.
        * message - Validation message.
        """
        return pulumi.get(self, "validation_messages")

    @validation_messages.setter
    def validation_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BlueprintValidationMessageArgs']]]]):
        pulumi.set(self, "validation_messages", value)


class Blueprint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 request_scope_org: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Creates a VMware vRealize Automation (vRA) cloud template resource, formerly known as a blueprint.

        ## Example Usage

        The following example shows how to create a blueprint resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.blueprint.Blueprint("this",
            description="Created by vRA terraform provider",
            project_id=vra_project["this"]["id"],
            content=f\"\"\"formatVersion: 1
        inputs:
          image:
            type: string
            description: "Image"
          flavor:
            type: string
            description: "Flavor"
        resources:
          Machine:
            type: Cloud.Machine
            properties:
              image: {input["image"]}
              flavor: {input["flavor"]}
        \"\"\")
        ```

        ## Import

        To import the cloud template, use the ID as in the following example

        ```sh
         $ pulumi import vra:blueprint/blueprint:Blueprint this 05956583-6488-4e7d-84c9-92a7b7219a15`
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: Blueprint YAML content.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] project_id: ID of project that entity belongs to.
        :param pulumi.Input[bool] request_scope_org: Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BlueprintArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a VMware vRealize Automation (vRA) cloud template resource, formerly known as a blueprint.

        ## Example Usage

        The following example shows how to create a blueprint resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.blueprint.Blueprint("this",
            description="Created by vRA terraform provider",
            project_id=vra_project["this"]["id"],
            content=f\"\"\"formatVersion: 1
        inputs:
          image:
            type: string
            description: "Image"
          flavor:
            type: string
            description: "Flavor"
        resources:
          Machine:
            type: Cloud.Machine
            properties:
              image: {input["image"]}
              flavor: {input["flavor"]}
        \"\"\")
        ```

        ## Import

        To import the cloud template, use the ID as in the following example

        ```sh
         $ pulumi import vra:blueprint/blueprint:Blueprint this 05956583-6488-4e7d-84c9-92a7b7219a15`
        ```

        :param str resource_name: The name of the resource.
        :param BlueprintArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BlueprintArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 request_scope_org: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BlueprintArgs.__new__(BlueprintArgs)

            __props__.__dict__["content"] = content
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["request_scope_org"] = request_scope_org
            __props__.__dict__["content_source_id"] = None
            __props__.__dict__["content_source_path"] = None
            __props__.__dict__["content_source_sync_at"] = None
            __props__.__dict__["content_source_sync_messages"] = None
            __props__.__dict__["content_source_sync_status"] = None
            __props__.__dict__["content_source_type"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["project_name"] = None
            __props__.__dict__["self_link"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["total_released_versions"] = None
            __props__.__dict__["total_versions"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
            __props__.__dict__["valid"] = None
            __props__.__dict__["validation_messages"] = None
        super(Blueprint, __self__).__init__(
            'vra:blueprint/blueprint:Blueprint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[str]] = None,
            content_source_id: Optional[pulumi.Input[str]] = None,
            content_source_path: Optional[pulumi.Input[str]] = None,
            content_source_sync_at: Optional[pulumi.Input[str]] = None,
            content_source_sync_messages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            content_source_sync_status: Optional[pulumi.Input[str]] = None,
            content_source_type: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            request_scope_org: Optional[pulumi.Input[bool]] = None,
            self_link: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            total_released_versions: Optional[pulumi.Input[int]] = None,
            total_versions: Optional[pulumi.Input[int]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            updated_by: Optional[pulumi.Input[str]] = None,
            valid: Optional[pulumi.Input[bool]] = None,
            validation_messages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlueprintValidationMessageArgs']]]]] = None) -> 'Blueprint':
        """
        Get an existing Blueprint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: Blueprint YAML content.
        :param pulumi.Input[str] content_source_id: ID of content source.
        :param pulumi.Input[str] content_source_path: Content source path.
        :param pulumi.Input[str] content_source_sync_at: Date when content source was last synced. The date is in ISO 8601 and UTC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] content_source_sync_messages: Content source last sync messages.
        :param pulumi.Input[str] content_source_sync_status: Content source last sync status. Supported values: `SUCCESSFUL`, `FAILED`.
        :param pulumi.Input[str] content_source_type: Content source type.
        :param pulumi.Input[str] created_at: Date when entity was created. The date is in ISO 8601 and UTC.
        :param pulumi.Input[str] created_by: The user who created entity.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] org_id: ID of organization that entity belongs to.
        :param pulumi.Input[str] project_id: ID of project that entity belongs to.
        :param pulumi.Input[str] project_name: Name of project that entity belongs to.
        :param pulumi.Input[bool] request_scope_org: Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
        :param pulumi.Input[str] self_link: HATEOAS of entity.
        :param pulumi.Input[str] status: Status of cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
        :param pulumi.Input[int] total_released_versions: Total number of released versions.
        :param pulumi.Input[int] total_versions: Total number of versions.
        :param pulumi.Input[str] updated_at: Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] updated_by: The user who last updated the entity.
        :param pulumi.Input[bool] valid: Flag to indicate if the current content of the cloud template/blueprint is valid.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BlueprintValidationMessageArgs']]]] validation_messages: List of validations messages.
               * message - Validation message.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BlueprintState.__new__(_BlueprintState)

        __props__.__dict__["content"] = content
        __props__.__dict__["content_source_id"] = content_source_id
        __props__.__dict__["content_source_path"] = content_source_path
        __props__.__dict__["content_source_sync_at"] = content_source_sync_at
        __props__.__dict__["content_source_sync_messages"] = content_source_sync_messages
        __props__.__dict__["content_source_sync_status"] = content_source_sync_status
        __props__.__dict__["content_source_type"] = content_source_type
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["request_scope_org"] = request_scope_org
        __props__.__dict__["self_link"] = self_link
        __props__.__dict__["status"] = status
        __props__.__dict__["total_released_versions"] = total_released_versions
        __props__.__dict__["total_versions"] = total_versions
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["valid"] = valid
        __props__.__dict__["validation_messages"] = validation_messages
        return Blueprint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[Optional[str]]:
        """
        Blueprint YAML content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentSourceId")
    def content_source_id(self) -> pulumi.Output[str]:
        """
        ID of content source.
        """
        return pulumi.get(self, "content_source_id")

    @property
    @pulumi.getter(name="contentSourcePath")
    def content_source_path(self) -> pulumi.Output[str]:
        """
        Content source path.
        """
        return pulumi.get(self, "content_source_path")

    @property
    @pulumi.getter(name="contentSourceSyncAt")
    def content_source_sync_at(self) -> pulumi.Output[str]:
        """
        Date when content source was last synced. The date is in ISO 8601 and UTC.
        """
        return pulumi.get(self, "content_source_sync_at")

    @property
    @pulumi.getter(name="contentSourceSyncMessages")
    def content_source_sync_messages(self) -> pulumi.Output[Sequence[str]]:
        """
        Content source last sync messages.
        """
        return pulumi.get(self, "content_source_sync_messages")

    @property
    @pulumi.getter(name="contentSourceSyncStatus")
    def content_source_sync_status(self) -> pulumi.Output[str]:
        """
        Content source last sync status. Supported values: `SUCCESSFUL`, `FAILED`.
        """
        return pulumi.get(self, "content_source_sync_status")

    @property
    @pulumi.getter(name="contentSourceType")
    def content_source_type(self) -> pulumi.Output[str]:
        """
        Content source type.
        """
        return pulumi.get(self, "content_source_type")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Date when entity was created. The date is in ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        """
        The user who created entity.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        ID of organization that entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        ID of project that entity belongs to.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        Name of project that entity belongs to.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="requestScopeOrg")
    def request_scope_org(self) -> pulumi.Output[bool]:
        """
        Flag to indicate whether blueprint can be requested from any project in the organization that entity belongs to.
        """
        return pulumi.get(self, "request_scope_org")

    @property
    @pulumi.getter(name="selfLink")
    def self_link(self) -> pulumi.Output[str]:
        """
        HATEOAS of entity.
        """
        return pulumi.get(self, "self_link")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of cloud template. Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalReleasedVersions")
    def total_released_versions(self) -> pulumi.Output[int]:
        """
        Total number of released versions.
        """
        return pulumi.get(self, "total_released_versions")

    @property
    @pulumi.getter(name="totalVersions")
    def total_versions(self) -> pulumi.Output[int]:
        """
        Total number of versions.
        """
        return pulumi.get(self, "total_versions")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[str]:
        """
        The user who last updated the entity.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter
    def valid(self) -> pulumi.Output[bool]:
        """
        Flag to indicate if the current content of the cloud template/blueprint is valid.
        """
        return pulumi.get(self, "valid")

    @property
    @pulumi.getter(name="validationMessages")
    def validation_messages(self) -> pulumi.Output[Sequence['outputs.BlueprintValidationMessage']]:
        """
        List of validations messages.
        * message - Validation message.
        """
        return pulumi.get(self, "validation_messages")

