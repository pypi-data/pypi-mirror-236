# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BlueprintVersionArgs', 'BlueprintVersion']

@pulumi.input_type
class BlueprintVersionArgs:
    def __init__(__self__, *,
                 blueprint_id: pulumi.Input[str],
                 version: pulumi.Input[str],
                 change_log: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a BlueprintVersion resource.
        :param pulumi.Input[str] blueprint_id: ID of the cloud template  (blueprint).
        :param pulumi.Input[str] version: Cloud template  (blueprint) version.
        :param pulumi.Input[str] change_log: Cloud template  (blueprint) version log.
        :param pulumi.Input[str] description: Human-friendly description for the cloud template  (blueprint) version.
        :param pulumi.Input[bool] release: Flag to indicate whether to release the version.
        """
        pulumi.set(__self__, "blueprint_id", blueprint_id)
        pulumi.set(__self__, "version", version)
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if release is not None:
            pulumi.set(__self__, "release", release)

    @property
    @pulumi.getter(name="blueprintId")
    def blueprint_id(self) -> pulumi.Input[str]:
        """
        ID of the cloud template  (blueprint).
        """
        return pulumi.get(self, "blueprint_id")

    @blueprint_id.setter
    def blueprint_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint_id", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Cloud template  (blueprint) version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud template  (blueprint) version log.
        """
        return pulumi.get(self, "change_log")

    @change_log.setter
    def change_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_log", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description for the cloud template  (blueprint) version.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to indicate whether to release the version.
        """
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "release", value)


@pulumi.input_type
class _BlueprintVersionState:
    def __init__(__self__, *,
                 blueprint_description: Optional[pulumi.Input[str]] = None,
                 blueprint_id: Optional[pulumi.Input[str]] = None,
                 change_log: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 project_name: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 valid: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BlueprintVersion resources.
        :param pulumi.Input[str] blueprint_description: Description of cloud template (blueprint).
        :param pulumi.Input[str] blueprint_id: ID of the cloud template  (blueprint).
        :param pulumi.Input[str] change_log: Cloud template  (blueprint) version log.
        :param pulumi.Input[str] content: Blueprint YAML content.
        :param pulumi.Input[str] created_at: Date when the entity was created. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] created_by: User who created the entity.
        :param pulumi.Input[str] description: Human-friendly description for the cloud template  (blueprint) version.
        :param pulumi.Input[str] name: Name of cloud template (blueprint) version.
        :param pulumi.Input[str] org_id: ID of organization that entity belongs to.
        :param pulumi.Input[str] project_id: ID of project that entity belongs to.
        :param pulumi.Input[str] project_name: Name of project that entity belongs to.
        :param pulumi.Input[bool] release: Flag to indicate whether to release the version.
        :param pulumi.Input[str] status: Status of the cloud template (blueprint). Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] updated_by: User who last updated the entity.
        :param pulumi.Input[str] valid: Flag to indicate if the current content of the cloud template (blueprint) is valid.
        :param pulumi.Input[str] version: Cloud template  (blueprint) version.
        """
        if blueprint_description is not None:
            pulumi.set(__self__, "blueprint_description", blueprint_description)
        if blueprint_id is not None:
            pulumi.set(__self__, "blueprint_id", blueprint_id)
        if change_log is not None:
            pulumi.set(__self__, "change_log", change_log)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if release is not None:
            pulumi.set(__self__, "release", release)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if valid is not None:
            pulumi.set(__self__, "valid", valid)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="blueprintDescription")
    def blueprint_description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of cloud template (blueprint).
        """
        return pulumi.get(self, "blueprint_description")

    @blueprint_description.setter
    def blueprint_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint_description", value)

    @property
    @pulumi.getter(name="blueprintId")
    def blueprint_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the cloud template  (blueprint).
        """
        return pulumi.get(self, "blueprint_id")

    @blueprint_id.setter
    def blueprint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint_id", value)

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud template  (blueprint) version log.
        """
        return pulumi.get(self, "change_log")

    @change_log.setter
    def change_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_log", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Blueprint YAML content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when the entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        User who created the entity.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description for the cloud template  (blueprint) version.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of cloud template (blueprint) version.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of organization that entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of project that entity belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of project that entity belongs to.
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def release(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to indicate whether to release the version.
        """
        return pulumi.get(self, "release")

    @release.setter
    def release(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "release", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the cloud template (blueprint). Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        User who last updated the entity.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter
    def valid(self) -> Optional[pulumi.Input[str]]:
        """
        Flag to indicate if the current content of the cloud template (blueprint) is valid.
        """
        return pulumi.get(self, "valid")

    @valid.setter
    def valid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "valid", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud template  (blueprint) version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class BlueprintVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blueprint_id: Optional[pulumi.Input[str]] = None,
                 change_log: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a VMware vRealize Automation cloud template (blueprint) version resource.

        ## Example Usage
        ### S

        The following example shows how to create a cloud template (blueprint) version resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.blueprint.BlueprintVersion("this",
            blueprint_id=var["vra_blueprint_id"],
            change_log="First version",
            description="Released from vRA terraform provider",
            release=True,
            version=random_integer["suffix"]["result"] / random_integer["suffix"]["result"])
        ```

        ## Import

        To import the cloud template (blueprint) version, use the ID as in the following example

        ```sh
         $ pulumi import vra:blueprint/blueprintVersion:BlueprintVersion this 05956583-6488-4e7d-84c9-92a7b7219a15`
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] blueprint_id: ID of the cloud template  (blueprint).
        :param pulumi.Input[str] change_log: Cloud template  (blueprint) version log.
        :param pulumi.Input[str] description: Human-friendly description for the cloud template  (blueprint) version.
        :param pulumi.Input[bool] release: Flag to indicate whether to release the version.
        :param pulumi.Input[str] version: Cloud template  (blueprint) version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BlueprintVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a VMware vRealize Automation cloud template (blueprint) version resource.

        ## Example Usage
        ### S

        The following example shows how to create a cloud template (blueprint) version resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.blueprint.BlueprintVersion("this",
            blueprint_id=var["vra_blueprint_id"],
            change_log="First version",
            description="Released from vRA terraform provider",
            release=True,
            version=random_integer["suffix"]["result"] / random_integer["suffix"]["result"])
        ```

        ## Import

        To import the cloud template (blueprint) version, use the ID as in the following example

        ```sh
         $ pulumi import vra:blueprint/blueprintVersion:BlueprintVersion this 05956583-6488-4e7d-84c9-92a7b7219a15`
        ```

        :param str resource_name: The name of the resource.
        :param BlueprintVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BlueprintVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 blueprint_id: Optional[pulumi.Input[str]] = None,
                 change_log: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 release: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BlueprintVersionArgs.__new__(BlueprintVersionArgs)

            if blueprint_id is None and not opts.urn:
                raise TypeError("Missing required property 'blueprint_id'")
            __props__.__dict__["blueprint_id"] = blueprint_id
            __props__.__dict__["change_log"] = change_log
            __props__.__dict__["description"] = description
            __props__.__dict__["release"] = release
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["blueprint_description"] = None
            __props__.__dict__["content"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["project_id"] = None
            __props__.__dict__["project_name"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
            __props__.__dict__["valid"] = None
        super(BlueprintVersion, __self__).__init__(
            'vra:blueprint/blueprintVersion:BlueprintVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            blueprint_description: Optional[pulumi.Input[str]] = None,
            blueprint_id: Optional[pulumi.Input[str]] = None,
            change_log: Optional[pulumi.Input[str]] = None,
            content: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            project_name: Optional[pulumi.Input[str]] = None,
            release: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            updated_by: Optional[pulumi.Input[str]] = None,
            valid: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'BlueprintVersion':
        """
        Get an existing BlueprintVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] blueprint_description: Description of cloud template (blueprint).
        :param pulumi.Input[str] blueprint_id: ID of the cloud template  (blueprint).
        :param pulumi.Input[str] change_log: Cloud template  (blueprint) version log.
        :param pulumi.Input[str] content: Blueprint YAML content.
        :param pulumi.Input[str] created_at: Date when the entity was created. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] created_by: User who created the entity.
        :param pulumi.Input[str] description: Human-friendly description for the cloud template  (blueprint) version.
        :param pulumi.Input[str] name: Name of cloud template (blueprint) version.
        :param pulumi.Input[str] org_id: ID of organization that entity belongs to.
        :param pulumi.Input[str] project_id: ID of project that entity belongs to.
        :param pulumi.Input[str] project_name: Name of project that entity belongs to.
        :param pulumi.Input[bool] release: Flag to indicate whether to release the version.
        :param pulumi.Input[str] status: Status of the cloud template (blueprint). Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] updated_by: User who last updated the entity.
        :param pulumi.Input[str] valid: Flag to indicate if the current content of the cloud template (blueprint) is valid.
        :param pulumi.Input[str] version: Cloud template  (blueprint) version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BlueprintVersionState.__new__(_BlueprintVersionState)

        __props__.__dict__["blueprint_description"] = blueprint_description
        __props__.__dict__["blueprint_id"] = blueprint_id
        __props__.__dict__["change_log"] = change_log
        __props__.__dict__["content"] = content
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["release"] = release
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["valid"] = valid
        __props__.__dict__["version"] = version
        return BlueprintVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="blueprintDescription")
    def blueprint_description(self) -> pulumi.Output[str]:
        """
        Description of cloud template (blueprint).
        """
        return pulumi.get(self, "blueprint_description")

    @property
    @pulumi.getter(name="blueprintId")
    def blueprint_id(self) -> pulumi.Output[str]:
        """
        ID of the cloud template  (blueprint).
        """
        return pulumi.get(self, "blueprint_id")

    @property
    @pulumi.getter(name="changeLog")
    def change_log(self) -> pulumi.Output[Optional[str]]:
        """
        Cloud template  (blueprint) version log.
        """
        return pulumi.get(self, "change_log")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        Blueprint YAML content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Date when the entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        """
        User who created the entity.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Human-friendly description for the cloud template  (blueprint) version.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of cloud template (blueprint) version.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        ID of organization that entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        ID of project that entity belongs to.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[str]:
        """
        Name of project that entity belongs to.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def release(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag to indicate whether to release the version.
        """
        return pulumi.get(self, "release")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the cloud template (blueprint). Supported values: `DRAFT`, `VERSIONED`, `RELEASED`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[str]:
        """
        User who last updated the entity.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter
    def valid(self) -> pulumi.Output[str]:
        """
        Flag to indicate if the current content of the cloud template (blueprint) is valid.
        """
        return pulumi.get(self, "valid")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Cloud template  (blueprint) version.
        """
        return pulumi.get(self, "version")

