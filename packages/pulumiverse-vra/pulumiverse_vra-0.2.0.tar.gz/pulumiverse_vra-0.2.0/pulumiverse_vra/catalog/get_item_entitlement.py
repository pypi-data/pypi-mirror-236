# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetItemEntitlementResult',
    'AwaitableGetItemEntitlementResult',
    'get_item_entitlement',
    'get_item_entitlement_output',
]

@pulumi.output_type
class GetItemEntitlementResult:
    """
    A collection of values returned by getItemEntitlement.
    """
    def __init__(__self__, catalog_item_id=None, definitions=None, id=None, project_id=None):
        if catalog_item_id and not isinstance(catalog_item_id, str):
            raise TypeError("Expected argument 'catalog_item_id' to be a str")
        pulumi.set(__self__, "catalog_item_id", catalog_item_id)
        if definitions and not isinstance(definitions, list):
            raise TypeError("Expected argument 'definitions' to be a list")
        pulumi.set(__self__, "definitions", definitions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="catalogItemId")
    def catalog_item_id(self) -> Optional[str]:
        return pulumi.get(self, "catalog_item_id")

    @property
    @pulumi.getter
    def definitions(self) -> Sequence['outputs.GetItemEntitlementDefinitionResult']:
        """
        Represents a catalog item that is linked to a project via an entitlement.
        """
        return pulumi.get(self, "definitions")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the catalog item.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")


class AwaitableGetItemEntitlementResult(GetItemEntitlementResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetItemEntitlementResult(
            catalog_item_id=self.catalog_item_id,
            definitions=self.definitions,
            id=self.id,
            project_id=self.project_id)


def get_item_entitlement(catalog_item_id: Optional[str] = None,
                         id: Optional[str] = None,
                         project_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetItemEntitlementResult:
    """
    This data source provides information about a catalog item entitlement in vRA.

    ## Example Usage
    ### S

    This is an example of how to get a vRA catalog item entitlement by its id:

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.catalog.get_item_entitlement(id=var["catalog_item_entitlement_id"],
        project_id=var["project_id"])
    ```

    This is an example of how to get a vRA catalog item entitlement by its catalog item id:

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.catalog.get_item_entitlement(catalog_item_id=var["catalog_item_id"],
        project_id=var["project_id"])
    ```


    :param str catalog_item_id: The id of the catalog item to find the entitlement. One of `catalog_item_id` or `id` must be provided.
    :param str id: The id of entitlement. One of `catalog_item_id` or `id` must be provided.
    :param str project_id: The id of the project that this entitlement belongs to.
    """
    __args__ = dict()
    __args__['catalogItemId'] = catalog_item_id
    __args__['id'] = id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vra:catalog/getItemEntitlement:getItemEntitlement', __args__, opts=opts, typ=GetItemEntitlementResult).value

    return AwaitableGetItemEntitlementResult(
        catalog_item_id=__ret__.catalog_item_id,
        definitions=__ret__.definitions,
        id=__ret__.id,
        project_id=__ret__.project_id)


@_utilities.lift_output_func(get_item_entitlement)
def get_item_entitlement_output(catalog_item_id: Optional[pulumi.Input[Optional[str]]] = None,
                                id: Optional[pulumi.Input[Optional[str]]] = None,
                                project_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetItemEntitlementResult]:
    """
    This data source provides information about a catalog item entitlement in vRA.

    ## Example Usage
    ### S

    This is an example of how to get a vRA catalog item entitlement by its id:

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.catalog.get_item_entitlement(id=var["catalog_item_entitlement_id"],
        project_id=var["project_id"])
    ```

    This is an example of how to get a vRA catalog item entitlement by its catalog item id:

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.catalog.get_item_entitlement(catalog_item_id=var["catalog_item_id"],
        project_id=var["project_id"])
    ```


    :param str catalog_item_id: The id of the catalog item to find the entitlement. One of `catalog_item_id` or `id` must be provided.
    :param str id: The id of entitlement. One of `catalog_item_id` or `id` must be provided.
    :param str project_id: The id of the project that this entitlement belongs to.
    """
    ...
