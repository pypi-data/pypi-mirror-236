# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSourceBlueprintResult',
    'AwaitableGetSourceBlueprintResult',
    'get_source_blueprint',
    'get_source_blueprint_output',
]

@pulumi.output_type
class GetSourceBlueprintResult:
    """
    A collection of values returned by getSourceBlueprint.
    """
    def __init__(__self__, config=None, created_at=None, created_by=None, description=None, global_=None, id=None, items_found=None, items_imported=None, last_import_completed_at=None, last_import_errors=None, last_import_started_at=None, last_updated_by=None, name=None, project_id=None, type_id=None):
        if config and not isinstance(config, dict):
            raise TypeError("Expected argument 'config' to be a dict")
        pulumi.set(__self__, "config", config)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if global_ and not isinstance(global_, bool):
            raise TypeError("Expected argument 'global_' to be a bool")
        pulumi.set(__self__, "global_", global_)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if items_found and not isinstance(items_found, str):
            raise TypeError("Expected argument 'items_found' to be a str")
        pulumi.set(__self__, "items_found", items_found)
        if items_imported and not isinstance(items_imported, str):
            raise TypeError("Expected argument 'items_imported' to be a str")
        pulumi.set(__self__, "items_imported", items_imported)
        if last_import_completed_at and not isinstance(last_import_completed_at, str):
            raise TypeError("Expected argument 'last_import_completed_at' to be a str")
        pulumi.set(__self__, "last_import_completed_at", last_import_completed_at)
        if last_import_errors and not isinstance(last_import_errors, list):
            raise TypeError("Expected argument 'last_import_errors' to be a list")
        pulumi.set(__self__, "last_import_errors", last_import_errors)
        if last_import_started_at and not isinstance(last_import_started_at, str):
            raise TypeError("Expected argument 'last_import_started_at' to be a str")
        pulumi.set(__self__, "last_import_started_at", last_import_started_at)
        if last_updated_by and not isinstance(last_updated_by, str):
            raise TypeError("Expected argument 'last_updated_by' to be a str")
        pulumi.set(__self__, "last_updated_by", last_updated_by)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if type_id and not isinstance(type_id, str):
            raise TypeError("Expected argument 'type_id' to be a str")
        pulumi.set(__self__, "type_id", type_id)

    @property
    @pulumi.getter
    def config(self) -> Mapping[str, str]:
        """
        Custom configuration of the catalog source as a map of key values.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Date when the entity was created. The date is in ISO 6801 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user the entity was created by.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Catalog source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> bool:
        """
        A flag indicating that all the items can be requested across all projects.
        """
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="itemsFound")
    def items_found(self) -> str:
        """
        Number of items found in the catalog source.
        """
        return pulumi.get(self, "items_found")

    @property
    @pulumi.getter(name="itemsImported")
    def items_imported(self) -> str:
        """
        Number of items imported from the catalog source.
        """
        return pulumi.get(self, "items_imported")

    @property
    @pulumi.getter(name="lastImportCompletedAt")
    def last_import_completed_at(self) -> str:
        """
        Time at which the last import was completed at.
        """
        return pulumi.get(self, "last_import_completed_at")

    @property
    @pulumi.getter(name="lastImportErrors")
    def last_import_errors(self) -> Sequence[str]:
        """
        A list of errors seen at last time the catalog source is imported.
        """
        return pulumi.get(self, "last_import_errors")

    @property
    @pulumi.getter(name="lastImportStartedAt")
    def last_import_started_at(self) -> str:
        """
        Time at which the last import was started at.
        """
        return pulumi.get(self, "last_import_started_at")

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> str:
        """
        The user that last updated the catalog source.
        """
        return pulumi.get(self, "last_updated_by")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> str:
        """
        Type of catalog source. Example: `blueprint`, `CFT`, etc.
        """
        return pulumi.get(self, "type_id")


class AwaitableGetSourceBlueprintResult(GetSourceBlueprintResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSourceBlueprintResult(
            config=self.config,
            created_at=self.created_at,
            created_by=self.created_by,
            description=self.description,
            global_=self.global_,
            id=self.id,
            items_found=self.items_found,
            items_imported=self.items_imported,
            last_import_completed_at=self.last_import_completed_at,
            last_import_errors=self.last_import_errors,
            last_import_started_at=self.last_import_started_at,
            last_updated_by=self.last_updated_by,
            name=self.name,
            project_id=self.project_id,
            type_id=self.type_id)


def get_source_blueprint(config: Optional[Mapping[str, str]] = None,
                         description: Optional[str] = None,
                         id: Optional[str] = None,
                         name: Optional[str] = None,
                         project_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSourceBlueprintResult:
    """
    This data source provides information about a catalog source of type cloud template (blueprint) in vRA.

    ## Example Usage
    ### S

    This is an example of how to get a vRA cloud template catalog source by its name.

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.catalog.get_source_blueprint(name=var["catalog_source_name"])
    ```

    This is an example of how to get a vRA cloud template catalog source by its id.

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.catalog.get_source_blueprint(id=var["catalog_source_id"])
    ```

    This is an example of how to get a vRA cloud template catalog source by the project id it is associated with.

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.catalog.get_source_blueprint(project_id=var["project_id"])
    ```


    :param Mapping[str, str] config: Custom configuration of the catalog source as a map of key values.
    :param str description: Catalog source description.
    :param str id: The id of catalog source. One of `id`, `name` or `project_id`  must be provided.
    :param str name: Name of the catalog source. One of `id`, `name` or `project_id` must be provided.
    :param str project_id: The id of the project.  One of `id`, `name` or `project_id` must be provided.
    """
    __args__ = dict()
    __args__['config'] = config
    __args__['description'] = description
    __args__['id'] = id
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vra:catalog/getSourceBlueprint:getSourceBlueprint', __args__, opts=opts, typ=GetSourceBlueprintResult).value

    return AwaitableGetSourceBlueprintResult(
        config=__ret__.config,
        created_at=__ret__.created_at,
        created_by=__ret__.created_by,
        description=__ret__.description,
        global_=__ret__.global_,
        id=__ret__.id,
        items_found=__ret__.items_found,
        items_imported=__ret__.items_imported,
        last_import_completed_at=__ret__.last_import_completed_at,
        last_import_errors=__ret__.last_import_errors,
        last_import_started_at=__ret__.last_import_started_at,
        last_updated_by=__ret__.last_updated_by,
        name=__ret__.name,
        project_id=__ret__.project_id,
        type_id=__ret__.type_id)


@_utilities.lift_output_func(get_source_blueprint)
def get_source_blueprint_output(config: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                description: Optional[pulumi.Input[Optional[str]]] = None,
                                id: Optional[pulumi.Input[Optional[str]]] = None,
                                name: Optional[pulumi.Input[Optional[str]]] = None,
                                project_id: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSourceBlueprintResult]:
    """
    This data source provides information about a catalog source of type cloud template (blueprint) in vRA.

    ## Example Usage
    ### S

    This is an example of how to get a vRA cloud template catalog source by its name.

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.catalog.get_source_blueprint(name=var["catalog_source_name"])
    ```

    This is an example of how to get a vRA cloud template catalog source by its id.

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.catalog.get_source_blueprint(id=var["catalog_source_id"])
    ```

    This is an example of how to get a vRA cloud template catalog source by the project id it is associated with.

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.catalog.get_source_blueprint(project_id=var["project_id"])
    ```


    :param Mapping[str, str] config: Custom configuration of the catalog source as a map of key values.
    :param str description: Catalog source description.
    :param str id: The id of catalog source. One of `id`, `name` or `project_id`  must be provided.
    :param str name: Name of the catalog source. One of `id`, `name` or `project_id` must be provided.
    :param str project_id: The id of the project.  One of `id`, `name` or `project_id` must be provided.
    """
    ...
