# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SourceBlueprintArgs', 'SourceBlueprint']

@pulumi.input_type
class SourceBlueprintArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SourceBlueprint resource.
        :param pulumi.Input[str] project_id: ID of the project this entity belongs to.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: Custom configuration of the catalog source as a map of key values.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        """
        pulumi.set(__self__, "project_id", project_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        ID of the project this entity belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom configuration of the catalog source as a map of key values.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _SourceBlueprintState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_: Optional[pulumi.Input[bool]] = None,
                 items_found: Optional[pulumi.Input[str]] = None,
                 items_imported: Optional[pulumi.Input[str]] = None,
                 last_import_completed_at: Optional[pulumi.Input[str]] = None,
                 last_import_errors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 last_import_started_at: Optional[pulumi.Input[str]] = None,
                 last_updated_by: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 type_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SourceBlueprint resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: Custom configuration of the catalog source as a map of key values.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] project_id: ID of the project this entity belongs to.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if items_found is not None:
            pulumi.set(__self__, "items_found", items_found)
        if items_imported is not None:
            pulumi.set(__self__, "items_imported", items_imported)
        if last_import_completed_at is not None:
            pulumi.set(__self__, "last_import_completed_at", last_import_completed_at)
        if last_import_errors is not None:
            pulumi.set(__self__, "last_import_errors", last_import_errors)
        if last_import_started_at is not None:
            pulumi.set(__self__, "last_import_started_at", last_import_started_at)
        if last_updated_by is not None:
            pulumi.set(__self__, "last_updated_by", last_updated_by)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if type_id is not None:
            pulumi.set(__self__, "type_id", type_id)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom configuration of the catalog source as a map of key values.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter(name="itemsFound")
    def items_found(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "items_found")

    @items_found.setter
    def items_found(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "items_found", value)

    @property
    @pulumi.getter(name="itemsImported")
    def items_imported(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "items_imported")

    @items_imported.setter
    def items_imported(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "items_imported", value)

    @property
    @pulumi.getter(name="lastImportCompletedAt")
    def last_import_completed_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_import_completed_at")

    @last_import_completed_at.setter
    def last_import_completed_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_import_completed_at", value)

    @property
    @pulumi.getter(name="lastImportErrors")
    def last_import_errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "last_import_errors")

    @last_import_errors.setter
    def last_import_errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "last_import_errors", value)

    @property
    @pulumi.getter(name="lastImportStartedAt")
    def last_import_started_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_import_started_at")

    @last_import_started_at.setter
    def last_import_started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_import_started_at", value)

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_updated_by")

    @last_updated_by.setter
    def last_updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated_by", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the project this entity belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_id", value)


class SourceBlueprint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a VMware vRealize Automation catalog source resource of type cloud template, formerly known as a blueprint.

        ## Example Usage
        ### S

        The following example shows how to create a catalog source resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.catalog.SourceBlueprint("this", project_id=var["vra_project_id"])
        ```
        ## Attribute Reference

        * `created_at` - Date when entity was created. Date and time format is ISO 8601 and UTC.

        * `created_by` - User who created the entity.

        * `global` - Flag indicating that all items can be requested across all projects.

        * `id` - ID of catalog source.

        * `items_found` - Number of items found in the catalog source.

        * `items_imported` - Number of items imported from the catalog source.

        * `last_import_completed_at` - Time at which the last import completed.

        * `last_import_errors` - List of errors seen when the catalog source was last imported.

        * `last_import_started_at` - Time at which the last import started.

        * `last_updated_by` - User who last updated the catalog source.

        * `type_id` - Type of catalog source. Example: `blueprint`, `CFT`, etc.

        ## Import

        To import the cloud template catalog source, use the ID as in the following example

        ```sh
         $ pulumi import vra:catalog/sourceBlueprint:SourceBlueprint this 05956583-6488-4e7d-84c9-92a7b7219a15`
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: Custom configuration of the catalog source as a map of key values.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] project_id: ID of the project this entity belongs to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SourceBlueprintArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a VMware vRealize Automation catalog source resource of type cloud template, formerly known as a blueprint.

        ## Example Usage
        ### S

        The following example shows how to create a catalog source resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.catalog.SourceBlueprint("this", project_id=var["vra_project_id"])
        ```
        ## Attribute Reference

        * `created_at` - Date when entity was created. Date and time format is ISO 8601 and UTC.

        * `created_by` - User who created the entity.

        * `global` - Flag indicating that all items can be requested across all projects.

        * `id` - ID of catalog source.

        * `items_found` - Number of items found in the catalog source.

        * `items_imported` - Number of items imported from the catalog source.

        * `last_import_completed_at` - Time at which the last import completed.

        * `last_import_errors` - List of errors seen when the catalog source was last imported.

        * `last_import_started_at` - Time at which the last import started.

        * `last_updated_by` - User who last updated the catalog source.

        * `type_id` - Type of catalog source. Example: `blueprint`, `CFT`, etc.

        ## Import

        To import the cloud template catalog source, use the ID as in the following example

        ```sh
         $ pulumi import vra:catalog/sourceBlueprint:SourceBlueprint this 05956583-6488-4e7d-84c9-92a7b7219a15`
        ```

        :param str resource_name: The name of the resource.
        :param SourceBlueprintArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SourceBlueprintArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SourceBlueprintArgs.__new__(SourceBlueprintArgs)

            __props__.__dict__["config"] = config
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["global_"] = None
            __props__.__dict__["items_found"] = None
            __props__.__dict__["items_imported"] = None
            __props__.__dict__["last_import_completed_at"] = None
            __props__.__dict__["last_import_errors"] = None
            __props__.__dict__["last_import_started_at"] = None
            __props__.__dict__["last_updated_by"] = None
            __props__.__dict__["type_id"] = None
        super(SourceBlueprint, __self__).__init__(
            'vra:catalog/sourceBlueprint:SourceBlueprint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            global_: Optional[pulumi.Input[bool]] = None,
            items_found: Optional[pulumi.Input[str]] = None,
            items_imported: Optional[pulumi.Input[str]] = None,
            last_import_completed_at: Optional[pulumi.Input[str]] = None,
            last_import_errors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            last_import_started_at: Optional[pulumi.Input[str]] = None,
            last_updated_by: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            type_id: Optional[pulumi.Input[str]] = None) -> 'SourceBlueprint':
        """
        Get an existing SourceBlueprint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] config: Custom configuration of the catalog source as a map of key values.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] project_id: ID of the project this entity belongs to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SourceBlueprintState.__new__(_SourceBlueprintState)

        __props__.__dict__["config"] = config
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["global_"] = global_
        __props__.__dict__["items_found"] = items_found
        __props__.__dict__["items_imported"] = items_imported
        __props__.__dict__["last_import_completed_at"] = last_import_completed_at
        __props__.__dict__["last_import_errors"] = last_import_errors
        __props__.__dict__["last_import_started_at"] = last_import_started_at
        __props__.__dict__["last_updated_by"] = last_updated_by
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["type_id"] = type_id
        return SourceBlueprint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Custom configuration of the catalog source as a map of key values.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter(name="itemsFound")
    def items_found(self) -> pulumi.Output[str]:
        return pulumi.get(self, "items_found")

    @property
    @pulumi.getter(name="itemsImported")
    def items_imported(self) -> pulumi.Output[str]:
        return pulumi.get(self, "items_imported")

    @property
    @pulumi.getter(name="lastImportCompletedAt")
    def last_import_completed_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_import_completed_at")

    @property
    @pulumi.getter(name="lastImportErrors")
    def last_import_errors(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "last_import_errors")

    @property
    @pulumi.getter(name="lastImportStartedAt")
    def last_import_started_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_import_started_at")

    @property
    @pulumi.getter(name="lastUpdatedBy")
    def last_updated_by(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_updated_by")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        ID of the project this entity belongs to.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type_id")

