# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNsxvResult',
    'AwaitableGetNsxvResult',
    'get_nsxv',
    'get_nsxv_output',
]

@pulumi.output_type
class GetNsxvResult:
    """
    A collection of values returned by getNsxv.
    """
    def __init__(__self__, associated_cloud_account_ids=None, created_at=None, dc_id=None, description=None, hostname=None, id=None, links=None, name=None, org_id=None, owner=None, tags=None, updated_at=None, username=None):
        if associated_cloud_account_ids and not isinstance(associated_cloud_account_ids, list):
            raise TypeError("Expected argument 'associated_cloud_account_ids' to be a list")
        pulumi.set(__self__, "associated_cloud_account_ids", associated_cloud_account_ids)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if dc_id and not isinstance(dc_id, str):
            raise TypeError("Expected argument 'dc_id' to be a str")
        pulumi.set(__self__, "dc_id", dc_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="associatedCloudAccountIds")
    def associated_cloud_account_ids(self) -> Sequence[str]:
        """
        Cloud accounts associated with this cloud account.
        """
        return pulumi.get(self, "associated_cloud_account_ids")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Date when the entity was created. The date is in ISO 6801 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dcId")
    def dc_id(self) -> str:
        """
        Identifier of a data collector vm deployed in the on premise infrastructure.
        """
        return pulumi.get(self, "dc_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Host name for the NSX-V cloud account.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetNsxvLinkResult']:
        """
        HATEOAS of the entity.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        The id of the organization this entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNsxvTagResult']:
        """
        A set of tag keys and optional values that were set on this resource.
        example:[ { "key" : "vmware", "value": "provider" } ]
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Username to authenticate with the cloud account.
        """
        return pulumi.get(self, "username")


class AwaitableGetNsxvResult(GetNsxvResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNsxvResult(
            associated_cloud_account_ids=self.associated_cloud_account_ids,
            created_at=self.created_at,
            dc_id=self.dc_id,
            description=self.description,
            hostname=self.hostname,
            id=self.id,
            links=self.links,
            name=self.name,
            org_id=self.org_id,
            owner=self.owner,
            tags=self.tags,
            updated_at=self.updated_at,
            username=self.username)


def get_nsxv(id: Optional[str] = None,
             name: Optional[str] = None,
             tags: Optional[Sequence[pulumi.InputType['GetNsxvTagArgs']]] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNsxvResult:
    """
    Provides a VMware vRA cloudaccount.Nsxv data source.

    ## Example Usage
    ### S

    **NSX-V cloud account data source by its id:**

    This is an example of how to read the cloud account data source using its id.

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.cloudaccount.get_nsxv(id=var["vra_cloud_account_nsxv_id"])
    ```

    **NSX-V cloud account data source by its name:**

    This is an example of how to read the cloud account data source using its name.

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.cloudaccount.get_nsxv(name=var["vra_cloud_account_nsxv_name"])
    ```


    :param str id: The id of this NSX-V cloud account.
    :param str name: The name of this NSX-V cloud account.
    :param Sequence[pulumi.InputType['GetNsxvTagArgs']] tags: A set of tag keys and optional values that were set on this resource.
           example:[ { "key" : "vmware", "value": "provider" } ]
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vra:cloudaccount/getNsxv:getNsxv', __args__, opts=opts, typ=GetNsxvResult).value

    return AwaitableGetNsxvResult(
        associated_cloud_account_ids=__ret__.associated_cloud_account_ids,
        created_at=__ret__.created_at,
        dc_id=__ret__.dc_id,
        description=__ret__.description,
        hostname=__ret__.hostname,
        id=__ret__.id,
        links=__ret__.links,
        name=__ret__.name,
        org_id=__ret__.org_id,
        owner=__ret__.owner,
        tags=__ret__.tags,
        updated_at=__ret__.updated_at,
        username=__ret__.username)


@_utilities.lift_output_func(get_nsxv)
def get_nsxv_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                    name: Optional[pulumi.Input[Optional[str]]] = None,
                    tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNsxvTagArgs']]]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNsxvResult]:
    """
    Provides a VMware vRA cloudaccount.Nsxv data source.

    ## Example Usage
    ### S

    **NSX-V cloud account data source by its id:**

    This is an example of how to read the cloud account data source using its id.

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.cloudaccount.get_nsxv(id=var["vra_cloud_account_nsxv_id"])
    ```

    **NSX-V cloud account data source by its name:**

    This is an example of how to read the cloud account data source using its name.

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.cloudaccount.get_nsxv(name=var["vra_cloud_account_nsxv_name"])
    ```


    :param str id: The id of this NSX-V cloud account.
    :param str name: The name of this NSX-V cloud account.
    :param Sequence[pulumi.InputType['GetNsxvTagArgs']] tags: A set of tag keys and optional values that were set on this resource.
           example:[ { "key" : "vmware", "value": "provider" } ]
    """
    ...
