# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NsxvArgs', 'Nsxv']

@pulumi.input_type
class NsxvArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 accept_self_signed_cert: Optional[pulumi.Input[bool]] = None,
                 dc_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvTagArgs']]]] = None):
        """
        The set of arguments for constructing a Nsxv resource.
        :param pulumi.Input[str] hostname: Host name for NSX-V cloud account.
        :param pulumi.Input[str] password: Password used to authenticate to the cloud account.
        :param pulumi.Input[str] username: Username used to authenticate with the cloud account.
        :param pulumi.Input[bool] accept_self_signed_cert: Accept self-signed certificate when connecting to the cloud account.
        :param pulumi.Input[str] dc_id: Identifier of a data collector VM deployed in the on premise infrastructure.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Name of NSX-V cloud account.
        :param pulumi.Input[Sequence[pulumi.Input['NsxvTagArgs']]] tags: Set of tag keys and values to apply to the cloud account.  
               Example: [ { "key" : "vmware", "value": "provider" } ]
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if accept_self_signed_cert is not None:
            pulumi.set(__self__, "accept_self_signed_cert", accept_self_signed_cert)
        if dc_id is not None:
            pulumi.set(__self__, "dc_id", dc_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        Host name for NSX-V cloud account.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Password used to authenticate to the cloud account.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Username used to authenticate with the cloud account.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="acceptSelfSignedCert")
    def accept_self_signed_cert(self) -> Optional[pulumi.Input[bool]]:
        """
        Accept self-signed certificate when connecting to the cloud account.
        """
        return pulumi.get(self, "accept_self_signed_cert")

    @accept_self_signed_cert.setter
    def accept_self_signed_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_self_signed_cert", value)

    @property
    @pulumi.getter(name="dcId")
    def dc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of a data collector VM deployed in the on premise infrastructure.
        """
        return pulumi.get(self, "dc_id")

    @dc_id.setter
    def dc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dc_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of NSX-V cloud account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxvTagArgs']]]]:
        """
        Set of tag keys and values to apply to the cloud account.  
        Example: [ { "key" : "vmware", "value": "provider" } ]
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _NsxvState:
    def __init__(__self__, *,
                 accept_self_signed_cert: Optional[pulumi.Input[bool]] = None,
                 associated_cloud_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 dc_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvLinkArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvTagArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Nsxv resources.
        :param pulumi.Input[bool] accept_self_signed_cert: Accept self-signed certificate when connecting to the cloud account.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] associated_cloud_account_ids: Cloud accounts associated to the cloud account.
        :param pulumi.Input[str] created_at: Date when entity was created. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] dc_id: Identifier of a data collector VM deployed in the on premise infrastructure.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] hostname: Host name for NSX-V cloud account.
        :param pulumi.Input[Sequence[pulumi.Input['NsxvLinkArgs']]] links: HATEOAS of entity.
        :param pulumi.Input[str] name: Name of NSX-V cloud account.
        :param pulumi.Input[str] org_id: ID of organization that entity belongs to.
        :param pulumi.Input[str] owner: Email of entity owner.
        :param pulumi.Input[str] password: Password used to authenticate to the cloud account.
        :param pulumi.Input[Sequence[pulumi.Input['NsxvTagArgs']]] tags: Set of tag keys and values to apply to the cloud account.  
               Example: [ { "key" : "vmware", "value": "provider" } ]
        :param pulumi.Input[str] updated_at: Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] username: Username used to authenticate with the cloud account.
        """
        if accept_self_signed_cert is not None:
            pulumi.set(__self__, "accept_self_signed_cert", accept_self_signed_cert)
        if associated_cloud_account_ids is not None:
            pulumi.set(__self__, "associated_cloud_account_ids", associated_cloud_account_ids)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dc_id is not None:
            pulumi.set(__self__, "dc_id", dc_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="acceptSelfSignedCert")
    def accept_self_signed_cert(self) -> Optional[pulumi.Input[bool]]:
        """
        Accept self-signed certificate when connecting to the cloud account.
        """
        return pulumi.get(self, "accept_self_signed_cert")

    @accept_self_signed_cert.setter
    def accept_self_signed_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_self_signed_cert", value)

    @property
    @pulumi.getter(name="associatedCloudAccountIds")
    def associated_cloud_account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cloud accounts associated to the cloud account.
        """
        return pulumi.get(self, "associated_cloud_account_ids")

    @associated_cloud_account_ids.setter
    def associated_cloud_account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "associated_cloud_account_ids", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dcId")
    def dc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of a data collector VM deployed in the on premise infrastructure.
        """
        return pulumi.get(self, "dc_id")

    @dc_id.setter
    def dc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dc_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Host name for NSX-V cloud account.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxvLinkArgs']]]]:
        """
        HATEOAS of entity.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of NSX-V cloud account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of organization that entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Email of entity owner.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password used to authenticate to the cloud account.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NsxvTagArgs']]]]:
        """
        Set of tag keys and values to apply to the cloud account.  
        Example: [ { "key" : "vmware", "value": "provider" } ]
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NsxvTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username used to authenticate with the cloud account.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Nsxv(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_self_signed_cert: Optional[pulumi.Input[bool]] = None,
                 dc_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxvTagArgs']]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a VMware vRealize Automation NSX-V cloud account resource.

        ## Example Usage
        ### S

        The following example shows how to create an NSX-V cloud account resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.cloudaccount.Nsxv("this",
            description="foobar",
            username=var["username"],
            password=var["password"],
            hostname=var["hostname"],
            dc_id=var["vra_data_collector_id"],
            accept_self_signed_cert=True,
            tags=[vra.cloudaccount.NsxvTagArgs(
                key="foo",
                value="bar",
            )])
        ```

        ## Import

        To import the NSX-V cloud account, use the ID as in the following example

        ```sh
         $ pulumi import vra:cloudaccount/nsxv:Nsxv new_gcp 05956583-6488-4e7d-84c9-92a7b7219a15`
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_self_signed_cert: Accept self-signed certificate when connecting to the cloud account.
        :param pulumi.Input[str] dc_id: Identifier of a data collector VM deployed in the on premise infrastructure.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] hostname: Host name for NSX-V cloud account.
        :param pulumi.Input[str] name: Name of NSX-V cloud account.
        :param pulumi.Input[str] password: Password used to authenticate to the cloud account.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxvTagArgs']]]] tags: Set of tag keys and values to apply to the cloud account.  
               Example: [ { "key" : "vmware", "value": "provider" } ]
        :param pulumi.Input[str] username: Username used to authenticate with the cloud account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NsxvArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a VMware vRealize Automation NSX-V cloud account resource.

        ## Example Usage
        ### S

        The following example shows how to create an NSX-V cloud account resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.cloudaccount.Nsxv("this",
            description="foobar",
            username=var["username"],
            password=var["password"],
            hostname=var["hostname"],
            dc_id=var["vra_data_collector_id"],
            accept_self_signed_cert=True,
            tags=[vra.cloudaccount.NsxvTagArgs(
                key="foo",
                value="bar",
            )])
        ```

        ## Import

        To import the NSX-V cloud account, use the ID as in the following example

        ```sh
         $ pulumi import vra:cloudaccount/nsxv:Nsxv new_gcp 05956583-6488-4e7d-84c9-92a7b7219a15`
        ```

        :param str resource_name: The name of the resource.
        :param NsxvArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NsxvArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_self_signed_cert: Optional[pulumi.Input[bool]] = None,
                 dc_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxvTagArgs']]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NsxvArgs.__new__(NsxvArgs)

            __props__.__dict__["accept_self_signed_cert"] = accept_self_signed_cert
            __props__.__dict__["dc_id"] = dc_id
            __props__.__dict__["description"] = description
            if hostname is None and not opts.urn:
                raise TypeError("Missing required property 'hostname'")
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["name"] = name
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = password
            __props__.__dict__["tags"] = tags
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["associated_cloud_account_ids"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["updated_at"] = None
        super(Nsxv, __self__).__init__(
            'vra:cloudaccount/nsxv:Nsxv',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_self_signed_cert: Optional[pulumi.Input[bool]] = None,
            associated_cloud_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            dc_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxvLinkArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxvTagArgs']]]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'Nsxv':
        """
        Get an existing Nsxv resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_self_signed_cert: Accept self-signed certificate when connecting to the cloud account.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] associated_cloud_account_ids: Cloud accounts associated to the cloud account.
        :param pulumi.Input[str] created_at: Date when entity was created. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] dc_id: Identifier of a data collector VM deployed in the on premise infrastructure.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] hostname: Host name for NSX-V cloud account.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxvLinkArgs']]]] links: HATEOAS of entity.
        :param pulumi.Input[str] name: Name of NSX-V cloud account.
        :param pulumi.Input[str] org_id: ID of organization that entity belongs to.
        :param pulumi.Input[str] owner: Email of entity owner.
        :param pulumi.Input[str] password: Password used to authenticate to the cloud account.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NsxvTagArgs']]]] tags: Set of tag keys and values to apply to the cloud account.  
               Example: [ { "key" : "vmware", "value": "provider" } ]
        :param pulumi.Input[str] updated_at: Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] username: Username used to authenticate with the cloud account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NsxvState.__new__(_NsxvState)

        __props__.__dict__["accept_self_signed_cert"] = accept_self_signed_cert
        __props__.__dict__["associated_cloud_account_ids"] = associated_cloud_account_ids
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dc_id"] = dc_id
        __props__.__dict__["description"] = description
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["links"] = links
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["owner"] = owner
        __props__.__dict__["password"] = password
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["username"] = username
        return Nsxv(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceptSelfSignedCert")
    def accept_self_signed_cert(self) -> pulumi.Output[Optional[bool]]:
        """
        Accept self-signed certificate when connecting to the cloud account.
        """
        return pulumi.get(self, "accept_self_signed_cert")

    @property
    @pulumi.getter(name="associatedCloudAccountIds")
    def associated_cloud_account_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Cloud accounts associated to the cloud account.
        """
        return pulumi.get(self, "associated_cloud_account_ids")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Date when entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dcId")
    def dc_id(self) -> pulumi.Output[Optional[str]]:
        """
        Identifier of a data collector VM deployed in the on premise infrastructure.
        """
        return pulumi.get(self, "dc_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        """
        Host name for NSX-V cloud account.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.NsxvLink']]:
        """
        HATEOAS of entity.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of NSX-V cloud account.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        ID of organization that entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        Email of entity owner.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password used to authenticate to the cloud account.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.NsxvTag']]:
        """
        Set of tag keys and values to apply to the cloud account.  
        Example: [ { "key" : "vmware", "value": "provider" } ]
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Date when entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username used to authenticate with the cloud account.
        """
        return pulumi.get(self, "username")

