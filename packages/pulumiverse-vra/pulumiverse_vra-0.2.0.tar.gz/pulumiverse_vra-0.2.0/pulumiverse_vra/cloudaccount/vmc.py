# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmcArgs', 'Vmc']

@pulumi.input_type
class VmcArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 nsx_hostname: pulumi.Input[str],
                 regions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 sddc_name: pulumi.Input[str],
                 vcenter_hostname: pulumi.Input[str],
                 vcenter_password: pulumi.Input[str],
                 vcenter_username: pulumi.Input[str],
                 accept_self_signed_cert: Optional[pulumi.Input[bool]] = None,
                 dc_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['VmcTagArgs']]]] = None):
        """
        The set of arguments for constructing a Vmc resource.
        :param pulumi.Input[str] api_token: VMC API access key.
        :param pulumi.Input[str] nsx_hostname: IP address of the NSX Manager server in the specified SDDC / FQDN.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: Set of region names enabled for the cloud account.
        :param pulumi.Input[str] sddc_name: Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
        :param pulumi.Input[str] vcenter_hostname: IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
        :param pulumi.Input[str] vcenter_password: Password used to authenticate to the cloud Account.
        :param pulumi.Input[str] vcenter_username: vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
        :param pulumi.Input[bool] accept_self_signed_cert: Accept self-signed certificate when connecting to the cloud account.
        :param pulumi.Input[str] dc_id: Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[Sequence[pulumi.Input['VmcTagArgs']]] tags: Set of tag keys and values to apply to the cloud account.  
               Example:[ { "key" : "vmware", "value": "provider" } ]
        """
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "nsx_hostname", nsx_hostname)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "sddc_name", sddc_name)
        pulumi.set(__self__, "vcenter_hostname", vcenter_hostname)
        pulumi.set(__self__, "vcenter_password", vcenter_password)
        pulumi.set(__self__, "vcenter_username", vcenter_username)
        if accept_self_signed_cert is not None:
            pulumi.set(__self__, "accept_self_signed_cert", accept_self_signed_cert)
        if dc_id is not None:
            pulumi.set(__self__, "dc_id", dc_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        """
        VMC API access key.
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="nsxHostname")
    def nsx_hostname(self) -> pulumi.Input[str]:
        """
        IP address of the NSX Manager server in the specified SDDC / FQDN.
        """
        return pulumi.get(self, "nsx_hostname")

    @nsx_hostname.setter
    def nsx_hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "nsx_hostname", value)

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Set of region names enabled for the cloud account.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="sddcName")
    def sddc_name(self) -> pulumi.Input[str]:
        """
        Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
        """
        return pulumi.get(self, "sddc_name")

    @sddc_name.setter
    def sddc_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sddc_name", value)

    @property
    @pulumi.getter(name="vcenterHostname")
    def vcenter_hostname(self) -> pulumi.Input[str]:
        """
        IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
        """
        return pulumi.get(self, "vcenter_hostname")

    @vcenter_hostname.setter
    def vcenter_hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "vcenter_hostname", value)

    @property
    @pulumi.getter(name="vcenterPassword")
    def vcenter_password(self) -> pulumi.Input[str]:
        """
        Password used to authenticate to the cloud Account.
        """
        return pulumi.get(self, "vcenter_password")

    @vcenter_password.setter
    def vcenter_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "vcenter_password", value)

    @property
    @pulumi.getter(name="vcenterUsername")
    def vcenter_username(self) -> pulumi.Input[str]:
        """
        vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
        """
        return pulumi.get(self, "vcenter_username")

    @vcenter_username.setter
    def vcenter_username(self, value: pulumi.Input[str]):
        pulumi.set(self, "vcenter_username", value)

    @property
    @pulumi.getter(name="acceptSelfSignedCert")
    def accept_self_signed_cert(self) -> Optional[pulumi.Input[bool]]:
        """
        Accept self-signed certificate when connecting to the cloud account.
        """
        return pulumi.get(self, "accept_self_signed_cert")

    @accept_self_signed_cert.setter
    def accept_self_signed_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_self_signed_cert", value)

    @property
    @pulumi.getter(name="dcId")
    def dc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
        """
        return pulumi.get(self, "dc_id")

    @dc_id.setter
    def dc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dc_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmcTagArgs']]]]:
        """
        Set of tag keys and values to apply to the cloud account.  
        Example:[ { "key" : "vmware", "value": "provider" } ]
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmcTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _VmcState:
    def __init__(__self__, *,
                 accept_self_signed_cert: Optional[pulumi.Input[bool]] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 dc_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['VmcLinkArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nsx_hostname: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sddc_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['VmcTagArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 vcenter_hostname: Optional[pulumi.Input[str]] = None,
                 vcenter_password: Optional[pulumi.Input[str]] = None,
                 vcenter_username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Vmc resources.
        :param pulumi.Input[bool] accept_self_signed_cert: Accept self-signed certificate when connecting to the cloud account.
        :param pulumi.Input[str] api_token: VMC API access key.
        :param pulumi.Input[str] created_at: Date when entity was created. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] dc_id: Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[Sequence[pulumi.Input['VmcLinkArgs']]] links: HATEOAS of entity.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] nsx_hostname: IP address of the NSX Manager server in the specified SDDC / FQDN.
        :param pulumi.Input[str] org_id: ID of organization that entity belongs to.
        :param pulumi.Input[str] owner: Email of entity owner.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: Set of region names enabled for the cloud account.
        :param pulumi.Input[str] sddc_name: Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
        :param pulumi.Input[Sequence[pulumi.Input['VmcTagArgs']]] tags: Set of tag keys and values to apply to the cloud account.  
               Example:[ { "key" : "vmware", "value": "provider" } ]
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] vcenter_hostname: IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
        :param pulumi.Input[str] vcenter_password: Password used to authenticate to the cloud Account.
        :param pulumi.Input[str] vcenter_username: vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
        """
        if accept_self_signed_cert is not None:
            pulumi.set(__self__, "accept_self_signed_cert", accept_self_signed_cert)
        if api_token is not None:
            pulumi.set(__self__, "api_token", api_token)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dc_id is not None:
            pulumi.set(__self__, "dc_id", dc_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nsx_hostname is not None:
            pulumi.set(__self__, "nsx_hostname", nsx_hostname)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if sddc_name is not None:
            pulumi.set(__self__, "sddc_name", sddc_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vcenter_hostname is not None:
            pulumi.set(__self__, "vcenter_hostname", vcenter_hostname)
        if vcenter_password is not None:
            pulumi.set(__self__, "vcenter_password", vcenter_password)
        if vcenter_username is not None:
            pulumi.set(__self__, "vcenter_username", vcenter_username)

    @property
    @pulumi.getter(name="acceptSelfSignedCert")
    def accept_self_signed_cert(self) -> Optional[pulumi.Input[bool]]:
        """
        Accept self-signed certificate when connecting to the cloud account.
        """
        return pulumi.get(self, "accept_self_signed_cert")

    @accept_self_signed_cert.setter
    def accept_self_signed_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_self_signed_cert", value)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> Optional[pulumi.Input[str]]:
        """
        VMC API access key.
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dcId")
    def dc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
        """
        return pulumi.get(self, "dc_id")

    @dc_id.setter
    def dc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dc_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmcLinkArgs']]]]:
        """
        HATEOAS of entity.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmcLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nsxHostname")
    def nsx_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the NSX Manager server in the specified SDDC / FQDN.
        """
        return pulumi.get(self, "nsx_hostname")

    @nsx_hostname.setter
    def nsx_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nsx_hostname", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of organization that entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Email of entity owner.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of region names enabled for the cloud account.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="sddcName")
    def sddc_name(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
        """
        return pulumi.get(self, "sddc_name")

    @sddc_name.setter
    def sddc_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sddc_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmcTagArgs']]]]:
        """
        Set of tag keys and values to apply to the cloud account.  
        Example:[ { "key" : "vmware", "value": "provider" } ]
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmcTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="vcenterHostname")
    def vcenter_hostname(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
        """
        return pulumi.get(self, "vcenter_hostname")

    @vcenter_hostname.setter
    def vcenter_hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_hostname", value)

    @property
    @pulumi.getter(name="vcenterPassword")
    def vcenter_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password used to authenticate to the cloud Account.
        """
        return pulumi.get(self, "vcenter_password")

    @vcenter_password.setter
    def vcenter_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_password", value)

    @property
    @pulumi.getter(name="vcenterUsername")
    def vcenter_username(self) -> Optional[pulumi.Input[str]]:
        """
        vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
        """
        return pulumi.get(self, "vcenter_username")

    @vcenter_username.setter
    def vcenter_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcenter_username", value)


class Vmc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_self_signed_cert: Optional[pulumi.Input[bool]] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 dc_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nsx_hostname: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sddc_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmcTagArgs']]]]] = None,
                 vcenter_hostname: Optional[pulumi.Input[str]] = None,
                 vcenter_password: Optional[pulumi.Input[str]] = None,
                 vcenter_username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a VMware vRealize Automation VMC cloud account resource.

        ## Example Usage
        ### S

        **Create VMC cloud account:**

        The following example shows how to create a VMC cloud account resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.cloudaccount.Vmc("this",
            description="tf test vmc cloud account",
            api_token=var["api_token"],
            sddc_name=var["sddc_name"],
            vcenter_hostname=var["vcenter_hostname"],
            vcenter_password=var["vcenter_password"],
            vcenter_username=var["vcenter_username"],
            nsx_hostname=var["nsx_hostname"],
            dc_id=var["data_collector_id"],
            regions=var["regions"],
            accept_self_signed_cert=True,
            tags=[vra.cloudaccount.VmcTagArgs(
                key="foo",
                value="bar",
            )])
        ```

        ## Import

        To import the VMC cloud account, use the ID as in the following example

        ```sh
         $ pulumi import vra:cloudaccount/vmc:Vmc new_vmc 05956583-6488-4e7d-84c9-92a7b7219a15`
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_self_signed_cert: Accept self-signed certificate when connecting to the cloud account.
        :param pulumi.Input[str] api_token: VMC API access key.
        :param pulumi.Input[str] dc_id: Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] nsx_hostname: IP address of the NSX Manager server in the specified SDDC / FQDN.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: Set of region names enabled for the cloud account.
        :param pulumi.Input[str] sddc_name: Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmcTagArgs']]]] tags: Set of tag keys and values to apply to the cloud account.  
               Example:[ { "key" : "vmware", "value": "provider" } ]
        :param pulumi.Input[str] vcenter_hostname: IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
        :param pulumi.Input[str] vcenter_password: Password used to authenticate to the cloud Account.
        :param pulumi.Input[str] vcenter_username: vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmcArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a VMware vRealize Automation VMC cloud account resource.

        ## Example Usage
        ### S

        **Create VMC cloud account:**

        The following example shows how to create a VMC cloud account resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.cloudaccount.Vmc("this",
            description="tf test vmc cloud account",
            api_token=var["api_token"],
            sddc_name=var["sddc_name"],
            vcenter_hostname=var["vcenter_hostname"],
            vcenter_password=var["vcenter_password"],
            vcenter_username=var["vcenter_username"],
            nsx_hostname=var["nsx_hostname"],
            dc_id=var["data_collector_id"],
            regions=var["regions"],
            accept_self_signed_cert=True,
            tags=[vra.cloudaccount.VmcTagArgs(
                key="foo",
                value="bar",
            )])
        ```

        ## Import

        To import the VMC cloud account, use the ID as in the following example

        ```sh
         $ pulumi import vra:cloudaccount/vmc:Vmc new_vmc 05956583-6488-4e7d-84c9-92a7b7219a15`
        ```

        :param str resource_name: The name of the resource.
        :param VmcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_self_signed_cert: Optional[pulumi.Input[bool]] = None,
                 api_token: Optional[pulumi.Input[str]] = None,
                 dc_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nsx_hostname: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sddc_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmcTagArgs']]]]] = None,
                 vcenter_hostname: Optional[pulumi.Input[str]] = None,
                 vcenter_password: Optional[pulumi.Input[str]] = None,
                 vcenter_username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmcArgs.__new__(VmcArgs)

            __props__.__dict__["accept_self_signed_cert"] = accept_self_signed_cert
            if api_token is None and not opts.urn:
                raise TypeError("Missing required property 'api_token'")
            __props__.__dict__["api_token"] = api_token
            __props__.__dict__["dc_id"] = dc_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if nsx_hostname is None and not opts.urn:
                raise TypeError("Missing required property 'nsx_hostname'")
            __props__.__dict__["nsx_hostname"] = nsx_hostname
            if regions is None and not opts.urn:
                raise TypeError("Missing required property 'regions'")
            __props__.__dict__["regions"] = regions
            if sddc_name is None and not opts.urn:
                raise TypeError("Missing required property 'sddc_name'")
            __props__.__dict__["sddc_name"] = sddc_name
            __props__.__dict__["tags"] = tags
            if vcenter_hostname is None and not opts.urn:
                raise TypeError("Missing required property 'vcenter_hostname'")
            __props__.__dict__["vcenter_hostname"] = vcenter_hostname
            if vcenter_password is None and not opts.urn:
                raise TypeError("Missing required property 'vcenter_password'")
            __props__.__dict__["vcenter_password"] = vcenter_password
            if vcenter_username is None and not opts.urn:
                raise TypeError("Missing required property 'vcenter_username'")
            __props__.__dict__["vcenter_username"] = vcenter_username
            __props__.__dict__["created_at"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["updated_at"] = None
        super(Vmc, __self__).__init__(
            'vra:cloudaccount/vmc:Vmc',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_self_signed_cert: Optional[pulumi.Input[bool]] = None,
            api_token: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            dc_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmcLinkArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nsx_hostname: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            sddc_name: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmcTagArgs']]]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            vcenter_hostname: Optional[pulumi.Input[str]] = None,
            vcenter_password: Optional[pulumi.Input[str]] = None,
            vcenter_username: Optional[pulumi.Input[str]] = None) -> 'Vmc':
        """
        Get an existing Vmc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_self_signed_cert: Accept self-signed certificate when connecting to the cloud account.
        :param pulumi.Input[str] api_token: VMC API access key.
        :param pulumi.Input[str] created_at: Date when entity was created. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] dc_id: Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
        :param pulumi.Input[str] description: Human-friendly description.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmcLinkArgs']]]] links: HATEOAS of entity.
        :param pulumi.Input[str] name: Human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] nsx_hostname: IP address of the NSX Manager server in the specified SDDC / FQDN.
        :param pulumi.Input[str] org_id: ID of organization that entity belongs to.
        :param pulumi.Input[str] owner: Email of entity owner.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: Set of region names enabled for the cloud account.
        :param pulumi.Input[str] sddc_name: Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmcTagArgs']]]] tags: Set of tag keys and values to apply to the cloud account.  
               Example:[ { "key" : "vmware", "value": "provider" } ]
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] vcenter_hostname: IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
        :param pulumi.Input[str] vcenter_password: Password used to authenticate to the cloud Account.
        :param pulumi.Input[str] vcenter_username: vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmcState.__new__(_VmcState)

        __props__.__dict__["accept_self_signed_cert"] = accept_self_signed_cert
        __props__.__dict__["api_token"] = api_token
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dc_id"] = dc_id
        __props__.__dict__["description"] = description
        __props__.__dict__["links"] = links
        __props__.__dict__["name"] = name
        __props__.__dict__["nsx_hostname"] = nsx_hostname
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["owner"] = owner
        __props__.__dict__["regions"] = regions
        __props__.__dict__["sddc_name"] = sddc_name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["vcenter_hostname"] = vcenter_hostname
        __props__.__dict__["vcenter_password"] = vcenter_password
        __props__.__dict__["vcenter_username"] = vcenter_username
        return Vmc(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceptSelfSignedCert")
    def accept_self_signed_cert(self) -> pulumi.Output[Optional[bool]]:
        """
        Accept self-signed certificate when connecting to the cloud account.
        """
        return pulumi.get(self, "accept_self_signed_cert")

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Output[str]:
        """
        VMC API access key.
        """
        return pulumi.get(self, "api_token")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Date when entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dcId")
    def dc_id(self) -> pulumi.Output[Optional[str]]:
        """
        Identifier of a data collector VM deployed in the on premise infrastructure. Refer to the data-collector API to create or list data collector.
        """
        return pulumi.get(self, "dc_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.VmcLink']]:
        """
        HATEOAS of entity.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsxHostname")
    def nsx_hostname(self) -> pulumi.Output[str]:
        """
        IP address of the NSX Manager server in the specified SDDC / FQDN.
        """
        return pulumi.get(self, "nsx_hostname")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        ID of organization that entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        Email of entity owner.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of region names enabled for the cloud account.
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="sddcName")
    def sddc_name(self) -> pulumi.Output[str]:
        """
        Identifier of the on-premise SDDC to be used by the cloud account. Note that NSX-V SDDCs are not supported.
        """
        return pulumi.get(self, "sddc_name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.VmcTag']]:
        """
        Set of tag keys and values to apply to the cloud account.  
        Example:[ { "key" : "vmware", "value": "provider" } ]
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="vcenterHostname")
    def vcenter_hostname(self) -> pulumi.Output[str]:
        """
        IP address or FQDN of the vCenter Server in the specified SDDC. The cloud proxy belongs on this vCenter.
        """
        return pulumi.get(self, "vcenter_hostname")

    @property
    @pulumi.getter(name="vcenterPassword")
    def vcenter_password(self) -> pulumi.Output[str]:
        """
        Password used to authenticate to the cloud Account.
        """
        return pulumi.get(self, "vcenter_password")

    @property
    @pulumi.getter(name="vcenterUsername")
    def vcenter_username(self) -> pulumi.Output[str]:
        """
        vCenter user name for the specified SDDC. The user requires CloudAdmin credentials. The user does not require CloudGlobalAdmin credentials.
        """
        return pulumi.get(self, "vcenter_username")

