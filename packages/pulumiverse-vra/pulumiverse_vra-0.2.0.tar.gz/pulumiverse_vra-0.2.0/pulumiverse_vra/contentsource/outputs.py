# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ContentSourceConfig',
]

@pulumi.output_type
class ContentSourceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "integrationId":
            suggest = "integration_id"
        elif key == "projectName":
            suggest = "project_name"
        elif key == "contentType":
            suggest = "content_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContentSourceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContentSourceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContentSourceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 integration_id: str,
                 path: str,
                 project_name: str,
                 branch: Optional[str] = None,
                 content_type: Optional[str] = None,
                 repository: Optional[str] = None):
        """
        :param str integration_id: Content source integration id as seen in vRA integrations.
        :param str path: Path to refer to in the content source repository and branch.
        :param str project_name: Name of the project.
        :param str branch: Content source branch name.
        :param str content_type: Content source type. Supported values are `BLUEPRINT`, `IMAGE`, `ABX_SCRIPTS`, `TERRAFORM_CONFIGURATION`.
        :param str repository: Content source repository.
        """
        pulumi.set(__self__, "integration_id", integration_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "project_name", project_name)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> str:
        """
        Content source integration id as seen in vRA integrations.
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to refer to in the content source repository and branch.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        Name of the project.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        """
        Content source branch name.
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[str]:
        """
        Content source type. Supported values are `BLUEPRINT`, `IMAGE`, `ABX_SCRIPTS`, `TERRAFORM_CONFIGURATION`.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def repository(self) -> Optional[str]:
        """
        Content source repository.
        """
        return pulumi.get(self, "repository")


