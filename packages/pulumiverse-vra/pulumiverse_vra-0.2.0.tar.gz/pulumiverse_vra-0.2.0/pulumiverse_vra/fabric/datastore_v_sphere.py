# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DatastoreVSphereArgs', 'DatastoreVSphere']

@pulumi.input_type
class DatastoreVSphereArgs:
    def __init__(__self__, *,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereTagArgs']]]] = None):
        """
        The set of arguments for constructing a DatastoreVSphere resource.
        :param pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereTagArgs']]] tags: A set of tag keys and optional values that were set on this resource:
        """
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereTagArgs']]]]:
        """
        A set of tag keys and optional values that were set on this resource:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _DatastoreVSphereState:
    def __init__(__self__, *,
                 cloud_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 external_region_id: Optional[pulumi.Input[str]] = None,
                 free_size_gb: Optional[pulumi.Input[str]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereLinkArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DatastoreVSphere resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cloud_account_ids: Set of ids of the cloud accounts this entity belongs to.
        :param pulumi.Input[str] created_at: Date when the entity was created. The date is in ISO 8601 and UTC.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] external_id: External entity Id on the provider side.
        :param pulumi.Input[str] external_region_id: Id of datacenter in which the datastore is present.
        :param pulumi.Input[str] free_size_gb: Indicates free size available in datastore.
        :param pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereLinkArgs']]] links: HATEOAS of the entity
        :param pulumi.Input[str] name: A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.
        :param pulumi.Input[str] org_id: The id of the organization this entity belongs to.
        :param pulumi.Input[str] owner: Email of the user that owns the entity.
        :param pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereTagArgs']]] tags: A set of tag keys and optional values that were set on this resource:
        :param pulumi.Input[str] type: Type of datastore.
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        if cloud_account_ids is not None:
            pulumi.set(__self__, "cloud_account_ids", cloud_account_ids)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if external_region_id is not None:
            pulumi.set(__self__, "external_region_id", external_region_id)
        if free_size_gb is not None:
            pulumi.set(__self__, "free_size_gb", free_size_gb)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="cloudAccountIds")
    def cloud_account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of ids of the cloud accounts this entity belongs to.
        """
        return pulumi.get(self, "cloud_account_ids")

    @cloud_account_ids.setter
    def cloud_account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cloud_account_ids", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when the entity was created. The date is in ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        External entity Id on the provider side.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> Optional[pulumi.Input[str]]:
        """
        Id of datacenter in which the datastore is present.
        """
        return pulumi.get(self, "external_region_id")

    @external_region_id.setter
    def external_region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_region_id", value)

    @property
    @pulumi.getter(name="freeSizeGb")
    def free_size_gb(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates free size available in datastore.
        """
        return pulumi.get(self, "free_size_gb")

    @free_size_gb.setter
    def free_size_gb(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "free_size_gb", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereLinkArgs']]]]:
        """
        HATEOAS of the entity
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the organization this entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereTagArgs']]]]:
        """
        A set of tag keys and optional values that were set on this resource:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatastoreVSphereTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of datastore.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class DatastoreVSphere(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatastoreVSphereTagArgs']]]]] = None,
                 __props__=None):
        """
        Updates a VMware vRealize Automation fabric_datastore_vsphere resource.

        ## Example Usage
        ### S

        You cannot create a fabric datastore vSphere resource, however you can import it using the command specified in the import section below.

        Once a resource is imported, you can update it as shown below:

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.fabric.DatastoreVSphere("this", tags=[vra.fabric.DatastoreVSphereTagArgs(
            key="foo",
            value="bar",
        )])
        ```

        ## Import

        To import the fabric datastore vSphere resource, use the ID as in the following example

        ```sh
         $ pulumi import vra:fabric/datastoreVSphere:DatastoreVSphere this 8e0c9a4c-3ab8-48e8-b9d5-0751c871e282
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatastoreVSphereTagArgs']]]] tags: A set of tag keys and optional values that were set on this resource:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DatastoreVSphereArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Updates a VMware vRealize Automation fabric_datastore_vsphere resource.

        ## Example Usage
        ### S

        You cannot create a fabric datastore vSphere resource, however you can import it using the command specified in the import section below.

        Once a resource is imported, you can update it as shown below:

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.fabric.DatastoreVSphere("this", tags=[vra.fabric.DatastoreVSphereTagArgs(
            key="foo",
            value="bar",
        )])
        ```

        ## Import

        To import the fabric datastore vSphere resource, use the ID as in the following example

        ```sh
         $ pulumi import vra:fabric/datastoreVSphere:DatastoreVSphere this 8e0c9a4c-3ab8-48e8-b9d5-0751c871e282
        ```

        :param str resource_name: The name of the resource.
        :param DatastoreVSphereArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatastoreVSphereArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatastoreVSphereTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatastoreVSphereArgs.__new__(DatastoreVSphereArgs)

            __props__.__dict__["tags"] = tags
            __props__.__dict__["cloud_account_ids"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["external_id"] = None
            __props__.__dict__["external_region_id"] = None
            __props__.__dict__["free_size_gb"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["updated_at"] = None
        super(DatastoreVSphere, __self__).__init__(
            'vra:fabric/datastoreVSphere:DatastoreVSphere',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            external_id: Optional[pulumi.Input[str]] = None,
            external_region_id: Optional[pulumi.Input[str]] = None,
            free_size_gb: Optional[pulumi.Input[str]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatastoreVSphereLinkArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatastoreVSphereTagArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'DatastoreVSphere':
        """
        Get an existing DatastoreVSphere resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cloud_account_ids: Set of ids of the cloud accounts this entity belongs to.
        :param pulumi.Input[str] created_at: Date when the entity was created. The date is in ISO 8601 and UTC.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] external_id: External entity Id on the provider side.
        :param pulumi.Input[str] external_region_id: Id of datacenter in which the datastore is present.
        :param pulumi.Input[str] free_size_gb: Indicates free size available in datastore.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatastoreVSphereLinkArgs']]]] links: HATEOAS of the entity
        :param pulumi.Input[str] name: A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.
        :param pulumi.Input[str] org_id: The id of the organization this entity belongs to.
        :param pulumi.Input[str] owner: Email of the user that owns the entity.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DatastoreVSphereTagArgs']]]] tags: A set of tag keys and optional values that were set on this resource:
        :param pulumi.Input[str] type: Type of datastore.
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatastoreVSphereState.__new__(_DatastoreVSphereState)

        __props__.__dict__["cloud_account_ids"] = cloud_account_ids
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["external_id"] = external_id
        __props__.__dict__["external_region_id"] = external_region_id
        __props__.__dict__["free_size_gb"] = free_size_gb
        __props__.__dict__["links"] = links
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["owner"] = owner
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        return DatastoreVSphere(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudAccountIds")
    def cloud_account_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Set of ids of the cloud accounts this entity belongs to.
        """
        return pulumi.get(self, "cloud_account_ids")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Date when the entity was created. The date is in ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Output[str]:
        """
        External entity Id on the provider side.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> pulumi.Output[str]:
        """
        Id of datacenter in which the datastore is present.
        """
        return pulumi.get(self, "external_region_id")

    @property
    @pulumi.getter(name="freeSizeGb")
    def free_size_gb(self) -> pulumi.Output[str]:
        """
        Indicates free size available in datastore.
        """
        return pulumi.get(self, "free_size_gb")

    @property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.DatastoreVSphereLink']]:
        """
        HATEOAS of the entity
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        The id of the organization this entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.DatastoreVSphereTag']]:
        """
        A set of tag keys and optional values that were set on this resource:
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of datastore.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

