# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetComputeResult',
    'AwaitableGetComputeResult',
    'get_compute',
    'get_compute_output',
]

@pulumi.output_type
class GetComputeResult:
    """
    A collection of values returned by getCompute.
    """
    def __init__(__self__, created_at=None, custom_properties=None, description=None, external_id=None, external_region_id=None, external_zone_id=None, filter=None, id=None, lifecycle_state=None, links=None, name=None, org_id=None, owner=None, power_state=None, tags=None, type=None, updated_at=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if custom_properties and not isinstance(custom_properties, dict):
            raise TypeError("Expected argument 'custom_properties' to be a dict")
        pulumi.set(__self__, "custom_properties", custom_properties)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if external_region_id and not isinstance(external_region_id, str):
            raise TypeError("Expected argument 'external_region_id' to be a str")
        pulumi.set(__self__, "external_region_id", external_region_id)
        if external_zone_id and not isinstance(external_zone_id, str):
            raise TypeError("Expected argument 'external_zone_id' to be a str")
        pulumi.set(__self__, "external_zone_id", external_zone_id)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lifecycle_state and not isinstance(lifecycle_state, str):
            raise TypeError("Expected argument 'lifecycle_state' to be a str")
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if power_state and not isinstance(power_state, str):
            raise TypeError("Expected argument 'power_state' to be a str")
        pulumi.set(__self__, "power_state", power_state)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Date when the entity was created. The date is in ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Mapping[str, Any]:
        """
        A list of key value pair of custom properties for the fabric compute resource.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        The id of the external entity on the provider side.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> str:
        """
        The external region id of the fabric compute.
        """
        return pulumi.get(self, "external_region_id")

    @property
    @pulumi.getter(name="externalZoneId")
    def external_zone_id(self) -> str:
        """
        The external zone id of the fabric compute.
        """
        return pulumi.get(self, "external_zone_id")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> str:
        """
        Lifecycle status of the compute instance.
        """
        return pulumi.get(self, "lifecycle_state")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetComputeLinkResult']:
        """
        HATEOAS of the entity.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-friendly name used as an identifier for the fabric compute resource instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        The id of the organization this entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> str:
        """
        Power state of fabric compute instance.
        """
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetComputeTagResult']:
        """
        A set of tag keys and optional values that were set on this resource:
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the fabric compute instance.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetComputeResult(GetComputeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeResult(
            created_at=self.created_at,
            custom_properties=self.custom_properties,
            description=self.description,
            external_id=self.external_id,
            external_region_id=self.external_region_id,
            external_zone_id=self.external_zone_id,
            filter=self.filter,
            id=self.id,
            lifecycle_state=self.lifecycle_state,
            links=self.links,
            name=self.name,
            org_id=self.org_id,
            owner=self.owner,
            power_state=self.power_state,
            tags=self.tags,
            type=self.type,
            updated_at=self.updated_at)


def get_compute(filter: Optional[str] = None,
                id: Optional[str] = None,
                tags: Optional[Sequence[pulumi.InputType['GetComputeTagArgs']]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeResult:
    """
    ## Example Usage
    ### S

    This is an example of how to lookup fabric computes.

    **Fabric compute data source by Id:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.fabric.get_compute(id=var["fabric_compute_id"])
    ```

    **Fabric compute data source by filter query:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.fabric.get_compute(filter=f"name eq '{var['fabric_compute_name']}'")
    ```

    A fabric compute data source supports the following arguments:


    :param str filter: Search criteria to narrow down the fabric compute resource instance. Only one of 'id' or 'filter' must be specified.
    :param str id: The id of the fabric compute resource instance. Only one of 'id' or 'filter' must be specified.
    :param Sequence[pulumi.InputType['GetComputeTagArgs']] tags: A set of tag keys and optional values that were set on this resource:
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['id'] = id
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vra:fabric/getCompute:getCompute', __args__, opts=opts, typ=GetComputeResult).value

    return AwaitableGetComputeResult(
        created_at=__ret__.created_at,
        custom_properties=__ret__.custom_properties,
        description=__ret__.description,
        external_id=__ret__.external_id,
        external_region_id=__ret__.external_region_id,
        external_zone_id=__ret__.external_zone_id,
        filter=__ret__.filter,
        id=__ret__.id,
        lifecycle_state=__ret__.lifecycle_state,
        links=__ret__.links,
        name=__ret__.name,
        org_id=__ret__.org_id,
        owner=__ret__.owner,
        power_state=__ret__.power_state,
        tags=__ret__.tags,
        type=__ret__.type,
        updated_at=__ret__.updated_at)


@_utilities.lift_output_func(get_compute)
def get_compute_output(filter: Optional[pulumi.Input[Optional[str]]] = None,
                       id: Optional[pulumi.Input[Optional[str]]] = None,
                       tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetComputeTagArgs']]]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetComputeResult]:
    """
    ## Example Usage
    ### S

    This is an example of how to lookup fabric computes.

    **Fabric compute data source by Id:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.fabric.get_compute(id=var["fabric_compute_id"])
    ```

    **Fabric compute data source by filter query:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.fabric.get_compute(filter=f"name eq '{var['fabric_compute_name']}'")
    ```

    A fabric compute data source supports the following arguments:


    :param str filter: Search criteria to narrow down the fabric compute resource instance. Only one of 'id' or 'filter' must be specified.
    :param str id: The id of the fabric compute resource instance. Only one of 'id' or 'filter' must be specified.
    :param Sequence[pulumi.InputType['GetComputeTagArgs']] tags: A set of tag keys and optional values that were set on this resource:
    """
    ...
