# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDatastoreVSphereResult',
    'AwaitableGetDatastoreVSphereResult',
    'get_datastore_v_sphere',
    'get_datastore_v_sphere_output',
]

@pulumi.output_type
class GetDatastoreVSphereResult:
    """
    A collection of values returned by getDatastoreVSphere.
    """
    def __init__(__self__, cloud_account_ids=None, created_at=None, description=None, external_id=None, external_region_id=None, filter=None, free_size_gb=None, id=None, links=None, name=None, org_id=None, owner=None, tags=None, type=None, updated_at=None):
        if cloud_account_ids and not isinstance(cloud_account_ids, list):
            raise TypeError("Expected argument 'cloud_account_ids' to be a list")
        pulumi.set(__self__, "cloud_account_ids", cloud_account_ids)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if external_region_id and not isinstance(external_region_id, str):
            raise TypeError("Expected argument 'external_region_id' to be a str")
        pulumi.set(__self__, "external_region_id", external_region_id)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if free_size_gb and not isinstance(free_size_gb, str):
            raise TypeError("Expected argument 'free_size_gb' to be a str")
        pulumi.set(__self__, "free_size_gb", free_size_gb)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="cloudAccountIds")
    def cloud_account_ids(self) -> Sequence[str]:
        """
        Set of ids of the cloud accounts this entity belongs to.
        """
        return pulumi.get(self, "cloud_account_ids")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Date when the entity was created. The date is in ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        External entity Id on the provider side.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> str:
        """
        Id of datacenter in which the datastore is present.
        """
        return pulumi.get(self, "external_region_id")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="freeSizeGb")
    def free_size_gb(self) -> str:
        """
        Indicates free size available in datastore.
        """
        return pulumi.get(self, "free_size_gb")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetDatastoreVSphereLinkResult']:
        """
        HATEOAS of the entity
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-friendly name used as an identifier for the vSphere fabric datastore resource instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        The id of the organization this entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDatastoreVSphereTagResult']:
        """
        A set of tag keys and optional values that were set on this resource:
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of datastore.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetDatastoreVSphereResult(GetDatastoreVSphereResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatastoreVSphereResult(
            cloud_account_ids=self.cloud_account_ids,
            created_at=self.created_at,
            description=self.description,
            external_id=self.external_id,
            external_region_id=self.external_region_id,
            filter=self.filter,
            free_size_gb=self.free_size_gb,
            id=self.id,
            links=self.links,
            name=self.name,
            org_id=self.org_id,
            owner=self.owner,
            tags=self.tags,
            type=self.type,
            updated_at=self.updated_at)


def get_datastore_v_sphere(filter: Optional[str] = None,
                           id: Optional[str] = None,
                           tags: Optional[Sequence[pulumi.InputType['GetDatastoreVSphereTagArgs']]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatastoreVSphereResult:
    """
    ## Example Usage
    ### S
    This is an example of how to lookup vSphere fabric datastores.

    **vSphere fabric datastore data source by Id:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.fabric.get_datastore_v_sphere(id=var["fabric_datastore_vsphere_id"])
    ```

    **vSphere fabric datastore data source by filter query:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.fabric.get_datastore_v_sphere(filter=f"name eq '{var['datastore_name']}'")
    ```

    A vSphere fabric datastore data source supports the following arguments:


    :param str filter: Search criteria to narrow down the vSphere fabric datastore resource instance. Only one of 'id' or 'filter' must be specified.
    :param str id: The id of the vSphere fabric datastore resource instance. Only one of 'id' or 'filter' must be specified.
    :param Sequence[pulumi.InputType['GetDatastoreVSphereTagArgs']] tags: A set of tag keys and optional values that were set on this resource:
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['id'] = id
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vra:fabric/getDatastoreVSphere:getDatastoreVSphere', __args__, opts=opts, typ=GetDatastoreVSphereResult).value

    return AwaitableGetDatastoreVSphereResult(
        cloud_account_ids=__ret__.cloud_account_ids,
        created_at=__ret__.created_at,
        description=__ret__.description,
        external_id=__ret__.external_id,
        external_region_id=__ret__.external_region_id,
        filter=__ret__.filter,
        free_size_gb=__ret__.free_size_gb,
        id=__ret__.id,
        links=__ret__.links,
        name=__ret__.name,
        org_id=__ret__.org_id,
        owner=__ret__.owner,
        tags=__ret__.tags,
        type=__ret__.type,
        updated_at=__ret__.updated_at)


@_utilities.lift_output_func(get_datastore_v_sphere)
def get_datastore_v_sphere_output(filter: Optional[pulumi.Input[Optional[str]]] = None,
                                  id: Optional[pulumi.Input[Optional[str]]] = None,
                                  tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetDatastoreVSphereTagArgs']]]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatastoreVSphereResult]:
    """
    ## Example Usage
    ### S
    This is an example of how to lookup vSphere fabric datastores.

    **vSphere fabric datastore data source by Id:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.fabric.get_datastore_v_sphere(id=var["fabric_datastore_vsphere_id"])
    ```

    **vSphere fabric datastore data source by filter query:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.fabric.get_datastore_v_sphere(filter=f"name eq '{var['datastore_name']}'")
    ```

    A vSphere fabric datastore data source supports the following arguments:


    :param str filter: Search criteria to narrow down the vSphere fabric datastore resource instance. Only one of 'id' or 'filter' must be specified.
    :param str id: The id of the vSphere fabric datastore resource instance. Only one of 'id' or 'filter' must be specified.
    :param Sequence[pulumi.InputType['GetDatastoreVSphereTagArgs']] tags: A set of tag keys and optional values that were set on this resource:
    """
    ...
