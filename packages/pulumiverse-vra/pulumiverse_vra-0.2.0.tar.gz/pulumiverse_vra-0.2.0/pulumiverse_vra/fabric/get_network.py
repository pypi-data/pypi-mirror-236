# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNetworkResult',
    'AwaitableGetNetworkResult',
    'get_network',
    'get_network_output',
]

@pulumi.output_type
class GetNetworkResult:
    """
    A collection of values returned by getNetwork.
    """
    def __init__(__self__, cidr=None, cloud_account_ids=None, created_at=None, custom_properties=None, description=None, external_id=None, external_region_id=None, filter=None, id=None, is_default=None, is_public=None, links=None, name=None, organization_id=None, owner=None, tags=None, updated_at=None):
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if cloud_account_ids and not isinstance(cloud_account_ids, list):
            raise TypeError("Expected argument 'cloud_account_ids' to be a list")
        pulumi.set(__self__, "cloud_account_ids", cloud_account_ids)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if custom_properties and not isinstance(custom_properties, dict):
            raise TypeError("Expected argument 'custom_properties' to be a dict")
        pulumi.set(__self__, "custom_properties", custom_properties)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if external_region_id and not isinstance(external_region_id, str):
            raise TypeError("Expected argument 'external_region_id' to be a str")
        pulumi.set(__self__, "external_region_id", external_region_id)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if is_public and not isinstance(is_public, bool):
            raise TypeError("Expected argument 'is_public' to be a bool")
        pulumi.set(__self__, "is_public", is_public)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        Network CIDR to be used.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="cloudAccountIds")
    def cloud_account_ids(self) -> Sequence[str]:
        """
        Set of ids of the cloud accounts this entity belongs to.
        """
        return pulumi.get(self, "cloud_account_ids")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Date when the entity was created. The date is in ISO 6801 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Mapping[str, Any]:
        """
        Additional properties that may be used to extend the base resource.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        State object representing a network on a external cloud provider.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        External entity Id on the provider side.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> str:
        """
        The id of the region for which this network is defined.
        """
        return pulumi.get(self, "external_region_id")

    @property
    @pulumi.getter
    def filter(self) -> str:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether this is the default subnet for the zone.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> bool:
        """
        Indicates whether the sub-network supports public IP assignment.
        """
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetNetworkLinkResult']:
        """
        HATEOAS of the entity
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the fabric network.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        ID of organization that entity belongs to.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNetworkTagResult']:
        """
        Set of tag keys and values to apply to the resource.
        Example:[ { "key" : "vmware", "value": "provider" } ]
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetNetworkResult(GetNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkResult(
            cidr=self.cidr,
            cloud_account_ids=self.cloud_account_ids,
            created_at=self.created_at,
            custom_properties=self.custom_properties,
            description=self.description,
            external_id=self.external_id,
            external_region_id=self.external_region_id,
            filter=self.filter,
            id=self.id,
            is_default=self.is_default,
            is_public=self.is_public,
            links=self.links,
            name=self.name,
            organization_id=self.organization_id,
            owner=self.owner,
            tags=self.tags,
            updated_at=self.updated_at)


def get_network(filter: Optional[str] = None,
                tags: Optional[Sequence[pulumi.InputType['GetNetworkTagArgs']]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkResult:
    """
    ## Example Usage
    ### S
    This is an example of how to lookup fabric networks.

    **Fabric network by filter query:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.fabric.get_network(filter=f"name eq '{var['name']}' and externalRegionId eq '{var['external_region_id']}'")
    ```

    A fabric network data source supports the following arguments:


    :param str filter: Filter query string that is supported by vRA multi-cloud IaaS API.
    :param Sequence[pulumi.InputType['GetNetworkTagArgs']] tags: Set of tag keys and values to apply to the resource.
           Example:[ { "key" : "vmware", "value": "provider" } ]
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vra:fabric/getNetwork:getNetwork', __args__, opts=opts, typ=GetNetworkResult).value

    return AwaitableGetNetworkResult(
        cidr=__ret__.cidr,
        cloud_account_ids=__ret__.cloud_account_ids,
        created_at=__ret__.created_at,
        custom_properties=__ret__.custom_properties,
        description=__ret__.description,
        external_id=__ret__.external_id,
        external_region_id=__ret__.external_region_id,
        filter=__ret__.filter,
        id=__ret__.id,
        is_default=__ret__.is_default,
        is_public=__ret__.is_public,
        links=__ret__.links,
        name=__ret__.name,
        organization_id=__ret__.organization_id,
        owner=__ret__.owner,
        tags=__ret__.tags,
        updated_at=__ret__.updated_at)


@_utilities.lift_output_func(get_network)
def get_network_output(filter: Optional[pulumi.Input[str]] = None,
                       tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNetworkTagArgs']]]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkResult]:
    """
    ## Example Usage
    ### S
    This is an example of how to lookup fabric networks.

    **Fabric network by filter query:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.fabric.get_network(filter=f"name eq '{var['name']}' and externalRegionId eq '{var['external_region_id']}'")
    ```

    A fabric network data source supports the following arguments:


    :param str filter: Filter query string that is supported by vRA multi-cloud IaaS API.
    :param Sequence[pulumi.InputType['GetNetworkTagArgs']] tags: Set of tag keys and values to apply to the resource.
           Example:[ { "key" : "vmware", "value": "provider" } ]
    """
    ...
