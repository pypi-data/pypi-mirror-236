# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProfileArgs', 'Profile']

@pulumi.input_type
class ProfileArgs:
    def __init__(__self__, *,
                 region_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 flavor_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFlavorMappingArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Profile resource.
        :param pulumi.Input[str] region_id: The id of the region for which this profile is defined as in vRealize Automation(vRA).
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFlavorMappingArgs']]] flavor_mappings: Map between global fabric flavor keys and fabric flavor descriptions.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        """
        pulumi.set(__self__, "region_id", region_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if flavor_mappings is not None:
            pulumi.set(__self__, "flavor_mappings", flavor_mappings)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[str]:
        """
        The id of the region for which this profile is defined as in vRealize Automation(vRA).
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="flavorMappings")
    def flavor_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFlavorMappingArgs']]]]:
        """
        Map between global fabric flavor keys and fabric flavor descriptions.
        """
        return pulumi.get(self, "flavor_mappings")

    @flavor_mappings.setter
    def flavor_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFlavorMappingArgs']]]]):
        pulumi.set(self, "flavor_mappings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ProfileState:
    def __init__(__self__, *,
                 cloud_account_id: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_region_id: Optional[pulumi.Input[str]] = None,
                 flavor_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFlavorMappingArgs']]]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileLinkArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Profile resources.
        :param pulumi.Input[str] cloud_account_id: The ID of the cloud account this entity belongs to.
        :param pulumi.Input[str] created_at: Date when  entity was created. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] external_region_id: The ID of the external region that is associated with the flavor profile.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileFlavorMappingArgs']]] flavor_mappings: Map between global fabric flavor keys and fabric flavor descriptions.
        :param pulumi.Input[Sequence[pulumi.Input['ProfileLinkArgs']]] links: HATEOAS of entity.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] org_id: ID of organization that entity belongs to.
        :param pulumi.Input[str] owner: Email of entity owner.
        :param pulumi.Input[str] region_id: The id of the region for which this profile is defined as in vRealize Automation(vRA).
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        if cloud_account_id is not None:
            pulumi.set(__self__, "cloud_account_id", cloud_account_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_region_id is not None:
            pulumi.set(__self__, "external_region_id", external_region_id)
        if flavor_mappings is not None:
            pulumi.set(__self__, "flavor_mappings", flavor_mappings)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="cloudAccountId")
    def cloud_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the cloud account this entity belongs to.
        """
        return pulumi.get(self, "cloud_account_id")

    @cloud_account_id.setter
    def cloud_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_account_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when  entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the external region that is associated with the flavor profile.
        """
        return pulumi.get(self, "external_region_id")

    @external_region_id.setter
    def external_region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_region_id", value)

    @property
    @pulumi.getter(name="flavorMappings")
    def flavor_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFlavorMappingArgs']]]]:
        """
        Map between global fabric flavor keys and fabric flavor descriptions.
        """
        return pulumi.get(self, "flavor_mappings")

    @flavor_mappings.setter
    def flavor_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileFlavorMappingArgs']]]]):
        pulumi.set(self, "flavor_mappings", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileLinkArgs']]]]:
        """
        HATEOAS of entity.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of organization that entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Email of entity owner.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the region for which this profile is defined as in vRealize Automation(vRA).
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class Profile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flavor_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileFlavorMappingArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage
        ### S
        This is an example of how to create a flavor profile resource.

        **Flavor profile:**

        ```python
        import pulumi
        import pulumiverse_vra as vra

        my_flavor_profile = vra.flavor.Profile("my-flavor-profile",
            description="my flavor",
            flavor_mappings=[
                vra.flavor.ProfileFlavorMappingArgs(
                    instance_type="t2.small",
                    name="small",
                ),
                vra.flavor.ProfileFlavorMappingArgs(
                    instance_type="t2.medium",
                    name="medium",
                ),
            ],
            region_id=data["vra_region"]["us-east-1-region"]["id"])
        ```

        An flavor profile resource supports the following arguments:

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileFlavorMappingArgs']]]] flavor_mappings: Map between global fabric flavor keys and fabric flavor descriptions.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] region_id: The id of the region for which this profile is defined as in vRealize Automation(vRA).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProfileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage
        ### S
        This is an example of how to create a flavor profile resource.

        **Flavor profile:**

        ```python
        import pulumi
        import pulumiverse_vra as vra

        my_flavor_profile = vra.flavor.Profile("my-flavor-profile",
            description="my flavor",
            flavor_mappings=[
                vra.flavor.ProfileFlavorMappingArgs(
                    instance_type="t2.small",
                    name="small",
                ),
                vra.flavor.ProfileFlavorMappingArgs(
                    instance_type="t2.medium",
                    name="medium",
                ),
            ],
            region_id=data["vra_region"]["us-east-1-region"]["id"])
        ```

        An flavor profile resource supports the following arguments:

        :param str resource_name: The name of the resource.
        :param ProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flavor_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileFlavorMappingArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProfileArgs.__new__(ProfileArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["flavor_mappings"] = flavor_mappings
            __props__.__dict__["name"] = name
            if region_id is None and not opts.urn:
                raise TypeError("Missing required property 'region_id'")
            __props__.__dict__["region_id"] = region_id
            __props__.__dict__["cloud_account_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["external_region_id"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["updated_at"] = None
        super(Profile, __self__).__init__(
            'vra:flavor/profile:Profile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_account_id: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            external_region_id: Optional[pulumi.Input[str]] = None,
            flavor_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileFlavorMappingArgs']]]]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileLinkArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            region_id: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'Profile':
        """
        Get an existing Profile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_account_id: The ID of the cloud account this entity belongs to.
        :param pulumi.Input[str] created_at: Date when  entity was created. Date and time format is ISO 8601 and UTC.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] external_region_id: The ID of the external region that is associated with the flavor profile.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileFlavorMappingArgs']]]] flavor_mappings: Map between global fabric flavor keys and fabric flavor descriptions.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProfileLinkArgs']]]] links: HATEOAS of entity.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] org_id: ID of organization that entity belongs to.
        :param pulumi.Input[str] owner: Email of entity owner.
        :param pulumi.Input[str] region_id: The id of the region for which this profile is defined as in vRealize Automation(vRA).
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProfileState.__new__(_ProfileState)

        __props__.__dict__["cloud_account_id"] = cloud_account_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["external_region_id"] = external_region_id
        __props__.__dict__["flavor_mappings"] = flavor_mappings
        __props__.__dict__["links"] = links
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["owner"] = owner
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["updated_at"] = updated_at
        return Profile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudAccountId")
    def cloud_account_id(self) -> pulumi.Output[str]:
        """
        The ID of the cloud account this entity belongs to.
        """
        return pulumi.get(self, "cloud_account_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Date when  entity was created. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> pulumi.Output[str]:
        """
        The ID of the external region that is associated with the flavor profile.
        """
        return pulumi.get(self, "external_region_id")

    @property
    @pulumi.getter(name="flavorMappings")
    def flavor_mappings(self) -> pulumi.Output[Optional[Sequence['outputs.ProfileFlavorMapping']]]:
        """
        Map between global fabric flavor keys and fabric flavor descriptions.
        """
        return pulumi.get(self, "flavor_mappings")

    @property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.ProfileLink']]:
        """
        HATEOAS of entity.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        ID of organization that entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        Email of entity owner.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[str]:
        """
        The id of the region for which this profile is defined as in vRealize Automation(vRA).
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Date when the entity was last updated. Date and time format is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

