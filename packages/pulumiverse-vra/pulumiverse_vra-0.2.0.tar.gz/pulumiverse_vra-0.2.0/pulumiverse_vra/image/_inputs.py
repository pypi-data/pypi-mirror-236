# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ProfileImageMappingArgs',
    'ProfileImageMappingConstraintArgs',
    'GetProfileImageMappingArgs',
    'GetProfileImageMappingConstraintArgs',
]

@pulumi.input_type
class ProfileImageMappingArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 cloud_config: Optional[pulumi.Input[str]] = None,
                 constraints: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileImageMappingConstraintArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 external_region_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 os_family: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] external_region_id: The external regionId of the resource.
        :param pulumi.Input[str] owner: Email of the user that owns the entity.
        """
        pulumi.set(__self__, "name", name)
        if cloud_config is not None:
            pulumi.set(__self__, "cloud_config", cloud_config)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if external_region_id is not None:
            pulumi.set(__self__, "external_region_id", external_region_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if private is not None:
            pulumi.set(__self__, "private", private)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="cloudConfig")
    def cloud_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_config")

    @cloud_config.setter
    def cloud_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_config", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProfileImageMappingConstraintArgs']]]]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProfileImageMappingConstraintArgs']]]]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The external regionId of the resource.
        """
        return pulumi.get(self, "external_region_id")

    @external_region_id.setter
    def external_region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_region_id", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "os_family")

    @os_family.setter
    def os_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_family", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)


@pulumi.input_type
class ProfileImageMappingConstraintArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 mandatory: pulumi.Input[bool]):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mandatory", value)


@pulumi.input_type
class GetProfileImageMappingArgs:
    def __init__(__self__, *,
                 description: str,
                 external_id: str,
                 external_region_id: str,
                 name: str,
                 organization: str,
                 os_family: str,
                 owner: str,
                 private: bool,
                 cloud_config: Optional[str] = None,
                 constraints: Optional[Sequence['GetProfileImageMappingConstraintArgs']] = None,
                 image_id: Optional[str] = None,
                 image_name: Optional[str] = None):
        """
        :param str description: A human-friendly description.
        :param str external_region_id: The external regionId of the resource.
        :param str name: A human-friendly name used as an identifier in APIs that support this option.
        :param str owner: Email of the user that owns the entity.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "external_region_id", external_region_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "private", private)
        if cloud_config is not None:
            pulumi.set(__self__, "cloud_config", cloud_config)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: str):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> str:
        """
        The external regionId of the resource.
        """
        return pulumi.get(self, "external_region_id")

    @external_region_id.setter
    def external_region_id(self, value: str):
        pulumi.set(self, "external_region_id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: str):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        return pulumi.get(self, "os_family")

    @os_family.setter
    def os_family(self, value: str):
        pulumi.set(self, "os_family", value)

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: str):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def private(self) -> bool:
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: bool):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter(name="cloudConfig")
    def cloud_config(self) -> Optional[str]:
        return pulumi.get(self, "cloud_config")

    @cloud_config.setter
    def cloud_config(self, value: Optional[str]):
        pulumi.set(self, "cloud_config", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[Sequence['GetProfileImageMappingConstraintArgs']]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[Sequence['GetProfileImageMappingConstraintArgs']]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[str]):
        pulumi.set(self, "image_name", value)


@pulumi.input_type
class GetProfileImageMappingConstraintArgs:
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: str):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")

    @mandatory.setter
    def mandatory(self, value: bool):
        pulumi.set(self, "mandatory", value)


