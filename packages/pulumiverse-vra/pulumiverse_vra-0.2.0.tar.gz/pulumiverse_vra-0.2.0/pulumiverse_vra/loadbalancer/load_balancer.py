# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LoadBalancerArgs', 'LoadBalancer']

@pulumi.input_type
class LoadBalancerArgs:
    def __init__(__self__, *,
                 nics: pulumi.Input[Sequence[pulumi.Input['LoadBalancerNicArgs']]],
                 project_id: pulumi.Input[str],
                 routes: pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteArgs']]],
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deployment_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 internet_facing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTargetArgs']]]] = None):
        """
        The set of arguments for constructing a LoadBalancer resource.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerNicArgs']]] nics: A set of network interface specifications for this load balancer.
        :param pulumi.Input[str] project_id: The id of the project the current user belongs to.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteArgs']]] routes: The load balancer route configuration regarding ports and protocols.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: Additional custom properties that may be used to extend the machine.
        :param pulumi.Input[str] deployment_id: The id of the deployment that is associated with this resource.
        :param pulumi.Input[str] description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param pulumi.Input[bool] internet_facing: An Internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the Internet to the instances that are registered with the load balancer.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]] tags: A set of tag keys and optional values that were set on this resource instance.
               example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerTargetArgs']]] targets: A list of links to target load balancer pool members. Links can be to either a machine or a machine's network interface.
        """
        pulumi.set(__self__, "nics", nics)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "routes", routes)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if internet_facing is not None:
            pulumi.set(__self__, "internet_facing", internet_facing)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def nics(self) -> pulumi.Input[Sequence[pulumi.Input['LoadBalancerNicArgs']]]:
        """
        A set of network interface specifications for this load balancer.
        """
        return pulumi.get(self, "nics")

    @nics.setter
    def nics(self, value: pulumi.Input[Sequence[pulumi.Input['LoadBalancerNicArgs']]]):
        pulumi.set(self, "nics", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The id of the project the current user belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteArgs']]]:
        """
        The load balancer route configuration regarding ports and protocols.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteArgs']]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional custom properties that may be used to extend the machine.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the deployment that is associated with this resource.
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Describes machine within the scope of your organization and is not propagated to the cloud.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="internetFacing")
    def internet_facing(self) -> Optional[pulumi.Input[bool]]:
        """
        An Internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the Internet to the instances that are registered with the load balancer.
        """
        return pulumi.get(self, "internet_facing")

    @internet_facing.setter
    def internet_facing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "internet_facing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]]:
        """
        A set of tag keys and optional values that were set on this resource instance.
        example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTargetArgs']]]]:
        """
        A list of links to target load balancer pool members. Links can be to either a machine or a machine's network interface.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTargetArgs']]]]):
        pulumi.set(self, "targets", value)


@pulumi.input_type
class _LoadBalancerState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deployment_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 external_region_id: Optional[pulumi.Input[str]] = None,
                 external_zone_id: Optional[pulumi.Input[str]] = None,
                 internet_facing: Optional[pulumi.Input[bool]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerLinkArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerNicArgs']]]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTargetArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LoadBalancer resources.
        :param pulumi.Input[str] address: Primary address allocated or in use by this load balancer. The address could be an in the form of a publicly resolvable DNS name or an IP address.
        :param pulumi.Input[str] created_at: Date when the entity was created. The date is in ISO 6801 and UTC.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: Additional custom properties that may be used to extend the machine.
        :param pulumi.Input[str] deployment_id: The id of the deployment that is associated with this resource.
        :param pulumi.Input[str] description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param pulumi.Input[str] external_id: External entity Id on the provider side.
        :param pulumi.Input[str] external_region_id: The external regionId of the resource.
        :param pulumi.Input[str] external_zone_id: The external regionId of the resource.
        :param pulumi.Input[bool] internet_facing: An Internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the Internet to the instances that are registered with the load balancer.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerLinkArgs']]] links: HATEOAS of the entity.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerNicArgs']]] nics: A set of network interface specifications for this load balancer.
        :param pulumi.Input[str] organization_id: The id of the organization this entity belongs to.
        :param pulumi.Input[str] owner: Email of the user that owns the entity.
        :param pulumi.Input[str] project_id: The id of the project the current user belongs to.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteArgs']]] routes: The load balancer route configuration regarding ports and protocols.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]] tags: A set of tag keys and optional values that were set on this resource instance.
               example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerTargetArgs']]] targets: A list of links to target load balancer pool members. Links can be to either a machine or a machine's network interface.
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if external_region_id is not None:
            pulumi.set(__self__, "external_region_id", external_region_id)
        if external_zone_id is not None:
            pulumi.set(__self__, "external_zone_id", external_zone_id)
        if internet_facing is not None:
            pulumi.set(__self__, "internet_facing", internet_facing)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nics is not None:
            pulumi.set(__self__, "nics", nics)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Primary address allocated or in use by this load balancer. The address could be an in the form of a publicly resolvable DNS name or an IP address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when the entity was created. The date is in ISO 6801 and UTC.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional custom properties that may be used to extend the machine.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the deployment that is associated with this resource.
        """
        return pulumi.get(self, "deployment_id")

    @deployment_id.setter
    def deployment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Describes machine within the scope of your organization and is not propagated to the cloud.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        External entity Id on the provider side.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The external regionId of the resource.
        """
        return pulumi.get(self, "external_region_id")

    @external_region_id.setter
    def external_region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_region_id", value)

    @property
    @pulumi.getter(name="externalZoneId")
    def external_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The external regionId of the resource.
        """
        return pulumi.get(self, "external_zone_id")

    @external_zone_id.setter
    def external_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_zone_id", value)

    @property
    @pulumi.getter(name="internetFacing")
    def internet_facing(self) -> Optional[pulumi.Input[bool]]:
        """
        An Internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the Internet to the instances that are registered with the load balancer.
        """
        return pulumi.get(self, "internet_facing")

    @internet_facing.setter
    def internet_facing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "internet_facing", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerLinkArgs']]]]:
        """
        HATEOAS of the entity.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerNicArgs']]]]:
        """
        A set of network interface specifications for this load balancer.
        """
        return pulumi.get(self, "nics")

    @nics.setter
    def nics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerNicArgs']]]]):
        pulumi.set(self, "nics", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the organization this entity belongs to.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the project the current user belongs to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteArgs']]]]:
        """
        The load balancer route configuration regarding ports and protocols.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]]:
        """
        A set of tag keys and optional values that were set on this resource instance.
        example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTargetArgs']]]]:
        """
        A list of links to target load balancer pool members. Links can be to either a machine or a machine's network interface.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class LoadBalancer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deployment_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 internet_facing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerNicArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerRouteArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTagArgs']]]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTargetArgs']]]]] = None,
                 __props__=None):
        """
        Creates a VMware vRealize Automation load balancer resource.

        ## Example Usage
        ### S

        The following example shows how to create a load balancer resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.loadbalancer.LoadBalancer("this",
            project_id=vra_project["my-project"]["id"],
            description="My Load Balancer",
            custom_properties={
                "edgeClusterRouterStateLink": "/resources/routers/<uuid>",
                "tier0LogicalRouterStateLink": "/resources/routers/<uuid>",
            },
            targets=[vra.loadbalancer.LoadBalancerTargetArgs(
                machine_id=vra_machine["my_machine"]["id"],
            )],
            nics=[vra.loadbalancer.LoadBalancerNicArgs(
                network_id=data["vra_network"]["my-network"]["id"],
            )],
            routes=[vra.loadbalancer.LoadBalancerRouteArgs(
                protocol="TCP",
                port="80",
                member_protocol="TCP",
                member_port="80",
                health_check_configurations=[vra.loadbalancer.LoadBalancerRouteHealthCheckConfigurationArgs(
                    protocol="TCP",
                    port="80",
                    interval_seconds=30,
                    timeout_seconds=10,
                    unhealthy_threshold=2,
                    healthy_threshold=10,
                )],
            )])
        ```

        A block device resource supports the following arguments:

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: Additional custom properties that may be used to extend the machine.
        :param pulumi.Input[str] deployment_id: The id of the deployment that is associated with this resource.
        :param pulumi.Input[str] description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param pulumi.Input[bool] internet_facing: An Internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the Internet to the instances that are registered with the load balancer.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerNicArgs']]]] nics: A set of network interface specifications for this load balancer.
        :param pulumi.Input[str] project_id: The id of the project the current user belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerRouteArgs']]]] routes: The load balancer route configuration regarding ports and protocols.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTagArgs']]]] tags: A set of tag keys and optional values that were set on this resource instance.
               example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTargetArgs']]]] targets: A list of links to target load balancer pool members. Links can be to either a machine or a machine's network interface.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadBalancerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a VMware vRealize Automation load balancer resource.

        ## Example Usage
        ### S

        The following example shows how to create a load balancer resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.loadbalancer.LoadBalancer("this",
            project_id=vra_project["my-project"]["id"],
            description="My Load Balancer",
            custom_properties={
                "edgeClusterRouterStateLink": "/resources/routers/<uuid>",
                "tier0LogicalRouterStateLink": "/resources/routers/<uuid>",
            },
            targets=[vra.loadbalancer.LoadBalancerTargetArgs(
                machine_id=vra_machine["my_machine"]["id"],
            )],
            nics=[vra.loadbalancer.LoadBalancerNicArgs(
                network_id=data["vra_network"]["my-network"]["id"],
            )],
            routes=[vra.loadbalancer.LoadBalancerRouteArgs(
                protocol="TCP",
                port="80",
                member_protocol="TCP",
                member_port="80",
                health_check_configurations=[vra.loadbalancer.LoadBalancerRouteHealthCheckConfigurationArgs(
                    protocol="TCP",
                    port="80",
                    interval_seconds=30,
                    timeout_seconds=10,
                    unhealthy_threshold=2,
                    healthy_threshold=10,
                )],
            )])
        ```

        A block device resource supports the following arguments:

        :param str resource_name: The name of the resource.
        :param LoadBalancerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadBalancerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deployment_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 internet_facing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerNicArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerRouteArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTagArgs']]]]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTargetArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadBalancerArgs.__new__(LoadBalancerArgs)

            __props__.__dict__["custom_properties"] = custom_properties
            __props__.__dict__["deployment_id"] = deployment_id
            __props__.__dict__["description"] = description
            __props__.__dict__["internet_facing"] = internet_facing
            __props__.__dict__["name"] = name
            if nics is None and not opts.urn:
                raise TypeError("Missing required property 'nics'")
            __props__.__dict__["nics"] = nics
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if routes is None and not opts.urn:
                raise TypeError("Missing required property 'routes'")
            __props__.__dict__["routes"] = routes
            __props__.__dict__["tags"] = tags
            __props__.__dict__["targets"] = targets
            __props__.__dict__["address"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["external_id"] = None
            __props__.__dict__["external_region_id"] = None
            __props__.__dict__["external_zone_id"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["organization_id"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["updated_at"] = None
        super(LoadBalancer, __self__).__init__(
            'vra:loadbalancer/loadBalancer:LoadBalancer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            deployment_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            external_id: Optional[pulumi.Input[str]] = None,
            external_region_id: Optional[pulumi.Input[str]] = None,
            external_zone_id: Optional[pulumi.Input[str]] = None,
            internet_facing: Optional[pulumi.Input[bool]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerLinkArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerNicArgs']]]]] = None,
            organization_id: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            routes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerRouteArgs']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTagArgs']]]]] = None,
            targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTargetArgs']]]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'LoadBalancer':
        """
        Get an existing LoadBalancer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: Primary address allocated or in use by this load balancer. The address could be an in the form of a publicly resolvable DNS name or an IP address.
        :param pulumi.Input[str] created_at: Date when the entity was created. The date is in ISO 6801 and UTC.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: Additional custom properties that may be used to extend the machine.
        :param pulumi.Input[str] deployment_id: The id of the deployment that is associated with this resource.
        :param pulumi.Input[str] description: Describes machine within the scope of your organization and is not propagated to the cloud.
        :param pulumi.Input[str] external_id: External entity Id on the provider side.
        :param pulumi.Input[str] external_region_id: The external regionId of the resource.
        :param pulumi.Input[str] external_zone_id: The external regionId of the resource.
        :param pulumi.Input[bool] internet_facing: An Internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the Internet to the instances that are registered with the load balancer.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerLinkArgs']]]] links: HATEOAS of the entity.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerNicArgs']]]] nics: A set of network interface specifications for this load balancer.
        :param pulumi.Input[str] organization_id: The id of the organization this entity belongs to.
        :param pulumi.Input[str] owner: Email of the user that owns the entity.
        :param pulumi.Input[str] project_id: The id of the project the current user belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerRouteArgs']]]] routes: The load balancer route configuration regarding ports and protocols.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTagArgs']]]] tags: A set of tag keys and optional values that were set on this resource instance.
               example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTargetArgs']]]] targets: A list of links to target load balancer pool members. Links can be to either a machine or a machine's network interface.
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadBalancerState.__new__(_LoadBalancerState)

        __props__.__dict__["address"] = address
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["custom_properties"] = custom_properties
        __props__.__dict__["deployment_id"] = deployment_id
        __props__.__dict__["description"] = description
        __props__.__dict__["external_id"] = external_id
        __props__.__dict__["external_region_id"] = external_region_id
        __props__.__dict__["external_zone_id"] = external_zone_id
        __props__.__dict__["internet_facing"] = internet_facing
        __props__.__dict__["links"] = links
        __props__.__dict__["name"] = name
        __props__.__dict__["nics"] = nics
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["owner"] = owner
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["routes"] = routes
        __props__.__dict__["tags"] = tags
        __props__.__dict__["targets"] = targets
        __props__.__dict__["updated_at"] = updated_at
        return LoadBalancer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        """
        Primary address allocated or in use by this load balancer. The address could be an in the form of a publicly resolvable DNS name or an IP address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Date when the entity was created. The date is in ISO 6801 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Additional custom properties that may be used to extend the machine.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> pulumi.Output[str]:
        """
        The id of the deployment that is associated with this resource.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Describes machine within the scope of your organization and is not propagated to the cloud.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Output[str]:
        """
        External entity Id on the provider side.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> pulumi.Output[str]:
        """
        The external regionId of the resource.
        """
        return pulumi.get(self, "external_region_id")

    @property
    @pulumi.getter(name="externalZoneId")
    def external_zone_id(self) -> pulumi.Output[str]:
        """
        The external regionId of the resource.
        """
        return pulumi.get(self, "external_zone_id")

    @property
    @pulumi.getter(name="internetFacing")
    def internet_facing(self) -> pulumi.Output[Optional[bool]]:
        """
        An Internet-facing load balancer has a publicly resolvable DNS name, so it can route requests from clients over the Internet to the instances that are registered with the load balancer.
        """
        return pulumi.get(self, "internet_facing")

    @property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.LoadBalancerLink']]:
        """
        HATEOAS of the entity.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nics(self) -> pulumi.Output[Sequence['outputs.LoadBalancerNic']]:
        """
        A set of network interface specifications for this load balancer.
        """
        return pulumi.get(self, "nics")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        """
        The id of the organization this entity belongs to.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The id of the project the current user belongs to.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def routes(self) -> pulumi.Output[Sequence['outputs.LoadBalancerRoute']]:
        """
        The load balancer route configuration regarding ports and protocols.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.LoadBalancerTag']]:
        """
        A set of tag keys and optional values that were set on this resource instance.
        example:[ { "key" : "vmware.enumeration.type", "value": "nebs_block" } ]
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Optional[Sequence['outputs.LoadBalancerTarget']]]:
        """
        A list of links to target load balancer pool members. Links can be to either a machine or a machine's network interface.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

