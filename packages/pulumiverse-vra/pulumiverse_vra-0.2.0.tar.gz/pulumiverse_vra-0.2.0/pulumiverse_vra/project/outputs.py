# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ProjectAdministratorRole',
    'ProjectConstraints',
    'ProjectConstraintsExtensibility',
    'ProjectConstraintsNetwork',
    'ProjectConstraintsStorage',
    'ProjectMemberRole',
    'ProjectViewerRole',
    'ProjectZoneAssignment',
    'GetProjectAdministratorRoleResult',
    'GetProjectConstraintsResult',
    'GetProjectConstraintsExtensibilityResult',
    'GetProjectConstraintsNetworkResult',
    'GetProjectConstraintsStorageResult',
    'GetProjectMemberRoleResult',
    'GetProjectViewerRoleResult',
    'GetProjectZoneAssignmentResult',
]

@pulumi.output_type
class ProjectAdministratorRole(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProjectConstraints(dict):
    def __init__(__self__, *,
                 extensibilities: Optional[Sequence['outputs.ProjectConstraintsExtensibility']] = None,
                 networks: Optional[Sequence['outputs.ProjectConstraintsNetwork']] = None,
                 storages: Optional[Sequence['outputs.ProjectConstraintsStorage']] = None):
        if extensibilities is not None:
            pulumi.set(__self__, "extensibilities", extensibilities)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)

    @property
    @pulumi.getter
    def extensibilities(self) -> Optional[Sequence['outputs.ProjectConstraintsExtensibility']]:
        return pulumi.get(self, "extensibilities")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence['outputs.ProjectConstraintsNetwork']]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.ProjectConstraintsStorage']]:
        return pulumi.get(self, "storages")


@pulumi.output_type
class ProjectConstraintsExtensibility(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class ProjectConstraintsNetwork(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class ProjectConstraintsStorage(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class ProjectMemberRole(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProjectViewerRole(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ProjectZoneAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "zoneId":
            suggest = "zone_id"
        elif key == "cpuLimit":
            suggest = "cpu_limit"
        elif key == "maxInstances":
            suggest = "max_instances"
        elif key == "memoryLimitMb":
            suggest = "memory_limit_mb"
        elif key == "storageLimitGb":
            suggest = "storage_limit_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectZoneAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectZoneAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectZoneAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zone_id: str,
                 cpu_limit: Optional[int] = None,
                 max_instances: Optional[int] = None,
                 memory_limit_mb: Optional[int] = None,
                 priority: Optional[int] = None,
                 storage_limit_gb: Optional[int] = None):
        pulumi.set(__self__, "zone_id", zone_id)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if max_instances is not None:
            pulumi.set(__self__, "max_instances", max_instances)
        if memory_limit_mb is not None:
            pulumi.set(__self__, "memory_limit_mb", memory_limit_mb)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if storage_limit_gb is not None:
            pulumi.set(__self__, "storage_limit_gb", storage_limit_gb)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[int]:
        return pulumi.get(self, "cpu_limit")

    @property
    @pulumi.getter(name="maxInstances")
    def max_instances(self) -> Optional[int]:
        return pulumi.get(self, "max_instances")

    @property
    @pulumi.getter(name="memoryLimitMb")
    def memory_limit_mb(self) -> Optional[int]:
        return pulumi.get(self, "memory_limit_mb")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="storageLimitGb")
    def storage_limit_gb(self) -> Optional[int]:
        return pulumi.get(self, "storage_limit_gb")


@pulumi.output_type
class GetProjectAdministratorRoleResult(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProjectConstraintsResult(dict):
    def __init__(__self__, *,
                 extensibilities: Optional[Sequence['outputs.GetProjectConstraintsExtensibilityResult']] = None,
                 networks: Optional[Sequence['outputs.GetProjectConstraintsNetworkResult']] = None,
                 storages: Optional[Sequence['outputs.GetProjectConstraintsStorageResult']] = None):
        if extensibilities is not None:
            pulumi.set(__self__, "extensibilities", extensibilities)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)

    @property
    @pulumi.getter
    def extensibilities(self) -> Optional[Sequence['outputs.GetProjectConstraintsExtensibilityResult']]:
        return pulumi.get(self, "extensibilities")

    @property
    @pulumi.getter
    def networks(self) -> Optional[Sequence['outputs.GetProjectConstraintsNetworkResult']]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def storages(self) -> Optional[Sequence['outputs.GetProjectConstraintsStorageResult']]:
        return pulumi.get(self, "storages")


@pulumi.output_type
class GetProjectConstraintsExtensibilityResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class GetProjectConstraintsNetworkResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class GetProjectConstraintsStorageResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 mandatory: bool):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "mandatory", mandatory)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def mandatory(self) -> bool:
        return pulumi.get(self, "mandatory")


@pulumi.output_type
class GetProjectMemberRoleResult(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProjectViewerRoleResult(dict):
    def __init__(__self__, *,
                 email: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProjectZoneAssignmentResult(dict):
    def __init__(__self__, *,
                 cpu_limit: int,
                 max_instances: int,
                 memory_limit_mb: int,
                 priority: int,
                 storage_limit_gb: int,
                 zone_id: str):
        pulumi.set(__self__, "cpu_limit", cpu_limit)
        pulumi.set(__self__, "max_instances", max_instances)
        pulumi.set(__self__, "memory_limit_mb", memory_limit_mb)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "storage_limit_gb", storage_limit_gb)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> int:
        return pulumi.get(self, "cpu_limit")

    @property
    @pulumi.getter(name="maxInstances")
    def max_instances(self) -> int:
        return pulumi.get(self, "max_instances")

    @property
    @pulumi.getter(name="memoryLimitMb")
    def memory_limit_mb(self) -> int:
        return pulumi.get(self, "memory_limit_mb")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="storageLimitGb")
    def storage_limit_gb(self) -> int:
        return pulumi.get(self, "storage_limit_gb")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


