# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProjectArgs', 'Project']

@pulumi.input_type
class ProjectArgs:
    def __init__(__self__, *,
                 administrator_roles: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdministratorRoleArgs']]]] = None,
                 administrators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 constraints: Optional[pulumi.Input['ProjectConstraintsArgs']] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 machine_naming_template: Optional[pulumi.Input[str]] = None,
                 member_roles: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberRoleArgs']]]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operation_timeout: Optional[pulumi.Input[int]] = None,
                 placement_policy: Optional[pulumi.Input[str]] = None,
                 shared_resources: Optional[pulumi.Input[bool]] = None,
                 viewer_roles: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectViewerRoleArgs']]]] = None,
                 viewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 zone_assignments: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectZoneAssignmentArgs']]]] = None):
        """
        The set of arguments for constructing a Project resource.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectAdministratorRoleArgs']]] administrator_roles: Administrator users or groups associated with the project. Only administrators can manage project's configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] administrators: A list of administrator users associated with the project. Only administrators can manage project's configuration.
        :param pulumi.Input['ProjectConstraintsArgs'] constraints: A list of storage, network, and extensibility constraints to be applied when provisioning through this project.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: The project custom properties which are added to all requests in this project.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] machine_naming_template: The naming template to be used for resources provisioned in this project.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectMemberRoleArgs']]] member_roles: Member users or groups associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: A list of member users associated with the project.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[int] operation_timeout: The timeout that should be used for cloud template operations and provisioning tasks. The timeout is measured in seconds.
        :param pulumi.Input[str] placement_policy: The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.
        :param pulumi.Input[bool] shared_resources: Specifies whether the resources in this projects are shared or not. If not set default will be used.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectViewerRoleArgs']]] viewer_roles: Viewer users or groups associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] viewers: A list of viewer users associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectZoneAssignmentArgs']]] zone_assignments: A list of configurations for zone assignment to a project.
        """
        if administrator_roles is not None:
            pulumi.set(__self__, "administrator_roles", administrator_roles)
        if administrators is not None:
            warnings.warn("""To specify the type of principal, please refer administrator_roles.""", DeprecationWarning)
            pulumi.log.warn("""administrators is deprecated: To specify the type of principal, please refer administrator_roles.""")
        if administrators is not None:
            pulumi.set(__self__, "administrators", administrators)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if machine_naming_template is not None:
            pulumi.set(__self__, "machine_naming_template", machine_naming_template)
        if member_roles is not None:
            pulumi.set(__self__, "member_roles", member_roles)
        if members is not None:
            warnings.warn("""To specify the type of principal, please refer member_roles.""", DeprecationWarning)
            pulumi.log.warn("""members is deprecated: To specify the type of principal, please refer member_roles.""")
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operation_timeout is not None:
            pulumi.set(__self__, "operation_timeout", operation_timeout)
        if placement_policy is not None:
            pulumi.set(__self__, "placement_policy", placement_policy)
        if shared_resources is not None:
            pulumi.set(__self__, "shared_resources", shared_resources)
        if viewer_roles is not None:
            pulumi.set(__self__, "viewer_roles", viewer_roles)
        if viewers is not None:
            warnings.warn("""To specify the type of principal, please refer viewer_roles.""", DeprecationWarning)
            pulumi.log.warn("""viewers is deprecated: To specify the type of principal, please refer viewer_roles.""")
        if viewers is not None:
            pulumi.set(__self__, "viewers", viewers)
        if zone_assignments is not None:
            pulumi.set(__self__, "zone_assignments", zone_assignments)

    @property
    @pulumi.getter(name="administratorRoles")
    def administrator_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdministratorRoleArgs']]]]:
        """
        Administrator users or groups associated with the project. Only administrators can manage project's configuration.
        """
        return pulumi.get(self, "administrator_roles")

    @administrator_roles.setter
    def administrator_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdministratorRoleArgs']]]]):
        pulumi.set(self, "administrator_roles", value)

    @property
    @pulumi.getter
    def administrators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of administrator users associated with the project. Only administrators can manage project's configuration.
        """
        return pulumi.get(self, "administrators")

    @administrators.setter
    def administrators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "administrators", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input['ProjectConstraintsArgs']]:
        """
        A list of storage, network, and extensibility constraints to be applied when provisioning through this project.
        """
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input['ProjectConstraintsArgs']]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The project custom properties which are added to all requests in this project.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="machineNamingTemplate")
    def machine_naming_template(self) -> Optional[pulumi.Input[str]]:
        """
        The naming template to be used for resources provisioned in this project.
        """
        return pulumi.get(self, "machine_naming_template")

    @machine_naming_template.setter
    def machine_naming_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_naming_template", value)

    @property
    @pulumi.getter(name="memberRoles")
    def member_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberRoleArgs']]]]:
        """
        Member users or groups associated with the project.
        """
        return pulumi.get(self, "member_roles")

    @member_roles.setter
    def member_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberRoleArgs']]]]):
        pulumi.set(self, "member_roles", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of member users associated with the project.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationTimeout")
    def operation_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout that should be used for cloud template operations and provisioning tasks. The timeout is measured in seconds.
        """
        return pulumi.get(self, "operation_timeout")

    @operation_timeout.setter
    def operation_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operation_timeout", value)

    @property
    @pulumi.getter(name="placementPolicy")
    def placement_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.
        """
        return pulumi.get(self, "placement_policy")

    @placement_policy.setter
    def placement_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_policy", value)

    @property
    @pulumi.getter(name="sharedResources")
    def shared_resources(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the resources in this projects are shared or not. If not set default will be used.
        """
        return pulumi.get(self, "shared_resources")

    @shared_resources.setter
    def shared_resources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shared_resources", value)

    @property
    @pulumi.getter(name="viewerRoles")
    def viewer_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectViewerRoleArgs']]]]:
        """
        Viewer users or groups associated with the project.
        """
        return pulumi.get(self, "viewer_roles")

    @viewer_roles.setter
    def viewer_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectViewerRoleArgs']]]]):
        pulumi.set(self, "viewer_roles", value)

    @property
    @pulumi.getter
    def viewers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of viewer users associated with the project.
        """
        return pulumi.get(self, "viewers")

    @viewers.setter
    def viewers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "viewers", value)

    @property
    @pulumi.getter(name="zoneAssignments")
    def zone_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectZoneAssignmentArgs']]]]:
        """
        A list of configurations for zone assignment to a project.
        """
        return pulumi.get(self, "zone_assignments")

    @zone_assignments.setter
    def zone_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectZoneAssignmentArgs']]]]):
        pulumi.set(self, "zone_assignments", value)


@pulumi.input_type
class _ProjectState:
    def __init__(__self__, *,
                 administrator_roles: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdministratorRoleArgs']]]] = None,
                 administrators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 constraints: Optional[pulumi.Input['ProjectConstraintsArgs']] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 machine_naming_template: Optional[pulumi.Input[str]] = None,
                 member_roles: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberRoleArgs']]]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operation_timeout: Optional[pulumi.Input[int]] = None,
                 placement_policy: Optional[pulumi.Input[str]] = None,
                 shared_resources: Optional[pulumi.Input[bool]] = None,
                 viewer_roles: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectViewerRoleArgs']]]] = None,
                 viewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 zone_assignments: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectZoneAssignmentArgs']]]] = None):
        """
        Input properties used for looking up and filtering Project resources.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectAdministratorRoleArgs']]] administrator_roles: Administrator users or groups associated with the project. Only administrators can manage project's configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] administrators: A list of administrator users associated with the project. Only administrators can manage project's configuration.
        :param pulumi.Input['ProjectConstraintsArgs'] constraints: A list of storage, network, and extensibility constraints to be applied when provisioning through this project.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: The project custom properties which are added to all requests in this project.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] machine_naming_template: The naming template to be used for resources provisioned in this project.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectMemberRoleArgs']]] member_roles: Member users or groups associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: A list of member users associated with the project.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[int] operation_timeout: The timeout that should be used for cloud template operations and provisioning tasks. The timeout is measured in seconds.
        :param pulumi.Input[str] placement_policy: The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.
        :param pulumi.Input[bool] shared_resources: Specifies whether the resources in this projects are shared or not. If not set default will be used.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectViewerRoleArgs']]] viewer_roles: Viewer users or groups associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] viewers: A list of viewer users associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectZoneAssignmentArgs']]] zone_assignments: A list of configurations for zone assignment to a project.
        """
        if administrator_roles is not None:
            pulumi.set(__self__, "administrator_roles", administrator_roles)
        if administrators is not None:
            warnings.warn("""To specify the type of principal, please refer administrator_roles.""", DeprecationWarning)
            pulumi.log.warn("""administrators is deprecated: To specify the type of principal, please refer administrator_roles.""")
        if administrators is not None:
            pulumi.set(__self__, "administrators", administrators)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if machine_naming_template is not None:
            pulumi.set(__self__, "machine_naming_template", machine_naming_template)
        if member_roles is not None:
            pulumi.set(__self__, "member_roles", member_roles)
        if members is not None:
            warnings.warn("""To specify the type of principal, please refer member_roles.""", DeprecationWarning)
            pulumi.log.warn("""members is deprecated: To specify the type of principal, please refer member_roles.""")
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operation_timeout is not None:
            pulumi.set(__self__, "operation_timeout", operation_timeout)
        if placement_policy is not None:
            pulumi.set(__self__, "placement_policy", placement_policy)
        if shared_resources is not None:
            pulumi.set(__self__, "shared_resources", shared_resources)
        if viewer_roles is not None:
            pulumi.set(__self__, "viewer_roles", viewer_roles)
        if viewers is not None:
            warnings.warn("""To specify the type of principal, please refer viewer_roles.""", DeprecationWarning)
            pulumi.log.warn("""viewers is deprecated: To specify the type of principal, please refer viewer_roles.""")
        if viewers is not None:
            pulumi.set(__self__, "viewers", viewers)
        if zone_assignments is not None:
            pulumi.set(__self__, "zone_assignments", zone_assignments)

    @property
    @pulumi.getter(name="administratorRoles")
    def administrator_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdministratorRoleArgs']]]]:
        """
        Administrator users or groups associated with the project. Only administrators can manage project's configuration.
        """
        return pulumi.get(self, "administrator_roles")

    @administrator_roles.setter
    def administrator_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectAdministratorRoleArgs']]]]):
        pulumi.set(self, "administrator_roles", value)

    @property
    @pulumi.getter
    def administrators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of administrator users associated with the project. Only administrators can manage project's configuration.
        """
        return pulumi.get(self, "administrators")

    @administrators.setter
    def administrators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "administrators", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input['ProjectConstraintsArgs']]:
        """
        A list of storage, network, and extensibility constraints to be applied when provisioning through this project.
        """
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input['ProjectConstraintsArgs']]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The project custom properties which are added to all requests in this project.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="machineNamingTemplate")
    def machine_naming_template(self) -> Optional[pulumi.Input[str]]:
        """
        The naming template to be used for resources provisioned in this project.
        """
        return pulumi.get(self, "machine_naming_template")

    @machine_naming_template.setter
    def machine_naming_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_naming_template", value)

    @property
    @pulumi.getter(name="memberRoles")
    def member_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberRoleArgs']]]]:
        """
        Member users or groups associated with the project.
        """
        return pulumi.get(self, "member_roles")

    @member_roles.setter
    def member_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectMemberRoleArgs']]]]):
        pulumi.set(self, "member_roles", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of member users associated with the project.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationTimeout")
    def operation_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout that should be used for cloud template operations and provisioning tasks. The timeout is measured in seconds.
        """
        return pulumi.get(self, "operation_timeout")

    @operation_timeout.setter
    def operation_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "operation_timeout", value)

    @property
    @pulumi.getter(name="placementPolicy")
    def placement_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.
        """
        return pulumi.get(self, "placement_policy")

    @placement_policy.setter
    def placement_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_policy", value)

    @property
    @pulumi.getter(name="sharedResources")
    def shared_resources(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the resources in this projects are shared or not. If not set default will be used.
        """
        return pulumi.get(self, "shared_resources")

    @shared_resources.setter
    def shared_resources(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shared_resources", value)

    @property
    @pulumi.getter(name="viewerRoles")
    def viewer_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectViewerRoleArgs']]]]:
        """
        Viewer users or groups associated with the project.
        """
        return pulumi.get(self, "viewer_roles")

    @viewer_roles.setter
    def viewer_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectViewerRoleArgs']]]]):
        pulumi.set(self, "viewer_roles", value)

    @property
    @pulumi.getter
    def viewers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of viewer users associated with the project.
        """
        return pulumi.get(self, "viewers")

    @viewers.setter
    def viewers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "viewers", value)

    @property
    @pulumi.getter(name="zoneAssignments")
    def zone_assignments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectZoneAssignmentArgs']]]]:
        """
        A list of configurations for zone assignment to a project.
        """
        return pulumi.get(self, "zone_assignments")

    @zone_assignments.setter
    def zone_assignments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectZoneAssignmentArgs']]]]):
        pulumi.set(self, "zone_assignments", value)


class Project(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 administrator_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectAdministratorRoleArgs']]]]] = None,
                 administrators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 constraints: Optional[pulumi.Input[pulumi.InputType['ProjectConstraintsArgs']]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 machine_naming_template: Optional[pulumi.Input[str]] = None,
                 member_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectMemberRoleArgs']]]]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operation_timeout: Optional[pulumi.Input[int]] = None,
                 placement_policy: Optional[pulumi.Input[str]] = None,
                 shared_resources: Optional[pulumi.Input[bool]] = None,
                 viewer_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectViewerRoleArgs']]]]] = None,
                 viewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 zone_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectZoneAssignmentArgs']]]]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectAdministratorRoleArgs']]]] administrator_roles: Administrator users or groups associated with the project. Only administrators can manage project's configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] administrators: A list of administrator users associated with the project. Only administrators can manage project's configuration.
        :param pulumi.Input[pulumi.InputType['ProjectConstraintsArgs']] constraints: A list of storage, network, and extensibility constraints to be applied when provisioning through this project.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: The project custom properties which are added to all requests in this project.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] machine_naming_template: The naming template to be used for resources provisioned in this project.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectMemberRoleArgs']]]] member_roles: Member users or groups associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: A list of member users associated with the project.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[int] operation_timeout: The timeout that should be used for cloud template operations and provisioning tasks. The timeout is measured in seconds.
        :param pulumi.Input[str] placement_policy: The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.
        :param pulumi.Input[bool] shared_resources: Specifies whether the resources in this projects are shared or not. If not set default will be used.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectViewerRoleArgs']]]] viewer_roles: Viewer users or groups associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] viewers: A list of viewer users associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectZoneAssignmentArgs']]]] zone_assignments: A list of configurations for zone assignment to a project.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProjectArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param ProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 administrator_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectAdministratorRoleArgs']]]]] = None,
                 administrators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 constraints: Optional[pulumi.Input[pulumi.InputType['ProjectConstraintsArgs']]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 machine_naming_template: Optional[pulumi.Input[str]] = None,
                 member_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectMemberRoleArgs']]]]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operation_timeout: Optional[pulumi.Input[int]] = None,
                 placement_policy: Optional[pulumi.Input[str]] = None,
                 shared_resources: Optional[pulumi.Input[bool]] = None,
                 viewer_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectViewerRoleArgs']]]]] = None,
                 viewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 zone_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectZoneAssignmentArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectArgs.__new__(ProjectArgs)

            __props__.__dict__["administrator_roles"] = administrator_roles
            if administrators is not None and not opts.urn:
                warnings.warn("""To specify the type of principal, please refer administrator_roles.""", DeprecationWarning)
                pulumi.log.warn("""administrators is deprecated: To specify the type of principal, please refer administrator_roles.""")
            __props__.__dict__["administrators"] = administrators
            __props__.__dict__["constraints"] = constraints
            __props__.__dict__["custom_properties"] = custom_properties
            __props__.__dict__["description"] = description
            __props__.__dict__["machine_naming_template"] = machine_naming_template
            __props__.__dict__["member_roles"] = member_roles
            if members is not None and not opts.urn:
                warnings.warn("""To specify the type of principal, please refer member_roles.""", DeprecationWarning)
                pulumi.log.warn("""members is deprecated: To specify the type of principal, please refer member_roles.""")
            __props__.__dict__["members"] = members
            __props__.__dict__["name"] = name
            __props__.__dict__["operation_timeout"] = operation_timeout
            __props__.__dict__["placement_policy"] = placement_policy
            __props__.__dict__["shared_resources"] = shared_resources
            __props__.__dict__["viewer_roles"] = viewer_roles
            if viewers is not None and not opts.urn:
                warnings.warn("""To specify the type of principal, please refer viewer_roles.""", DeprecationWarning)
                pulumi.log.warn("""viewers is deprecated: To specify the type of principal, please refer viewer_roles.""")
            __props__.__dict__["viewers"] = viewers
            __props__.__dict__["zone_assignments"] = zone_assignments
        super(Project, __self__).__init__(
            'vra:project/project:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            administrator_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectAdministratorRoleArgs']]]]] = None,
            administrators: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            constraints: Optional[pulumi.Input[pulumi.InputType['ProjectConstraintsArgs']]] = None,
            custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            machine_naming_template: Optional[pulumi.Input[str]] = None,
            member_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectMemberRoleArgs']]]]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operation_timeout: Optional[pulumi.Input[int]] = None,
            placement_policy: Optional[pulumi.Input[str]] = None,
            shared_resources: Optional[pulumi.Input[bool]] = None,
            viewer_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectViewerRoleArgs']]]]] = None,
            viewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            zone_assignments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectZoneAssignmentArgs']]]]] = None) -> 'Project':
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectAdministratorRoleArgs']]]] administrator_roles: Administrator users or groups associated with the project. Only administrators can manage project's configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] administrators: A list of administrator users associated with the project. Only administrators can manage project's configuration.
        :param pulumi.Input[pulumi.InputType['ProjectConstraintsArgs']] constraints: A list of storage, network, and extensibility constraints to be applied when provisioning through this project.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: The project custom properties which are added to all requests in this project.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] machine_naming_template: The naming template to be used for resources provisioned in this project.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectMemberRoleArgs']]]] member_roles: Member users or groups associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] members: A list of member users associated with the project.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier in APIs that support this option.
        :param pulumi.Input[int] operation_timeout: The timeout that should be used for cloud template operations and provisioning tasks. The timeout is measured in seconds.
        :param pulumi.Input[str] placement_policy: The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.
        :param pulumi.Input[bool] shared_resources: Specifies whether the resources in this projects are shared or not. If not set default will be used.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectViewerRoleArgs']]]] viewer_roles: Viewer users or groups associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] viewers: A list of viewer users associated with the project.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectZoneAssignmentArgs']]]] zone_assignments: A list of configurations for zone assignment to a project.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectState.__new__(_ProjectState)

        __props__.__dict__["administrator_roles"] = administrator_roles
        __props__.__dict__["administrators"] = administrators
        __props__.__dict__["constraints"] = constraints
        __props__.__dict__["custom_properties"] = custom_properties
        __props__.__dict__["description"] = description
        __props__.__dict__["machine_naming_template"] = machine_naming_template
        __props__.__dict__["member_roles"] = member_roles
        __props__.__dict__["members"] = members
        __props__.__dict__["name"] = name
        __props__.__dict__["operation_timeout"] = operation_timeout
        __props__.__dict__["placement_policy"] = placement_policy
        __props__.__dict__["shared_resources"] = shared_resources
        __props__.__dict__["viewer_roles"] = viewer_roles
        __props__.__dict__["viewers"] = viewers
        __props__.__dict__["zone_assignments"] = zone_assignments
        return Project(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="administratorRoles")
    def administrator_roles(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectAdministratorRole']]]:
        """
        Administrator users or groups associated with the project. Only administrators can manage project's configuration.
        """
        return pulumi.get(self, "administrator_roles")

    @property
    @pulumi.getter
    def administrators(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of administrator users associated with the project. Only administrators can manage project's configuration.
        """
        return pulumi.get(self, "administrators")

    @property
    @pulumi.getter
    def constraints(self) -> pulumi.Output[Optional['outputs.ProjectConstraints']]:
        """
        A list of storage, network, and extensibility constraints to be applied when provisioning through this project.
        """
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The project custom properties which are added to all requests in this project.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="machineNamingTemplate")
    def machine_naming_template(self) -> pulumi.Output[Optional[str]]:
        """
        The naming template to be used for resources provisioned in this project.
        """
        return pulumi.get(self, "machine_naming_template")

    @property
    @pulumi.getter(name="memberRoles")
    def member_roles(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectMemberRole']]]:
        """
        Member users or groups associated with the project.
        """
        return pulumi.get(self, "member_roles")

    @property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of member users associated with the project.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="operationTimeout")
    def operation_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        The timeout that should be used for cloud template operations and provisioning tasks. The timeout is measured in seconds.
        """
        return pulumi.get(self, "operation_timeout")

    @property
    @pulumi.getter(name="placementPolicy")
    def placement_policy(self) -> pulumi.Output[Optional[str]]:
        """
        The placement policy that will be applied when selecting a cloud zone for provisioning. Must be one of `DEFAULT` or `SPREAD`.
        """
        return pulumi.get(self, "placement_policy")

    @property
    @pulumi.getter(name="sharedResources")
    def shared_resources(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the resources in this projects are shared or not. If not set default will be used.
        """
        return pulumi.get(self, "shared_resources")

    @property
    @pulumi.getter(name="viewerRoles")
    def viewer_roles(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectViewerRole']]]:
        """
        Viewer users or groups associated with the project.
        """
        return pulumi.get(self, "viewer_roles")

    @property
    @pulumi.getter
    def viewers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of viewer users associated with the project.
        """
        return pulumi.get(self, "viewers")

    @property
    @pulumi.getter(name="zoneAssignments")
    def zone_assignments(self) -> pulumi.Output[Optional[Sequence['outputs.ProjectZoneAssignment']]]:
        """
        A list of configurations for zone assignment to a project.
        """
        return pulumi.get(self, "zone_assignments")

