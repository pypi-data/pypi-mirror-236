# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAzureResult',
    'AwaitableGetAzureResult',
    'get_azure',
    'get_azure_output',
]

@pulumi.output_type
class GetAzureResult:
    """
    A collection of values returned by getAzure.
    """
    def __init__(__self__, cloud_account_id=None, created_at=None, data_disk_caching=None, default_item=None, description=None, disk_type=None, external_region_id=None, filter=None, id=None, links=None, name=None, org_id=None, os_disk_caching=None, owner=None, supports_encryption=None, tags=None, updated_at=None):
        if cloud_account_id and not isinstance(cloud_account_id, str):
            raise TypeError("Expected argument 'cloud_account_id' to be a str")
        pulumi.set(__self__, "cloud_account_id", cloud_account_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if data_disk_caching and not isinstance(data_disk_caching, str):
            raise TypeError("Expected argument 'data_disk_caching' to be a str")
        pulumi.set(__self__, "data_disk_caching", data_disk_caching)
        if default_item and not isinstance(default_item, bool):
            raise TypeError("Expected argument 'default_item' to be a bool")
        pulumi.set(__self__, "default_item", default_item)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disk_type and not isinstance(disk_type, str):
            raise TypeError("Expected argument 'disk_type' to be a str")
        pulumi.set(__self__, "disk_type", disk_type)
        if external_region_id and not isinstance(external_region_id, str):
            raise TypeError("Expected argument 'external_region_id' to be a str")
        pulumi.set(__self__, "external_region_id", external_region_id)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if links and not isinstance(links, list):
            raise TypeError("Expected argument 'links' to be a list")
        pulumi.set(__self__, "links", links)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if os_disk_caching and not isinstance(os_disk_caching, str):
            raise TypeError("Expected argument 'os_disk_caching' to be a str")
        pulumi.set(__self__, "os_disk_caching", os_disk_caching)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if supports_encryption and not isinstance(supports_encryption, bool):
            raise TypeError("Expected argument 'supports_encryption' to be a bool")
        pulumi.set(__self__, "supports_encryption", supports_encryption)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="cloudAccountId")
    def cloud_account_id(self) -> str:
        return pulumi.get(self, "cloud_account_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        Date when the entity was created. The date is in ISO 6801 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataDiskCaching")
    def data_disk_caching(self) -> str:
        """
        Indicates the caching mechanism for additional disk.
        """
        return pulumi.get(self, "data_disk_caching")

    @property
    @pulumi.getter(name="defaultItem")
    def default_item(self) -> bool:
        """
        Indicates if this storage profile is a default profile.
        """
        return pulumi.get(self, "default_item")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        Indicates the performance tier for the storage type. Premium disks are SSD backed and Standard disks are HDD backed.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> str:
        """
        The id of the region as seen in the cloud provider for which this profile is defined.
        """
        return pulumi.get(self, "external_region_id")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetAzureLinkResult']:
        """
        HATEOAS of the entity
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A human-friendly name used as an identifier in APIs that support this option.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="osDiskCaching")
    def os_disk_caching(self) -> str:
        """
        Indicates the caching mechanism for OS disk. Default policy for OS disks is Read/Write.
        """
        return pulumi.get(self, "os_disk_caching")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="supportsEncryption")
    def supports_encryption(self) -> bool:
        """
        Indicates whether this storage policy should support encryption or not.
        """
        return pulumi.get(self, "supports_encryption")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetAzureTagResult']:
        """
        A set of tag keys and optional values that were set on this Network Profile.
        example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetAzureResult(GetAzureResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAzureResult(
            cloud_account_id=self.cloud_account_id,
            created_at=self.created_at,
            data_disk_caching=self.data_disk_caching,
            default_item=self.default_item,
            description=self.description,
            disk_type=self.disk_type,
            external_region_id=self.external_region_id,
            filter=self.filter,
            id=self.id,
            links=self.links,
            name=self.name,
            org_id=self.org_id,
            os_disk_caching=self.os_disk_caching,
            owner=self.owner,
            supports_encryption=self.supports_encryption,
            tags=self.tags,
            updated_at=self.updated_at)


def get_azure(filter: Optional[str] = None,
              id: Optional[str] = None,
              tags: Optional[Sequence[pulumi.InputType['GetAzureTagArgs']]] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAzureResult:
    """
    ## Example Usage
    ### S
    This is an example of how to create a storage profile azure resource.

    **Storage profile azure data source by its id:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.storageprofile.get_azure(id=vra_storage_profile_azure["this"]["id"])
    ```

    **Vra storage profile data source filter by external region id:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.storageprofile.get_azure(filter="externalRegionId eq 'foobar'")
    ```

    A storage profile azure data source supports the following arguments:


    :param str filter: Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '<regionId>' and cloudAccountId eq '<cloudAccountId>'.
    :param str id: The id of the image profile instance.
    :param Sequence[pulumi.InputType['GetAzureTagArgs']] tags: A set of tag keys and optional values that were set on this Network Profile.
           example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
    """
    __args__ = dict()
    __args__['filter'] = filter
    __args__['id'] = id
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('vra:storageprofile/getAzure:getAzure', __args__, opts=opts, typ=GetAzureResult).value

    return AwaitableGetAzureResult(
        cloud_account_id=__ret__.cloud_account_id,
        created_at=__ret__.created_at,
        data_disk_caching=__ret__.data_disk_caching,
        default_item=__ret__.default_item,
        description=__ret__.description,
        disk_type=__ret__.disk_type,
        external_region_id=__ret__.external_region_id,
        filter=__ret__.filter,
        id=__ret__.id,
        links=__ret__.links,
        name=__ret__.name,
        org_id=__ret__.org_id,
        os_disk_caching=__ret__.os_disk_caching,
        owner=__ret__.owner,
        supports_encryption=__ret__.supports_encryption,
        tags=__ret__.tags,
        updated_at=__ret__.updated_at)


@_utilities.lift_output_func(get_azure)
def get_azure_output(filter: Optional[pulumi.Input[Optional[str]]] = None,
                     id: Optional[pulumi.Input[Optional[str]]] = None,
                     tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetAzureTagArgs']]]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAzureResult]:
    """
    ## Example Usage
    ### S
    This is an example of how to create a storage profile azure resource.

    **Storage profile azure data source by its id:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.storageprofile.get_azure(id=vra_storage_profile_azure["this"]["id"])
    ```

    **Vra storage profile data source filter by external region id:**

    ```python
    import pulumi
    import pulumi_vra as vra

    this = vra.storageprofile.get_azure(filter="externalRegionId eq 'foobar'")
    ```

    A storage profile azure data source supports the following arguments:


    :param str filter: Filter query string that is supported by vRA multi-cloud IaaS API. Example: regionId eq '<regionId>' and cloudAccountId eq '<cloudAccountId>'.
    :param str id: The id of the image profile instance.
    :param Sequence[pulumi.InputType['GetAzureTagArgs']] tags: A set of tag keys and optional values that were set on this Network Profile.
           example:[ { "key" : "ownedBy", "value": "Rainpole" } ]
    """
    ...
