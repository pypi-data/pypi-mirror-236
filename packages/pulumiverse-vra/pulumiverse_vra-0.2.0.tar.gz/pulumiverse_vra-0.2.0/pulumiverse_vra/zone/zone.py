# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZoneArgs', 'Zone']

@pulumi.input_type
class ZoneArgs:
    def __init__(__self__, *,
                 region_id: pulumi.Input[str],
                 compute_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 placement_policy: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]] = None,
                 tags_to_matches: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagsToMatchArgs']]]] = None):
        """
        The set of arguments for constructing a Zone resource.
        :param pulumi.Input[str] region_id: The id of the region for which this zone is created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] compute_ids: The ids of the compute resources that will be explicitly assigned to this zone.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: A list of key value pair of properties that will be used.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] folder: The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
        :param pulumi.Input[str] name: A human-friendly name used as an identifier for the zone resource instance.
        :param pulumi.Input[str] placement_policy: The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]] tags: A set of tag keys and optional values that were set on this resource:
        :param pulumi.Input[Sequence[pulumi.Input['ZoneTagsToMatchArgs']]] tags_to_matches: A set of tag keys and optional values for compute resource filtering:
        """
        pulumi.set(__self__, "region_id", region_id)
        if compute_ids is not None:
            pulumi.set(__self__, "compute_ids", compute_ids)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if placement_policy is not None:
            pulumi.set(__self__, "placement_policy", placement_policy)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_to_matches is not None:
            pulumi.set(__self__, "tags_to_matches", tags_to_matches)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[str]:
        """
        The id of the region for which this zone is created.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter(name="computeIds")
    def compute_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ids of the compute resources that will be explicitly assigned to this zone.
        """
        return pulumi.get(self, "compute_ids")

    @compute_ids.setter
    def compute_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "compute_ids", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of key value pair of properties that will be used.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier for the zone resource instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="placementPolicy")
    def placement_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
        """
        return pulumi.get(self, "placement_policy")

    @placement_policy.setter
    def placement_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_policy", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]]:
        """
        A set of tag keys and optional values that were set on this resource:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsToMatches")
    def tags_to_matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagsToMatchArgs']]]]:
        """
        A set of tag keys and optional values for compute resource filtering:
        """
        return pulumi.get(self, "tags_to_matches")

    @tags_to_matches.setter
    def tags_to_matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagsToMatchArgs']]]]):
        pulumi.set(self, "tags_to_matches", value)


@pulumi.input_type
class _ZoneState:
    def __init__(__self__, *,
                 cloud_account_id: Optional[pulumi.Input[str]] = None,
                 compute_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_region_id: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneLinkArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 placement_policy: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]] = None,
                 tags_to_matches: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagsToMatchArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Zone resources.
        :param pulumi.Input[str] cloud_account_id: The ID of the cloud account this zone belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] compute_ids: The ids of the compute resources that will be explicitly assigned to this zone.
        :param pulumi.Input[str] created_at: Date when the entity was created. The date is in ISO 8601 and UTC.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: A list of key value pair of properties that will be used.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] external_region_id: The id of the region for which this zone is defined.
        :param pulumi.Input[str] folder: The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
        :param pulumi.Input[Sequence[pulumi.Input['ZoneLinkArgs']]] links: HATEOAS of entity.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier for the zone resource instance.
        :param pulumi.Input[str] org_id: The id of the organization this entity belongs to.
        :param pulumi.Input[str] owner: Email of the user that owns the entity.
        :param pulumi.Input[str] placement_policy: The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
        :param pulumi.Input[str] region_id: The id of the region for which this zone is created.
        :param pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]] tags: A set of tag keys and optional values that were set on this resource:
        :param pulumi.Input[Sequence[pulumi.Input['ZoneTagsToMatchArgs']]] tags_to_matches: A set of tag keys and optional values for compute resource filtering:
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        if cloud_account_id is not None:
            pulumi.set(__self__, "cloud_account_id", cloud_account_id)
        if compute_ids is not None:
            pulumi.set(__self__, "compute_ids", compute_ids)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_region_id is not None:
            pulumi.set(__self__, "external_region_id", external_region_id)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if placement_policy is not None:
            pulumi.set(__self__, "placement_policy", placement_policy)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_to_matches is not None:
            pulumi.set(__self__, "tags_to_matches", tags_to_matches)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="cloudAccountId")
    def cloud_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the cloud account this zone belongs to.
        """
        return pulumi.get(self, "cloud_account_id")

    @cloud_account_id.setter
    def cloud_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_account_id", value)

    @property
    @pulumi.getter(name="computeIds")
    def compute_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ids of the compute resources that will be explicitly assigned to this zone.
        """
        return pulumi.get(self, "compute_ids")

    @compute_ids.setter
    def compute_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "compute_ids", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when the entity was created. The date is in ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of key value pair of properties that will be used.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the region for which this zone is defined.
        """
        return pulumi.get(self, "external_region_id")

    @external_region_id.setter
    def external_region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_region_id", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneLinkArgs']]]]:
        """
        HATEOAS of entity.
        """
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A human-friendly name used as an identifier for the zone resource instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the organization this entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="placementPolicy")
    def placement_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
        """
        return pulumi.get(self, "placement_policy")

    @placement_policy.setter
    def placement_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_policy", value)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the region for which this zone is created.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]]:
        """
        A set of tag keys and optional values that were set on this resource:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tagsToMatches")
    def tags_to_matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagsToMatchArgs']]]]:
        """
        A set of tag keys and optional values for compute resource filtering:
        """
        return pulumi.get(self, "tags_to_matches")

    @tags_to_matches.setter
    def tags_to_matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneTagsToMatchArgs']]]]):
        pulumi.set(self, "tags_to_matches", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class Zone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 placement_policy: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagArgs']]]]] = None,
                 tags_to_matches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagsToMatchArgs']]]]] = None,
                 __props__=None):
        """
        ## Example Usage
        ### S

        This is an example of how to create a zone resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.zone.Zone("this",
            description="my terraform test cloud zone",
            region_id=data["vra_region"]["this"]["id"],
            tags=[
                vra.zone.ZoneTagArgs(
                    key="my-tf-key",
                    value="my-tf-value",
                ),
                vra.zone.ZoneTagArgs(
                    key="tf-foo",
                    value="tf-bar",
                ),
            ])
        ```

        A zone resource supports the following arguments:

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] compute_ids: The ids of the compute resources that will be explicitly assigned to this zone.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: A list of key value pair of properties that will be used.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] folder: The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
        :param pulumi.Input[str] name: A human-friendly name used as an identifier for the zone resource instance.
        :param pulumi.Input[str] placement_policy: The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
        :param pulumi.Input[str] region_id: The id of the region for which this zone is created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagArgs']]]] tags: A set of tag keys and optional values that were set on this resource:
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagsToMatchArgs']]]] tags_to_matches: A set of tag keys and optional values for compute resource filtering:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZoneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage
        ### S

        This is an example of how to create a zone resource.

        ```python
        import pulumi
        import pulumiverse_vra as vra

        this = vra.zone.Zone("this",
            description="my terraform test cloud zone",
            region_id=data["vra_region"]["this"]["id"],
            tags=[
                vra.zone.ZoneTagArgs(
                    key="my-tf-key",
                    value="my-tf-value",
                ),
                vra.zone.ZoneTagArgs(
                    key="tf-foo",
                    value="tf-bar",
                ),
            ])
        ```

        A zone resource supports the following arguments:

        :param str resource_name: The name of the resource.
        :param ZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compute_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 placement_policy: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagArgs']]]]] = None,
                 tags_to_matches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagsToMatchArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZoneArgs.__new__(ZoneArgs)

            __props__.__dict__["compute_ids"] = compute_ids
            __props__.__dict__["custom_properties"] = custom_properties
            __props__.__dict__["description"] = description
            __props__.__dict__["folder"] = folder
            __props__.__dict__["name"] = name
            __props__.__dict__["placement_policy"] = placement_policy
            if region_id is None and not opts.urn:
                raise TypeError("Missing required property 'region_id'")
            __props__.__dict__["region_id"] = region_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tags_to_matches"] = tags_to_matches
            __props__.__dict__["cloud_account_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["external_region_id"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["org_id"] = None
            __props__.__dict__["owner"] = None
            __props__.__dict__["updated_at"] = None
        super(Zone, __self__).__init__(
            'vra:zone/zone:Zone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_account_id: Optional[pulumi.Input[str]] = None,
            compute_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            custom_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            external_region_id: Optional[pulumi.Input[str]] = None,
            folder: Optional[pulumi.Input[str]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneLinkArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            placement_policy: Optional[pulumi.Input[str]] = None,
            region_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagArgs']]]]] = None,
            tags_to_matches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagsToMatchArgs']]]]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'Zone':
        """
        Get an existing Zone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_account_id: The ID of the cloud account this zone belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] compute_ids: The ids of the compute resources that will be explicitly assigned to this zone.
        :param pulumi.Input[str] created_at: Date when the entity was created. The date is in ISO 8601 and UTC.
        :param pulumi.Input[Mapping[str, Any]] custom_properties: A list of key value pair of properties that will be used.
        :param pulumi.Input[str] description: A human-friendly description.
        :param pulumi.Input[str] external_region_id: The id of the region for which this zone is defined.
        :param pulumi.Input[str] folder: The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneLinkArgs']]]] links: HATEOAS of entity.
        :param pulumi.Input[str] name: A human-friendly name used as an identifier for the zone resource instance.
        :param pulumi.Input[str] org_id: The id of the organization this entity belongs to.
        :param pulumi.Input[str] owner: Email of the user that owns the entity.
        :param pulumi.Input[str] placement_policy: The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
        :param pulumi.Input[str] region_id: The id of the region for which this zone is created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagArgs']]]] tags: A set of tag keys and optional values that were set on this resource:
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZoneTagsToMatchArgs']]]] tags_to_matches: A set of tag keys and optional values for compute resource filtering:
        :param pulumi.Input[str] updated_at: Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZoneState.__new__(_ZoneState)

        __props__.__dict__["cloud_account_id"] = cloud_account_id
        __props__.__dict__["compute_ids"] = compute_ids
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["custom_properties"] = custom_properties
        __props__.__dict__["description"] = description
        __props__.__dict__["external_region_id"] = external_region_id
        __props__.__dict__["folder"] = folder
        __props__.__dict__["links"] = links
        __props__.__dict__["name"] = name
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["owner"] = owner
        __props__.__dict__["placement_policy"] = placement_policy
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_to_matches"] = tags_to_matches
        __props__.__dict__["updated_at"] = updated_at
        return Zone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudAccountId")
    def cloud_account_id(self) -> pulumi.Output[str]:
        """
        The ID of the cloud account this zone belongs to.
        """
        return pulumi.get(self, "cloud_account_id")

    @property
    @pulumi.getter(name="computeIds")
    def compute_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The ids of the compute resources that will be explicitly assigned to this zone.
        """
        return pulumi.get(self, "compute_ids")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Date when the entity was created. The date is in ISO 8601 and UTC.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        A list of key value pair of properties that will be used.
        """
        return pulumi.get(self, "custom_properties")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A human-friendly description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalRegionId")
    def external_region_id(self) -> pulumi.Output[str]:
        """
        The id of the region for which this zone is defined.
        """
        return pulumi.get(self, "external_region_id")

    @property
    @pulumi.getter
    def folder(self) -> pulumi.Output[Optional[str]]:
        """
        The folder relative path to the datacenter where resources are deployed to (only applicable for vSphere cloud zones).
        """
        return pulumi.get(self, "folder")

    @property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.ZoneLink']]:
        """
        HATEOAS of entity.
        """
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A human-friendly name used as an identifier for the zone resource instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[str]:
        """
        The id of the organization this entity belongs to.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        Email of the user that owns the entity.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="placementPolicy")
    def placement_policy(self) -> pulumi.Output[Optional[str]]:
        """
        The placement policy for the zone. One of `DEFAULT`, `SPREAD` or `BINPACK`. Default is `DEFAULT`.
        """
        return pulumi.get(self, "placement_policy")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[str]:
        """
        The id of the region for which this zone is created.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.ZoneTag']]:
        """
        A set of tag keys and optional values that were set on this resource:
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tagsToMatches")
    def tags_to_matches(self) -> pulumi.Output[Sequence['outputs.ZoneTagsToMatch']]:
        """
        A set of tag keys and optional values for compute resource filtering:
        """
        return pulumi.get(self, "tags_to_matches")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Date when the entity was last updated. The date is ISO 8601 and UTC.
        """
        return pulumi.get(self, "updated_at")

