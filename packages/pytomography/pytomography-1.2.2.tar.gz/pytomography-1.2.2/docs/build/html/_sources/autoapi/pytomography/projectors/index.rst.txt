:py:mod:`pytomography.projectors`
=================================

.. py:module:: pytomography.projectors

.. autoapi-nested-parse::

   This module contains classes/functionality for operators that map between distinct vector spaces. One (very important) operator of this form is the system matrix :math:`H:\mathbb{U} \to \mathbb{V}`, which maps from object space :math:`\mathbb{U}` to image space :math:`\mathbb{V}`



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   SPECT/index.rst
   shared/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   system_matrix/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pytomography.projectors.SystemMatrix
   pytomography.projectors.SPECTSystemMatrix
   pytomography.projectors.SPECTSystemMatrixMaskedSegments
   pytomography.projectors.KEMSystemMatrix




.. py:class:: SystemMatrix(obj2obj_transforms, proj2proj_transforms, object_meta, proj_meta)

   Abstract class for a general system matrix :math:`H:\mathbb{U} \to \mathbb{V}` which takes in an object :math:`f \in \mathbb{U}` and maps it to corresponding projections :math:`g \in \mathbb{V}` that would be produced by the imaging system. A system matrix consists of sequences of object-to-object and proj-to-proj transforms that model various characteristics of the imaging system, such as attenuation and blurring. While the class implements the operator :math:`H:\mathbb{U} \to \mathbb{V}` through the ``forward`` method, it also implements :math:`H^T:\mathbb{V} \to \mathbb{U}` through the `backward` method, required during iterative reconstruction algorithms such as OSEM.

   :param obj2obj_transforms: Sequence of object mappings that occur before forward projection.
   :type obj2obj_transforms: Sequence[Transform]
   :param im2im_transforms: Sequence of proj mappings that occur after forward projection.
   :type im2im_transforms: Sequence[Transform]
   :param object_meta: Object metadata.
   :type object_meta: ObjectMeta
   :param proj_meta: Projection metadata.
   :type proj_meta: ProjMeta

   .. py:method:: initialize_transforms()

      Initializes all transforms used to build the system matrix



   .. py:method:: forward(object, **kwargs)
      :abstractmethod:

      Implements forward projection :math:`Hf` on an object :math:`f`.

      :param object: The object to be forward projected
      :type object: torch.tensor[batch_size, Lx, Ly, Lz]
      :param angle_subset: Only uses a subset of angles (i.e. only certain values of :math:`j` in formula above) when back projecting. Useful for ordered-subset reconstructions. Defaults to None, which assumes all angles are used.
      :type angle_subset: list, optional

      :returns: Forward projected proj where Ltheta is specified by `self.proj_meta` and `angle_subset`.
      :rtype: torch.tensor[batch_size, Ltheta, Lx, Lz]


   .. py:method:: backward(proj, angle_subset = None, return_norm_constant = False)
      :abstractmethod:

      Implements back projection :math:`H^T g` on a set of projections :math:`g`.

      :param proj: proj which is to be back projected
      :type proj: torch.Tensor
      :param angle_subset: Only uses a subset of angles (i.e. only certain values of :math:`j` in formula above) when back projecting. Useful for ordered-subset reconstructions. Defaults to None, which assumes all angles are used.
      :type angle_subset: list, optional
      :param return_norm_constant: Whether or not to return :math:`1/\sum_j H_{ij}` along with back projection. Defaults to 'False'.
      :type return_norm_constant: bool

      :returns: the object obtained from back projection.
      :rtype: torch.tensor[batch_size, Lr, Lr, Lz]



.. py:class:: SPECTSystemMatrix(obj2obj_transforms, proj2proj_transforms, object_meta, proj_meta, n_parallel=1)

   Bases: :py:obj:`pytomography.projectors.system_matrix.SystemMatrix`

   System matrix for SPECT imaging. By default, this applies to parallel hole collimators, but appropriate use of `proj2proj_transforms` can allow this system matrix to also model converging/diverging collimator configurations as well.

   :param obj2obj_transforms: Sequence of object mappings that occur before forward projection.
   :type obj2obj_transforms: Sequence[Transform]
   :param proj2proj_transforms: Sequence of proj mappings that occur after forward projection.
   :type proj2proj_transforms: Sequence[Transform]
   :param object_meta: SPECT Object metadata.
   :type object_meta: SPECTObjectMeta
   :param proj_meta: SPECT projection metadata.
   :type proj_meta: SPECTProjMeta
   :param n_parallel: Number of projections to use in parallel when applying transforms. More parallel events may speed up reconstruction time, but also increases GPU usage. Defaults to 1.
   :type n_parallel: int

   .. py:method:: forward(object, angle_subset = None)

      Applies forward projection to ``object`` for a SPECT imaging system.

      :param object: The object to be forward projected
      :type object: torch.tensor[batch_size, Lx, Ly, Lz]
      :param angle_subset: Only uses a subset of angles (i.e. only certain values of :math:`j` in formula above) when back projecting. Useful for ordered-subset reconstructions. Defaults to None, which assumes all angles are used.
      :type angle_subset: list, optional

      :returns: Forward projected projections where Ltheta is specified by `self.proj_meta` and `angle_subset`.
      :rtype: torch.tensor[batch_size, Ltheta, Lx, Lz]


   .. py:method:: backward(proj, angle_subset = None, return_norm_constant = False)

      Applies back projection to ``proj`` for a SPECT imaging system.

      :param proj: projections which are to be back projected
      :type proj: torch.tensor[batch_size, Ltheta, Lr, Lz]
      :param angle_subset: Only uses a subset of angles (i.e. only certain values of :math:`j` in formula above) when back projecting. Useful for ordered-subset reconstructions. Defaults to None, which assumes all angles are used.
      :type angle_subset: list, optional
      :param return_norm_constant: Whether or not to return :math:`1/\sum_j H_{ij}` along with back projection. Defaults to 'False'.
      :type return_norm_constant: bool

      :returns: the object obtained from back projection.
      :rtype: torch.tensor[batch_size, Lr, Lr, Lz]



.. py:class:: SPECTSystemMatrixMaskedSegments(obj2obj_transforms, proj2proj_transforms, object_meta, proj_meta, masks)

   Bases: :py:obj:`SPECTSystemMatrix`

   SPECT system matrix where the object space is a vector of length :math:`N` consisting of the mean activities for each masks in ``masks``. This system matrix can be used in reconstruction algorithms to obtain maximum liklihood estimations for the average value of :math:`f` inside each of the masks.

   :param obj2obj_transforms: Sequence of object mappings that occur before forward projection.
   :type obj2obj_transforms: Sequence[Transform]
   :param proj2proj_transforms: Sequence of proj mappings that occur after forward projection.
   :type proj2proj_transforms: Sequence[Transform]
   :param object_meta: SPECT Object metadata.
   :type object_meta: SPECTObjectMeta
   :param proj_meta: SPECT proj metadata.
   :type proj_meta: SPECTProjMeta
   :param masks: Masks corresponding to each segmented region.
   :type masks: torch.Tensor

   .. py:method:: forward(activities, angle_subset = None)

      Implements forward projection :math:`HUa` on a vector of activities :math:`a` corresponding to `self.masks`.

      :param activities: Activities in each mask region.
      :type activities: torch.tensor[batch_size, n_masks]
      :param angle_subset: Only uses a subset of angles (i.e. only certain values of :math:`j` in formula above) when back projecting. Useful for ordered-subset reconstructions. Defaults to None, which assumes all angles are used.
      :type angle_subset: list, optional

      :returns: Forward projected projections where Ltheta is specified by `self.proj_meta` and `angle_subset`.
      :rtype: torch.tensor[batch_size, Ltheta, Lx, Lz]


   .. py:method:: backward(proj, angle_subset = None, prior = None, normalize = False, return_norm_constant = False)

      Implements back projection :math:`U^T H^T g` on projections :math:`g`, returning a vector of activities for each mask region.

      :param proj: projections which are to be back projected
      :type proj: torch.tensor[batch_size, Ltheta, Lr, Lz]
      :param angle_subset: Only uses a subset of angles (i.e. only certain values of :math:`j` in formula above) when back projecting. Useful for ordered-subset reconstructions. Defaults to None, which assumes all angles are used.
      :type angle_subset: list, optional
      :param prior: If included, modifes normalizing factor to :math:`\frac{1}{\sum_j H_{ij} + P_i}` where :math:`P_i` is given by the prior. Used, for example, during in MAP OSEM. Defaults to None.
      :type prior: Prior, optional
      :param normalize: Whether or not to divide result by :math:`\sum_j H_{ij}`
      :type normalize: bool
      :param return_norm_constant: Whether or not to return :math:`1/\sum_j H_{ij}` along with back projection. Defaults to 'False'.
      :type return_norm_constant: bool

      :returns: the activities in each mask region.
      :rtype: torch.tensor[batch_size, n_masks]



.. py:class:: KEMSystemMatrix(system_matrix, kem_transform)

   Bases: :py:obj:`pytomography.projectors.system_matrix.SystemMatrix`

   Given a KEM transform :math:`K` and a system matrix :math:`H`, implements the transform :math:`HK` (and backward transform :math:`K^T H^T`)

   :param system_matrix: System matrix corresponding to a particular imaging system
   :type system_matrix: SystemMatrix
   :param kem_transform: Transform used to go from coefficient image to real image of predicted counts.
   :type kem_transform: KEMTransform

   .. py:method:: forward(object, angle_subset=None)

      Forward transform :math:`HK`

      :param object: Object to be forward projected
      :type object: torch.tensor
      :param angle_subset: Angles to forward projected; if none, project to all angles. Defaults to None.
      :type angle_subset: Sequence, optional

      :returns: Corresponding projections generated from forward projection
      :rtype: torch.tensor


   .. py:method:: backward(proj, angle_subset=None, return_norm_constant=False)

      Backward transform :math:`K^T H^T`

      :param proj: Projection data to be back projected
      :type proj: torch.tensor
      :param angle_subset: Angles corresponding to projections; if none, then all projections from ``self.proj_meta`` are contained. Defaults to None.
      :type angle_subset: Sequence, optional
      :param return_norm_constant: Additionally returns :math:`K^T H^T 1` if true; defaults to False.
      :type return_norm_constant: bool, optional

      :returns: Corresponding object generated from back projection.
      :rtype: torch.tensor



