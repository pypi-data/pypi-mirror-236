# coding: utf-8

"""
    RTU MIREA VUC

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.2.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from pydantic import StrictBool, StrictInt

from typing import List, Optional

from schedule_service_client.models.platoon import Platoon
from schedule_service_client.models.schedule_result import ScheduleResult
from schedule_service_client.models.week_date import WeekDate
from schedule_service_client.models.week_schedule_result import WeekScheduleResult

from schedule_service_client.api_client import ApiClient
from schedule_service_client.api_response import ApiResponse
from schedule_service_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ScheduleApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def get_days_week_api_v1_schedule_day_week_get(self, course : StrictInt, platoon : Optional[StrictInt] = None, **kwargs) -> List[WeekDate]:  # noqa: E501
        ...

    @overload
    def get_days_week_api_v1_schedule_day_week_get(self, course : StrictInt, platoon : Optional[StrictInt] = None, async_req: Optional[bool]=True, **kwargs) -> List[WeekDate]:  # noqa: E501
        ...

    @validate_arguments
    def get_days_week_api_v1_schedule_day_week_get(self, course : StrictInt, platoon : Optional[StrictInt] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[WeekDate], Awaitable[List[WeekDate]]]:  # noqa: E501
        """Get Days Week  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_days_week_api_v1_schedule_day_week_get(course, platoon, async_req=True)
        >>> result = thread.get()

        :param course: (required)
        :type course: int
        :param platoon:
        :type platoon: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[WeekDate]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_days_week_api_v1_schedule_day_week_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_days_week_api_v1_schedule_day_week_get_with_http_info(course, platoon, **kwargs)  # noqa: E501

    @validate_arguments
    def get_days_week_api_v1_schedule_day_week_get_with_http_info(self, course : StrictInt, platoon : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Days Week  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_days_week_api_v1_schedule_day_week_get_with_http_info(course, platoon, async_req=True)
        >>> result = thread.get()

        :param course: (required)
        :type course: int
        :param platoon:
        :type platoon: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[WeekDate], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'course',
            'platoon'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_days_week_api_v1_schedule_day_week_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('course') is not None:  # noqa: E501
            _query_params.append(('course', _params['course']))

        if _params.get('platoon') is not None:  # noqa: E501
            _query_params.append(('platoon', _params['platoon']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[WeekDate]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/schedule/day/week', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_platoons_api_v1_schedule_platoons_get(self, course : StrictInt, group_by_speciality_code : Optional[StrictBool] = None, **kwargs) -> List[Platoon]:  # noqa: E501
        ...

    @overload
    def get_platoons_api_v1_schedule_platoons_get(self, course : StrictInt, group_by_speciality_code : Optional[StrictBool] = None, async_req: Optional[bool]=True, **kwargs) -> List[Platoon]:  # noqa: E501
        ...

    @validate_arguments
    def get_platoons_api_v1_schedule_platoons_get(self, course : StrictInt, group_by_speciality_code : Optional[StrictBool] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[Platoon], Awaitable[List[Platoon]]]:  # noqa: E501
        """Get Platoons  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_platoons_api_v1_schedule_platoons_get(course, group_by_speciality_code, async_req=True)
        >>> result = thread.get()

        :param course: (required)
        :type course: int
        :param group_by_speciality_code:
        :type group_by_speciality_code: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Platoon]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_platoons_api_v1_schedule_platoons_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_platoons_api_v1_schedule_platoons_get_with_http_info(course, group_by_speciality_code, **kwargs)  # noqa: E501

    @validate_arguments
    def get_platoons_api_v1_schedule_platoons_get_with_http_info(self, course : StrictInt, group_by_speciality_code : Optional[StrictBool] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Platoons  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_platoons_api_v1_schedule_platoons_get_with_http_info(course, group_by_speciality_code, async_req=True)
        >>> result = thread.get()

        :param course: (required)
        :type course: int
        :param group_by_speciality_code:
        :type group_by_speciality_code: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Platoon], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'course',
            'group_by_speciality_code'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_platoons_api_v1_schedule_platoons_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('group_by_speciality_code') is not None:  # noqa: E501
            _query_params.append(('group_by_speciality_code', _params['group_by_speciality_code']))

        if _params.get('course') is not None:  # noqa: E501
            _query_params.append(('course', _params['course']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[Platoon]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/schedule/platoons', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_schedule_api_v1_schedule_get(self, course : StrictInt, platoon : Optional[StrictInt] = None, **kwargs) -> List[ScheduleResult]:  # noqa: E501
        ...

    @overload
    def get_schedule_api_v1_schedule_get(self, course : StrictInt, platoon : Optional[StrictInt] = None, async_req: Optional[bool]=True, **kwargs) -> List[ScheduleResult]:  # noqa: E501
        ...

    @validate_arguments
    def get_schedule_api_v1_schedule_get(self, course : StrictInt, platoon : Optional[StrictInt] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[ScheduleResult], Awaitable[List[ScheduleResult]]]:  # noqa: E501
        """Get Schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_schedule_api_v1_schedule_get(course, platoon, async_req=True)
        >>> result = thread.get()

        :param course: (required)
        :type course: int
        :param platoon:
        :type platoon: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ScheduleResult]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_schedule_api_v1_schedule_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_schedule_api_v1_schedule_get_with_http_info(course, platoon, **kwargs)  # noqa: E501

    @validate_arguments
    def get_schedule_api_v1_schedule_get_with_http_info(self, course : StrictInt, platoon : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_schedule_api_v1_schedule_get_with_http_info(course, platoon, async_req=True)
        >>> result = thread.get()

        :param course: (required)
        :type course: int
        :param platoon:
        :type platoon: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ScheduleResult], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'course',
            'platoon'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schedule_api_v1_schedule_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('course') is not None:  # noqa: E501
            _query_params.append(('course', _params['course']))

        if _params.get('platoon') is not None:  # noqa: E501
            _query_params.append(('platoon', _params['platoon']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[ScheduleResult]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/schedule/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_week_schedule_api_v1_schedule_week_get(self, course : StrictInt, week : Optional[StrictInt], platoon : Optional[StrictInt] = None, **kwargs) -> List[WeekScheduleResult]:  # noqa: E501
        ...

    @overload
    def get_week_schedule_api_v1_schedule_week_get(self, course : StrictInt, week : Optional[StrictInt], platoon : Optional[StrictInt] = None, async_req: Optional[bool]=True, **kwargs) -> List[WeekScheduleResult]:  # noqa: E501
        ...

    @validate_arguments
    def get_week_schedule_api_v1_schedule_week_get(self, course : StrictInt, week : Optional[StrictInt], platoon : Optional[StrictInt] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[WeekScheduleResult], Awaitable[List[WeekScheduleResult]]]:  # noqa: E501
        """Get Week Schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_week_schedule_api_v1_schedule_week_get(course, week, platoon, async_req=True)
        >>> result = thread.get()

        :param course: (required)
        :type course: int
        :param week: (required)
        :type week: int
        :param platoon:
        :type platoon: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[WeekScheduleResult]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_week_schedule_api_v1_schedule_week_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_week_schedule_api_v1_schedule_week_get_with_http_info(course, week, platoon, **kwargs)  # noqa: E501

    @validate_arguments
    def get_week_schedule_api_v1_schedule_week_get_with_http_info(self, course : StrictInt, week : Optional[StrictInt], platoon : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Week Schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_week_schedule_api_v1_schedule_week_get_with_http_info(course, week, platoon, async_req=True)
        >>> result = thread.get()

        :param course: (required)
        :type course: int
        :param week: (required)
        :type week: int
        :param platoon:
        :type platoon: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[WeekScheduleResult], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'course',
            'week',
            'platoon'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_week_schedule_api_v1_schedule_week_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('course') is not None:  # noqa: E501
            _query_params.append(('course', _params['course']))

        if _params.get('week') is not None:  # noqa: E501
            _query_params.append(('week', _params['week']))

        if _params.get('platoon') is not None:  # noqa: E501
            _query_params.append(('platoon', _params['platoon']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[WeekScheduleResult]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/schedule/week', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
