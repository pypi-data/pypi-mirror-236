# coding: utf-8

"""
    RTU MIREA VUC

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.2.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field
from schedule_service_client.models.workbook_path import WorkbookPath
from schedule_service_client.models.workbook_settings_path import WorkbookSettingsPath

class WorkbookFile(BaseModel):
    """
    WorkbookFile
    """
    course: Optional[Any] = Field(...)
    workbook_path: WorkbookPath = Field(...)
    workbook_settings_path: WorkbookSettingsPath = Field(...)
    workbook_settings: Optional[Any] = Field(...)
    __properties = ["course", "workbook_path", "workbook_settings_path", "workbook_settings"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkbookFile:
        """Create an instance of WorkbookFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of workbook_path
        if self.workbook_path:
            _dict['workbook_path'] = self.workbook_path.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workbook_settings_path
        if self.workbook_settings_path:
            _dict['workbook_settings_path'] = self.workbook_settings_path.to_dict()
        # set to None if course (nullable) is None
        # and __fields_set__ contains the field
        if self.course is None and "course" in self.__fields_set__:
            _dict['course'] = None

        # set to None if workbook_settings (nullable) is None
        # and __fields_set__ contains the field
        if self.workbook_settings is None and "workbook_settings" in self.__fields_set__:
            _dict['workbook_settings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkbookFile:
        """Create an instance of WorkbookFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkbookFile.parse_obj(obj)

        _obj = WorkbookFile.parse_obj({
            "course": obj.get("course"),
            "workbook_path": WorkbookPath.from_dict(obj.get("workbook_path")) if obj.get("workbook_path") is not None else None,
            "workbook_settings_path": WorkbookSettingsPath.from_dict(obj.get("workbook_settings_path")) if obj.get("workbook_settings_path") is not None else None,
        })
        return _obj


