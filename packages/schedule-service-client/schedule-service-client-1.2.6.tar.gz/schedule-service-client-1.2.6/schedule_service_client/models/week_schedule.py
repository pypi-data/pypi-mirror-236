# coding: utf-8

"""
    RTU MIREA VUC

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.2.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from schedule_service_client.models.subject import Subject

class WeekSchedule(BaseModel):
    """
    WeekSchedule
    """
    var_date: Optional[StrictStr] = Field(None, alias="date")
    datetime: Optional[StrictStr] = None
    subjects: Optional[conlist(Subject)] = None
    coordinates: Optional[Any] = None
    __properties = ["date", "datetime", "subjects", "coordinates"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WeekSchedule:
        """Create an instance of WeekSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in subjects (list)
        _items = []
        if self.subjects:
            for _item in self.subjects:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subjects'] = _items
        # set to None if var_date (nullable) is None
        # and __fields_set__ contains the field
        if self.var_date is None and "var_date" in self.__fields_set__:
            _dict['date'] = None

        # set to None if datetime (nullable) is None
        # and __fields_set__ contains the field
        if self.datetime is None and "datetime" in self.__fields_set__:
            _dict['datetime'] = None

        # set to None if coordinates (nullable) is None
        # and __fields_set__ contains the field
        if self.coordinates is None and "coordinates" in self.__fields_set__:
            _dict['coordinates'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WeekSchedule:
        """Create an instance of WeekSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WeekSchedule.parse_obj(obj)

        _obj = WeekSchedule.parse_obj({
            "var_date": obj.get("date"),
            "datetime": obj.get("datetime"),
            "subjects": [Subject.from_dict(_item) for _item in obj.get("subjects")] if obj.get("subjects") is not None else None,
            "coordinates": obj.get("coordinates")
        })
        return _obj


