# coding: utf-8

"""
    RTU MIREA VUC

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.2.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel
from schedule_service_client.models.shape import Shape

class WorkbookSettings(BaseModel):
    """
    WorkbookSettings
    """
    day_range: Optional[Shape] = None
    year_range: Optional[Shape] = None
    days_in_week_column_number: Optional[Any] = None
    platoon_column_number: Optional[Any] = None
    subject_rows_number: Optional[Any] = None
    __properties = ["day_range", "year_range", "days_in_week_column_number", "platoon_column_number", "subject_rows_number"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkbookSettings:
        """Create an instance of WorkbookSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of day_range
        if self.day_range:
            _dict['day_range'] = self.day_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of year_range
        if self.year_range:
            _dict['year_range'] = self.year_range.to_dict()
        # set to None if days_in_week_column_number (nullable) is None
        # and __fields_set__ contains the field
        if self.days_in_week_column_number is None and "days_in_week_column_number" in self.__fields_set__:
            _dict['days_in_week_column_number'] = None

        # set to None if platoon_column_number (nullable) is None
        # and __fields_set__ contains the field
        if self.platoon_column_number is None and "platoon_column_number" in self.__fields_set__:
            _dict['platoon_column_number'] = None

        # set to None if subject_rows_number (nullable) is None
        # and __fields_set__ contains the field
        if self.subject_rows_number is None and "subject_rows_number" in self.__fields_set__:
            _dict['subject_rows_number'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkbookSettings:
        """Create an instance of WorkbookSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkbookSettings.parse_obj(obj)

        _obj = WorkbookSettings.parse_obj({
            "day_range": Shape.from_dict(obj.get("day_range")) if obj.get("day_range") is not None else None,
            "year_range": Shape.from_dict(obj.get("year_range")) if obj.get("year_range") is not None else None,
            "days_in_week_column_number": obj.get("days_in_week_column_number"),
            "platoon_column_number": obj.get("platoon_column_number"),
            "subject_rows_number": obj.get("subject_rows_number")
        })
        return _obj


