[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "scikit_build_core"
authors = [
    { name = "Henry Schreiner", email = "henryfs@princeton.edu" },
]
description = "Build backend for CMake based projects"
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Build Tools",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 4 - Beta",
    "Typing :: Typed",
]

dynamic = ["version"]

dependencies = [
    "exceptiongroup; python_version<'3.11'",
    "importlib-metadata; python_version<'3.8'",
    "importlib-resources >=1.3; python_version<'3.9'",
    "packaging >=20.9",
    "tomli >=1.1; python_version<'3.11'",
    "typing-extensions >=3.10.0; python_version<'3.8'",
]
# Note: for building wheels and sdists, there are also additional dependencies
# in the pyproject extra. And cmake and possibly ninja if those are not already
# present (user controllable)

[project.optional-dependencies]
pyproject = [
    "pathspec >=0.10.1",
    "pyproject-metadata >=0.5",
]
test = [
    "build[virtualenv]",
    "cattrs >=22.2.0",
    "pathspec >=0.10.1",
    "pybind11",
    "pyproject-metadata >=0.5",
    "pytest >=7.0",  # 7.2+ recommended for better tracebacks with ExceptionGroup
    "pytest-subprocess >=1.5",
    "setuptools",
    "virtualenv",
    "wheel",
]
test-meta = [
    "hatch-fancy-pypi-readme>=22.3",
    "setuptools-scm",
]
test-numpy = [
    "numpy; python_version<'3.12' and platform_python_implementation!='PyPy'",
    "numpy~=1.21.0; python_version=='3.7' and platform_python_implementation=='PyPy' and sys_platform == 'linux'",
    "numpy~=1.24.0; python_version=='3.8' and platform_python_implementation=='PyPy'",
    "numpy~=1.25.0; python_version=='3.9' and platform_python_implementation=='PyPy'",
]
test-schema = [
    "fastjsonschema",
    "validate-pyproject",
]
cov = [
    "pytest-cov[toml]",
]
wheels = [
    "cmake",
    "ninja; sys_platform!='win32'",
]
dev = [
    "rich",
]
docs = [
    "furo",
    "myst-parser >=0.13",
    "pathspec >=0.10.1",
    "pyproject-metadata >=0.5",
    "sphinx >=7.0,<=7.1.2",  # workaround bug in setuptools, fix in pypa/setuptools#4023
    "sphinx-copybutton",
    "sphinx-inline-tabs",
    "sphinx-jsonschema",
    "sphinx-autodoc-typehints",
]

[project.urls]
Changelog = "https://scikit-build-core.readthedocs.io/en/latest/changelog.html"
Discussions = "https://github.com/orgs/scikit-build/discussions"
Documentation = "https://scikit-build-core.readthedocs.io"
Homepage = "https://github.com/scikit-build/scikit-build-core"
Issues = "https://github.com/scikit-build/scikit-build-core/issues"

[project.entry-points]
"distutils.commands".build_cmake = "scikit_build_core.setuptools.build_cmake:BuildCMake"
"distutils.setup_keywords".cmake_source_dir = "scikit_build_core.setuptools.build_cmake:cmake_source_dir"
"distutils.setup_keywords".cmake_args = "scikit_build_core.setuptools.build_cmake:cmake_args"
"setuptools.finalize_distribution_options".scikit_build_entry = "scikit_build_core.setuptools.build_cmake:finalize_distribution_options"
"validate_pyproject.tool_schema".scikit-build = "scikit_build_core.settings.skbuild_schema:get_skbuild_schema"

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/scikit_build_core/_version.py"


[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
    "error",
    "ignore:Config variable '.*' is unset, Python ABI tag may be incorrect:RuntimeWarning",
    "default:pkg_resources is deprecated as an API:DeprecationWarning:wheel",  # Caused by wheel<0.41 in tests
    "default:onerror argument is deprecated, use onexc instead:DeprecationWarning:wheel", # Caused by wheel<0.41 & Python 3.12
    "default:The distutils package is deprecated and slated for removal:DeprecationWarning",  # Caused by setuptools sometimes
    "default:The distutils.sysconfig module is deprecated, use sysconfig instead:DeprecationWarning",  # Caused by setuptools sometimes
    "default:check_home argument is deprecated and ignored.:DeprecationWarning",  # Caused by setuptools sometimes
]
log_cli_level = "info"
testpaths = ["tests"]
markers = [
    "broken_on_urct: Broken for now due to lib not found",
    "compile: Compiles code",
    "configure: Configures CMake code",
    "fortran: Fortran code",
    "integration: Full package build",
    "isolated: Needs an isolated virtualenv",
    "network: Needs a network connection to setup or run",
    "setuptools: Tests setuptools integration",
    "virtualenv: Needs a virtualenv",
]


[tool.mypy]
files = ["src", "tests", "noxfile.py"]
mypy_path = ["$MYPY_CONFIG_FILE_DIR/src"]
python_version = "3.7"
warn_unused_configs = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = ["scikit_build_core.*"]
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = ["numpy", "pathspec", "setuptools_scm", "hatch_fancy_pypi_readme", "virtualenv"]
ignore_missing_imports = true


[tool.pylint]
py-version = "3.7"
jobs = "0"
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
good-names = ["f"]
messages_control.disable = [
    "design",
    "fixme",
    "import-outside-toplevel",
    "invalid-name",
    "line-too-long",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "wrong-import-position",
    "unnecessary-ellipsis",  # Conflicts with Protocols
    "broad-except",
    "unused-argument",  # Handled by Ruff
    "redefined-builtin",  # ExceptionGroup is a builtin
]


[tool.coverage]
run.source = ["scikit_build_core"]
report.exclude_lines = [
    'pragma: no cover',
    '\.\.\.',
    'if typing.TYPE_CHECKING:',
]


[tool.check-wheel-contents]
ignore = ["W002"]  # Triggers on __init__.py's


[tool.ruff]
select = [
    "E", "F", "W", # flake8
    "B",           # flake8-bugbear
    "I",           # isort
    "ARG",         # flake8-unused-arguments
    "C4",          # flake8-comprehensions
    "EM",          # flake8-errmsg
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "RET",         # flake8-return
    "RUF",         # Ruff-specific
    "SIM",         # flake8-simplify
    "TID251",      # flake8-tidy-imports.banned-api
    "T20",         # flake8-print
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
    "ANN204",      # Add -> None to __init__
    "S307",        # eval -> literal_eval
    "TCH",         # flake8-type-checking
    "PERF",        # perflint
    "FLY",         # flynt
    "TRY",         # tryceratops
    "FBT",         # flake8-boolean-trap
]
extend-ignore = [
    "PLR",     # Design rules for pylint
    "PLE1205", # Format check doesn't work with our custom logger
    "E501",    # Line too long
    "PT004",   # Incorrect, just usefixtures instead.
    "RUF009",  # Too easy to get a false positive
]
typing-modules = ["scikit_build_core._compat.typing"]
src = ["src"]
unfixable = ["T20", "F841"]
exclude = []

[tool.ruff.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"typing.Literal".msg = "Use scikit_build_core._compat.typing.Literal instead."
"typing.Protocol".msg = "Use scikit_build_core._compat.typing.Protocol instead."
"typing.Self".msg = "Use scikit_build_core._compat.typing.Self instead."
"typing_extensions.Self".msg = "Use scikit_build_core._compat.typing.Self instead."
"typing.runtime_checkable".msg = "Add and use scikit_build_core._compat.typing.runtime_checkable instead."
"typing.Final".msg = "Add scikit_build_core._compat.typing.Final instead."
"typing.NotRequired".msg = "Add scikit_build_core._compat.typing.NotRequired instead."
"typing.OrderedDict".msg = "Add scikit_build_core._compat.typing.OrderedDict instead."
"typing.TypedDict".msg = "Add scikit_build_core._compat.typing.TypedDict instead."
"typing.assert_never".msg = "Add scikit_build_core._compat.typing.assert_never instead."
"tomli".msg = "Use scikit_build_core._compat.tomllib instead."
"tomllib".msg = "Use scikit_build_core._compat.tomllib instead."
"importlib.metadata".msg = "Use scikit_build_core._compat.importlib.metadata instead."
"importlib_metadata".msg = "Use scikit_build_core._compat.importlib.metadata instead."
"importlib.resources".msg = "Use scikit_build_core._compat.importlib.resources instead."
"importlib_resources".msg = "Use scikit_build_core._compat.importlib.resources instead."


[tool.ruff.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20", "TID251"]
"src/scikit_build_core/resources/*.py" = ["PTH", "ARG002", "FBT", "TID251"]
"src/scikit_build_core/_compat/**.py" = ["TID251"]
"tests/conftest.py" = ["TID251"]
"tests/packages/**.py" = ["TID251"]
"docs/conf.py" = ["TID251"]


[tool.check-sdist]
sdist-only = ["src/scikit_build_core/_version.py"]


[tool.repo-review]
ignore = [
    "MY103",  # We don't set mypy's warn-unreachable due to issues with platform-specific checks
]
