# coding: utf-8

"""
    Songtradr API

    This is the Songtradr API. Use it to retrieve deep music metadata and trigger processes like auto-tagging.  You can also use the API to manage your account and musicube cloud data.  **Authentication**  1. Reach out to support@songtradr.com to receive a free account or use your login data if you are already signed up.  2. To authenticate, you need to login via the POST /api/v1/user/login endpoint.  3. The endpoint responds with a jwtToken which you can use in all following API requests as a bearer token.  **Rate Limiting**  The current limit is 120 Requests per minute. Reach out to us via support@songtradr.com if you need to request more.  **Getting Started with auto-tagging**  1. If you want to get your own files auto-tagged, use the POST /api/v1/user/file/{name}/initUpload endpoint. It responds with a presigned S3 link where you can upload your file. 2. You can check the processing status of your file via the GET /api/v1/user/file/{name}/filesStatus endpoint. 3. As soon as processing is done, you can request the generated data via the GET /api/v1/user/files endpoint.  **Getting Started with search**  You can either search the released music via the /public/recording endpoints or your own private uploaded music via the /user/file/ endpoints.  1. If you want to search the world's released music, a good starting point is the GET /api/v1/public/recording/search endpoint. Please find the extensive list of parameters that serve as semantic search filters. 2. If you want to search your own previously uploaded music, a good starting point is the GET GET /api/v1/user/files endpoint. It has the same extensive list of parameters that serve as semantic search filters.

    The version of the OpenAPI document: 1.13.7
    Contact: info@songtradr.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from songtradr_api_client_python.models.save_file_recording_dto import SaveFileRecordingDTO  # noqa: E501

class TestSaveFileRecordingDTO(unittest.TestCase):
    """SaveFileRecordingDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SaveFileRecordingDTO:
        """Test SaveFileRecordingDTO
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SaveFileRecordingDTO`
        """
        model = SaveFileRecordingDTO()  # noqa: E501
        if include_optional:
            return SaveFileRecordingDTO(
                isrc = '',
                name = '',
                folder = '',
                primary_mood_cluster_affinity = 1.337,
                primary_mood_cluster = 'aggressive',
                secondary_mood_cluster_affinity = 1.337,
                secondary_mood_cluster = 'aggressive',
                tertiary_mood_cluster_affinity = 1.337,
                tertiary_mood_cluster = 'aggressive',
                valence_affinity = 1.337,
                arousal_affinity = 1.337,
                pleasantness_affinity = 1.337,
                engagement_affinity = 1.337,
                valence = 'very sad',
                arousal = 'very calm',
                pleasantness = 'very unpleasant',
                engagement = 'very unengaging',
                vocals = 'instrumental',
                vocals_affinity = 1.337,
                dominant_instrument = 'electric guitar',
                dominant_instrument_affinity = 1.337,
                secondary_instrument_affinity = 1.337,
                secondary_instrument = 'electric guitar',
                tertiary_instrument_affinity = 1.337,
                tertiary_instrument = 'electric guitar',
                energy = 'very quiet',
                energy_affinity = 1.337,
                sound_generation = 'acoustic',
                sound_generation_affinity = 1.337,
                tempo = 'very slow',
                tempo_affinity = 1.337,
                scale = 'major key',
                scale_affinity = 1.337,
                rhythm = 'common time',
                rhythm_affinity = 1.337,
                primary_sound_character = 'brassy',
                primary_sound_character_affinity = 1.337,
                timbre_affinity = 1.337,
                roughness_affinity = 1.337,
                tonality_affinity = 1.337,
                harmony_affinity = 1.337,
                texture_affinity = 1.337,
                groovyness_affinity = 1.337,
                space_affinity = 1.337,
                timbre = 'very warm',
                roughness = 'very clear',
                tonality = 'monotonous',
                harmony = 'very dissonant',
                texture = 'very thin',
                groovyness = 'very steady',
                space = 'very compact',
                bpm = 1.337,
                key = 'C',
                key_affinity = 1.337,
                production_rating = 'low production quality',
                production_rating_affinity = 1.337,
                performance_rating = 'low performance quality',
                performance_rating_affinity = 1.337,
                song_rating = 'low song quality',
                song_rating_affinity = 1.337,
                audience_gender = 'male',
                audience_gender_affinity = 1.337,
                audience_region = 'Australia and New Zealand',
                audience_region_affinity = 1.337,
                secondary_audience_region_affinity = 1.337,
                secondary_audience_region = 'Australia and New Zealand',
                tertiary_audience_region_affinity = 1.337,
                tertiary_audience_region = 'Australia and New Zealand',
                audience_age = 'Generation Z',
                audience_age_affinity = 1.337,
                secondary_audience_age = 'Generation Z',
                secondary_audience_age_affinity = 1.337,
                tertiary_audience_age = 'Generation Z',
                tertiary_audience_age_affinity = 1.337,
                origin_decade = 'pre-1950s',
                origin_decade_affinity = 1.337,
                language_of_performance = 'en',
                language_of_performance_affinity = 1.337,
                origin_region = 'Australia and New Zealand',
                origin_region_affinity = 1.337,
                taggrams = songtradr_api_client_python.models.save_taggrams_dto.SaveTaggramsDTO(
                    timestamps = [
                        1.337
                        ], 
                    level1_genre = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    level2_genre = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    song_rating = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    performance_rating = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    production_rating = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    mood_cluster = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    vocals = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    dominant_instrument = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    sound_generation = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    rhythm = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    tonality = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    audience_age = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    audience_gender = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    audience_region = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    origin_region = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    origin_decade = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    language_of_performance = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    arousal = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    valence = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    pleasantness = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    engagement = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    energy = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    timbre = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    roughness = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    harmony = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    texture = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    groovyness = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    space = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    curateability = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    use_case = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    social_media = {
                        'key' : [
                            1.337
                            ]
                        }, 
                    industry_suitability = {
                        'key' : [
                            1.337
                            ]
                        }, ),
                embeddings = [
                    1.337
                    ],
                level1_genre = 'Pop',
                level1_genre_affinity = 1.337,
                secondary_level1_genre = 'Pop',
                secondary_level1_genre_affinity = 1.337,
                tertiary_level1_genre = 'Pop',
                tertiary_level1_genre_affinity = 1.337,
                level2_genre = 'Electro Pop',
                level2_genre_affinity = 1.337,
                secondary_level2_genre = 'Electro Pop',
                secondary_level2_genre_affinity = 1.337,
                tertiary_level2_genre = 'Electro Pop',
                tertiary_level2_genre_affinity = 1.337,
                curateability = 'curateable',
                curateability_affinity = 1.337,
                use_case = 'background',
                use_case_affinity = 1.337,
                social_media = 'Spotify',
                social_media_affinity = 1.337,
                industry_suitability = 'Automobiles and Parts',
                industry_suitability_affinity = 1.337,
                created_by_version = '',
                tags = [
                    songtradr_api_client_python.models.save_recording_tag_dto.SaveRecordingTagDTO(
                        tag_name = '', 
                        affinity = 1.337, )
                    ],
                genres = [
                    songtradr_api_client_python.models.save_recording_genre_dto.SaveRecordingGenreDTO(
                        genre_name = '', 
                        genre_type = '', 
                        affinity = 1.337, )
                    ],
                parties = [
                    songtradr_api_client_python.models.save_recording_party_dto.SaveRecordingPartyDTO(
                        full_name = '', 
                        contributor_type = 'trackArtist', )
                    ],
                iswc = '',
                proprietary_id_gema = '',
                title = '',
                version_title = '',
                context_kind = '',
                context_value = songtradr_api_client_python.models.context_value.ContextValue(
                    trackids = [
                        56
                        ], )
            )
        else:
            return SaveFileRecordingDTO(
                isrc = '',
                created_by_version = '',
        )
        """

    def testSaveFileRecordingDTO(self):
        """Test SaveFileRecordingDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
