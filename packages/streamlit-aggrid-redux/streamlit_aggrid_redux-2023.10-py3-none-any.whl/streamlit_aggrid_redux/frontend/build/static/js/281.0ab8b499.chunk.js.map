{"version":3,"file":"static/js/281.0ab8b499.chunk.js","mappings":"0MAKA,SAASA,EAAcC,EAAWC,GAC9B,IACI,IAAIC,GAAOC,EAAAA,EAAAA,GAASH,GACpB,OAAOI,EAAAA,EAAAA,GAAOF,EAAMD,EACxB,CACA,MAAAI,GACI,OAAOL,CACX,CAIJ,CAsBA,IAAMM,EAAmB,CACrBC,YAAa,CACTC,iBAAkB,CACdC,OAAQ,qBACRC,aAAc,CACVC,WAAY,SAACC,EAAaC,GAAS,OAC/BC,EAAAA,EAAAA,IAAWX,EAAAA,EAAAA,GAASU,GAAYD,EAAY,IAGxDG,mBAAoB,CAChBN,OAAQ,wBAEZO,oBAAqB,CACjBC,eAAgB,SAACC,GAAM,OACnBnB,EAAcmB,EAAOC,MAAO,mBAAmB,GAEvDC,qBAAsB,CAClBH,eAAgB,SAACC,GAAM,OACnBnB,EAAcmB,EAAOC,MAAOD,EAAOG,OAAOC,OAAOC,qBAAqB,GAE9EC,oBAAqB,CACjBP,eAAgB,SAACC,GAAM,IAAAO,EAAA,OA/BnC,SAAyBC,EAAQC,GAC7B,IAAIC,EAAIC,OAAOC,WAAWJ,GAC1B,OAAKG,OAAOE,MAAMH,GAIPF,EAHAE,EAAEI,QAAQL,EAKzB,CAwBgBM,CAAgBf,EAAOC,MAAqC,QAAhCM,EAAEP,EAAOG,OAAOC,OAAOK,iBAAS,IAAAF,EAAAA,EAAI,EAAE,GAE1ES,qBAAsB,CAClBjB,eAAgB,SAACC,GAAM,OA7CnC,SAA2BQ,EAAQS,GAC/B,IAAIP,EAAIC,OAAOC,WAAWJ,GAC1B,OAAKG,OAAOE,MAAMH,GAIPF,EAHAS,EAAiBP,EAAEI,QAAQ,EAK1C,CAsCgBI,CAAkBlB,EAAOC,MAAOD,EAAOG,OAAOC,OAAOe,uBAAuB,GAEpFC,gBAAiB,CACbrB,eAAgB,SAACC,GAAM,OAAKqB,EAAAA,EAAAA,UAASrB,EAAOC,OAAOqB,UAAS,EAAK,I","sources":["formatters.js"],"sourcesContent":["import { duration } from \"moment\"\nimport { format } from \"date-fns-tz\"\nimport { parseISO, compareAsc } from \"date-fns\"\n\n// some formatting functions\nfunction dateFormatter(isoString, formatterString) {\n    try {\n        let date = parseISO(isoString)\n        return format(date, formatterString)\n    }\n    catch {\n        return isoString\n    }\n    finally {\n      // does nothing on purpose\n    }\n}\n\nfunction currencyFormatter(number, currencySymbol) {\n    let n = Number.parseFloat(number)\n    if (!Number.isNaN(n)) {\n        return currencySymbol + n.toFixed(2)\n    }\n    else {\n        return number\n    }\n}\n\nfunction numberFormatter(number, precision) {\n    let n = Number.parseFloat(number)\n    if (!Number.isNaN(n)) {\n        return n.toFixed(precision)\n    }\n    else {\n        return number\n    }\n}\n\nconst columnFormatters = {\n    columnTypes: {\n        dateColumnFilter: {\n            filter: \"agDateColumnFilter\",\n            filterParams: {\n                comparator: (filterValue, cellValue) => \n                    compareAsc(parseISO(cellValue), filterValue),\n            },\n        },\n        numberColumnFilter: {\n            filter: \"agNumberColumnFilter\",\n        },\n        shortDateTimeFormat: {\n            valueFormatter: (params) =>\n                dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\n        },\n        customDateTimeFormat: {\n            valueFormatter: (params) =>\n                dateFormatter(params.value, params.column.colDef.custom_format_string),\n        },\n        customNumericFormat: {\n            valueFormatter: (params) =>\n                numberFormatter(params.value, params.column.colDef.precision ?? 2),\n        },\n        customCurrencyFormat: {\n            valueFormatter: (params) =>\n                currencyFormatter(params.value, params.column.colDef.custom_currency_symbol),\n        },\n        timedeltaFormat: {\n            valueFormatter: (params) => duration(params.value).humanize(true),\n        },\n    },\n}\n\nexport { columnFormatters };"],"names":["dateFormatter","isoString","formatterString","date","parseISO","format","_unused","columnFormatters","columnTypes","dateColumnFilter","filter","filterParams","comparator","filterValue","cellValue","compareAsc","numberColumnFilter","shortDateTimeFormat","valueFormatter","params","value","customDateTimeFormat","column","colDef","custom_format_string","customNumericFormat","_params$column$colDef","number","precision","n","Number","parseFloat","isNaN","toFixed","numberFormatter","customCurrencyFormat","currencySymbol","currencyFormatter","custom_currency_symbol","timedeltaFormat","duration","humanize"],"sourceRoot":""}