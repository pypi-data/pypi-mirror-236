{"version":3,"sources":["SliderTooltip.tsx","CustomSlider.tsx","callbackHandlers.ts","useKeyboardShortcut.ts","index.tsx"],"names":["SliderTooltip","_ref","children","_ref$theme","theme","themeTooltip","_objectSpread","color","fontSize","fontFamily","whiteSpace","position","bottom","transform","_jsx","style","withStreamlitConnection","props","_marks","useEffect","Streamlit","setFrameHeight","handler","_props$args","args","minValue","maxValue","initialValue","valueRef","useRef","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","inputValue","setInputValue","handleOnChange","newValue","current","updateStreamlit","setComponentValue","window","addEventListener","removeEventListener","handleInputValueChange","event","parseInt","target","isNaN","createHandleInputValueChange","handleInputChange","key","createInputChange","handleOnChangeRef","keyboardShortcutHandler","handleIncrement","handleDecrement","createKeyboardShortcutHandler","parent","document","useKeyboardShortcut","marks","_defineProperty","muiTheme","streamlitTheme","paletteType","base","console","log","createTheme","palette","type","primary","main","primaryColor","createStreamlitTheme","handleButtonClick","ThemeProvider","paddingLeft","paddingRight","paddingTop","_jsxs","display","alignItems","Button","variant","size","onClick","minWidth","width","TextField","inputProps","inputMode","pattern","onChange","onKeyDown","marginRight","padding","Slider","min","max","trackStyle","backgroundColor","handleRender","renderProps","ReactDOM","render","React","StrictMode","CustomSlider","getElementById"],"mappings":"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","file":"static/js/main.f737ba85.chunk.js","sourcesContent":["// SliderTooltip.tsx\n\nimport React from \"react\";\n\n\n\ninterface SliderTooltipProps {\n  children: React.ReactNode;\n  theme: any;\n}\n\nconst SliderTooltip: React.FC<SliderTooltipProps> = ({ children, theme={} }) => {\n    \n    const themeTooltip = {\n        ...theme,\n        color: theme.color || \"red\",\n        fontSize: theme.fontSize || \"14px\",\n        fontFamily: theme.fontFamily || \"Source Sans Pro, mono\",\n        whiteSpace: theme.whiteSpace || \"nowrap\",\n        position: \"relative\",\n        bottom: \"100%\",\n        transform: \"translate(-0%, -15px)\",\n      }\n  \n\n  return (\n    <div style={themeTooltip}>\n      {children}\n    </div>\n  );\n};\n\nexport default SliderTooltip;\n","import {\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Slider from \"rc-slider\";\nimport SliderTooltip from \"./SliderTooltip\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button } from \"@material-ui/core\";\nimport { useMouseUpHandler,createHandleInputValueChange, createInputChange } from \"./callbackHandlers\";\nimport {useKeyboardShortcut} from './useKeyboardShortcut'\nimport \"rc-slider/assets/index.css\";\n\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\n\ntype StreamlitTheme = {\n  bgColor: string;\n  textColor: string;\n  primaryColor: string;\n  secondaryBackgroundColor: string;\n  base: \"light\" | \"dark\";\n};\n\nconst createStreamlitTheme = (streamlitTheme: StreamlitTheme) => {\n  const paletteType = streamlitTheme.base === \"dark\" ? \"dark\" : \"light\";\n  console.log(\"paletteType\", paletteType);\n  return createTheme({\n    palette: {\n      type: paletteType,\n      primary: {\n        main: streamlitTheme.primaryColor,\n      },\n    },\n  });\n};\n\ntype NumberOrNumberArray = number | number[];\n\nconst MySliderComponent: React.FC<any> = (props) => {\n  useEffect(() => Streamlit.setFrameHeight());\n\n  const { minValue, maxValue, initialValue } = props.args;\n\n  const valueRef = useRef(initialValue);\n  const [value, setValue] = useState(initialValue);\n  const [inputValue, setInputValue] = useState(initialValue);\n\n  const handleOnChange = (newValue: NumberOrNumberArray ): NumberOrNumberArray => {\n    setValue(newValue);\n    valueRef.current = newValue;\n    setInputValue(newValue);\n    return newValue;\n  };\n\n  const updateStreamlit = () => {\n    Streamlit.setComponentValue(valueRef.current);\n  };\n\n  useMouseUpHandler(updateStreamlit);\n  const handleInputValueChange = createHandleInputValueChange(minValue,maxValue,setInputValue, handleOnChange)\n  const handleInputChange = createInputChange(minValue,maxValue,handleOnChange, updateStreamlit)\n  \n  // Listen to \",\" and \".\" to increase/decrease the value\n  useKeyboardShortcut(value, handleOnChange, updateStreamlit);\n\n\n  const marks = {\n    [minValue]: minValue,\n    [maxValue]: maxValue,\n  };\n\n  const { theme } = props;\n  const muiTheme = createStreamlitTheme(theme);\n\n  const handleButtonClick = (value: number) => {\n    handleOnChange(value);\n    updateStreamlit();\n  }\n\n  return (\n    <ThemeProvider theme={muiTheme}>\n    <div style={{ paddingLeft: \"15px\", paddingRight: \"15px\", paddingTop: \"10px\"}}>\n      \n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n      <Button variant=\"contained\" color=\"primary\" size=\"medium\"\n       onClick={() => handleButtonClick(value - 1)}\n          style={{ minWidth: \"unset\", width: \"4px\" }}\n        >\n        &lt;\n        </Button>\n        <Button variant=\"contained\" color=\"primary\" size=\"medium\"\n         onClick={() => handleButtonClick(value + 1)}\n          style={{ minWidth: \"unset\", width: \"4px\" }}\n        >\n        &gt;\n        </Button>\n        <TextField\n          type=\"text\"\n          value={inputValue}\n          inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n          onChange={handleInputValueChange}\n          onKeyDown={handleInputChange}\n          variant=\"outlined\"\n          size=\"small\"\n          style={{ marginRight: \"10px\", width: \"75px\", padding: \"0px\" }}\n          // className={classes.textField}\n        />\n        <Slider\n          value={value}\n          min={minValue}\n          max={maxValue}\n          marks={marks}\n          onChange={handleOnChange}\n          trackStyle={{ backgroundColor: theme.primaryColor }}\n          handleRender={(renderProps) => {\n            return (\n              <div {...renderProps.props}>\n                <SliderTooltip theme={theme}>{value}</SliderTooltip>\n              </div>\n            );\n          }}\n        />\n        \n      </div>\n    </div>\n    </ThemeProvider>\n  );\n};\n\nexport default withStreamlitConnection(MySliderComponent);\n","import { useEffect } from \"react\";\n\n// Custom hook to handle mouseup and touchend events\nexport const useMouseUpHandler = (handler: () => void) => {\n  useEffect(() => {\n    window.addEventListener(\"mouseup\", handler);\n    window.addEventListener(\"touchend\", handler);\n\n    return () => {\n      window.removeEventListener(\"mouseup\", handler);\n      window.removeEventListener(\"touchend\", handler);\n    };\n  }, [handler]);\n};\n\n// Custom hook to handle keydown events\nexport const useKeyDownHandler = (handler: (event: KeyboardEvent) => void) => {\n  useEffect(() => {\n    window.addEventListener(\"keydown\", handler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", handler);\n    };\n  }, [handler]);\n};\n\n\nexport const createHandleInputValueChange = (\n    minValue: number,\n    maxValue: number,\n    setInputValue: (value: number) => void,\n    handleOnChange: (value: number) => void\n    ): ((event: React.ChangeEvent<HTMLInputElement>)=>void) => {\n\n    const handleInputValueChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        const newValue = parseInt(event.target.value)\n        if (isNaN(newValue) || newValue < minValue || newValue > maxValue) {\n            return;\n        }\n        if (\n            !isNaN(newValue) &&\n            newValue >= minValue &&\n            newValue <= maxValue\n        ) {\n            setInputValue(newValue);\n            handleOnChange(newValue);\n        }\n    };\n    return handleInputValueChange;\n};\n\n/**\n * Use this handler to capture the input change from a text input. Will only accept values between min and max values and apply the changes only when the user presses enter key\n * \n * @param minValue min value to accept\n * @param maxValue max value to accept\n * @param handleOnChange Handler that takes care of changes in the input value. This handler should be called on any change\n * @param updateStreamlit Handler that finalize actions. This handler is called only when the action is finalized (for example, when the user presses enter key)\n * @returns \n */\nexport const createInputChange = (\n\tminValue: number,\n\tmaxValue: number,\n\thandleOnChange: (value: number) => void,\n\tupdateStreamlit: () => void\n\t): ((event: React.KeyboardEvent<HTMLInputElement>)=>void) => {\n\t\t\t\n\t\tconst handleInputChange = (\n\t\t\t\tevent: React.KeyboardEvent<HTMLInputElement>\n\t\t\t) => {\n\t\t\t\tif (event.key !== \"Enter\") {\n\t\t\t\t\treturn;\n\t\t\t\t};\n\n\t\t\t\tconst inputValue = parseInt((event.target as HTMLInputElement).value, 10);\n\t\t\t\tif (\n\t\t\t\t\t!isNaN(inputValue) &&\n\t\t\t\t\tinputValue >= minValue &&\n\t\t\t\t\tinputValue <= maxValue\n\t\t\t\t) {\n\t\t\t\t\thandleOnChange(inputValue);\n\t\t\t\t\tupdateStreamlit();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\treturn handleInputChange;\n\n};\n\nexport const createKeyboardShortcutHandler = (\n  handleIncrement: () => void,\n  handleDecrement: () => void,\n\tupdateStreamlit: () => void\n): ((event: KeyboardEvent) => void) => {\n  const handleKeyboardShortcut = (event: KeyboardEvent) => {\n    if (event.key === \".\") {\n      handleIncrement();\n    } else if (event.key === \",\") {\n      handleDecrement();\n    } else {\n      return;\n    }\n\t\tupdateStreamlit();\n  };\n\n  return handleKeyboardShortcut;\n};\n\n\n\n","import { useEffect, useRef } from \"react\";\nimport { createKeyboardShortcutHandler } from \"./callbackHandlers\";\n\nexport const useKeyboardShortcut = (\n  value: number,\n  handleOnChange: (value: number) => void,\n  updateStreamlit: () => void\n) => {\n  const valueRef = useRef(value);\n  const handleOnChangeRef = useRef(handleOnChange);\n\n  useEffect(() => {\n    valueRef.current = value;\n    handleOnChangeRef.current = handleOnChange;\n  }, [value, handleOnChange]);\n\n  useEffect(() => {\n    const keyboardShortcutHandler = createKeyboardShortcutHandler(\n      () => handleOnChangeRef.current(valueRef.current + 1),\n      () => handleOnChangeRef.current(valueRef.current - 1),\n      updateStreamlit\n    );\n    // TODO - enable if in release mode. This doesn't work with the npm run start, but works when build and deployed\n    window.parent.document.addEventListener(\"keydown\", keyboardShortcutHandler);\n    // window.addEventListener(\"keydown\", keyboardShortcutHandler);\n\n    return () => {\n      // TODO - enable if in release mode. This doesn't work with the npm run start, but works when build and deployed\n      window.parent.document.removeEventListener(\"keydown\", keyboardShortcutHandler);\n      // window.removeEventListener(\"keydown\", keyboardShortcutHandler);\n    };\n  }, []);\n};\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CustomSlider  from \"./CustomSlider\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CustomSlider />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}