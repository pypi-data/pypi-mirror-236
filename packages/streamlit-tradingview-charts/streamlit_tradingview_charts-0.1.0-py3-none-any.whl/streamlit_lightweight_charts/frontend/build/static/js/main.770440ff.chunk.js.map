{"version":3,"sources":["LightweightCharts.tsx","index.tsx"],"names":["LightweightChartsMultiplePanes","chartsData","useRenderData","args","chartsContainerRef","useRef","chartElRefs","Array","length","fill","chartRefs","useEffect","find","ref","current","forEach","i","_step","chart","createChart","_objectSpread","height","width","clientWidth","_iterator","_createForOfIteratorHelper","series","s","n","done","value","chartSeries","type","addAreaSeries","options","addBarSeries","addBaselineSeries","addCandlestickSeries","addHistogramSeries","addLineSeries","priceScale","priceScaleId","applyOptions","setData","data","markers","setMarkers","err","e","f","timeScale","fitContent","charts","map","c","subscribeVisibleTimeRangeChange","filter","rightOffset","scrollPosition","subscribeVisibleLogicalRangeChange","range","setVisibleLogicalRange","from","to","remove","_jsx","children","id","concat","ReactDOM","render","React","StrictMode","StreamlitProvider","LightweightCharts","document","getElementById"],"mappings":"gOAiJeA,EA1ImC,WAIhD,IACMC,EADaC,0BACWC,KAAa,OAErCC,EAAqBC,iBAAuB,MAC5CC,EAAcC,MAAMN,EAAWO,QAAQC,KAAKJ,iBAAuB,OACnEK,EAAYL,iBAAoB,IAmHpC,OAjHAM,qBAAU,WACR,IAAIL,EAAYM,MAAK,SAACC,GAAG,OAAMA,EAAIC,OAAO,IAA1C,CAEAR,EAAYS,SAAQ,SAACF,EAAKG,GACxB,IAQyCC,EARnCC,EAAQR,EAAUI,QAAQE,GAAKG,YACnCN,EAAIC,QAAOM,YAAA,CACTC,OAAQ,IACRC,MAAOhB,EAAYU,GAAGF,QAAQS,aAC3BtB,EAAWe,GAAGE,QAEnBM,EAAAC,YAEmBxB,EAAWe,GAAGU,QAAM,IAAzC,IAAAF,EAAAG,MAAAV,EAAAO,EAAAI,KAAAC,MAA0C,CAAC,IAAhCH,EAAMT,EAAAa,MAEXC,OAAW,EACf,OAAOL,EAAOM,MACZ,IAAK,OACHD,EAAcb,EAAMe,cAAcP,EAAOQ,SACzC,MACF,IAAK,MACHH,EAAcb,EAAMiB,aAAaT,EAAOQ,SACxC,MACF,IAAK,WACHH,EAAcb,EAAMkB,kBAAkBV,EAAOQ,SAC7C,MACF,IAAK,cACHH,EAAcb,EAAMmB,qBAAqBX,EAAOQ,SAChD,MACF,IAAK,YACHH,EAAcb,EAAMoB,mBAAmBZ,EAAOQ,SAC9C,MACF,IAAK,OACHH,EAAcb,EAAMqB,cAAcb,EAAOQ,SACzC,MACF,QACI,OAGHR,EAAOc,YACRtB,EAAMsB,WAAWd,EAAOQ,QAAQO,cAAgB,IAAIC,aAAahB,EAAOc,YAE1ET,EAAYY,QAAQjB,EAAOkB,MAExBlB,EAAOmB,SACRd,EAAYe,WAAWpB,EAAOmB,QAElC,CAAC,OAAAE,GAAAvB,EAAAwB,EAAAD,EAAA,SAAAvB,EAAAyB,GAAA,CAED/B,EAAMgC,YAAYC,YAEpB,IAEA,IAAMC,EAAS1C,EAAUI,QAAQuC,KAAI,SAACC,GAAC,OAAKA,CAAC,IAoD7C,OAlDGrD,EAAWO,OAAS,GACrB4C,EAAOrC,SAAQ,SAACG,GACTA,IAELA,EAAMgC,YAAYK,iCAAgC,SAACP,GACjDI,EACGI,QAAO,SAACF,GAAC,OAAKA,IAAMpC,CAAK,IACzBH,SAAQ,SAACuC,GACRA,EAAEJ,YAAYR,aAAa,CACzBe,YAAavC,EAAMgC,YAAYQ,kBACpC,GAAG,IAENxC,EAAMgC,YAAYS,oCAAmC,SAACC,GAChDA,GACFR,EACGI,QAAO,SAACF,GAAC,OAAKA,IAAMpC,CAAK,IACzBH,SAAQ,SAACuC,GACRA,EAAEJ,YAAYW,uBAAuB,CACnCC,KAAW,OAALF,QAAK,IAALA,OAAK,EAALA,EAAOE,KACbC,GAAS,OAALH,QAAK,IAALA,OAAK,EAALA,EAAOG,IAClB,GAAK,IAwBZ,IAMO,WACLX,EAAOrC,SAAQ,SAACG,GACdA,EAAM8C,QACR,GACF,CA3GmD,CA6GrD,GAAG,CAAE/D,EAAYK,EAAaI,IAI5BuD,cAAA,OAAKpD,IAAKT,EAAmB8D,SAC1B5D,EAAY+C,KAAI,SAACxC,EAAKG,GAAC,OACtBiD,cAAA,OACEpD,IAAKA,EACLsD,GAAE,sBAAAC,OAAwBpD,IAAI,sBAAAoD,OACHpD,GAC3B,KAKZ,EC1IAqD,IAASC,OACPL,cAACM,IAAMC,WAAU,CAAAN,SACfD,cAACQ,oBAAiB,CAAAP,SAChBD,cAACS,EAAiB,QAGtBC,SAASC,eAAe,Q","file":"static/js/main.770440ff.chunk.js","sourcesContent":["import { useRenderData } from \"streamlit-component-lib-react-hooks\"\nimport {\n  createChart,\n  IChartApi,\n} from \"lightweight-charts\"\nimport React, { useRef, useEffect } from \"react\"\n\nconst LightweightChartsMultiplePanes: React.VFC = () => {\n\n  // returns the renderData passed from Python\n  // { args: object, disabled: boolean, theme: object }\n  const renderData = useRenderData()\n  const chartsData = renderData.args[\"charts\"]\n\n  const chartsContainerRef = useRef<HTMLDivElement>(null)\n  const chartElRefs = Array(chartsData.length).fill(useRef<HTMLDivElement>(null))\n  const chartRefs = useRef<IChartApi[]>([])\n\n    useEffect(() => {\n      if (chartElRefs.find((ref) => !ref.current)) return;\n\n      chartElRefs.forEach((ref, i) => {\n        const chart = chartRefs.current[i] = createChart(\n          ref.current as HTMLDivElement,{\n            height: 300,\n            width: chartElRefs[i].current.clientWidth,\n            ...chartsData[i].chart,\n          }\n        );\n\n        for (const series of chartsData[i].series){\n          \n          let chartSeries\n          switch(series.type) {\n            case 'Area':\n              chartSeries = chart.addAreaSeries(series.options)\n              break\n            case 'Bar':\n              chartSeries = chart.addBarSeries(series.options )\n              break\n            case 'Baseline':\n              chartSeries = chart.addBaselineSeries(series.options)\n              break\n            case 'Candlestick':\n              chartSeries = chart.addCandlestickSeries(series.options)\n              break\n            case 'Histogram':\n              chartSeries = chart.addHistogramSeries(series.options)\n              break\n            case 'Line':\n              chartSeries = chart.addLineSeries(series.options)\n              break\n            default:\n                return\n          }\n\n          if(series.priceScale)\n            chart.priceScale(series.options.priceScaleId || '').applyOptions(series.priceScale)\n\n          chartSeries.setData(series.data)\n\n          if(series.markers)\n            chartSeries.setMarkers(series.markers)\n\n        }\n\n        chart.timeScale().fitContent();\n\n      })\n  \n      const charts = chartRefs.current.map((c) => c as IChartApi);\n      \n      if(chartsData.length > 1){ // sync charts\n        charts.forEach((chart) => {\n          if (!chart) return;\n\n          chart.timeScale().subscribeVisibleTimeRangeChange((e) => {\n            charts\n              .filter((c) => c !== chart)\n              .forEach((c) => {\n                c.timeScale().applyOptions({\n                  rightOffset: chart.timeScale().scrollPosition()\n          }) }) })\n\n          chart.timeScale().subscribeVisibleLogicalRangeChange((range) => {\n            if (range) {\n              charts\n                .filter((c) => c !== chart)\n                .forEach((c) => {\n                  c.timeScale().setVisibleLogicalRange({\n                    from: range?.from,\n                    to: range?.to\n          }) }) } })\n\n          // chart.subscribeCrosshairMove((handler) => {\n          //   charts\n          //     .filter((c) => c !== chart)\n          //     .forEach((c) => {\n          //       // if (handler.time !== undefined) {\n          //       //   var xx = c.timeScale().timeToCoordinate(handler.time);\n          //       //   c.setCrossHairXY(xx,50,true);\n          //       // } else if (handler.point !== undefined){\n          //       //   c.setCrossHairXY(handler.point.x,10,false);\n          //       // }\n          //       // c.timeScale().applyOptions({\n          //       //   rightOffset: chart.timeScale().scrollPosition()\n          //       // })\n          //       console.log('handler',handler)\n          //       if (handler.time !== undefined) {\n          //         const xx = c.timeScale().timeToCoordinate(handler.time);\n          //         if(xx) c.timeScale().scrollToPosition(xx,true)\n          //         console.log('const xx',xx)\n          //       }\n          //     })\n          // })\n\n      }) }\n\n      // const handleResize = () => {\n      //   chart.applyOptions({ width: chartsContainerRef?.current?.clientWidth })\n      // }\n      // window.addEventListener('resize', handleResize)\n      return () => { // required because how useEffect() works\n        charts.forEach((chart) => {\n          chart.remove()\n        })\n      }\n\n    }, [ chartsData, chartElRefs, chartRefs])\n\n\n    return (\n      <div ref={chartsContainerRef}>\n        {chartElRefs.map((ref, i) => (\n          <div\n            ref={ref}\n            id={`lightweight-charts-${i}`}\n            key={`lightweight-charts-${i}`}\n          />\n        ))}\n      </div>\n    )\n\n}\n\nexport default LightweightChartsMultiplePanes\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { StreamlitProvider } from \"streamlit-component-lib-react-hooks\"\nimport LightweightCharts from \"./LightweightCharts\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitProvider>\n      <LightweightCharts />\n    </StreamlitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}