[{"termux_error_exit": ["Function to write error message to stderr and exit.", ""], "termux_download": ["Utility function to download any file.", ""], "termux_setup_golang": ["Setup Go Build environment.", ""], "termux_setup_cmake": ["Setup CMake configure system.", ""], "termux_setup_ninja": ["Setup Ninja make system.", ""], "termux_setup_meson": ["Setup Meson configure system.", ""], "termux_setup_protobuf": ["Setup Protobuf compiler.", ""], "termux_setup_rust": ["Setup Cargo Build.", ""], "termux_setup_ghc_cross_compiler": ["Setup ghc cross-compiler targeting Android.", ""], "termux_setup_ghc": ["Setup ghc compiler for host build.", ""], "termux_setup_jailbreak_cabal": ["Setup jailbreak-cabal utility. It is used to remove version constraints from Haskell (with cabal build system)", ""], "termux_step_setup_variables": ["Setup essential variables like directory locations and flags.", ""], "termux_step_handle_buildarch": ["Determine architecture to build for.", ""], "termux_step_setup_build_folders": ["Delete old src and build directories if they exist.", ""], "termux_step_start_build": ["Initialize build environment. Source package's build.sh.", ""], "termux_step_get_dependencies": ["Download or build specified dependencies of the package.", ""], "termux_step_get_repo_files": ["Fetch APT packages information when -i or -I option was supplied.", ""], "termux_extract_dep_info": ["Obtain package architecture and version for downloading.", ""], "termux_step_create_timestamp_file": ["Make timestamp to determine which files have been installed by the build.", ""], "termux_download_deb": ["Download dependency *.deb packages for installation.", ""], "termux_step_get_source()": ["Obtain package source code and put it in $TERMUX_PKG_SRCDIR.", ""], "termux_git_clone_src": ["Obtain source by git clone, is run if $TERMUX_PKG_SRCURL ends with \".git\".", ""], "termux_download_src_archive": ["Download zip or tar archive with package source code.", ""], "termux_unpack_src_archive": ["Extract downloaded archive into $TERMUX_PKG_SRCDIR.", ""], "termux_step_post_get_source()": ["Hook to run commands immediately after obtaining source code.", ""], "termux_step_handle_host_build()": ["Determine whether a host build is required.", ""], "termux_step_host_build()": ["Perform a host build.", ""], "termux_step_setup_toolchain": ["Setup NDK standalone toolchain.", ""], "termux_step_patch_package": ["Apply to source code all *.patch files located in package's directory.", ""], "termux_step_replace_guess_scripts": ["Replace config.sub and config.guess scripts.", ""], "termux_step_pre_configure()": ["Hook to run commands before source configuration.", ""], "termux_step_configure()": ["Configure sources. By default, it determines build system automatically.", ""], "termux_step_configure_haskell_build": ["Haskell packages build configuration.", ""], "termux_step_configure_autotools": ["Autotools build configuration.", ""], "termux_step_configure_cmake": ["CMake build configuration.", ""], "termux_step_configure_meson": ["Meson build configuration.", ""], "termux_step_post_configure()": ["Hook to run commands immediately after configuration.", ""], "termux_step_make()": ["Compile the source code.", ""], "termux_step_make_install()": ["Install the compiled artifacts.", ""], "termux_step_post_make_install()": ["Hook to run commands immediately after installation.", ""], "termux_step_install_service_scripts()": ["Installs scripts for termux-services", ""], "termux_step_install_license()": ["Link or copy package-specific LICENSE to ./share/doc/$TERMUX_PKG_NAME.", ""], "termux_step_extract_into_massagedir": ["Extract files modified in $TERMUX_PREFIX.", ""], "termux_step_massage": ["Strip binaries, remove unneeded files.", ""], "termux_create_debian_subpackages": ["Creates all subpackages (debian format).", ""], "termux_create_pacman_subpackages": ["Creates all subpackages (pacman format).", ""], "termux_step_post_massage()": ["Final hook before creating *.deb file(s).", ""], "termux_step_create_debian_package": ["Create *.deb package.", ""], "termux_step_create_pacman_package": ["Create *.pkg.tar.xz package.", ""], "termux_step_create_debscripts()": ["Create maintainer scripts, e.g. pre/post installation hooks.", ""], "termux_step_create_pacman_install_hook": ["Convert result of termux_step_create_debscripts to pacman-compatible format.", ""], "termux_step_finish_build": ["Notification of finish.", ""], "termux_github_api_get_tag": ["Query GitHub API for:  \u2022 latest-release-tag: useful for projects using github's release mechanism.  \u2022 newest-tag(sorted by commit date): useful for projects having tags but no releases.", ""], "termux_gitlab_api_get_tag": ["same as above, but for gitlab", ""], "termux_repology_api_get_latest_version": ["Query repology api for latest version.", ""], "termux_pkg_auto_update": ["By default, decide which method (gitlab, github or repology) to use for update, but can be overrided to use custom method (See here).", ""], "termux_github_auto_update": ["Default update method for packages hosted on github.com. It decides which type of tag to fetch based on TERMUX_PKG_SRCURL.", ""], "termux_gitlab_auto_update": ["Default update method for packages hosted on gitlab.com (or host specified by TERMUX_GITLAB_API_HOST). It decides which type of tag to fetch based on TERMUX_PKG_SRCURL.", ""], "termux_pkg_upgrade_version": ["Write the latest version and updated checksum, check whether updated package builds properly and then push changes to repo.", ""], "termux_pkg_is_update_needed": ["Check whether LATEST_VERSION is greater than TERMUX_PKG_VERSION or not.  Called if --skip-version-check was not passed to termux_pkg_upgrade_version.  NOTE: You should not call it manually otherwise if TERMUX_PKG_UPDATE_VERSION_REGEXP is used, it won't compare versions extracted from it. Version is extracted by termux_pkg_upgrade_version.", ""], "TERMUX_PKG_HOMEPAGE": ["Home page URL.", "build.sh"], "TERMUX_PKG_DESCRIPTION": ["Short, one-line description of package.", "build.sh"], "TERMUX_PKG_LICENSE": ["Package license.", "build.sh"], "TERMUX_PKG_LICENSE_FILE": ["Name of license file, if it is not found automatically.", "build.sh"], "TERMUX_PKG_MAINTAINER": ["Package maintainer.", "build.sh"], "TERMUX_PKG_API_LEVEL": ["Android API level for which package should be compiled.", "build.sh"], "TERMUX_PKG_VERSION": ["Original package version.", "build.sh"], "TERMUX_PKG_REVISION": ["Package revision. Bumped on each package rebuild.", "build.sh"], "TERMUX_PKG_SKIP_SRC_EXTRACT": ["Whether to omit source code downloading and extraction. Default is false.", "build.sh"], "TERMUX_PKG_SRCURL": ["URL from which source archive should be downloaded, either an archive or a git url ending with .git", "build.sh"], "TERMUX_PKG_SHA256": ["SHA-256 checksum of source archive.", "build.sh"], "TERMUX_PKG_GIT_BRANCH": ["Branch to checkout in termux_step_git_clone_src. Default is v$TERMUX_PKG_VERSION.", "build.sh"], "TERMUX_PKG_METAPACKAGE": ["Whether to make package treated as metapackage. Default is false.", "build.sh"], "TERMUX_PKG_DEPENDS": ["Comma-separated list of dependency package names.", "build.sh"], "TERMUX_PKG_BUILD_DEPENDS": ["Comma-separated list of build-time only dependencies.", "build.sh"], "TERMUX_PKG_BREAKS": ["Comma-separated list of packages that are incompatible with the current one.", "build.sh"], "TERMUX_PKG_CONFLICTS": ["Comma-separated list of packages which have file name collisions with the current one.", "build.sh"], "TERMUX_PKG_REPLACES": ["Comma-separated list of packages being replaced by current one.", "build.sh"], "TERMUX_PKG_PROVIDES": ["Comma-separated list of virtual packages being provided by current one.", "build.sh"], "TERMUX_PKG_RECOMMENDS": ["Comma-separated list of non-absolute dependencies - packages usually used with the current one.", "build.sh"], "TERMUX_PKG_SUGGESTS": ["Comma-separated list of packages that are related to or enhance the current one.", "build.sh"], "TERMUX_PKG_ESSENTIAL": ["Whether to treat package as essential which cannot be uninstalled in usual way. Default is false.", "build.sh"], "TERMUX_PKG_NO_STATICSPLIT": ["Whether to split static libraries into a subpackage. Default is false.", "build.sh"], "TERMUX_PKG_STATICSPLIT_EXTRA_PATTERNS": ["Extra patterns to include in static package. It must be relative to $TERMUX_PREFIX. For example: to include *.h files from $TERMUX_PREFIX/lib, specify lib/*.h. You can use bash globstar patterns to recurse sub-directories.", "build.sh"], "TERMUX_PKG_IS_HASKELL_LIB": ["Whether the package is haskell library. Default is false.", "build.sh"], "TERMUX_PKG_BUILD_IN_SRC": ["Whether to perform build in a source code directory. Default is false.", "build.sh"], "TERMUX_PKG_HAS_DEBUG": ["Whether debug builds are possible for package. Default is true.", "build.sh"], "TERMUX_PKG_PLATFORM_INDEPENDENT": ["Whether to treat package as platform independent. Default is false.", "build.sh"], "TERMUX_PKG_BLACKLISTED_ARCHES": ["Comma-separated list of CPU architectures for which package cannot be compiled.", "build.sh"], "TERMUX_PKG_HOSTBUILD": ["Whether package require building for host. Default is false.", "build.sh"], "TERMUX_PKG_FORCE_CMAKE": ["Whether to prefer CMake over Autotools configure script. Default is false.", "build.sh"], "TERMUX_PKG_EXTRA_CONFIGURE_ARGS": ["Extra arguments passed to build system configuration utility.", "build.sh"], "TERMUX_PKG_EXTRA_HOSTBUILD_CONFIGURE_ARGS": ["Extra arguments passed to build system configuration utility when performing host build.", "build.sh"], "TERMUX_PKG_EXTRA_MAKE_ARGS": ["Extra arguments passed to utility make.", "build.sh"], "TERMUX_PKG_MAKE_INSTALL_TARGET": ["Equivalent for install argument passed to utility make in the installation process.", "build.sh"], "TERMUX_PKG_RM_AFTER_INSTALL": ["List of files that should be removed after installation process.", "build.sh"], "TERMUX_PKG_CONFFILES": ["A space or newline separated list of package configuration files that should not be overwritten on update.", "build.sh"], "TERMUX_PKG_SERVICE_SCRIPT": ["Array of even length containing daemon name(s) and script(s) for use with termux-services/runit.", "build.sh"], "TERMUX_PKG_GO_USE_OLDER": ["Use the older supported release of Go (1.19.7). Default is false.", "build.sh"], "TERMUX_PKG_NO_STRIP": ["Disable stripping binaries. Default is false.", "build.sh"], "TERMUX_PKG_NO_SHEBANG_FIX": ["Skip fixing shebang accordingly to $TERMUX_PREFIX. Default is false.", "build.sh"], "TERMUX_PKG_NO_ELF_CLEANER": ["Disable running of termux-elf-cleaner on built binaries. Default is false.", "build.sh"], "TERMUX_SUBPKG_DESCRIPTION": ["Short, one-line description of subpackage.", "subpackage.sh"], "TERMUX_SUBPKG_DEPEND_ON_PARENT": ["Specifies way how subpackage should depend on parent. See Subpackage dependencies for more information.", "subpackage.sh"], "TERMUX_SUBPKG_DEPENDS": ["Comma-separated list of subpackage dependencies.", "subpackage.sh"], "TERMUX_SUBPKG_BREAKS": ["Comma-separated list of packages that are incompatible with the current one.", "subpackage.sh"], "TERMUX_SUBPKG_CONFLICTS": ["Comma-separated list of packages which have file name collisions with the current one.", "subpackage.sh"], "TERMUX_SUBPKG_REPLACES": ["Comma-separated list of packages being replaced by current one.", "subpackage.sh"], "TERMUX_SUBPKG_ESSENTIAL": ["Whether to treat subpackage as essential which cannot be uninstalled in usual way. Default is false.", "subpackage.sh"], "TERMUX_SUBPKG_PLATFORM_INDEPENDENT": ["Whether to treat subpackage as platform independent. Default is false.", "subpackage.sh"], "TERMUX_SUBPKG_INCLUDE": ["A space or newline separated list of files to be included in subpackage.", "subpackage.sh"], "TERMUX_SUBPKG_CONFFILES": ["A space or newline separated list of package configuration files that should not be overwritten on update.", "subpackage.sh"], "TERMUX_PKG_AUTO_UPDATE": ["Whether to enable automatic updates for this package. Currently packages hosted on GitHub, Gitlab or tracked by repology can be auto updated. For using your own method see here. After writing build.sh you can check if package can be auto-updated using script at scripts/bin/check-auto-update.", ""], "TERMUX_PKG_UPDATE_VERSION_REGEXP": ["Regex to extract version from the new computed version.  \u2022 grep -P is set, so you can use perl regex.Use case: any api may return new version as Release_8.9.0, but we want only 8.9.0. So, we can extract it using \\d+\\.\\d+\\.\\d+.", ""], "TERMUX_PKG_UPDATE_METHOD": ["Which method to use for auto-update. Can be github, gitlab or repology. By default it is decided on the basis of TERMUX_PKG_SRCURL\n", ""], "TERMUX_PKG_UPDATE_TAG_TYPE": ["Whether to get latest-release-tag or newest-tag (sorted by commit date) if using github or gitlab method for auto-update. By default if TERMUX_PKG_SRCURL ends in .git then newest-tag is fetched otherwise latest-release-tag.", ""], "TERMUX_GITLAB_API_HOST": ["Which host to use for gitlab api. Default gitlab.com\n", ""], "TERMUX_ON_DEVICE_BUILD": ["If set, assume that building on device.", ""], "TERMUX_BUILD_IGNORE_LOCK": ["If set to true, ignore build process lock.", ""], "TERMUX_BUILD_LOCK_FILE": ["Path to build process lock file.", ""], "TERMUX_HOST_PLATFORM": ["Host platform definition. Usually $TERMUX_ARCH-linux-android.", ""], "TERMUX_PKG_BUILDDIR": ["Path to build directory of current package.", ""], "TERMUX_PKG_BUILDER_DIR": ["Path to directory where located build.sh of current package.", ""], "TERMUX_PKG_BUILDER_SCRIPT": ["Path to build.sh of current package.", ""], "TERMUX_PKG_CACHEDIR": ["Path to source cache directory of current package.", ""], "TERMUX_PKG_MASSAGEDIR": ["Path to directory where package content will be extracted from $TERMUX_PREFIX.", ""], "TERMUX_PKG_PACKAGEDIR": ["Path to directory where components of *.deb archive of current package will be created.", ""], "TERMUX_PKG_SRCDIR": ["Path to source directory of current package.", ""], "TERMUX_PKG_TMPDIR": ["Path to temporary directory specific for current package.", ""], "TERMUX_COMMON_CACHEDIR": ["Path to global cache directory where build tools are stored.", ""], "TERMUX_SCRIPTDIR": ["Path to directory with utility scripts.", ""], "TERMUX_PKG_NAME": ["Name of current package.", ""], "TERMUX_REPO_URL": ["Array of APT repository URLs from which dependencies will be downloaded if ./build-package.sh got option -i or -I.", ""], "TERMUX_REPO_DISTRIBUTION": ["Array of distribution names in addition for TERMUX_REPO_URL.", ""], "TERMUX_REPO_COMPONENT": ["Array of repository component names in addition for TERMUX_REPO_URL.", ""], "TERMUX_PACKAGE_FORMAT": ["Package output format.", ""]}, {"build.sh": ["TERMUX_PKG_HOMEPAGE", "TERMUX_PKG_DESCRIPTION", "TERMUX_PKG_LICENSE", "TERMUX_PKG_VERSION", "TERMUX_PKG_AUTO_UPDATE"], "subpackage.sh": ["TERMUX_SUBPKG_DESCRIPTION", "TERMUX_SUBPKG_INCLUDE", "TERMUX_PKG_AUTO_UPDATE"]}, {"build.sh": ["TERMUX_PKG_DEPENDS", "TERMUX_PKG_BUILD_DEPENDS", "TERMUX_PKG_BREAKS", "TERMUX_PKG_CONFLICTS", "TERMUX_PKG_REPLACES", "TERMUX_PKG_PROVIDES", "TERMUX_PKG_RECOMMENDS", "TERMUX_PKG_SUGGESTS", "TERMUX_PKG_BLACKLISTED_ARCHES"], "subpackage.sh": ["TERMUX_SUBPKG_DEPENDS", "TERMUX_SUBPKG_BREAKS", "TERMUX_SUBPKG_CONFLICTS", "TERMUX_SUBPKG_REPLACES"]}]