# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_util.ipynb.

# %% auto 0
__all__ = ['getmodver', 'sysver', 'isverlike', 'dotstr2ver', 'any2ver', 'ver2str']

# %% ../nbs/01_util.ipynb 5
from importlib.util import (find_spec, module_from_spec)

# %% ../nbs/01_util.ipynb 7
from atyp import StrQ, ModuleQ, TupleQ
from chck import (
    isint, isstr, isnum, istup, isiter,
    allmap, alltype, allint, alldig,
    isdotstr
)
from nchr import DOT
from nlit import (SYS, VERSION_INFO)

# %% ../nbs/01_util.ipynb 9
from verx.cons import (
    VTYPES_RET, BLANK_VERSION, TEST_VERSIONS, VersionLikeQ, TEST_VERSIONS
)

# %% ../nbs/01_util.ipynb 12
def getmodver(
    mod: ModuleQ= None,
    modname: StrQ = None,
    verattr: str = VERSION_INFO,
    default: tuple = BLANK_VERSION
) -> tuple:
    if mod is None and modname is not None and find_spec(modname) is not None:
        mod = module_from_spec(find_spec(modname))
    return getattr(mod, verattr, default)

def sysver(sys: ModuleQ = None) -> tuple:
    return getmodver(sys, SYS, VERSION_INFO)


# %% ../nbs/01_util.ipynb 14
def isverlike(o):
    if allint(o): return True    
    elif isdotstr(o): return True
    elif isnum(o): return True
    else:
        for vattrs in VTYPES_RET.values():
            for vattr in vattrs:
                if hasattr(o, vattr): return True    
    return False

# %% ../nbs/01_util.ipynb 16
def dotstr2ver(s: str) -> tuple:
    if not isdotstr(s): return tuple()
    return tuple(map(int, s.split(DOT)))

def any2ver(a: VersionLikeQ, default = None) -> tuple: 
    if not isverlike(a): return default
    if istup(a) and len(a) > 3: return any2ver(a[:3])
    elif isdotstr(a): return any2ver(dotstr2ver(a))
    elif allint(a): return tuple(a)
    elif isnum(a): return any2ver(str(a))
    else:
        for rtype, vattrs in VTYPES_RET.items():
            t = ()       
            for vattr in vattrs:
                if not hasattr(a, vattr): continue
                elif rtype is tuple: return any2ver(getattr(a, vattr))
                elif rtype is str: return any2ver(getattr(a, vattr))
                elif rtype is int:
                    t += (getattr(a, vattr),)
            if t != (): return t
    return default

def ver2str(v: TupleQ, default = BLANK_VERSION) -> str:
    return DOT.join([str(x) for x in (any2ver(v, default) or ())])
